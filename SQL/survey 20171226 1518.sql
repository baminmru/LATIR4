--
-- Скрипт сгенерирован Devart dbForge Studio for MySQL, Версия 7.3.131.0
-- Домашняя страница продукта: http://www.devart.com/ru/dbforge/mysql/studio
-- Дата скрипта: 26.12.2017 15:18:45
-- Версия сервера: 5.6.12-log
-- Версия клиента: 4.1
--


-- 
-- Отключение внешних ключей
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Установить режим SQL (SQL mode)
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Установка кодировки, с использованием которой клиент будет посылать запросы на сервер
--
SET NAMES 'utf8';

--
-- Установка базы данных по умолчанию
--
USE survey;

--
-- Удалить представление "v_instance"
--
DROP VIEW IF EXISTS v_instance CASCADE;

--
-- Удалить представление "v_autoworkplace_ru_ru"
--
DROP VIEW IF EXISTS v_autoworkplace_ru_ru CASCADE;

--
-- Удалить представление "v_autoworkplace_en_us"
--
DROP VIEW IF EXISTS v_autoworkplace_en_us CASCADE;

--
-- Удалить представление "v_autoworkplace"
--
DROP VIEW IF EXISTS v_autoworkplace CASCADE;

--
-- Удалить представление "v_autoviewcolumn_ru_ru"
--
DROP VIEW IF EXISTS v_autoviewcolumn_ru_ru CASCADE;

--
-- Удалить представление "v_autoviewcolumn_en_us"
--
DROP VIEW IF EXISTS v_autoviewcolumn_en_us CASCADE;

--
-- Удалить представление "v_autoviewcolumn"
--
DROP VIEW IF EXISTS v_autoviewcolumn CASCADE;

--
-- Удалить представление "v_autovalidator_ru_ru"
--
DROP VIEW IF EXISTS v_autovalidator_ru_ru CASCADE;

--
-- Удалить представление "v_autovalidator_en_us"
--
DROP VIEW IF EXISTS v_autovalidator_en_us CASCADE;

--
-- Удалить представление "v_autovalidator"
--
DROP VIEW IF EXISTS v_autovalidator CASCADE;

--
-- Удалить представление "v_autousers_ru_ru"
--
DROP VIEW IF EXISTS v_autousers_ru_ru CASCADE;

--
-- Удалить представление "v_autousers_en_us"
--
DROP VIEW IF EXISTS v_autousers_en_us CASCADE;

--
-- Удалить представление "v_autousers"
--
DROP VIEW IF EXISTS v_autousers CASCADE;

--
-- Удалить представление "v_autouniqueconstraint_ru_ru"
--
DROP VIEW IF EXISTS v_autouniqueconstraint_ru_ru CASCADE;

--
-- Удалить представление "v_autouniqueconstraint_en_us"
--
DROP VIEW IF EXISTS v_autouniqueconstraint_en_us CASCADE;

--
-- Удалить представление "v_autouniqueconstraint"
--
DROP VIEW IF EXISTS v_autouniqueconstraint CASCADE;

--
-- Удалить представление "v_autotypemenu_ru_ru"
--
DROP VIEW IF EXISTS v_autotypemenu_ru_ru CASCADE;

--
-- Удалить представление "v_autotypemenu_en_us"
--
DROP VIEW IF EXISTS v_autotypemenu_en_us CASCADE;

--
-- Удалить представление "v_autotypemenu"
--
DROP VIEW IF EXISTS v_autotypemenu CASCADE;

--
-- Удалить представление "v_autothe_session_ru_ru"
--
DROP VIEW IF EXISTS v_autothe_session_ru_ru CASCADE;

--
-- Удалить представление "v_autothe_session_en_us"
--
DROP VIEW IF EXISTS v_autothe_session_en_us CASCADE;

--
-- Удалить представление "v_autothe_session"
--
DROP VIEW IF EXISTS v_autothe_session CASCADE;

--
-- Удалить представление "v_autosysrefcache_ru_ru"
--
DROP VIEW IF EXISTS v_autosysrefcache_ru_ru CASCADE;

--
-- Удалить представление "v_autosysrefcache_en_us"
--
DROP VIEW IF EXISTS v_autosysrefcache_en_us CASCADE;

--
-- Удалить представление "v_autosysrefcache"
--
DROP VIEW IF EXISTS v_autosysrefcache CASCADE;

--
-- Удалить представление "v_autosyslog_ru_ru"
--
DROP VIEW IF EXISTS v_autosyslog_ru_ru CASCADE;

--
-- Удалить представление "v_autosyslog_en_us"
--
DROP VIEW IF EXISTS v_autosyslog_en_us CASCADE;

--
-- Удалить представление "v_autosyslog"
--
DROP VIEW IF EXISTS v_autosyslog CASCADE;

--
-- Удалить представление "v_autostructrestriction_ru_ru"
--
DROP VIEW IF EXISTS v_autostructrestriction_ru_ru CASCADE;

--
-- Удалить представление "v_autostructrestriction_en_us"
--
DROP VIEW IF EXISTS v_autostructrestriction_en_us CASCADE;

--
-- Удалить представление "v_autostructrestriction"
--
DROP VIEW IF EXISTS v_autostructrestriction CASCADE;

--
-- Удалить представление "v_autosharedmethod_ru_ru"
--
DROP VIEW IF EXISTS v_autosharedmethod_ru_ru CASCADE;

--
-- Удалить представление "v_autosharedmethod_en_us"
--
DROP VIEW IF EXISTS v_autosharedmethod_en_us CASCADE;

--
-- Удалить представление "v_autosharedmethod"
--
DROP VIEW IF EXISTS v_autosharedmethod CASCADE;

--
-- Удалить представление "v_autoscript_ru_ru"
--
DROP VIEW IF EXISTS v_autoscript_ru_ru CASCADE;

--
-- Удалить представление "v_autoscript_en_us"
--
DROP VIEW IF EXISTS v_autoscript_en_us CASCADE;

--
-- Удалить представление "v_autoscript"
--
DROP VIEW IF EXISTS v_autoscript CASCADE;

--
-- Удалить представление "v_autorptstruct_ru_ru"
--
DROP VIEW IF EXISTS v_autorptstruct_ru_ru CASCADE;

--
-- Удалить представление "v_autorptstruct_en_us"
--
DROP VIEW IF EXISTS v_autorptstruct_en_us CASCADE;

--
-- Удалить представление "v_autorptstruct"
--
DROP VIEW IF EXISTS v_autorptstruct CASCADE;

--
-- Удалить представление "v_autorptformula_ru_ru"
--
DROP VIEW IF EXISTS v_autorptformula_ru_ru CASCADE;

--
-- Удалить представление "v_autorptformula_en_us"
--
DROP VIEW IF EXISTS v_autorptformula_en_us CASCADE;

--
-- Удалить представление "v_autorptformula"
--
DROP VIEW IF EXISTS v_autorptformula CASCADE;

--
-- Удалить представление "v_autorptfields_ru_ru"
--
DROP VIEW IF EXISTS v_autorptfields_ru_ru CASCADE;

--
-- Удалить представление "v_autorptfields_en_us"
--
DROP VIEW IF EXISTS v_autorptfields_en_us CASCADE;

--
-- Удалить представление "v_autorptfields"
--
DROP VIEW IF EXISTS v_autorptfields CASCADE;

--
-- Удалить представление "v_autoreports_ru_ru"
--
DROP VIEW IF EXISTS v_autoreports_ru_ru CASCADE;

--
-- Удалить представление "v_autoreports_en_us"
--
DROP VIEW IF EXISTS v_autoreports_en_us CASCADE;

--
-- Удалить представление "v_autoreports"
--
DROP VIEW IF EXISTS v_autoreports CASCADE;

--
-- Удалить представление "v_autopartview_ru_ru"
--
DROP VIEW IF EXISTS v_autopartview_ru_ru CASCADE;

--
-- Удалить представление "v_autopartview_lnk_ru_ru"
--
DROP VIEW IF EXISTS v_autopartview_lnk_ru_ru CASCADE;

--
-- Удалить представление "v_autopartview_lnk_en_us"
--
DROP VIEW IF EXISTS v_autopartview_lnk_en_us CASCADE;

--
-- Удалить представление "v_autopartview_lnk"
--
DROP VIEW IF EXISTS v_autopartview_lnk CASCADE;

--
-- Удалить представление "v_autopartview_en_us"
--
DROP VIEW IF EXISTS v_autopartview_en_us CASCADE;

--
-- Удалить представление "v_autopartview"
--
DROP VIEW IF EXISTS v_autopartview CASCADE;

--
-- Удалить представление "v_autopartparammap_ru_ru"
--
DROP VIEW IF EXISTS v_autopartparammap_ru_ru CASCADE;

--
-- Удалить представление "v_autopartparammap_en_us"
--
DROP VIEW IF EXISTS v_autopartparammap_en_us CASCADE;

--
-- Удалить представление "v_autopartparammap"
--
DROP VIEW IF EXISTS v_autopartparammap CASCADE;

--
-- Удалить представление "v_autopartmenu_ru_ru"
--
DROP VIEW IF EXISTS v_autopartmenu_ru_ru CASCADE;

--
-- Удалить представление "v_autopartmenu_en_us"
--
DROP VIEW IF EXISTS v_autopartmenu_en_us CASCADE;

--
-- Удалить представление "v_autopartmenu"
--
DROP VIEW IF EXISTS v_autopartmenu CASCADE;

--
-- Удалить представление "v_autopart_ru_ru"
--
DROP VIEW IF EXISTS v_autopart_ru_ru CASCADE;

--
-- Удалить представление "v_autopart_en_us"
--
DROP VIEW IF EXISTS v_autopart_en_us CASCADE;

--
-- Удалить представление "v_autopart"
--
DROP VIEW IF EXISTS v_autopart CASCADE;

--
-- Удалить представление "v_autoparentpackage_ru_ru"
--
DROP VIEW IF EXISTS v_autoparentpackage_ru_ru CASCADE;

--
-- Удалить представление "v_autoparentpackage_en_us"
--
DROP VIEW IF EXISTS v_autoparentpackage_en_us CASCADE;

--
-- Удалить представление "v_autoparentpackage"
--
DROP VIEW IF EXISTS v_autoparentpackage CASCADE;

--
-- Удалить представление "v_autoparameters_ru_ru"
--
DROP VIEW IF EXISTS v_autoparameters_ru_ru CASCADE;

--
-- Удалить представление "v_autoparameters_en_us"
--
DROP VIEW IF EXISTS v_autoparameters_en_us CASCADE;

--
-- Удалить представление "v_autoparameters"
--
DROP VIEW IF EXISTS v_autoparameters CASCADE;

--
-- Удалить представление "v_autoobjstatus_ru_ru"
--
DROP VIEW IF EXISTS v_autoobjstatus_ru_ru CASCADE;

--
-- Удалить представление "v_autoobjstatus_en_us"
--
DROP VIEW IF EXISTS v_autoobjstatus_en_us CASCADE;

--
-- Удалить представление "v_autoobjstatus"
--
DROP VIEW IF EXISTS v_autoobjstatus CASCADE;

--
-- Удалить представление "v_autoobjecttype_ru_ru"
--
DROP VIEW IF EXISTS v_autoobjecttype_ru_ru CASCADE;

--
-- Удалить представление "v_autoobjecttype_en_us"
--
DROP VIEW IF EXISTS v_autoobjecttype_en_us CASCADE;

--
-- Удалить представление "v_autoobjecttype"
--
DROP VIEW IF EXISTS v_autoobjecttype CASCADE;

--
-- Удалить представление "v_autoobjectmode_ru_ru"
--
DROP VIEW IF EXISTS v_autoobjectmode_ru_ru CASCADE;

--
-- Удалить представление "v_autoobjectmode_en_us"
--
DROP VIEW IF EXISTS v_autoobjectmode_en_us CASCADE;

--
-- Удалить представление "v_autoobjectmode"
--
DROP VIEW IF EXISTS v_autoobjectmode CASCADE;

--
-- Удалить представление "v_autonum_zones_ru_ru"
--
DROP VIEW IF EXISTS v_autonum_zones_ru_ru CASCADE;

--
-- Удалить представление "v_autonum_zones_en_us"
--
DROP VIEW IF EXISTS v_autonum_zones_en_us CASCADE;

--
-- Удалить представление "v_autonum_zones"
--
DROP VIEW IF EXISTS v_autonum_zones CASCADE;

--
-- Удалить представление "v_autonum_values_ru_ru"
--
DROP VIEW IF EXISTS v_autonum_values_ru_ru CASCADE;

--
-- Удалить представление "v_autonum_values_en_us"
--
DROP VIEW IF EXISTS v_autonum_values_en_us CASCADE;

--
-- Удалить представление "v_autonum_values"
--
DROP VIEW IF EXISTS v_autonum_values CASCADE;

--
-- Удалить представление "v_autonum_head_ru_ru"
--
DROP VIEW IF EXISTS v_autonum_head_ru_ru CASCADE;

--
-- Удалить представление "v_autonum_head_en_us"
--
DROP VIEW IF EXISTS v_autonum_head_en_us CASCADE;

--
-- Удалить представление "v_autonum_head"
--
DROP VIEW IF EXISTS v_autonum_head CASCADE;

--
-- Удалить представление "v_automtzextrel_ru_ru"
--
DROP VIEW IF EXISTS v_automtzextrel_ru_ru CASCADE;

--
-- Удалить представление "v_automtzextrel_en_us"
--
DROP VIEW IF EXISTS v_automtzextrel_en_us CASCADE;

--
-- Удалить представление "v_automtzextrel"
--
DROP VIEW IF EXISTS v_automtzextrel CASCADE;

--
-- Удалить представление "v_automtzext_def_ru_ru"
--
DROP VIEW IF EXISTS v_automtzext_def_ru_ru CASCADE;

--
-- Удалить представление "v_automtzext_def_en_us"
--
DROP VIEW IF EXISTS v_automtzext_def_en_us CASCADE;

--
-- Удалить представление "v_automtzext_def"
--
DROP VIEW IF EXISTS v_automtzext_def CASCADE;

--
-- Удалить представление "v_automtzapp_ru_ru"
--
DROP VIEW IF EXISTS v_automtzapp_ru_ru CASCADE;

--
-- Удалить представление "v_automtzapp_en_us"
--
DROP VIEW IF EXISTS v_automtzapp_en_us CASCADE;

--
-- Удалить представление "v_automtzapp"
--
DROP VIEW IF EXISTS v_automtzapp CASCADE;

--
-- Удалить представление "v_automethodrestriction_ru_ru"
--
DROP VIEW IF EXISTS v_automethodrestriction_ru_ru CASCADE;

--
-- Удалить представление "v_automethodrestriction_en_us"
--
DROP VIEW IF EXISTS v_automethodrestriction_en_us CASCADE;

--
-- Удалить представление "v_automethodrestriction"
--
DROP VIEW IF EXISTS v_automethodrestriction CASCADE;

--
-- Удалить представление "v_autolocalizeinfo_ru_ru"
--
DROP VIEW IF EXISTS v_autolocalizeinfo_ru_ru CASCADE;

--
-- Удалить представление "v_autolocalizeinfo_en_us"
--
DROP VIEW IF EXISTS v_autolocalizeinfo_en_us CASCADE;

--
-- Удалить представление "v_autolocalizeinfo"
--
DROP VIEW IF EXISTS v_autolocalizeinfo CASCADE;

--
-- Удалить представление "v_autojournalsrc_ru_ru"
--
DROP VIEW IF EXISTS v_autojournalsrc_ru_ru CASCADE;

--
-- Удалить представление "v_autojournalsrc_en_us"
--
DROP VIEW IF EXISTS v_autojournalsrc_en_us CASCADE;

--
-- Удалить представление "v_autojournalsrc"
--
DROP VIEW IF EXISTS v_autojournalsrc CASCADE;

--
-- Удалить представление "v_autojournalcolumn_ru_ru"
--
DROP VIEW IF EXISTS v_autojournalcolumn_ru_ru CASCADE;

--
-- Удалить представление "v_autojournalcolumn_en_us"
--
DROP VIEW IF EXISTS v_autojournalcolumn_en_us CASCADE;

--
-- Удалить представление "v_autojournalcolumn"
--
DROP VIEW IF EXISTS v_autojournalcolumn CASCADE;

--
-- Удалить представление "v_autojournal_ru_ru"
--
DROP VIEW IF EXISTS v_autojournal_ru_ru CASCADE;

--
-- Удалить представление "v_autojournal_en_us"
--
DROP VIEW IF EXISTS v_autojournal_en_us CASCADE;

--
-- Удалить представление "v_autojournal"
--
DROP VIEW IF EXISTS v_autojournal CASCADE;

--
-- Удалить представление "v_autojcolumnsource_ru_ru"
--
DROP VIEW IF EXISTS v_autojcolumnsource_ru_ru CASCADE;

--
-- Удалить представление "v_autojcolumnsource_en_us"
--
DROP VIEW IF EXISTS v_autojcolumnsource_en_us CASCADE;

--
-- Удалить представление "v_autojcolumnsource"
--
DROP VIEW IF EXISTS v_autojcolumnsource CASCADE;

--
-- Удалить представление "v_autoiu_u_def_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_u_def_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_u_def_en_us"
--
DROP VIEW IF EXISTS v_autoiu_u_def_en_us CASCADE;

--
-- Удалить представление "v_autoiu_u_def"
--
DROP VIEW IF EXISTS v_autoiu_u_def CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_mod_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_mod_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_mod_en_us"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_mod_en_us CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_mod"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_mod CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_docmode_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_docmode_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_docmode_en_us"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_docmode_en_us CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_docmode"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_docmode CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_def_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_def_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_def_en_us"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_def_en_us CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_def"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_def CASCADE;

--
-- Удалить представление "v_autoiu_int_modules_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_int_modules_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_int_modules_en_us"
--
DROP VIEW IF EXISTS v_autoiu_int_modules_en_us CASCADE;

--
-- Удалить представление "v_autoiu_int_modules"
--
DROP VIEW IF EXISTS v_autoiu_int_modules CASCADE;

--
-- Удалить представление "v_autoiu_crole_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_crole_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_crole_en_us"
--
DROP VIEW IF EXISTS v_autoiu_crole_en_us CASCADE;

--
-- Удалить представление "v_autoiu_crole"
--
DROP VIEW IF EXISTS v_autoiu_crole CASCADE;

--
-- Удалить представление "v_autoinstancevalidator_ru_ru"
--
DROP VIEW IF EXISTS v_autoinstancevalidator_ru_ru CASCADE;

--
-- Удалить представление "v_autoinstancevalidator_en_us"
--
DROP VIEW IF EXISTS v_autoinstancevalidator_en_us CASCADE;

--
-- Удалить представление "v_autoinstancevalidator"
--
DROP VIEW IF EXISTS v_autoinstancevalidator CASCADE;

--
-- Удалить представление "v_autogroupuser_ru_ru"
--
DROP VIEW IF EXISTS v_autogroupuser_ru_ru CASCADE;

--
-- Удалить представление "v_autogroupuser_en_us"
--
DROP VIEW IF EXISTS v_autogroupuser_en_us CASCADE;

--
-- Удалить представление "v_autogroupuser"
--
DROP VIEW IF EXISTS v_autogroupuser CASCADE;

--
-- Удалить представление "v_autogroups_ru_ru"
--
DROP VIEW IF EXISTS v_autogroups_ru_ru CASCADE;

--
-- Удалить представление "v_autogroups_en_us"
--
DROP VIEW IF EXISTS v_autogroups_en_us CASCADE;

--
-- Удалить представление "v_autogroups"
--
DROP VIEW IF EXISTS v_autogroups CASCADE;

--
-- Удалить представление "v_autogenreference_ru_ru"
--
DROP VIEW IF EXISTS v_autogenreference_ru_ru CASCADE;

--
-- Удалить представление "v_autogenreference_en_us"
--
DROP VIEW IF EXISTS v_autogenreference_en_us CASCADE;

--
-- Удалить представление "v_autogenreference"
--
DROP VIEW IF EXISTS v_autogenreference CASCADE;

--
-- Удалить представление "v_autogenpackage_ru_ru"
--
DROP VIEW IF EXISTS v_autogenpackage_ru_ru CASCADE;

--
-- Удалить представление "v_autogenpackage_en_us"
--
DROP VIEW IF EXISTS v_autogenpackage_en_us CASCADE;

--
-- Удалить представление "v_autogenpackage"
--
DROP VIEW IF EXISTS v_autogenpackage CASCADE;

--
-- Удалить представление "v_autogenmanualcode_ru_ru"
--
DROP VIEW IF EXISTS v_autogenmanualcode_ru_ru CASCADE;

--
-- Удалить представление "v_autogenmanualcode_en_us"
--
DROP VIEW IF EXISTS v_autogenmanualcode_en_us CASCADE;

--
-- Удалить представление "v_autogenmanualcode"
--
DROP VIEW IF EXISTS v_autogenmanualcode CASCADE;

--
-- Удалить представление "v_autogenerator_target_ru_ru"
--
DROP VIEW IF EXISTS v_autogenerator_target_ru_ru CASCADE;

--
-- Удалить представление "v_autogenerator_target_en_us"
--
DROP VIEW IF EXISTS v_autogenerator_target_en_us CASCADE;

--
-- Удалить представление "v_autogenerator_target"
--
DROP VIEW IF EXISTS v_autogenerator_target CASCADE;

--
-- Удалить представление "v_autogencontrols_ru_ru"
--
DROP VIEW IF EXISTS v_autogencontrols_ru_ru CASCADE;

--
-- Удалить представление "v_autogencontrols_en_us"
--
DROP VIEW IF EXISTS v_autogencontrols_en_us CASCADE;

--
-- Удалить представление "v_autogencontrols"
--
DROP VIEW IF EXISTS v_autogencontrols CASCADE;

--
-- Удалить представление "v_autofldextenders_ru_ru"
--
DROP VIEW IF EXISTS v_autofldextenders_ru_ru CASCADE;

--
-- Удалить представление "v_autofldextenders_en_us"
--
DROP VIEW IF EXISTS v_autofldextenders_en_us CASCADE;

--
-- Удалить представление "v_autofldextenders"
--
DROP VIEW IF EXISTS v_autofldextenders CASCADE;

--
-- Удалить представление "v_autofilters_ru_ru"
--
DROP VIEW IF EXISTS v_autofilters_ru_ru CASCADE;

--
-- Удалить представление "v_autofilters_en_us"
--
DROP VIEW IF EXISTS v_autofilters_en_us CASCADE;

--
-- Удалить представление "v_autofilters"
--
DROP VIEW IF EXISTS v_autofilters CASCADE;

--
-- Удалить представление "v_autofilterfieldgroup_ru_ru"
--
DROP VIEW IF EXISTS v_autofilterfieldgroup_ru_ru CASCADE;

--
-- Удалить представление "v_autofilterfieldgroup_en_us"
--
DROP VIEW IF EXISTS v_autofilterfieldgroup_en_us CASCADE;

--
-- Удалить представление "v_autofilterfieldgroup"
--
DROP VIEW IF EXISTS v_autofilterfieldgroup CASCADE;

--
-- Удалить представление "v_autofileterfield_ru_ru"
--
DROP VIEW IF EXISTS v_autofileterfield_ru_ru CASCADE;

--
-- Удалить представление "v_autofileterfield_en_us"
--
DROP VIEW IF EXISTS v_autofileterfield_en_us CASCADE;

--
-- Удалить представление "v_autofileterfield"
--
DROP VIEW IF EXISTS v_autofileterfield CASCADE;

--
-- Удалить представление "v_autofieldvalidator_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldvalidator_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldvalidator_en_us"
--
DROP VIEW IF EXISTS v_autofieldvalidator_en_us CASCADE;

--
-- Удалить представление "v_autofieldvalidator"
--
DROP VIEW IF EXISTS v_autofieldvalidator CASCADE;

--
-- Удалить представление "v_autofieldtypemap_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldtypemap_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldtypemap_en_us"
--
DROP VIEW IF EXISTS v_autofieldtypemap_en_us CASCADE;

--
-- Удалить представление "v_autofieldtypemap"
--
DROP VIEW IF EXISTS v_autofieldtypemap CASCADE;

--
-- Удалить представление "v_autofieldtype_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldtype_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldtype_en_us"
--
DROP VIEW IF EXISTS v_autofieldtype_en_us CASCADE;

--
-- Удалить представление "v_autofieldtype"
--
DROP VIEW IF EXISTS v_autofieldtype CASCADE;

--
-- Удалить представление "v_autofieldsrcdef_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldsrcdef_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldsrcdef_en_us"
--
DROP VIEW IF EXISTS v_autofieldsrcdef_en_us CASCADE;

--
-- Удалить представление "v_autofieldsrcdef"
--
DROP VIEW IF EXISTS v_autofieldsrcdef CASCADE;

--
-- Удалить представление "v_autofieldrestriction_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldrestriction_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldrestriction_en_us"
--
DROP VIEW IF EXISTS v_autofieldrestriction_en_us CASCADE;

--
-- Удалить представление "v_autofieldrestriction"
--
DROP VIEW IF EXISTS v_autofieldrestriction CASCADE;

--
-- Удалить представление "v_autofieldparammap_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldparammap_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldparammap_en_us"
--
DROP VIEW IF EXISTS v_autofieldparammap_en_us CASCADE;

--
-- Удалить представление "v_autofieldparammap"
--
DROP VIEW IF EXISTS v_autofieldparammap CASCADE;

--
-- Удалить представление "v_autofieldmenu_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldmenu_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldmenu_en_us"
--
DROP VIEW IF EXISTS v_autofieldmenu_en_us CASCADE;

--
-- Удалить представление "v_autofieldmenu"
--
DROP VIEW IF EXISTS v_autofieldmenu CASCADE;

--
-- Удалить представление "v_autofieldexpression_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldexpression_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldexpression_en_us"
--
DROP VIEW IF EXISTS v_autofieldexpression_en_us CASCADE;

--
-- Удалить представление "v_autofieldexpression"
--
DROP VIEW IF EXISTS v_autofieldexpression CASCADE;

--
-- Удалить представление "v_autofield_ru_ru"
--
DROP VIEW IF EXISTS v_autofield_ru_ru CASCADE;

--
-- Удалить представление "v_autofield_en_us"
--
DROP VIEW IF EXISTS v_autofield_en_us CASCADE;

--
-- Удалить представление "v_autofield"
--
DROP VIEW IF EXISTS v_autofield CASCADE;

--
-- Удалить представление "v_autoextenderinterface_ru_ru"
--
DROP VIEW IF EXISTS v_autoextenderinterface_ru_ru CASCADE;

--
-- Удалить представление "v_autoextenderinterface_en_us"
--
DROP VIEW IF EXISTS v_autoextenderinterface_en_us CASCADE;

--
-- Удалить представление "v_autoextenderinterface"
--
DROP VIEW IF EXISTS v_autoextenderinterface CASCADE;

--
-- Удалить представление "v_autoepfilterlink_ru_ru"
--
DROP VIEW IF EXISTS v_autoepfilterlink_ru_ru CASCADE;

--
-- Удалить представление "v_autoepfilterlink_en_us"
--
DROP VIEW IF EXISTS v_autoepfilterlink_en_us CASCADE;

--
-- Удалить представление "v_autoepfilterlink"
--
DROP VIEW IF EXISTS v_autoepfilterlink CASCADE;

--
-- Удалить представление "v_autoenumitem_ru_ru"
--
DROP VIEW IF EXISTS v_autoenumitem_ru_ru CASCADE;

--
-- Удалить представление "v_autoenumitem_en_us"
--
DROP VIEW IF EXISTS v_autoenumitem_en_us CASCADE;

--
-- Удалить представление "v_autoenumitem"
--
DROP VIEW IF EXISTS v_autoenumitem CASCADE;

--
-- Удалить представление "v_autoentrypoints_ru_ru"
--
DROP VIEW IF EXISTS v_autoentrypoints_ru_ru CASCADE;

--
-- Удалить представление "v_autoentrypoints_en_us"
--
DROP VIEW IF EXISTS v_autoentrypoints_en_us CASCADE;

--
-- Удалить представление "v_autoentrypoints"
--
DROP VIEW IF EXISTS v_autoentrypoints CASCADE;

--
-- Удалить представление "v_autodinamicfilterscript_ru_ru"
--
DROP VIEW IF EXISTS v_autodinamicfilterscript_ru_ru CASCADE;

--
-- Удалить представление "v_autodinamicfilterscript_en_us"
--
DROP VIEW IF EXISTS v_autodinamicfilterscript_en_us CASCADE;

--
-- Удалить представление "v_autodinamicfilterscript"
--
DROP VIEW IF EXISTS v_autodinamicfilterscript CASCADE;

--
-- Удалить представление "v_autoconstraintfield_ru_ru"
--
DROP VIEW IF EXISTS v_autoconstraintfield_ru_ru CASCADE;

--
-- Удалить представление "v_autoconstraintfield_en_us"
--
DROP VIEW IF EXISTS v_autoconstraintfield_en_us CASCADE;

--
-- Удалить представление "v_autoconstraintfield"
--
DROP VIEW IF EXISTS v_autoconstraintfield CASCADE;

--
-- Удалить представление "v_autobpc_info_ru_ru"
--
DROP VIEW IF EXISTS v_autobpc_info_ru_ru CASCADE;

--
-- Удалить представление "v_autobpc_info_en_us"
--
DROP VIEW IF EXISTS v_autobpc_info_en_us CASCADE;

--
-- Удалить представление "v_autobpc_info"
--
DROP VIEW IF EXISTS v_autobpc_info CASCADE;

--
-- Удалить представление "v_autoarmtypes_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmtypes_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmtypes_en_us"
--
DROP VIEW IF EXISTS v_autoarmtypes_en_us CASCADE;

--
-- Удалить представление "v_autoarmtypes"
--
DROP VIEW IF EXISTS v_autoarmtypes CASCADE;

--
-- Удалить представление "v_autoarmjrnlrun_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjrnlrun_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjrnlrun_en_us"
--
DROP VIEW IF EXISTS v_autoarmjrnlrun_en_us CASCADE;

--
-- Удалить представление "v_autoarmjrnlrun"
--
DROP VIEW IF EXISTS v_autoarmjrnlrun CASCADE;

--
-- Удалить представление "v_autoarmjrnlrep_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjrnlrep_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjrnlrep_en_us"
--
DROP VIEW IF EXISTS v_autoarmjrnlrep_en_us CASCADE;

--
-- Удалить представление "v_autoarmjrnlrep"
--
DROP VIEW IF EXISTS v_autoarmjrnlrep CASCADE;

--
-- Удалить представление "v_autoarmjrnladd_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjrnladd_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjrnladd_en_us"
--
DROP VIEW IF EXISTS v_autoarmjrnladd_en_us CASCADE;

--
-- Удалить представление "v_autoarmjrnladd"
--
DROP VIEW IF EXISTS v_autoarmjrnladd CASCADE;

--
-- Удалить представление "v_autoarmjournal_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjournal_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjournal_en_us"
--
DROP VIEW IF EXISTS v_autoarmjournal_en_us CASCADE;

--
-- Удалить представление "v_autoarmjournal"
--
DROP VIEW IF EXISTS v_autoarmjournal CASCADE;

DELIMITER $$

--
-- Удалить функцию "workplace_mref_f"
--
DROP FUNCTION IF EXISTS workplace_mref_f$$

--
-- Удалить функцию "workplace_brief_f"
--
DROP FUNCTION IF EXISTS workplace_brief_f$$

--
-- Удалить функцию "vk_usr_mref_f"
--
DROP FUNCTION IF EXISTS vk_usr_mref_f$$

--
-- Удалить функцию "vk_usr_brief_f"
--
DROP FUNCTION IF EXISTS vk_usr_brief_f$$

--
-- Удалить функцию "vk_trgowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_trgowner_mref_f$$

--
-- Удалить функцию "vk_trgowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_trgowner_brief_f$$

--
-- Удалить функцию "vk_trginfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_trginfo_mref_f$$

--
-- Удалить функцию "vk_trginfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_trginfo_brief_f$$

--
-- Удалить функцию "vk_trgfiles_mref_f"
--
DROP FUNCTION IF EXISTS vk_trgfiles_mref_f$$

--
-- Удалить функцию "vk_trgfiles_brief_f"
--
DROP FUNCTION IF EXISTS vk_trgfiles_brief_f$$

--
-- Удалить функцию "vk_town_mref_f"
--
DROP FUNCTION IF EXISTS vk_town_mref_f$$

--
-- Удалить функцию "vk_town_brief_f"
--
DROP FUNCTION IF EXISTS vk_town_brief_f$$

--
-- Удалить функцию "vk_tasktype_mref_f"
--
DROP FUNCTION IF EXISTS vk_tasktype_mref_f$$

--
-- Удалить функцию "vk_tasktype_brief_f"
--
DROP FUNCTION IF EXISTS vk_tasktype_brief_f$$

--
-- Удалить функцию "vk_taskowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_taskowner_mref_f$$

--
-- Удалить функцию "vk_taskowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_taskowner_brief_f$$

--
-- Удалить функцию "vk_taskmsg_mref_f"
--
DROP FUNCTION IF EXISTS vk_taskmsg_mref_f$$

--
-- Удалить функцию "vk_taskmsg_brief_f"
--
DROP FUNCTION IF EXISTS vk_taskmsg_brief_f$$

--
-- Удалить функцию "vk_taskinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_taskinfo_mref_f$$

--
-- Удалить функцию "vk_taskinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_taskinfo_brief_f$$

--
-- Удалить функцию "vk_rotowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_rotowner_mref_f$$

--
-- Удалить функцию "vk_rotowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_rotowner_brief_f$$

--
-- Удалить функцию "vk_rotinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_rotinfo_mref_f$$

--
-- Удалить функцию "vk_rotinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_rotinfo_brief_f$$

--
-- Удалить функцию "vk_rotads_mref_f"
--
DROP FUNCTION IF EXISTS vk_rotads_mref_f$$

--
-- Удалить функцию "vk_rotads_brief_f"
--
DROP FUNCTION IF EXISTS vk_rotads_brief_f$$

--
-- Удалить функцию "vk_religion_mref_f"
--
DROP FUNCTION IF EXISTS vk_religion_mref_f$$

--
-- Удалить функцию "vk_religion_brief_f"
--
DROP FUNCTION IF EXISTS vk_religion_brief_f$$

--
-- Удалить функцию "vk_region_mref_f"
--
DROP FUNCTION IF EXISTS vk_region_mref_f$$

--
-- Удалить функцию "vk_region_brief_f"
--
DROP FUNCTION IF EXISTS vk_region_brief_f$$

--
-- Удалить функцию "vk_prj_mref_f"
--
DROP FUNCTION IF EXISTS vk_prj_mref_f$$

--
-- Удалить функцию "vk_prj_brief_f"
--
DROP FUNCTION IF EXISTS vk_prj_brief_f$$

--
-- Удалить функцию "vk_prjowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_prjowner_mref_f$$

--
-- Удалить функцию "vk_prjowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_prjowner_brief_f$$

--
-- Удалить функцию "vk_position_mref_f"
--
DROP FUNCTION IF EXISTS vk_position_mref_f$$

--
-- Удалить функцию "vk_position_brief_f"
--
DROP FUNCTION IF EXISTS vk_position_brief_f$$

--
-- Удалить функцию "vk_platform_mref_f"
--
DROP FUNCTION IF EXISTS vk_platform_mref_f$$

--
-- Удалить функцию "vk_platform_brief_f"
--
DROP FUNCTION IF EXISTS vk_platform_brief_f$$

--
-- Удалить функцию "vk_paytype_mref_f"
--
DROP FUNCTION IF EXISTS vk_paytype_mref_f$$

--
-- Удалить функцию "vk_paytype_brief_f"
--
DROP FUNCTION IF EXISTS vk_paytype_brief_f$$

--
-- Удалить функцию "vk_os_mref_f"
--
DROP FUNCTION IF EXISTS vk_os_mref_f$$

--
-- Удалить функцию "vk_os_brief_f"
--
DROP FUNCTION IF EXISTS vk_os_brief_f$$

--
-- Удалить функцию "vk_matrialstatus_mref_f"
--
DROP FUNCTION IF EXISTS vk_matrialstatus_mref_f$$

--
-- Удалить функцию "vk_matrialstatus_brief_f"
--
DROP FUNCTION IF EXISTS vk_matrialstatus_brief_f$$

--
-- Удалить функцию "vk_interest_mref_f"
--
DROP FUNCTION IF EXISTS vk_interest_mref_f$$

--
-- Удалить функцию "vk_interest_brief_f"
--
DROP FUNCTION IF EXISTS vk_interest_brief_f$$

--
-- Удалить функцию "vk_device_mref_f"
--
DROP FUNCTION IF EXISTS vk_device_mref_f$$

--
-- Удалить функцию "vk_device_brief_f"
--
DROP FUNCTION IF EXISTS vk_device_brief_f$$

--
-- Удалить функцию "vk_country_mref_f"
--
DROP FUNCTION IF EXISTS vk_country_mref_f$$

--
-- Удалить функцию "vk_country_brief_f"
--
DROP FUNCTION IF EXISTS vk_country_brief_f$$

--
-- Удалить функцию "vk_category_mref_f"
--
DROP FUNCTION IF EXISTS vk_category_mref_f$$

--
-- Удалить функцию "vk_category_brief_f"
--
DROP FUNCTION IF EXISTS vk_category_brief_f$$

--
-- Удалить функцию "vk_castate_mref_f"
--
DROP FUNCTION IF EXISTS vk_castate_mref_f$$

--
-- Удалить функцию "vk_castate_brief_f"
--
DROP FUNCTION IF EXISTS vk_castate_brief_f$$

--
-- Удалить функцию "vk_camstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_camstat_mref_f$$

--
-- Удалить функцию "vk_camstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_camstat_brief_f$$

--
-- Удалить функцию "vk_camp_mref_f"
--
DROP FUNCTION IF EXISTS vk_camp_mref_f$$

--
-- Удалить функцию "vk_camp_brief_f"
--
DROP FUNCTION IF EXISTS vk_camp_brief_f$$

--
-- Удалить функцию "vk_camowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_camowner_mref_f$$

--
-- Удалить функцию "vk_camowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_camowner_brief_f$$

--
-- Удалить функцию "vk_camovstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_camovstat_mref_f$$

--
-- Удалить функцию "vk_camovstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_camovstat_brief_f$$

--
-- Удалить функцию "vk_cab_mref_f"
--
DROP FUNCTION IF EXISTS vk_cab_mref_f$$

--
-- Удалить функцию "vk_cab_brief_f"
--
DROP FUNCTION IF EXISTS vk_cab_brief_f$$

--
-- Удалить функцию "vk_browser_mref_f"
--
DROP FUNCTION IF EXISTS vk_browser_mref_f$$

--
-- Удалить функцию "vk_browser_brief_f"
--
DROP FUNCTION IF EXISTS vk_browser_brief_f$$

--
-- Удалить функцию "vk_brkowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_brkowner_mref_f$$

--
-- Удалить функцию "vk_brkowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_brkowner_brief_f$$

--
-- Удалить функцию "vk_brkinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_brkinfo_mref_f$$

--
-- Удалить функцию "vk_brkinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_brkinfo_brief_f$$

--
-- Удалить функцию "vk_approve_mref_f"
--
DROP FUNCTION IF EXISTS vk_approve_mref_f$$

--
-- Удалить функцию "vk_approve_brief_f"
--
DROP FUNCTION IF EXISTS vk_approve_brief_f$$

--
-- Удалить функцию "vk_age_mref_f"
--
DROP FUNCTION IF EXISTS vk_age_mref_f$$

--
-- Удалить функцию "vk_age_brief_f"
--
DROP FUNCTION IF EXISTS vk_age_brief_f$$

--
-- Удалить функцию "vk_adsutm_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsutm_mref_f$$

--
-- Удалить функцию "vk_adsutm_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsutm_brief_f$$

--
-- Удалить функцию "vk_adstrg_mref_f"
--
DROP FUNCTION IF EXISTS vk_adstrg_mref_f$$

--
-- Удалить функцию "vk_adstrg_brief_f"
--
DROP FUNCTION IF EXISTS vk_adstrg_brief_f$$

--
-- Удалить функцию "vk_adstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_adstat_mref_f$$

--
-- Удалить функцию "vk_adstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_adstat_brief_f$$

--
-- Удалить функцию "vk_adstate_mref_f"
--
DROP FUNCTION IF EXISTS vk_adstate_mref_f$$

--
-- Удалить функцию "vk_adstate_brief_f"
--
DROP FUNCTION IF EXISTS vk_adstate_brief_f$$

--
-- Удалить функцию "vk_adsowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsowner_mref_f$$

--
-- Удалить функцию "vk_adsowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsowner_brief_f$$

--
-- Удалить функцию "vk_adsovdemografy_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsovdemografy_mref_f$$

--
-- Удалить функцию "vk_adsovdemografy_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsovdemografy_brief_f$$

--
-- Удалить функцию "vk_adsdaydemografy_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsdaydemografy_mref_f$$

--
-- Удалить функцию "vk_adsdaydemografy_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsdaydemografy_brief_f$$

--
-- Удалить функцию "vk_adovstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_adovstat_mref_f$$

--
-- Удалить функцию "vk_adovstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_adovstat_brief_f$$

--
-- Удалить функцию "vk_adinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_adinfo_mref_f$$

--
-- Удалить функцию "vk_adinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_adinfo_brief_f$$

--
-- Удалить функцию "vk_adformat_mref_f"
--
DROP FUNCTION IF EXISTS vk_adformat_mref_f$$

--
-- Удалить функцию "vk_adformat_brief_f"
--
DROP FUNCTION IF EXISTS vk_adformat_brief_f$$

--
-- Удалить функцию "vkusr_export_f"
--
DROP FUNCTION IF EXISTS vkusr_export_f$$

--
-- Удалить функцию "vkusr_access_f"
--
DROP FUNCTION IF EXISTS vkusr_access_f$$

--
-- Удалить функцию "vktsk_export_f"
--
DROP FUNCTION IF EXISTS vktsk_export_f$$

--
-- Удалить функцию "vktsk_access_f"
--
DROP FUNCTION IF EXISTS vktsk_access_f$$

--
-- Удалить функцию "vktrg_export_f"
--
DROP FUNCTION IF EXISTS vktrg_export_f$$

--
-- Удалить функцию "vktrg_access_f"
--
DROP FUNCTION IF EXISTS vktrg_access_f$$

--
-- Удалить функцию "vkrot_export_f"
--
DROP FUNCTION IF EXISTS vkrot_export_f$$

--
-- Удалить функцию "vkrot_access_f"
--
DROP FUNCTION IF EXISTS vkrot_access_f$$

--
-- Удалить функцию "vkprj_export_f"
--
DROP FUNCTION IF EXISTS vkprj_export_f$$

--
-- Удалить функцию "vkprj_access_f"
--
DROP FUNCTION IF EXISTS vkprj_access_f$$

--
-- Удалить функцию "vkcam_export_f"
--
DROP FUNCTION IF EXISTS vkcam_export_f$$

--
-- Удалить функцию "vkcam_access_f"
--
DROP FUNCTION IF EXISTS vkcam_access_f$$

--
-- Удалить функцию "vkbrk_export_f"
--
DROP FUNCTION IF EXISTS vkbrk_export_f$$

--
-- Удалить функцию "vkbrk_access_f"
--
DROP FUNCTION IF EXISTS vkbrk_access_f$$

--
-- Удалить функцию "vkads_export_f"
--
DROP FUNCTION IF EXISTS vkads_export_f$$

--
-- Удалить функцию "vkads_access_f"
--
DROP FUNCTION IF EXISTS vkads_access_f$$

--
-- Удалить функцию "viewcolumn_mref_f"
--
DROP FUNCTION IF EXISTS viewcolumn_mref_f$$

--
-- Удалить функцию "viewcolumn_brief_f"
--
DROP FUNCTION IF EXISTS viewcolumn_brief_f$$

--
-- Удалить функцию "vdt_export_f"
--
DROP FUNCTION IF EXISTS vdt_export_f$$

--
-- Удалить функцию "vdt_access_f"
--
DROP FUNCTION IF EXISTS vdt_access_f$$

--
-- Удалить функцию "vdtt_export_f"
--
DROP FUNCTION IF EXISTS vdtt_export_f$$

--
-- Удалить функцию "vdtt_access_f"
--
DROP FUNCTION IF EXISTS vdtt_access_f$$

--
-- Удалить функцию "vdrg_export_f"
--
DROP FUNCTION IF EXISTS vdrg_export_f$$

--
-- Удалить функцию "vdrg_access_f"
--
DROP FUNCTION IF EXISTS vdrg_access_f$$

--
-- Удалить функцию "vdrel_export_f"
--
DROP FUNCTION IF EXISTS vdrel_export_f$$

--
-- Удалить функцию "vdrel_access_f"
--
DROP FUNCTION IF EXISTS vdrel_access_f$$

--
-- Удалить функцию "vdpt_export_f"
--
DROP FUNCTION IF EXISTS vdpt_export_f$$

--
-- Удалить функцию "vdpt_access_f"
--
DROP FUNCTION IF EXISTS vdpt_access_f$$

--
-- Удалить функцию "vdpos_export_f"
--
DROP FUNCTION IF EXISTS vdpos_export_f$$

--
-- Удалить функцию "vdpos_access_f"
--
DROP FUNCTION IF EXISTS vdpos_access_f$$

--
-- Удалить функцию "vdos_export_f"
--
DROP FUNCTION IF EXISTS vdos_export_f$$

--
-- Удалить функцию "vdos_access_f"
--
DROP FUNCTION IF EXISTS vdos_access_f$$

--
-- Удалить функцию "vdmstat_export_f"
--
DROP FUNCTION IF EXISTS vdmstat_export_f$$

--
-- Удалить функцию "vdmstat_access_f"
--
DROP FUNCTION IF EXISTS vdmstat_access_f$$

--
-- Удалить функцию "vdinter_export_f"
--
DROP FUNCTION IF EXISTS vdinter_export_f$$

--
-- Удалить функцию "vdinter_access_f"
--
DROP FUNCTION IF EXISTS vdinter_access_f$$

--
-- Удалить функцию "vdfrmt_export_f"
--
DROP FUNCTION IF EXISTS vdfrmt_export_f$$

--
-- Удалить функцию "vdfrmt_access_f"
--
DROP FUNCTION IF EXISTS vdfrmt_access_f$$

--
-- Удалить функцию "vddev_export_f"
--
DROP FUNCTION IF EXISTS vddev_export_f$$

--
-- Удалить функцию "vddev_access_f"
--
DROP FUNCTION IF EXISTS vddev_access_f$$

--
-- Удалить функцию "vdcst_export_f"
--
DROP FUNCTION IF EXISTS vdcst_export_f$$

--
-- Удалить функцию "vdcst_access_f"
--
DROP FUNCTION IF EXISTS vdcst_access_f$$

--
-- Удалить функцию "vdcn_export_f"
--
DROP FUNCTION IF EXISTS vdcn_export_f$$

--
-- Удалить функцию "vdcn_access_f"
--
DROP FUNCTION IF EXISTS vdcn_access_f$$

--
-- Удалить функцию "vdcat_export_f"
--
DROP FUNCTION IF EXISTS vdcat_export_f$$

--
-- Удалить функцию "vdcat_access_f"
--
DROP FUNCTION IF EXISTS vdcat_access_f$$

--
-- Удалить функцию "vdbrw_export_f"
--
DROP FUNCTION IF EXISTS vdbrw_export_f$$

--
-- Удалить функцию "vdbrw_access_f"
--
DROP FUNCTION IF EXISTS vdbrw_access_f$$

--
-- Удалить функцию "vdast_export_f"
--
DROP FUNCTION IF EXISTS vdast_export_f$$

--
-- Удалить функцию "vdast_access_f"
--
DROP FUNCTION IF EXISTS vdast_access_f$$

--
-- Удалить функцию "vdappr_export_f"
--
DROP FUNCTION IF EXISTS vdappr_export_f$$

--
-- Удалить функцию "vdappr_access_f"
--
DROP FUNCTION IF EXISTS vdappr_access_f$$

--
-- Удалить функцию "vdapl_export_f"
--
DROP FUNCTION IF EXISTS vdapl_export_f$$

--
-- Удалить функцию "vdapl_access_f"
--
DROP FUNCTION IF EXISTS vdapl_access_f$$

--
-- Удалить функцию "vdage_export_f"
--
DROP FUNCTION IF EXISTS vdage_export_f$$

--
-- Удалить функцию "vdage_access_f"
--
DROP FUNCTION IF EXISTS vdage_access_f$$

--
-- Удалить функцию "validator_mref_f"
--
DROP FUNCTION IF EXISTS validator_mref_f$$

--
-- Удалить функцию "validator_brief_f"
--
DROP FUNCTION IF EXISTS validator_brief_f$$

--
-- Удалить функцию "users_mref_f"
--
DROP FUNCTION IF EXISTS users_mref_f$$

--
-- Удалить функцию "users_brief_f"
--
DROP FUNCTION IF EXISTS users_brief_f$$

--
-- Удалить функцию "uniqueconstraint_mref_f"
--
DROP FUNCTION IF EXISTS uniqueconstraint_mref_f$$

--
-- Удалить функцию "uniqueconstraint_brief_f"
--
DROP FUNCTION IF EXISTS uniqueconstraint_brief_f$$

--
-- Удалить функцию "typemenu_mref_f"
--
DROP FUNCTION IF EXISTS typemenu_mref_f$$

--
-- Удалить функцию "typemenu_brief_f"
--
DROP FUNCTION IF EXISTS typemenu_brief_f$$

--
-- Удалить функцию "the_session_mref_f"
--
DROP FUNCTION IF EXISTS the_session_mref_f$$

--
-- Удалить функцию "the_session_brief_f"
--
DROP FUNCTION IF EXISTS the_session_brief_f$$

--
-- Удалить функцию "sysrefcache_mref_f"
--
DROP FUNCTION IF EXISTS sysrefcache_mref_f$$

--
-- Удалить функцию "sysrefcache_brief_f"
--
DROP FUNCTION IF EXISTS sysrefcache_brief_f$$

--
-- Удалить функцию "syslog_mref_f"
--
DROP FUNCTION IF EXISTS syslog_mref_f$$

--
-- Удалить функцию "syslog_brief_f"
--
DROP FUNCTION IF EXISTS syslog_brief_f$$

--
-- Удалить функцию "structrestriction_mref_f"
--
DROP FUNCTION IF EXISTS structrestriction_mref_f$$

--
-- Удалить функцию "structrestriction_brief_f"
--
DROP FUNCTION IF EXISTS structrestriction_brief_f$$

--
-- Удалить функцию "stdnumerator_export_f"
--
DROP FUNCTION IF EXISTS stdnumerator_export_f$$

--
-- Удалить функцию "stdnumerator_access_f"
--
DROP FUNCTION IF EXISTS stdnumerator_access_f$$

--
-- Удалить функцию "sharedmethod_mref_f"
--
DROP FUNCTION IF EXISTS sharedmethod_mref_f$$

--
-- Удалить функцию "sharedmethod_brief_f"
--
DROP FUNCTION IF EXISTS sharedmethod_brief_f$$

--
-- Удалить функцию "script_mref_f"
--
DROP FUNCTION IF EXISTS script_mref_f$$

--
-- Удалить функцию "script_brief_f"
--
DROP FUNCTION IF EXISTS script_brief_f$$

--
-- Удалить функцию "rptstruct_mref_f"
--
DROP FUNCTION IF EXISTS rptstruct_mref_f$$

--
-- Удалить функцию "rptstruct_brief_f"
--
DROP FUNCTION IF EXISTS rptstruct_brief_f$$

--
-- Удалить функцию "rptformula_mref_f"
--
DROP FUNCTION IF EXISTS rptformula_mref_f$$

--
-- Удалить функцию "rptformula_brief_f"
--
DROP FUNCTION IF EXISTS rptformula_brief_f$$

--
-- Удалить функцию "rptfields_mref_f"
--
DROP FUNCTION IF EXISTS rptfields_mref_f$$

--
-- Удалить функцию "rptfields_brief_f"
--
DROP FUNCTION IF EXISTS rptfields_brief_f$$

--
-- Удалить функцию "reports_mref_f"
--
DROP FUNCTION IF EXISTS reports_mref_f$$

--
-- Удалить функцию "reports_brief_f"
--
DROP FUNCTION IF EXISTS reports_brief_f$$

--
-- Удалить функцию "part_mref_f"
--
DROP FUNCTION IF EXISTS part_mref_f$$

--
-- Удалить функцию "part_brief_f"
--
DROP FUNCTION IF EXISTS part_brief_f$$

--
-- Удалить функцию "partview_mref_f"
--
DROP FUNCTION IF EXISTS partview_mref_f$$

--
-- Удалить функцию "partview_lnk_mref_f"
--
DROP FUNCTION IF EXISTS partview_lnk_mref_f$$

--
-- Удалить функцию "partview_lnk_brief_f"
--
DROP FUNCTION IF EXISTS partview_lnk_brief_f$$

--
-- Удалить функцию "partview_brief_f"
--
DROP FUNCTION IF EXISTS partview_brief_f$$

--
-- Удалить функцию "partparammap_mref_f"
--
DROP FUNCTION IF EXISTS partparammap_mref_f$$

--
-- Удалить функцию "partparammap_brief_f"
--
DROP FUNCTION IF EXISTS partparammap_brief_f$$

--
-- Удалить функцию "partmenu_mref_f"
--
DROP FUNCTION IF EXISTS partmenu_mref_f$$

--
-- Удалить функцию "partmenu_brief_f"
--
DROP FUNCTION IF EXISTS partmenu_brief_f$$

--
-- Удалить функцию "parentpackage_mref_f"
--
DROP FUNCTION IF EXISTS parentpackage_mref_f$$

--
-- Удалить функцию "parentpackage_brief_f"
--
DROP FUNCTION IF EXISTS parentpackage_brief_f$$

--
-- Удалить функцию "parameters_mref_f"
--
DROP FUNCTION IF EXISTS parameters_mref_f$$

--
-- Удалить функцию "parameters_brief_f"
--
DROP FUNCTION IF EXISTS parameters_brief_f$$

--
-- Удалить функцию "objstatus_mref_f"
--
DROP FUNCTION IF EXISTS objstatus_mref_f$$

--
-- Удалить функцию "objstatus_brief_f"
--
DROP FUNCTION IF EXISTS objstatus_brief_f$$

--
-- Удалить функцию "objecttype_mref_f"
--
DROP FUNCTION IF EXISTS objecttype_mref_f$$

--
-- Удалить функцию "objecttype_brief_f"
--
DROP FUNCTION IF EXISTS objecttype_brief_f$$

--
-- Удалить функцию "objectmode_mref_f"
--
DROP FUNCTION IF EXISTS objectmode_mref_f$$

--
-- Удалить функцию "objectmode_brief_f"
--
DROP FUNCTION IF EXISTS objectmode_brief_f$$

--
-- Удалить функцию "num_zones_mref_f"
--
DROP FUNCTION IF EXISTS num_zones_mref_f$$

--
-- Удалить функцию "num_zones_brief_f"
--
DROP FUNCTION IF EXISTS num_zones_brief_f$$

--
-- Удалить функцию "num_values_mref_f"
--
DROP FUNCTION IF EXISTS num_values_mref_f$$

--
-- Удалить функцию "num_values_brief_f"
--
DROP FUNCTION IF EXISTS num_values_brief_f$$

--
-- Удалить функцию "num_head_mref_f"
--
DROP FUNCTION IF EXISTS num_head_mref_f$$

--
-- Удалить функцию "num_head_brief_f"
--
DROP FUNCTION IF EXISTS num_head_brief_f$$

--
-- Удалить функцию "nextstate_mref_f"
--
DROP FUNCTION IF EXISTS nextstate_mref_f$$

--
-- Удалить функцию "nextstate_brief_f"
--
DROP FUNCTION IF EXISTS nextstate_brief_f$$

--
-- Удалить функцию "mtzwp_export_f"
--
DROP FUNCTION IF EXISTS mtzwp_export_f$$

--
-- Удалить функцию "mtzwp_access_f"
--
DROP FUNCTION IF EXISTS mtzwp_access_f$$

--
-- Удалить функцию "mtzusers_export_f"
--
DROP FUNCTION IF EXISTS mtzusers_export_f$$

--
-- Удалить функцию "mtzusers_access_f"
--
DROP FUNCTION IF EXISTS mtzusers_access_f$$

--
-- Удалить функцию "mtzsystem_export_f"
--
DROP FUNCTION IF EXISTS mtzsystem_export_f$$

--
-- Удалить функцию "mtzsystem_access_f"
--
DROP FUNCTION IF EXISTS mtzsystem_access_f$$

--
-- Удалить функцию "mtzrprt_export_f"
--
DROP FUNCTION IF EXISTS mtzrprt_export_f$$

--
-- Удалить функцию "mtzrprt_access_f"
--
DROP FUNCTION IF EXISTS mtzrprt_access_f$$

--
-- Удалить функцию "mtzmetamodel_export_f"
--
DROP FUNCTION IF EXISTS mtzmetamodel_export_f$$

--
-- Удалить функцию "mtzmetamodel_access_f"
--
DROP FUNCTION IF EXISTS mtzmetamodel_access_f$$

--
-- Удалить функцию "mtzjrnl_export_f"
--
DROP FUNCTION IF EXISTS mtzjrnl_export_f$$

--
-- Удалить функцию "mtzjrnl_access_f"
--
DROP FUNCTION IF EXISTS mtzjrnl_access_f$$

--
-- Удалить функцию "mtzfltr_export_f"
--
DROP FUNCTION IF EXISTS mtzfltr_export_f$$

--
-- Удалить функцию "mtzfltr_access_f"
--
DROP FUNCTION IF EXISTS mtzfltr_access_f$$

--
-- Удалить функцию "mtzext_export_f"
--
DROP FUNCTION IF EXISTS mtzext_export_f$$

--
-- Удалить функцию "mtzext_def_mref_f"
--
DROP FUNCTION IF EXISTS mtzext_def_mref_f$$

--
-- Удалить функцию "mtzext_def_brief_f"
--
DROP FUNCTION IF EXISTS mtzext_def_brief_f$$

--
-- Удалить функцию "mtzext_access_f"
--
DROP FUNCTION IF EXISTS mtzext_access_f$$

--
-- Удалить функцию "mtzextrel_mref_f"
--
DROP FUNCTION IF EXISTS mtzextrel_mref_f$$

--
-- Удалить функцию "mtzextrel_brief_f"
--
DROP FUNCTION IF EXISTS mtzextrel_brief_f$$

--
-- Удалить функцию "mtzapp_mref_f"
--
DROP FUNCTION IF EXISTS mtzapp_mref_f$$

--
-- Удалить функцию "mtzapp_brief_f"
--
DROP FUNCTION IF EXISTS mtzapp_brief_f$$

--
-- Удалить функцию "methodrestriction_mref_f"
--
DROP FUNCTION IF EXISTS methodrestriction_mref_f$$

--
-- Удалить функцию "methodrestriction_brief_f"
--
DROP FUNCTION IF EXISTS methodrestriction_brief_f$$

--
-- Удалить функцию "localizeinfo_mref_f"
--
DROP FUNCTION IF EXISTS localizeinfo_mref_f$$

--
-- Удалить функцию "localizeinfo_brief_f"
--
DROP FUNCTION IF EXISTS localizeinfo_brief_f$$

--
-- Удалить функцию "journal_mref_f"
--
DROP FUNCTION IF EXISTS journal_mref_f$$

--
-- Удалить функцию "journal_brief_f"
--
DROP FUNCTION IF EXISTS journal_brief_f$$

--
-- Удалить функцию "journalsrc_mref_f"
--
DROP FUNCTION IF EXISTS journalsrc_mref_f$$

--
-- Удалить функцию "journalsrc_brief_f"
--
DROP FUNCTION IF EXISTS journalsrc_brief_f$$

--
-- Удалить функцию "journalcolumn_mref_f"
--
DROP FUNCTION IF EXISTS journalcolumn_mref_f$$

--
-- Удалить функцию "journalcolumn_brief_f"
--
DROP FUNCTION IF EXISTS journalcolumn_brief_f$$

--
-- Удалить функцию "jcolumnsource_mref_f"
--
DROP FUNCTION IF EXISTS jcolumnsource_mref_f$$

--
-- Удалить функцию "jcolumnsource_brief_f"
--
DROP FUNCTION IF EXISTS jcolumnsource_brief_f$$

--
-- Удалить функцию "iu_u_def_mref_f"
--
DROP FUNCTION IF EXISTS iu_u_def_mref_f$$

--
-- Удалить функцию "iu_u_def_brief_f"
--
DROP FUNCTION IF EXISTS iu_u_def_brief_f$$

--
-- Удалить функцию "iu_rcfg_mod_mref_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_mod_mref_f$$

--
-- Удалить функцию "iu_rcfg_mod_brief_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_mod_brief_f$$

--
-- Удалить функцию "iu_rcfg_docmode_mref_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_docmode_mref_f$$

--
-- Удалить функцию "iu_rcfg_docmode_brief_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_docmode_brief_f$$

--
-- Удалить функцию "iu_rcfg_def_mref_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_def_mref_f$$

--
-- Удалить функцию "iu_rcfg_def_brief_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_def_brief_f$$

--
-- Удалить функцию "iu_int_modules_mref_f"
--
DROP FUNCTION IF EXISTS iu_int_modules_mref_f$$

--
-- Удалить функцию "iu_int_modules_brief_f"
--
DROP FUNCTION IF EXISTS iu_int_modules_brief_f$$

--
-- Удалить функцию "iu_crole_mref_f"
--
DROP FUNCTION IF EXISTS iu_crole_mref_f$$

--
-- Удалить функцию "iu_crole_brief_f"
--
DROP FUNCTION IF EXISTS iu_crole_brief_f$$

--
-- Удалить функцию "instance_mref_f"
--
DROP FUNCTION IF EXISTS instance_mref_f$$

--
-- Удалить функцию "instance_brief_f"
--
DROP FUNCTION IF EXISTS instance_brief_f$$

--
-- Удалить функцию "instancevalidator_mref_f"
--
DROP FUNCTION IF EXISTS instancevalidator_mref_f$$

--
-- Удалить функцию "instancevalidator_brief_f"
--
DROP FUNCTION IF EXISTS instancevalidator_brief_f$$

--
-- Удалить функцию "groupuser_mref_f"
--
DROP FUNCTION IF EXISTS groupuser_mref_f$$

--
-- Удалить функцию "groupuser_brief_f"
--
DROP FUNCTION IF EXISTS groupuser_brief_f$$

--
-- Удалить функцию "groups_mref_f"
--
DROP FUNCTION IF EXISTS groups_mref_f$$

--
-- Удалить функцию "groups_brief_f"
--
DROP FUNCTION IF EXISTS groups_brief_f$$

--
-- Удалить функцию "getidfromxml"
--
DROP FUNCTION IF EXISTS getidfromxml$$

--
-- Удалить функцию "getbrieffromxml"
--
DROP FUNCTION IF EXISTS getbrieffromxml$$

--
-- Удалить функцию "genreference_mref_f"
--
DROP FUNCTION IF EXISTS genreference_mref_f$$

--
-- Удалить функцию "genreference_brief_f"
--
DROP FUNCTION IF EXISTS genreference_brief_f$$

--
-- Удалить функцию "genpackage_mref_f"
--
DROP FUNCTION IF EXISTS genpackage_mref_f$$

--
-- Удалить функцию "genpackage_brief_f"
--
DROP FUNCTION IF EXISTS genpackage_brief_f$$

--
-- Удалить функцию "genmanualcode_mref_f"
--
DROP FUNCTION IF EXISTS genmanualcode_mref_f$$

--
-- Удалить функцию "genmanualcode_brief_f"
--
DROP FUNCTION IF EXISTS genmanualcode_brief_f$$

--
-- Удалить функцию "generator_target_mref_f"
--
DROP FUNCTION IF EXISTS generator_target_mref_f$$

--
-- Удалить функцию "generator_target_brief_f"
--
DROP FUNCTION IF EXISTS generator_target_brief_f$$

--
-- Удалить функцию "gencontrols_mref_f"
--
DROP FUNCTION IF EXISTS gencontrols_mref_f$$

--
-- Удалить функцию "gencontrols_brief_f"
--
DROP FUNCTION IF EXISTS gencontrols_brief_f$$

--
-- Удалить функцию "g2b"
--
DROP FUNCTION IF EXISTS g2b$$

--
-- Удалить функцию "fldextenders_mref_f"
--
DROP FUNCTION IF EXISTS fldextenders_mref_f$$

--
-- Удалить функцию "fldextenders_brief_f"
--
DROP FUNCTION IF EXISTS fldextenders_brief_f$$

--
-- Удалить функцию "filters_mref_f"
--
DROP FUNCTION IF EXISTS filters_mref_f$$

--
-- Удалить функцию "filters_brief_f"
--
DROP FUNCTION IF EXISTS filters_brief_f$$

--
-- Удалить функцию "filterfieldgroup_mref_f"
--
DROP FUNCTION IF EXISTS filterfieldgroup_mref_f$$

--
-- Удалить функцию "filterfieldgroup_brief_f"
--
DROP FUNCTION IF EXISTS filterfieldgroup_brief_f$$

--
-- Удалить функцию "fileterfield_mref_f"
--
DROP FUNCTION IF EXISTS fileterfield_mref_f$$

--
-- Удалить функцию "fileterfield_brief_f"
--
DROP FUNCTION IF EXISTS fileterfield_brief_f$$

--
-- Удалить функцию "field_mref_f"
--
DROP FUNCTION IF EXISTS field_mref_f$$

--
-- Удалить функцию "field_brief_f"
--
DROP FUNCTION IF EXISTS field_brief_f$$

--
-- Удалить функцию "fieldvalidator_mref_f"
--
DROP FUNCTION IF EXISTS fieldvalidator_mref_f$$

--
-- Удалить функцию "fieldvalidator_brief_f"
--
DROP FUNCTION IF EXISTS fieldvalidator_brief_f$$

--
-- Удалить функцию "fieldtype_mref_f"
--
DROP FUNCTION IF EXISTS fieldtype_mref_f$$

--
-- Удалить функцию "fieldtype_brief_f"
--
DROP FUNCTION IF EXISTS fieldtype_brief_f$$

--
-- Удалить функцию "fieldtypemap_mref_f"
--
DROP FUNCTION IF EXISTS fieldtypemap_mref_f$$

--
-- Удалить функцию "fieldtypemap_brief_f"
--
DROP FUNCTION IF EXISTS fieldtypemap_brief_f$$

--
-- Удалить функцию "fieldsrcdef_mref_f"
--
DROP FUNCTION IF EXISTS fieldsrcdef_mref_f$$

--
-- Удалить функцию "fieldsrcdef_brief_f"
--
DROP FUNCTION IF EXISTS fieldsrcdef_brief_f$$

--
-- Удалить функцию "fieldrestriction_mref_f"
--
DROP FUNCTION IF EXISTS fieldrestriction_mref_f$$

--
-- Удалить функцию "fieldrestriction_brief_f"
--
DROP FUNCTION IF EXISTS fieldrestriction_brief_f$$

--
-- Удалить функцию "fieldparammap_mref_f"
--
DROP FUNCTION IF EXISTS fieldparammap_mref_f$$

--
-- Удалить функцию "fieldparammap_brief_f"
--
DROP FUNCTION IF EXISTS fieldparammap_brief_f$$

--
-- Удалить функцию "fieldmenu_mref_f"
--
DROP FUNCTION IF EXISTS fieldmenu_mref_f$$

--
-- Удалить функцию "fieldmenu_brief_f"
--
DROP FUNCTION IF EXISTS fieldmenu_brief_f$$

--
-- Удалить функцию "fieldexpression_mref_f"
--
DROP FUNCTION IF EXISTS fieldexpression_mref_f$$

--
-- Удалить функцию "fieldexpression_brief_f"
--
DROP FUNCTION IF EXISTS fieldexpression_brief_f$$

--
-- Удалить функцию "extenderinterface_mref_f"
--
DROP FUNCTION IF EXISTS extenderinterface_mref_f$$

--
-- Удалить функцию "extenderinterface_brief_f"
--
DROP FUNCTION IF EXISTS extenderinterface_brief_f$$

--
-- Удалить функцию "epfilterlink_mref_f"
--
DROP FUNCTION IF EXISTS epfilterlink_mref_f$$

--
-- Удалить функцию "epfilterlink_brief_f"
--
DROP FUNCTION IF EXISTS epfilterlink_brief_f$$

--
-- Удалить функцию "enumitem_mref_f"
--
DROP FUNCTION IF EXISTS enumitem_mref_f$$

--
-- Удалить функцию "enumitem_brief_f"
--
DROP FUNCTION IF EXISTS enumitem_brief_f$$

--
-- Удалить функцию "entrypoints_mref_f"
--
DROP FUNCTION IF EXISTS entrypoints_mref_f$$

--
-- Удалить функцию "entrypoints_brief_f"
--
DROP FUNCTION IF EXISTS entrypoints_brief_f$$

--
-- Удалить функцию "dinamicfilterscript_mref_f"
--
DROP FUNCTION IF EXISTS dinamicfilterscript_mref_f$$

--
-- Удалить функцию "dinamicfilterscript_brief_f"
--
DROP FUNCTION IF EXISTS dinamicfilterscript_brief_f$$

--
-- Удалить функцию "constraintfield_mref_f"
--
DROP FUNCTION IF EXISTS constraintfield_mref_f$$

--
-- Удалить функцию "constraintfield_brief_f"
--
DROP FUNCTION IF EXISTS constraintfield_brief_f$$

--
-- Удалить функцию "checkoperation"
--
DROP FUNCTION IF EXISTS checkoperation$$

--
-- Удалить функцию "bpu_export_f"
--
DROP FUNCTION IF EXISTS bpu_export_f$$

--
-- Удалить функцию "bpu_access_f"
--
DROP FUNCTION IF EXISTS bpu_access_f$$

--
-- Удалить функцию "bprcfg_export_f"
--
DROP FUNCTION IF EXISTS bprcfg_export_f$$

--
-- Удалить функцию "bprcfg_access_f"
--
DROP FUNCTION IF EXISTS bprcfg_access_f$$

--
-- Удалить функцию "bpdr_export_f"
--
DROP FUNCTION IF EXISTS bpdr_export_f$$

--
-- Удалить функцию "bpdr_access_f"
--
DROP FUNCTION IF EXISTS bpdr_access_f$$

--
-- Удалить функцию "bpdi_export_f"
--
DROP FUNCTION IF EXISTS bpdi_export_f$$

--
-- Удалить функцию "bpdi_access_f"
--
DROP FUNCTION IF EXISTS bpdi_access_f$$

--
-- Удалить функцию "bpc_info_mref_f"
--
DROP FUNCTION IF EXISTS bpc_info_mref_f$$

--
-- Удалить функцию "bpc_info_brief_f"
--
DROP FUNCTION IF EXISTS bpc_info_brief_f$$

--
-- Удалить функцию "bpc_export_f"
--
DROP FUNCTION IF EXISTS bpc_export_f$$

--
-- Удалить функцию "bpc_access_f"
--
DROP FUNCTION IF EXISTS bpc_access_f$$

--
-- Удалить функцию "b2g"
--
DROP FUNCTION IF EXISTS b2g$$

--
-- Удалить функцию "armtypes_mref_f"
--
DROP FUNCTION IF EXISTS armtypes_mref_f$$

--
-- Удалить функцию "armtypes_brief_f"
--
DROP FUNCTION IF EXISTS armtypes_brief_f$$

--
-- Удалить функцию "armjrnlrun_mref_f"
--
DROP FUNCTION IF EXISTS armjrnlrun_mref_f$$

--
-- Удалить функцию "armjrnlrun_brief_f"
--
DROP FUNCTION IF EXISTS armjrnlrun_brief_f$$

--
-- Удалить функцию "armjrnlrep_mref_f"
--
DROP FUNCTION IF EXISTS armjrnlrep_mref_f$$

--
-- Удалить функцию "armjrnlrep_brief_f"
--
DROP FUNCTION IF EXISTS armjrnlrep_brief_f$$

--
-- Удалить функцию "armjrnladd_mref_f"
--
DROP FUNCTION IF EXISTS armjrnladd_mref_f$$

--
-- Удалить функцию "armjrnladd_brief_f"
--
DROP FUNCTION IF EXISTS armjrnladd_brief_f$$

--
-- Удалить функцию "armjournal_mref_f"
--
DROP FUNCTION IF EXISTS armjournal_mref_f$$

--
-- Удалить функцию "armjournal_brief_f"
--
DROP FUNCTION IF EXISTS armjournal_brief_f$$

--
-- Удалить процедуру "workplace_unlock"
--
DROP PROCEDURE IF EXISTS workplace_unlock$$

--
-- Удалить процедуру "workplace_save"
--
DROP PROCEDURE IF EXISTS workplace_save$$

--
-- Удалить процедуру "workplace_parent"
--
DROP PROCEDURE IF EXISTS workplace_parent$$

--
-- Удалить процедуру "workplace_logger"
--
DROP PROCEDURE IF EXISTS workplace_logger$$

--
-- Удалить процедуру "workplace_lock"
--
DROP PROCEDURE IF EXISTS workplace_lock$$

--
-- Удалить процедуру "workplace_islocked"
--
DROP PROCEDURE IF EXISTS workplace_islocked$$

--
-- Удалить процедуру "workplace_delete"
--
DROP PROCEDURE IF EXISTS workplace_delete$$

--
-- Удалить процедуру "workplace_copy"
--
DROP PROCEDURE IF EXISTS workplace_copy$$

--
-- Удалить процедуру "workplace_client_trigger"
--
DROP PROCEDURE IF EXISTS workplace_client_trigger$$

--
-- Удалить процедуру "workplace_brief"
--
DROP PROCEDURE IF EXISTS workplace_brief$$

--
-- Удалить процедуру "viewcolumn_unlock"
--
DROP PROCEDURE IF EXISTS viewcolumn_unlock$$

--
-- Удалить процедуру "viewcolumn_save"
--
DROP PROCEDURE IF EXISTS viewcolumn_save$$

--
-- Удалить процедуру "viewcolumn_parent"
--
DROP PROCEDURE IF EXISTS viewcolumn_parent$$

--
-- Удалить процедуру "viewcolumn_logger"
--
DROP PROCEDURE IF EXISTS viewcolumn_logger$$

--
-- Удалить процедуру "viewcolumn_lock"
--
DROP PROCEDURE IF EXISTS viewcolumn_lock$$

--
-- Удалить процедуру "viewcolumn_islocked"
--
DROP PROCEDURE IF EXISTS viewcolumn_islocked$$

--
-- Удалить процедуру "viewcolumn_delete"
--
DROP PROCEDURE IF EXISTS viewcolumn_delete$$

--
-- Удалить процедуру "viewcolumn_copy"
--
DROP PROCEDURE IF EXISTS viewcolumn_copy$$

--
-- Удалить процедуру "viewcolumn_client_trigger"
--
DROP PROCEDURE IF EXISTS viewcolumn_client_trigger$$

--
-- Удалить процедуру "viewcolumn_brief"
--
DROP PROCEDURE IF EXISTS viewcolumn_brief$$

--
-- Удалить процедуру "vdt_copy"
--
DROP PROCEDURE IF EXISTS vdt_copy$$

--
-- Удалить процедуру "vdtt_copy"
--
DROP PROCEDURE IF EXISTS vdtt_copy$$

--
-- Удалить процедуру "vdrg_copy"
--
DROP PROCEDURE IF EXISTS vdrg_copy$$

--
-- Удалить процедуру "vdrel_copy"
--
DROP PROCEDURE IF EXISTS vdrel_copy$$

--
-- Удалить процедуру "vdpt_copy"
--
DROP PROCEDURE IF EXISTS vdpt_copy$$

--
-- Удалить процедуру "vdpos_copy"
--
DROP PROCEDURE IF EXISTS vdpos_copy$$

--
-- Удалить процедуру "vdos_copy"
--
DROP PROCEDURE IF EXISTS vdos_copy$$

--
-- Удалить процедуру "vdmstat_copy"
--
DROP PROCEDURE IF EXISTS vdmstat_copy$$

--
-- Удалить процедуру "vdinter_copy"
--
DROP PROCEDURE IF EXISTS vdinter_copy$$

--
-- Удалить процедуру "vdfrmt_copy"
--
DROP PROCEDURE IF EXISTS vdfrmt_copy$$

--
-- Удалить процедуру "vddev_copy"
--
DROP PROCEDURE IF EXISTS vddev_copy$$

--
-- Удалить процедуру "vdcst_copy"
--
DROP PROCEDURE IF EXISTS vdcst_copy$$

--
-- Удалить процедуру "vdcn_copy"
--
DROP PROCEDURE IF EXISTS vdcn_copy$$

--
-- Удалить процедуру "vdcat_copy"
--
DROP PROCEDURE IF EXISTS vdcat_copy$$

--
-- Удалить процедуру "vdbrw_copy"
--
DROP PROCEDURE IF EXISTS vdbrw_copy$$

--
-- Удалить процедуру "vdast_copy"
--
DROP PROCEDURE IF EXISTS vdast_copy$$

--
-- Удалить процедуру "vdappr_copy"
--
DROP PROCEDURE IF EXISTS vdappr_copy$$

--
-- Удалить процедуру "vdapl_copy"
--
DROP PROCEDURE IF EXISTS vdapl_copy$$

--
-- Удалить процедуру "vdage_copy"
--
DROP PROCEDURE IF EXISTS vdage_copy$$

--
-- Удалить процедуру "validator_unlock"
--
DROP PROCEDURE IF EXISTS validator_unlock$$

--
-- Удалить процедуру "validator_save"
--
DROP PROCEDURE IF EXISTS validator_save$$

--
-- Удалить процедуру "validator_parent"
--
DROP PROCEDURE IF EXISTS validator_parent$$

--
-- Удалить процедуру "validator_logger"
--
DROP PROCEDURE IF EXISTS validator_logger$$

--
-- Удалить процедуру "validator_lock"
--
DROP PROCEDURE IF EXISTS validator_lock$$

--
-- Удалить процедуру "validator_islocked"
--
DROP PROCEDURE IF EXISTS validator_islocked$$

--
-- Удалить процедуру "validator_delete"
--
DROP PROCEDURE IF EXISTS validator_delete$$

--
-- Удалить процедуру "validator_copy"
--
DROP PROCEDURE IF EXISTS validator_copy$$

--
-- Удалить процедуру "validator_client_trigger"
--
DROP PROCEDURE IF EXISTS validator_client_trigger$$

--
-- Удалить процедуру "validator_brief"
--
DROP PROCEDURE IF EXISTS validator_brief$$

--
-- Удалить процедуру "users_unlock"
--
DROP PROCEDURE IF EXISTS users_unlock$$

--
-- Удалить процедуру "users_save"
--
DROP PROCEDURE IF EXISTS users_save$$

--
-- Удалить процедуру "users_parent"
--
DROP PROCEDURE IF EXISTS users_parent$$

--
-- Удалить процедуру "users_logger"
--
DROP PROCEDURE IF EXISTS users_logger$$

--
-- Удалить процедуру "users_lock"
--
DROP PROCEDURE IF EXISTS users_lock$$

--
-- Удалить процедуру "users_islocked"
--
DROP PROCEDURE IF EXISTS users_islocked$$

--
-- Удалить процедуру "users_delete"
--
DROP PROCEDURE IF EXISTS users_delete$$

--
-- Удалить процедуру "users_copy"
--
DROP PROCEDURE IF EXISTS users_copy$$

--
-- Удалить процедуру "users_client_trigger"
--
DROP PROCEDURE IF EXISTS users_client_trigger$$

--
-- Удалить процедуру "users_brief"
--
DROP PROCEDURE IF EXISTS users_brief$$

--
-- Удалить процедуру "uniqueconstraint_unlock"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_unlock$$

--
-- Удалить процедуру "uniqueconstraint_save"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_save$$

--
-- Удалить процедуру "uniqueconstraint_parent"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_parent$$

--
-- Удалить процедуру "uniqueconstraint_logger"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_logger$$

--
-- Удалить процедуру "uniqueconstraint_lock"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_lock$$

--
-- Удалить процедуру "uniqueconstraint_islocked"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_islocked$$

--
-- Удалить процедуру "uniqueconstraint_delete"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_delete$$

--
-- Удалить процедуру "uniqueconstraint_copy"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_copy$$

--
-- Удалить процедуру "uniqueconstraint_client_trigger"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_client_trigger$$

--
-- Удалить процедуру "uniqueconstraint_brief"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_brief$$

--
-- Удалить процедуру "typemenu_unlock"
--
DROP PROCEDURE IF EXISTS typemenu_unlock$$

--
-- Удалить процедуру "typemenu_save"
--
DROP PROCEDURE IF EXISTS typemenu_save$$

--
-- Удалить процедуру "typemenu_parent"
--
DROP PROCEDURE IF EXISTS typemenu_parent$$

--
-- Удалить процедуру "typemenu_logger"
--
DROP PROCEDURE IF EXISTS typemenu_logger$$

--
-- Удалить процедуру "typemenu_lock"
--
DROP PROCEDURE IF EXISTS typemenu_lock$$

--
-- Удалить процедуру "typemenu_islocked"
--
DROP PROCEDURE IF EXISTS typemenu_islocked$$

--
-- Удалить процедуру "typemenu_delete"
--
DROP PROCEDURE IF EXISTS typemenu_delete$$

--
-- Удалить процедуру "typemenu_copy"
--
DROP PROCEDURE IF EXISTS typemenu_copy$$

--
-- Удалить процедуру "typemenu_client_trigger"
--
DROP PROCEDURE IF EXISTS typemenu_client_trigger$$

--
-- Удалить процедуру "typemenu_brief"
--
DROP PROCEDURE IF EXISTS typemenu_brief$$

--
-- Удалить процедуру "the_session_unlock"
--
DROP PROCEDURE IF EXISTS the_session_unlock$$

--
-- Удалить процедуру "the_session_save"
--
DROP PROCEDURE IF EXISTS the_session_save$$

--
-- Удалить процедуру "the_session_parent"
--
DROP PROCEDURE IF EXISTS the_session_parent$$

--
-- Удалить процедуру "the_session_logger"
--
DROP PROCEDURE IF EXISTS the_session_logger$$

--
-- Удалить процедуру "the_session_lock"
--
DROP PROCEDURE IF EXISTS the_session_lock$$

--
-- Удалить процедуру "the_session_islocked"
--
DROP PROCEDURE IF EXISTS the_session_islocked$$

--
-- Удалить процедуру "the_session_delete"
--
DROP PROCEDURE IF EXISTS the_session_delete$$

--
-- Удалить процедуру "the_session_copy"
--
DROP PROCEDURE IF EXISTS the_session_copy$$

--
-- Удалить процедуру "the_session_client_trigger"
--
DROP PROCEDURE IF EXISTS the_session_client_trigger$$

--
-- Удалить процедуру "the_session_brief"
--
DROP PROCEDURE IF EXISTS the_session_brief$$

--
-- Удалить процедуру "sysrefcache_unlock"
--
DROP PROCEDURE IF EXISTS sysrefcache_unlock$$

--
-- Удалить процедуру "sysrefcache_save"
--
DROP PROCEDURE IF EXISTS sysrefcache_save$$

--
-- Удалить процедуру "sysrefcache_parent"
--
DROP PROCEDURE IF EXISTS sysrefcache_parent$$

--
-- Удалить процедуру "sysrefcache_logger"
--
DROP PROCEDURE IF EXISTS sysrefcache_logger$$

--
-- Удалить процедуру "sysrefcache_lock"
--
DROP PROCEDURE IF EXISTS sysrefcache_lock$$

--
-- Удалить процедуру "sysrefcache_islocked"
--
DROP PROCEDURE IF EXISTS sysrefcache_islocked$$

--
-- Удалить процедуру "sysrefcache_delete"
--
DROP PROCEDURE IF EXISTS sysrefcache_delete$$

--
-- Удалить процедуру "sysrefcache_copy"
--
DROP PROCEDURE IF EXISTS sysrefcache_copy$$

--
-- Удалить процедуру "sysrefcache_client_trigger"
--
DROP PROCEDURE IF EXISTS sysrefcache_client_trigger$$

--
-- Удалить процедуру "sysrefcache_brief"
--
DROP PROCEDURE IF EXISTS sysrefcache_brief$$

--
-- Удалить процедуру "sysoptions_save"
--
DROP PROCEDURE IF EXISTS sysoptions_save$$

--
-- Удалить процедуру "syslog_unlock"
--
DROP PROCEDURE IF EXISTS syslog_unlock$$

--
-- Удалить процедуру "syslog_save"
--
DROP PROCEDURE IF EXISTS syslog_save$$

--
-- Удалить процедуру "syslog_parent"
--
DROP PROCEDURE IF EXISTS syslog_parent$$

--
-- Удалить процедуру "syslog_logger"
--
DROP PROCEDURE IF EXISTS syslog_logger$$

--
-- Удалить процедуру "syslog_lock"
--
DROP PROCEDURE IF EXISTS syslog_lock$$

--
-- Удалить процедуру "syslog_islocked"
--
DROP PROCEDURE IF EXISTS syslog_islocked$$

--
-- Удалить процедуру "syslog_delete"
--
DROP PROCEDURE IF EXISTS syslog_delete$$

--
-- Удалить процедуру "syslog_copy"
--
DROP PROCEDURE IF EXISTS syslog_copy$$

--
-- Удалить процедуру "syslog_client_trigger"
--
DROP PROCEDURE IF EXISTS syslog_client_trigger$$

--
-- Удалить процедуру "syslog_brief"
--
DROP PROCEDURE IF EXISTS syslog_brief$$

--
-- Удалить процедуру "structrestriction_unlock"
--
DROP PROCEDURE IF EXISTS structrestriction_unlock$$

--
-- Удалить процедуру "structrestriction_save"
--
DROP PROCEDURE IF EXISTS structrestriction_save$$

--
-- Удалить процедуру "structrestriction_parent"
--
DROP PROCEDURE IF EXISTS structrestriction_parent$$

--
-- Удалить процедуру "structrestriction_logger"
--
DROP PROCEDURE IF EXISTS structrestriction_logger$$

--
-- Удалить процедуру "structrestriction_lock"
--
DROP PROCEDURE IF EXISTS structrestriction_lock$$

--
-- Удалить процедуру "structrestriction_islocked"
--
DROP PROCEDURE IF EXISTS structrestriction_islocked$$

--
-- Удалить процедуру "structrestriction_delete"
--
DROP PROCEDURE IF EXISTS structrestriction_delete$$

--
-- Удалить процедуру "structrestriction_copy"
--
DROP PROCEDURE IF EXISTS structrestriction_copy$$

--
-- Удалить процедуру "structrestriction_client_trigger"
--
DROP PROCEDURE IF EXISTS structrestriction_client_trigger$$

--
-- Удалить процедуру "structrestriction_brief"
--
DROP PROCEDURE IF EXISTS structrestriction_brief$$

--
-- Удалить процедуру "stdnumerator_copy"
--
DROP PROCEDURE IF EXISTS stdnumerator_copy$$

--
-- Удалить процедуру "sharedmethod_unlock"
--
DROP PROCEDURE IF EXISTS sharedmethod_unlock$$

--
-- Удалить процедуру "sharedmethod_save"
--
DROP PROCEDURE IF EXISTS sharedmethod_save$$

--
-- Удалить процедуру "sharedmethod_parent"
--
DROP PROCEDURE IF EXISTS sharedmethod_parent$$

--
-- Удалить процедуру "sharedmethod_logger"
--
DROP PROCEDURE IF EXISTS sharedmethod_logger$$

--
-- Удалить процедуру "sharedmethod_lock"
--
DROP PROCEDURE IF EXISTS sharedmethod_lock$$

--
-- Удалить процедуру "sharedmethod_islocked"
--
DROP PROCEDURE IF EXISTS sharedmethod_islocked$$

--
-- Удалить процедуру "sharedmethod_delete"
--
DROP PROCEDURE IF EXISTS sharedmethod_delete$$

--
-- Удалить процедуру "sharedmethod_copy"
--
DROP PROCEDURE IF EXISTS sharedmethod_copy$$

--
-- Удалить процедуру "sharedmethod_client_trigger"
--
DROP PROCEDURE IF EXISTS sharedmethod_client_trigger$$

--
-- Удалить процедуру "sharedmethod_brief"
--
DROP PROCEDURE IF EXISTS sharedmethod_brief$$

--
-- Удалить процедуру "SessionTouch"
--
DROP PROCEDURE IF EXISTS SessionTouch$$

--
-- Удалить процедуру "script_unlock"
--
DROP PROCEDURE IF EXISTS script_unlock$$

--
-- Удалить процедуру "script_save"
--
DROP PROCEDURE IF EXISTS script_save$$

--
-- Удалить процедуру "script_parent"
--
DROP PROCEDURE IF EXISTS script_parent$$

--
-- Удалить процедуру "script_logger"
--
DROP PROCEDURE IF EXISTS script_logger$$

--
-- Удалить процедуру "script_lock"
--
DROP PROCEDURE IF EXISTS script_lock$$

--
-- Удалить процедуру "script_islocked"
--
DROP PROCEDURE IF EXISTS script_islocked$$

--
-- Удалить процедуру "script_delete"
--
DROP PROCEDURE IF EXISTS script_delete$$

--
-- Удалить процедуру "script_copy"
--
DROP PROCEDURE IF EXISTS script_copy$$

--
-- Удалить процедуру "script_client_trigger"
--
DROP PROCEDURE IF EXISTS script_client_trigger$$

--
-- Удалить процедуру "script_brief"
--
DROP PROCEDURE IF EXISTS script_brief$$

--
-- Удалить процедуру "rptstruct_unlock"
--
DROP PROCEDURE IF EXISTS rptstruct_unlock$$

--
-- Удалить процедуру "rptstruct_save"
--
DROP PROCEDURE IF EXISTS rptstruct_save$$

--
-- Удалить процедуру "rptstruct_parent"
--
DROP PROCEDURE IF EXISTS rptstruct_parent$$

--
-- Удалить процедуру "rptstruct_logger"
--
DROP PROCEDURE IF EXISTS rptstruct_logger$$

--
-- Удалить процедуру "rptstruct_lock"
--
DROP PROCEDURE IF EXISTS rptstruct_lock$$

--
-- Удалить процедуру "rptstruct_islocked"
--
DROP PROCEDURE IF EXISTS rptstruct_islocked$$

--
-- Удалить процедуру "rptstruct_delete"
--
DROP PROCEDURE IF EXISTS rptstruct_delete$$

--
-- Удалить процедуру "rptstruct_copy"
--
DROP PROCEDURE IF EXISTS rptstruct_copy$$

--
-- Удалить процедуру "rptstruct_client_trigger"
--
DROP PROCEDURE IF EXISTS rptstruct_client_trigger$$

--
-- Удалить процедуру "rptstruct_brief"
--
DROP PROCEDURE IF EXISTS rptstruct_brief$$

--
-- Удалить процедуру "rptformula_unlock"
--
DROP PROCEDURE IF EXISTS rptformula_unlock$$

--
-- Удалить процедуру "rptformula_save"
--
DROP PROCEDURE IF EXISTS rptformula_save$$

--
-- Удалить процедуру "rptformula_parent"
--
DROP PROCEDURE IF EXISTS rptformula_parent$$

--
-- Удалить процедуру "rptformula_logger"
--
DROP PROCEDURE IF EXISTS rptformula_logger$$

--
-- Удалить процедуру "rptformula_lock"
--
DROP PROCEDURE IF EXISTS rptformula_lock$$

--
-- Удалить процедуру "rptformula_islocked"
--
DROP PROCEDURE IF EXISTS rptformula_islocked$$

--
-- Удалить процедуру "rptformula_delete"
--
DROP PROCEDURE IF EXISTS rptformula_delete$$

--
-- Удалить процедуру "rptformula_copy"
--
DROP PROCEDURE IF EXISTS rptformula_copy$$

--
-- Удалить процедуру "rptformula_client_trigger"
--
DROP PROCEDURE IF EXISTS rptformula_client_trigger$$

--
-- Удалить процедуру "rptformula_brief"
--
DROP PROCEDURE IF EXISTS rptformula_brief$$

--
-- Удалить процедуру "rptfields_unlock"
--
DROP PROCEDURE IF EXISTS rptfields_unlock$$

--
-- Удалить процедуру "rptfields_save"
--
DROP PROCEDURE IF EXISTS rptfields_save$$

--
-- Удалить процедуру "rptfields_parent"
--
DROP PROCEDURE IF EXISTS rptfields_parent$$

--
-- Удалить процедуру "rptfields_logger"
--
DROP PROCEDURE IF EXISTS rptfields_logger$$

--
-- Удалить процедуру "rptfields_lock"
--
DROP PROCEDURE IF EXISTS rptfields_lock$$

--
-- Удалить процедуру "rptfields_islocked"
--
DROP PROCEDURE IF EXISTS rptfields_islocked$$

--
-- Удалить процедуру "rptfields_delete"
--
DROP PROCEDURE IF EXISTS rptfields_delete$$

--
-- Удалить процедуру "rptfields_copy"
--
DROP PROCEDURE IF EXISTS rptfields_copy$$

--
-- Удалить процедуру "rptfields_client_trigger"
--
DROP PROCEDURE IF EXISTS rptfields_client_trigger$$

--
-- Удалить процедуру "rptfields_brief"
--
DROP PROCEDURE IF EXISTS rptfields_brief$$

--
-- Удалить процедуру "RowParents"
--
DROP PROCEDURE IF EXISTS RowParents$$

--
-- Удалить процедуру "reports_unlock"
--
DROP PROCEDURE IF EXISTS reports_unlock$$

--
-- Удалить процедуру "reports_save"
--
DROP PROCEDURE IF EXISTS reports_save$$

--
-- Удалить процедуру "reports_parent"
--
DROP PROCEDURE IF EXISTS reports_parent$$

--
-- Удалить процедуру "reports_logger"
--
DROP PROCEDURE IF EXISTS reports_logger$$

--
-- Удалить процедуру "reports_lock"
--
DROP PROCEDURE IF EXISTS reports_lock$$

--
-- Удалить процедуру "reports_islocked"
--
DROP PROCEDURE IF EXISTS reports_islocked$$

--
-- Удалить процедуру "reports_delete"
--
DROP PROCEDURE IF EXISTS reports_delete$$

--
-- Удалить процедуру "reports_copy"
--
DROP PROCEDURE IF EXISTS reports_copy$$

--
-- Удалить процедуру "reports_client_trigger"
--
DROP PROCEDURE IF EXISTS reports_client_trigger$$

--
-- Удалить процедуру "reports_brief"
--
DROP PROCEDURE IF EXISTS reports_brief$$

--
-- Удалить процедуру "qr_or_qr"
--
DROP PROCEDURE IF EXISTS qr_or_qr$$

--
-- Удалить процедуру "part_unlock"
--
DROP PROCEDURE IF EXISTS part_unlock$$

--
-- Удалить процедуру "part_save"
--
DROP PROCEDURE IF EXISTS part_save$$

--
-- Удалить процедуру "part_parent"
--
DROP PROCEDURE IF EXISTS part_parent$$

--
-- Удалить процедуру "part_logger"
--
DROP PROCEDURE IF EXISTS part_logger$$

--
-- Удалить процедуру "part_lock"
--
DROP PROCEDURE IF EXISTS part_lock$$

--
-- Удалить процедуру "part_islocked"
--
DROP PROCEDURE IF EXISTS part_islocked$$

--
-- Удалить процедуру "part_delete"
--
DROP PROCEDURE IF EXISTS part_delete$$

--
-- Удалить процедуру "part_copy"
--
DROP PROCEDURE IF EXISTS part_copy$$

--
-- Удалить процедуру "part_client_trigger"
--
DROP PROCEDURE IF EXISTS part_client_trigger$$

--
-- Удалить процедуру "part_brief"
--
DROP PROCEDURE IF EXISTS part_brief$$

--
-- Удалить процедуру "partview_unlock"
--
DROP PROCEDURE IF EXISTS partview_unlock$$

--
-- Удалить процедуру "partview_save"
--
DROP PROCEDURE IF EXISTS partview_save$$

--
-- Удалить процедуру "partview_parent"
--
DROP PROCEDURE IF EXISTS partview_parent$$

--
-- Удалить процедуру "partview_logger"
--
DROP PROCEDURE IF EXISTS partview_logger$$

--
-- Удалить процедуру "partview_lock"
--
DROP PROCEDURE IF EXISTS partview_lock$$

--
-- Удалить процедуру "partview_lnk_unlock"
--
DROP PROCEDURE IF EXISTS partview_lnk_unlock$$

--
-- Удалить процедуру "partview_lnk_save"
--
DROP PROCEDURE IF EXISTS partview_lnk_save$$

--
-- Удалить процедуру "partview_lnk_parent"
--
DROP PROCEDURE IF EXISTS partview_lnk_parent$$

--
-- Удалить процедуру "partview_lnk_logger"
--
DROP PROCEDURE IF EXISTS partview_lnk_logger$$

--
-- Удалить процедуру "partview_lnk_lock"
--
DROP PROCEDURE IF EXISTS partview_lnk_lock$$

--
-- Удалить процедуру "partview_lnk_islocked"
--
DROP PROCEDURE IF EXISTS partview_lnk_islocked$$

--
-- Удалить процедуру "partview_lnk_delete"
--
DROP PROCEDURE IF EXISTS partview_lnk_delete$$

--
-- Удалить процедуру "partview_lnk_copy"
--
DROP PROCEDURE IF EXISTS partview_lnk_copy$$

--
-- Удалить процедуру "partview_lnk_client_trigger"
--
DROP PROCEDURE IF EXISTS partview_lnk_client_trigger$$

--
-- Удалить процедуру "partview_lnk_brief"
--
DROP PROCEDURE IF EXISTS partview_lnk_brief$$

--
-- Удалить процедуру "partview_islocked"
--
DROP PROCEDURE IF EXISTS partview_islocked$$

--
-- Удалить процедуру "partview_delete"
--
DROP PROCEDURE IF EXISTS partview_delete$$

--
-- Удалить процедуру "partview_copy"
--
DROP PROCEDURE IF EXISTS partview_copy$$

--
-- Удалить процедуру "partview_client_trigger"
--
DROP PROCEDURE IF EXISTS partview_client_trigger$$

--
-- Удалить процедуру "partview_brief"
--
DROP PROCEDURE IF EXISTS partview_brief$$

--
-- Удалить процедуру "partparammap_unlock"
--
DROP PROCEDURE IF EXISTS partparammap_unlock$$

--
-- Удалить процедуру "partparammap_save"
--
DROP PROCEDURE IF EXISTS partparammap_save$$

--
-- Удалить процедуру "partparammap_parent"
--
DROP PROCEDURE IF EXISTS partparammap_parent$$

--
-- Удалить процедуру "partparammap_logger"
--
DROP PROCEDURE IF EXISTS partparammap_logger$$

--
-- Удалить процедуру "partparammap_lock"
--
DROP PROCEDURE IF EXISTS partparammap_lock$$

--
-- Удалить процедуру "partparammap_islocked"
--
DROP PROCEDURE IF EXISTS partparammap_islocked$$

--
-- Удалить процедуру "partparammap_delete"
--
DROP PROCEDURE IF EXISTS partparammap_delete$$

--
-- Удалить процедуру "partparammap_copy"
--
DROP PROCEDURE IF EXISTS partparammap_copy$$

--
-- Удалить процедуру "partparammap_client_trigger"
--
DROP PROCEDURE IF EXISTS partparammap_client_trigger$$

--
-- Удалить процедуру "partparammap_brief"
--
DROP PROCEDURE IF EXISTS partparammap_brief$$

--
-- Удалить процедуру "partmenu_unlock"
--
DROP PROCEDURE IF EXISTS partmenu_unlock$$

--
-- Удалить процедуру "partmenu_save"
--
DROP PROCEDURE IF EXISTS partmenu_save$$

--
-- Удалить процедуру "partmenu_parent"
--
DROP PROCEDURE IF EXISTS partmenu_parent$$

--
-- Удалить процедуру "partmenu_logger"
--
DROP PROCEDURE IF EXISTS partmenu_logger$$

--
-- Удалить процедуру "partmenu_lock"
--
DROP PROCEDURE IF EXISTS partmenu_lock$$

--
-- Удалить процедуру "partmenu_islocked"
--
DROP PROCEDURE IF EXISTS partmenu_islocked$$

--
-- Удалить процедуру "partmenu_delete"
--
DROP PROCEDURE IF EXISTS partmenu_delete$$

--
-- Удалить процедуру "partmenu_copy"
--
DROP PROCEDURE IF EXISTS partmenu_copy$$

--
-- Удалить процедуру "partmenu_client_trigger"
--
DROP PROCEDURE IF EXISTS partmenu_client_trigger$$

--
-- Удалить процедуру "partmenu_brief"
--
DROP PROCEDURE IF EXISTS partmenu_brief$$

--
-- Удалить процедуру "parentpackage_unlock"
--
DROP PROCEDURE IF EXISTS parentpackage_unlock$$

--
-- Удалить процедуру "parentpackage_save"
--
DROP PROCEDURE IF EXISTS parentpackage_save$$

--
-- Удалить процедуру "parentpackage_parent"
--
DROP PROCEDURE IF EXISTS parentpackage_parent$$

--
-- Удалить процедуру "parentpackage_logger"
--
DROP PROCEDURE IF EXISTS parentpackage_logger$$

--
-- Удалить процедуру "parentpackage_lock"
--
DROP PROCEDURE IF EXISTS parentpackage_lock$$

--
-- Удалить процедуру "parentpackage_islocked"
--
DROP PROCEDURE IF EXISTS parentpackage_islocked$$

--
-- Удалить процедуру "parentpackage_delete"
--
DROP PROCEDURE IF EXISTS parentpackage_delete$$

--
-- Удалить процедуру "parentpackage_copy"
--
DROP PROCEDURE IF EXISTS parentpackage_copy$$

--
-- Удалить процедуру "parentpackage_client_trigger"
--
DROP PROCEDURE IF EXISTS parentpackage_client_trigger$$

--
-- Удалить процедуру "parentpackage_brief"
--
DROP PROCEDURE IF EXISTS parentpackage_brief$$

--
-- Удалить процедуру "parameters_unlock"
--
DROP PROCEDURE IF EXISTS parameters_unlock$$

--
-- Удалить процедуру "parameters_save"
--
DROP PROCEDURE IF EXISTS parameters_save$$

--
-- Удалить процедуру "parameters_parent"
--
DROP PROCEDURE IF EXISTS parameters_parent$$

--
-- Удалить процедуру "parameters_logger"
--
DROP PROCEDURE IF EXISTS parameters_logger$$

--
-- Удалить процедуру "parameters_lock"
--
DROP PROCEDURE IF EXISTS parameters_lock$$

--
-- Удалить процедуру "parameters_islocked"
--
DROP PROCEDURE IF EXISTS parameters_islocked$$

--
-- Удалить процедуру "parameters_delete"
--
DROP PROCEDURE IF EXISTS parameters_delete$$

--
-- Удалить процедуру "parameters_copy"
--
DROP PROCEDURE IF EXISTS parameters_copy$$

--
-- Удалить процедуру "parameters_client_trigger"
--
DROP PROCEDURE IF EXISTS parameters_client_trigger$$

--
-- Удалить процедуру "parameters_brief"
--
DROP PROCEDURE IF EXISTS parameters_brief$$

--
-- Удалить процедуру "objstatus_unlock"
--
DROP PROCEDURE IF EXISTS objstatus_unlock$$

--
-- Удалить процедуру "objstatus_save"
--
DROP PROCEDURE IF EXISTS objstatus_save$$

--
-- Удалить процедуру "objstatus_parent"
--
DROP PROCEDURE IF EXISTS objstatus_parent$$

--
-- Удалить процедуру "objstatus_logger"
--
DROP PROCEDURE IF EXISTS objstatus_logger$$

--
-- Удалить процедуру "objstatus_lock"
--
DROP PROCEDURE IF EXISTS objstatus_lock$$

--
-- Удалить процедуру "objstatus_islocked"
--
DROP PROCEDURE IF EXISTS objstatus_islocked$$

--
-- Удалить процедуру "objstatus_delete"
--
DROP PROCEDURE IF EXISTS objstatus_delete$$

--
-- Удалить процедуру "objstatus_copy"
--
DROP PROCEDURE IF EXISTS objstatus_copy$$

--
-- Удалить процедуру "objstatus_client_trigger"
--
DROP PROCEDURE IF EXISTS objstatus_client_trigger$$

--
-- Удалить процедуру "objstatus_brief"
--
DROP PROCEDURE IF EXISTS objstatus_brief$$

--
-- Удалить процедуру "objecttype_unlock"
--
DROP PROCEDURE IF EXISTS objecttype_unlock$$

--
-- Удалить процедуру "objecttype_save"
--
DROP PROCEDURE IF EXISTS objecttype_save$$

--
-- Удалить процедуру "objecttype_parent"
--
DROP PROCEDURE IF EXISTS objecttype_parent$$

--
-- Удалить процедуру "objecttype_logger"
--
DROP PROCEDURE IF EXISTS objecttype_logger$$

--
-- Удалить процедуру "objecttype_lock"
--
DROP PROCEDURE IF EXISTS objecttype_lock$$

--
-- Удалить процедуру "objecttype_islocked"
--
DROP PROCEDURE IF EXISTS objecttype_islocked$$

--
-- Удалить процедуру "objecttype_delete"
--
DROP PROCEDURE IF EXISTS objecttype_delete$$

--
-- Удалить процедуру "objecttype_copy"
--
DROP PROCEDURE IF EXISTS objecttype_copy$$

--
-- Удалить процедуру "objecttype_client_trigger"
--
DROP PROCEDURE IF EXISTS objecttype_client_trigger$$

--
-- Удалить процедуру "objecttype_brief"
--
DROP PROCEDURE IF EXISTS objecttype_brief$$

--
-- Удалить процедуру "objectmode_unlock"
--
DROP PROCEDURE IF EXISTS objectmode_unlock$$

--
-- Удалить процедуру "objectmode_save"
--
DROP PROCEDURE IF EXISTS objectmode_save$$

--
-- Удалить процедуру "objectmode_parent"
--
DROP PROCEDURE IF EXISTS objectmode_parent$$

--
-- Удалить процедуру "objectmode_logger"
--
DROP PROCEDURE IF EXISTS objectmode_logger$$

--
-- Удалить процедуру "objectmode_lock"
--
DROP PROCEDURE IF EXISTS objectmode_lock$$

--
-- Удалить процедуру "objectmode_islocked"
--
DROP PROCEDURE IF EXISTS objectmode_islocked$$

--
-- Удалить процедуру "objectmode_delete"
--
DROP PROCEDURE IF EXISTS objectmode_delete$$

--
-- Удалить процедуру "objectmode_copy"
--
DROP PROCEDURE IF EXISTS objectmode_copy$$

--
-- Удалить процедуру "objectmode_client_trigger"
--
DROP PROCEDURE IF EXISTS objectmode_client_trigger$$

--
-- Удалить процедуру "objectmode_brief"
--
DROP PROCEDURE IF EXISTS objectmode_brief$$

--
-- Удалить процедуру "num_zones_unlock"
--
DROP PROCEDURE IF EXISTS num_zones_unlock$$

--
-- Удалить процедуру "num_zones_save"
--
DROP PROCEDURE IF EXISTS num_zones_save$$

--
-- Удалить процедуру "num_zones_parent"
--
DROP PROCEDURE IF EXISTS num_zones_parent$$

--
-- Удалить процедуру "num_zones_logger"
--
DROP PROCEDURE IF EXISTS num_zones_logger$$

--
-- Удалить процедуру "num_zones_lock"
--
DROP PROCEDURE IF EXISTS num_zones_lock$$

--
-- Удалить процедуру "num_zones_islocked"
--
DROP PROCEDURE IF EXISTS num_zones_islocked$$

--
-- Удалить процедуру "num_zones_delete"
--
DROP PROCEDURE IF EXISTS num_zones_delete$$

--
-- Удалить процедуру "num_zones_copy"
--
DROP PROCEDURE IF EXISTS num_zones_copy$$

--
-- Удалить процедуру "num_zones_client_trigger"
--
DROP PROCEDURE IF EXISTS num_zones_client_trigger$$

--
-- Удалить процедуру "num_zones_brief"
--
DROP PROCEDURE IF EXISTS num_zones_brief$$

--
-- Удалить процедуру "num_values_unlock"
--
DROP PROCEDURE IF EXISTS num_values_unlock$$

--
-- Удалить процедуру "num_values_save"
--
DROP PROCEDURE IF EXISTS num_values_save$$

--
-- Удалить процедуру "num_values_parent"
--
DROP PROCEDURE IF EXISTS num_values_parent$$

--
-- Удалить процедуру "num_values_logger"
--
DROP PROCEDURE IF EXISTS num_values_logger$$

--
-- Удалить процедуру "num_values_lock"
--
DROP PROCEDURE IF EXISTS num_values_lock$$

--
-- Удалить процедуру "num_values_islocked"
--
DROP PROCEDURE IF EXISTS num_values_islocked$$

--
-- Удалить процедуру "num_values_delete"
--
DROP PROCEDURE IF EXISTS num_values_delete$$

--
-- Удалить процедуру "num_values_copy"
--
DROP PROCEDURE IF EXISTS num_values_copy$$

--
-- Удалить процедуру "num_values_client_trigger"
--
DROP PROCEDURE IF EXISTS num_values_client_trigger$$

--
-- Удалить процедуру "num_values_brief"
--
DROP PROCEDURE IF EXISTS num_values_brief$$

--
-- Удалить процедуру "num_head_unlock"
--
DROP PROCEDURE IF EXISTS num_head_unlock$$

--
-- Удалить процедуру "num_head_save"
--
DROP PROCEDURE IF EXISTS num_head_save$$

--
-- Удалить процедуру "num_head_parent"
--
DROP PROCEDURE IF EXISTS num_head_parent$$

--
-- Удалить процедуру "num_head_logger"
--
DROP PROCEDURE IF EXISTS num_head_logger$$

--
-- Удалить процедуру "num_head_lock"
--
DROP PROCEDURE IF EXISTS num_head_lock$$

--
-- Удалить процедуру "num_head_islocked"
--
DROP PROCEDURE IF EXISTS num_head_islocked$$

--
-- Удалить процедуру "num_head_delete"
--
DROP PROCEDURE IF EXISTS num_head_delete$$

--
-- Удалить процедуру "num_head_copy"
--
DROP PROCEDURE IF EXISTS num_head_copy$$

--
-- Удалить процедуру "num_head_client_trigger"
--
DROP PROCEDURE IF EXISTS num_head_client_trigger$$

--
-- Удалить процедуру "num_head_brief"
--
DROP PROCEDURE IF EXISTS num_head_brief$$

--
-- Удалить процедуру "nextstate_unlock"
--
DROP PROCEDURE IF EXISTS nextstate_unlock$$

--
-- Удалить процедуру "nextstate_save"
--
DROP PROCEDURE IF EXISTS nextstate_save$$

--
-- Удалить процедуру "nextstate_parent"
--
DROP PROCEDURE IF EXISTS nextstate_parent$$

--
-- Удалить процедуру "nextstate_logger"
--
DROP PROCEDURE IF EXISTS nextstate_logger$$

--
-- Удалить процедуру "nextstate_lock"
--
DROP PROCEDURE IF EXISTS nextstate_lock$$

--
-- Удалить процедуру "nextstate_islocked"
--
DROP PROCEDURE IF EXISTS nextstate_islocked$$

--
-- Удалить процедуру "nextstate_delete"
--
DROP PROCEDURE IF EXISTS nextstate_delete$$

--
-- Удалить процедуру "nextstate_copy"
--
DROP PROCEDURE IF EXISTS nextstate_copy$$

--
-- Удалить процедуру "nextstate_client_trigger"
--
DROP PROCEDURE IF EXISTS nextstate_client_trigger$$

--
-- Удалить процедуру "nextstate_brief"
--
DROP PROCEDURE IF EXISTS nextstate_brief$$

--
-- Удалить процедуру "mtzwp_copy"
--
DROP PROCEDURE IF EXISTS mtzwp_copy$$

--
-- Удалить процедуру "mtzusers_copy"
--
DROP PROCEDURE IF EXISTS mtzusers_copy$$

--
-- Удалить процедуру "mtzsystem_copy"
--
DROP PROCEDURE IF EXISTS mtzsystem_copy$$

--
-- Удалить процедуру "mtzrprt_copy"
--
DROP PROCEDURE IF EXISTS mtzrprt_copy$$

--
-- Удалить процедуру "mtzmetamodel_copy"
--
DROP PROCEDURE IF EXISTS mtzmetamodel_copy$$

--
-- Удалить процедуру "mtzjrnl_copy"
--
DROP PROCEDURE IF EXISTS mtzjrnl_copy$$

--
-- Удалить процедуру "mtzfltr_copy"
--
DROP PROCEDURE IF EXISTS mtzfltr_copy$$

--
-- Удалить процедуру "mtzext_def_unlock"
--
DROP PROCEDURE IF EXISTS mtzext_def_unlock$$

--
-- Удалить процедуру "mtzext_def_save"
--
DROP PROCEDURE IF EXISTS mtzext_def_save$$

--
-- Удалить процедуру "mtzext_def_parent"
--
DROP PROCEDURE IF EXISTS mtzext_def_parent$$

--
-- Удалить процедуру "mtzext_def_logger"
--
DROP PROCEDURE IF EXISTS mtzext_def_logger$$

--
-- Удалить процедуру "mtzext_def_lock"
--
DROP PROCEDURE IF EXISTS mtzext_def_lock$$

--
-- Удалить процедуру "mtzext_def_islocked"
--
DROP PROCEDURE IF EXISTS mtzext_def_islocked$$

--
-- Удалить процедуру "mtzext_def_delete"
--
DROP PROCEDURE IF EXISTS mtzext_def_delete$$

--
-- Удалить процедуру "mtzext_def_copy"
--
DROP PROCEDURE IF EXISTS mtzext_def_copy$$

--
-- Удалить процедуру "mtzext_def_client_trigger"
--
DROP PROCEDURE IF EXISTS mtzext_def_client_trigger$$

--
-- Удалить процедуру "mtzext_def_brief"
--
DROP PROCEDURE IF EXISTS mtzext_def_brief$$

--
-- Удалить процедуру "mtzext_copy"
--
DROP PROCEDURE IF EXISTS mtzext_copy$$

--
-- Удалить процедуру "mtzextrel_unlock"
--
DROP PROCEDURE IF EXISTS mtzextrel_unlock$$

--
-- Удалить процедуру "mtzextrel_save"
--
DROP PROCEDURE IF EXISTS mtzextrel_save$$

--
-- Удалить процедуру "mtzextrel_parent"
--
DROP PROCEDURE IF EXISTS mtzextrel_parent$$

--
-- Удалить процедуру "mtzextrel_logger"
--
DROP PROCEDURE IF EXISTS mtzextrel_logger$$

--
-- Удалить процедуру "mtzextrel_lock"
--
DROP PROCEDURE IF EXISTS mtzextrel_lock$$

--
-- Удалить процедуру "mtzextrel_islocked"
--
DROP PROCEDURE IF EXISTS mtzextrel_islocked$$

--
-- Удалить процедуру "mtzextrel_delete"
--
DROP PROCEDURE IF EXISTS mtzextrel_delete$$

--
-- Удалить процедуру "mtzextrel_copy"
--
DROP PROCEDURE IF EXISTS mtzextrel_copy$$

--
-- Удалить процедуру "mtzextrel_client_trigger"
--
DROP PROCEDURE IF EXISTS mtzextrel_client_trigger$$

--
-- Удалить процедуру "mtzextrel_brief"
--
DROP PROCEDURE IF EXISTS mtzextrel_brief$$

--
-- Удалить процедуру "mtzapp_unlock"
--
DROP PROCEDURE IF EXISTS mtzapp_unlock$$

--
-- Удалить процедуру "mtzapp_save"
--
DROP PROCEDURE IF EXISTS mtzapp_save$$

--
-- Удалить процедуру "mtzapp_parent"
--
DROP PROCEDURE IF EXISTS mtzapp_parent$$

--
-- Удалить процедуру "mtzapp_logger"
--
DROP PROCEDURE IF EXISTS mtzapp_logger$$

--
-- Удалить процедуру "mtzapp_lock"
--
DROP PROCEDURE IF EXISTS mtzapp_lock$$

--
-- Удалить процедуру "mtzapp_islocked"
--
DROP PROCEDURE IF EXISTS mtzapp_islocked$$

--
-- Удалить процедуру "mtzapp_delete"
--
DROP PROCEDURE IF EXISTS mtzapp_delete$$

--
-- Удалить процедуру "mtzapp_copy"
--
DROP PROCEDURE IF EXISTS mtzapp_copy$$

--
-- Удалить процедуру "mtzapp_client_trigger"
--
DROP PROCEDURE IF EXISTS mtzapp_client_trigger$$

--
-- Удалить процедуру "mtzapp_brief"
--
DROP PROCEDURE IF EXISTS mtzapp_brief$$

--
-- Удалить процедуру "methodrestriction_unlock"
--
DROP PROCEDURE IF EXISTS methodrestriction_unlock$$

--
-- Удалить процедуру "methodrestriction_save"
--
DROP PROCEDURE IF EXISTS methodrestriction_save$$

--
-- Удалить процедуру "methodrestriction_parent"
--
DROP PROCEDURE IF EXISTS methodrestriction_parent$$

--
-- Удалить процедуру "methodrestriction_logger"
--
DROP PROCEDURE IF EXISTS methodrestriction_logger$$

--
-- Удалить процедуру "methodrestriction_lock"
--
DROP PROCEDURE IF EXISTS methodrestriction_lock$$

--
-- Удалить процедуру "methodrestriction_islocked"
--
DROP PROCEDURE IF EXISTS methodrestriction_islocked$$

--
-- Удалить процедуру "methodrestriction_delete"
--
DROP PROCEDURE IF EXISTS methodrestriction_delete$$

--
-- Удалить процедуру "methodrestriction_copy"
--
DROP PROCEDURE IF EXISTS methodrestriction_copy$$

--
-- Удалить процедуру "methodrestriction_client_trigger"
--
DROP PROCEDURE IF EXISTS methodrestriction_client_trigger$$

--
-- Удалить процедуру "methodrestriction_brief"
--
DROP PROCEDURE IF EXISTS methodrestriction_brief$$

--
-- Удалить процедуру "Logout"
--
DROP PROCEDURE IF EXISTS Logout$$

--
-- Удалить процедуру "Login"
--
DROP PROCEDURE IF EXISTS Login$$

--
-- Удалить процедуру "localizeinfo_unlock"
--
DROP PROCEDURE IF EXISTS localizeinfo_unlock$$

--
-- Удалить процедуру "localizeinfo_save"
--
DROP PROCEDURE IF EXISTS localizeinfo_save$$

--
-- Удалить процедуру "localizeinfo_parent"
--
DROP PROCEDURE IF EXISTS localizeinfo_parent$$

--
-- Удалить процедуру "localizeinfo_logger"
--
DROP PROCEDURE IF EXISTS localizeinfo_logger$$

--
-- Удалить процедуру "localizeinfo_lock"
--
DROP PROCEDURE IF EXISTS localizeinfo_lock$$

--
-- Удалить процедуру "localizeinfo_islocked"
--
DROP PROCEDURE IF EXISTS localizeinfo_islocked$$

--
-- Удалить процедуру "localizeinfo_delete"
--
DROP PROCEDURE IF EXISTS localizeinfo_delete$$

--
-- Удалить процедуру "localizeinfo_copy"
--
DROP PROCEDURE IF EXISTS localizeinfo_copy$$

--
-- Удалить процедуру "localizeinfo_client_trigger"
--
DROP PROCEDURE IF EXISTS localizeinfo_client_trigger$$

--
-- Удалить процедуру "localizeinfo_brief"
--
DROP PROCEDURE IF EXISTS localizeinfo_brief$$

--
-- Удалить процедуру "journal_unlock"
--
DROP PROCEDURE IF EXISTS journal_unlock$$

--
-- Удалить процедуру "journal_save"
--
DROP PROCEDURE IF EXISTS journal_save$$

--
-- Удалить процедуру "journal_parent"
--
DROP PROCEDURE IF EXISTS journal_parent$$

--
-- Удалить процедуру "journal_logger"
--
DROP PROCEDURE IF EXISTS journal_logger$$

--
-- Удалить процедуру "journal_lock"
--
DROP PROCEDURE IF EXISTS journal_lock$$

--
-- Удалить процедуру "journal_islocked"
--
DROP PROCEDURE IF EXISTS journal_islocked$$

--
-- Удалить процедуру "journal_delete"
--
DROP PROCEDURE IF EXISTS journal_delete$$

--
-- Удалить процедуру "journal_copy"
--
DROP PROCEDURE IF EXISTS journal_copy$$

--
-- Удалить процедуру "journal_client_trigger"
--
DROP PROCEDURE IF EXISTS journal_client_trigger$$

--
-- Удалить процедуру "journal_brief"
--
DROP PROCEDURE IF EXISTS journal_brief$$

--
-- Удалить процедуру "journalsrc_unlock"
--
DROP PROCEDURE IF EXISTS journalsrc_unlock$$

--
-- Удалить процедуру "journalsrc_save"
--
DROP PROCEDURE IF EXISTS journalsrc_save$$

--
-- Удалить процедуру "journalsrc_parent"
--
DROP PROCEDURE IF EXISTS journalsrc_parent$$

--
-- Удалить процедуру "journalsrc_logger"
--
DROP PROCEDURE IF EXISTS journalsrc_logger$$

--
-- Удалить процедуру "journalsrc_lock"
--
DROP PROCEDURE IF EXISTS journalsrc_lock$$

--
-- Удалить процедуру "journalsrc_islocked"
--
DROP PROCEDURE IF EXISTS journalsrc_islocked$$

--
-- Удалить процедуру "journalsrc_delete"
--
DROP PROCEDURE IF EXISTS journalsrc_delete$$

--
-- Удалить процедуру "journalsrc_copy"
--
DROP PROCEDURE IF EXISTS journalsrc_copy$$

--
-- Удалить процедуру "journalsrc_client_trigger"
--
DROP PROCEDURE IF EXISTS journalsrc_client_trigger$$

--
-- Удалить процедуру "journalsrc_brief"
--
DROP PROCEDURE IF EXISTS journalsrc_brief$$

--
-- Удалить процедуру "journalcolumn_unlock"
--
DROP PROCEDURE IF EXISTS journalcolumn_unlock$$

--
-- Удалить процедуру "journalcolumn_save"
--
DROP PROCEDURE IF EXISTS journalcolumn_save$$

--
-- Удалить процедуру "journalcolumn_parent"
--
DROP PROCEDURE IF EXISTS journalcolumn_parent$$

--
-- Удалить процедуру "journalcolumn_logger"
--
DROP PROCEDURE IF EXISTS journalcolumn_logger$$

--
-- Удалить процедуру "journalcolumn_lock"
--
DROP PROCEDURE IF EXISTS journalcolumn_lock$$

--
-- Удалить процедуру "journalcolumn_islocked"
--
DROP PROCEDURE IF EXISTS journalcolumn_islocked$$

--
-- Удалить процедуру "journalcolumn_delete"
--
DROP PROCEDURE IF EXISTS journalcolumn_delete$$

--
-- Удалить процедуру "journalcolumn_copy"
--
DROP PROCEDURE IF EXISTS journalcolumn_copy$$

--
-- Удалить процедуру "journalcolumn_client_trigger"
--
DROP PROCEDURE IF EXISTS journalcolumn_client_trigger$$

--
-- Удалить процедуру "journalcolumn_brief"
--
DROP PROCEDURE IF EXISTS journalcolumn_brief$$

--
-- Удалить процедуру "jcolumnsource_unlock"
--
DROP PROCEDURE IF EXISTS jcolumnsource_unlock$$

--
-- Удалить процедуру "jcolumnsource_save"
--
DROP PROCEDURE IF EXISTS jcolumnsource_save$$

--
-- Удалить процедуру "jcolumnsource_parent"
--
DROP PROCEDURE IF EXISTS jcolumnsource_parent$$

--
-- Удалить процедуру "jcolumnsource_logger"
--
DROP PROCEDURE IF EXISTS jcolumnsource_logger$$

--
-- Удалить процедуру "jcolumnsource_lock"
--
DROP PROCEDURE IF EXISTS jcolumnsource_lock$$

--
-- Удалить процедуру "jcolumnsource_islocked"
--
DROP PROCEDURE IF EXISTS jcolumnsource_islocked$$

--
-- Удалить процедуру "jcolumnsource_delete"
--
DROP PROCEDURE IF EXISTS jcolumnsource_delete$$

--
-- Удалить процедуру "jcolumnsource_copy"
--
DROP PROCEDURE IF EXISTS jcolumnsource_copy$$

--
-- Удалить процедуру "jcolumnsource_client_trigger"
--
DROP PROCEDURE IF EXISTS jcolumnsource_client_trigger$$

--
-- Удалить процедуру "jcolumnsource_brief"
--
DROP PROCEDURE IF EXISTS jcolumnsource_brief$$

--
-- Удалить процедуру "iu_u_def_unlock"
--
DROP PROCEDURE IF EXISTS iu_u_def_unlock$$

--
-- Удалить процедуру "iu_u_def_save"
--
DROP PROCEDURE IF EXISTS iu_u_def_save$$

--
-- Удалить процедуру "iu_u_def_parent"
--
DROP PROCEDURE IF EXISTS iu_u_def_parent$$

--
-- Удалить процедуру "iu_u_def_logger"
--
DROP PROCEDURE IF EXISTS iu_u_def_logger$$

--
-- Удалить процедуру "iu_u_def_lock"
--
DROP PROCEDURE IF EXISTS iu_u_def_lock$$

--
-- Удалить процедуру "iu_u_def_islocked"
--
DROP PROCEDURE IF EXISTS iu_u_def_islocked$$

--
-- Удалить процедуру "iu_u_def_gettotemp"
--
DROP PROCEDURE IF EXISTS iu_u_def_gettotemp$$

--
-- Удалить процедуру "iu_u_def_droptempdata"
--
DROP PROCEDURE IF EXISTS iu_u_def_droptempdata$$

--
-- Удалить процедуру "iu_u_def_delete"
--
DROP PROCEDURE IF EXISTS iu_u_def_delete$$

--
-- Удалить процедуру "iu_u_def_copy"
--
DROP PROCEDURE IF EXISTS iu_u_def_copy$$

--
-- Удалить процедуру "iu_u_def_commitfromtemp"
--
DROP PROCEDURE IF EXISTS iu_u_def_commitfromtemp$$

--
-- Удалить процедуру "iu_u_def_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_u_def_client_trigger$$

--
-- Удалить процедуру "iu_u_def_brief"
--
DROP PROCEDURE IF EXISTS iu_u_def_brief$$

--
-- Удалить процедуру "iu_rcfg_mod_unlock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_unlock$$

--
-- Удалить процедуру "iu_rcfg_mod_save"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_save$$

--
-- Удалить процедуру "iu_rcfg_mod_parent"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_parent$$

--
-- Удалить процедуру "iu_rcfg_mod_logger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_logger$$

--
-- Удалить процедуру "iu_rcfg_mod_lock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_lock$$

--
-- Удалить процедуру "iu_rcfg_mod_islocked"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_islocked$$

--
-- Удалить процедуру "iu_rcfg_mod_delete"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_delete$$

--
-- Удалить процедуру "iu_rcfg_mod_copy"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_copy$$

--
-- Удалить процедуру "iu_rcfg_mod_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_client_trigger$$

--
-- Удалить процедуру "iu_rcfg_mod_brief"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_brief$$

--
-- Удалить процедуру "iu_rcfg_docmode_unlock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_unlock$$

--
-- Удалить процедуру "iu_rcfg_docmode_save"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_save$$

--
-- Удалить процедуру "iu_rcfg_docmode_parent"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_parent$$

--
-- Удалить процедуру "iu_rcfg_docmode_logger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_logger$$

--
-- Удалить процедуру "iu_rcfg_docmode_lock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_lock$$

--
-- Удалить процедуру "iu_rcfg_docmode_islocked"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_islocked$$

--
-- Удалить процедуру "iu_rcfg_docmode_delete"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_delete$$

--
-- Удалить процедуру "iu_rcfg_docmode_copy"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_copy$$

--
-- Удалить процедуру "iu_rcfg_docmode_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_client_trigger$$

--
-- Удалить процедуру "iu_rcfg_docmode_brief"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_brief$$

--
-- Удалить процедуру "iu_rcfg_def_unlock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_unlock$$

--
-- Удалить процедуру "iu_rcfg_def_save"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_save$$

--
-- Удалить процедуру "iu_rcfg_def_parent"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_parent$$

--
-- Удалить процедуру "iu_rcfg_def_logger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_logger$$

--
-- Удалить процедуру "iu_rcfg_def_lock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_lock$$

--
-- Удалить процедуру "iu_rcfg_def_islocked"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_islocked$$

--
-- Удалить процедуру "iu_rcfg_def_delete"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_delete$$

--
-- Удалить процедуру "iu_rcfg_def_copy"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_copy$$

--
-- Удалить процедуру "iu_rcfg_def_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_client_trigger$$

--
-- Удалить процедуру "iu_rcfg_def_brief"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_brief$$

--
-- Удалить процедуру "iu_rcfg_def_archive"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_archive$$

--
-- Удалить процедуру "iu_int_modules_unlock"
--
DROP PROCEDURE IF EXISTS iu_int_modules_unlock$$

--
-- Удалить процедуру "iu_int_modules_save"
--
DROP PROCEDURE IF EXISTS iu_int_modules_save$$

--
-- Удалить процедуру "iu_int_modules_parent"
--
DROP PROCEDURE IF EXISTS iu_int_modules_parent$$

--
-- Удалить процедуру "iu_int_modules_logger"
--
DROP PROCEDURE IF EXISTS iu_int_modules_logger$$

--
-- Удалить процедуру "iu_int_modules_lock"
--
DROP PROCEDURE IF EXISTS iu_int_modules_lock$$

--
-- Удалить процедуру "iu_int_modules_islocked"
--
DROP PROCEDURE IF EXISTS iu_int_modules_islocked$$

--
-- Удалить процедуру "iu_int_modules_delete"
--
DROP PROCEDURE IF EXISTS iu_int_modules_delete$$

--
-- Удалить процедуру "iu_int_modules_copy"
--
DROP PROCEDURE IF EXISTS iu_int_modules_copy$$

--
-- Удалить процедуру "iu_int_modules_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_int_modules_client_trigger$$

--
-- Удалить процедуру "iu_int_modules_brief"
--
DROP PROCEDURE IF EXISTS iu_int_modules_brief$$

--
-- Удалить процедуру "iu_crole_unlock"
--
DROP PROCEDURE IF EXISTS iu_crole_unlock$$

--
-- Удалить процедуру "iu_crole_save"
--
DROP PROCEDURE IF EXISTS iu_crole_save$$

--
-- Удалить процедуру "iu_crole_parent"
--
DROP PROCEDURE IF EXISTS iu_crole_parent$$

--
-- Удалить процедуру "iu_crole_logger"
--
DROP PROCEDURE IF EXISTS iu_crole_logger$$

--
-- Удалить процедуру "iu_crole_lock"
--
DROP PROCEDURE IF EXISTS iu_crole_lock$$

--
-- Удалить процедуру "iu_crole_islocked"
--
DROP PROCEDURE IF EXISTS iu_crole_islocked$$

--
-- Удалить процедуру "iu_crole_delete"
--
DROP PROCEDURE IF EXISTS iu_crole_delete$$

--
-- Удалить процедуру "iu_crole_copy"
--
DROP PROCEDURE IF EXISTS iu_crole_copy$$

--
-- Удалить процедуру "iu_crole_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_crole_client_trigger$$

--
-- Удалить процедуру "iu_crole_brief"
--
DROP PROCEDURE IF EXISTS iu_crole_brief$$

--
-- Удалить процедуру "iu_crole_archive"
--
DROP PROCEDURE IF EXISTS iu_crole_archive$$

--
-- Удалить процедуру "instance_unlock"
--
DROP PROCEDURE IF EXISTS instance_unlock$$

--
-- Удалить процедуру "instance_save"
--
DROP PROCEDURE IF EXISTS instance_save$$

--
-- Удалить процедуру "instance_rearchive"
--
DROP PROCEDURE IF EXISTS instance_rearchive$$

--
-- Удалить процедуру "instance_owner"
--
DROP PROCEDURE IF EXISTS instance_owner$$

--
-- Удалить процедуру "instance_lock"
--
DROP PROCEDURE IF EXISTS instance_lock$$

--
-- Удалить процедуру "instance_islocked"
--
DROP PROCEDURE IF EXISTS instance_islocked$$

--
-- Удалить процедуру "instance_hcl"
--
DROP PROCEDURE IF EXISTS instance_hcl$$

--
-- Удалить процедуру "instance_delete"
--
DROP PROCEDURE IF EXISTS instance_delete$$

--
-- Удалить процедуру "instance_brief"
--
DROP PROCEDURE IF EXISTS instance_brief$$

--
-- Удалить процедуру "instance_archive"
--
DROP PROCEDURE IF EXISTS instance_archive$$

--
-- Удалить процедуру "instancevalidator_unlock"
--
DROP PROCEDURE IF EXISTS instancevalidator_unlock$$

--
-- Удалить процедуру "instancevalidator_save"
--
DROP PROCEDURE IF EXISTS instancevalidator_save$$

--
-- Удалить процедуру "instancevalidator_parent"
--
DROP PROCEDURE IF EXISTS instancevalidator_parent$$

--
-- Удалить процедуру "instancevalidator_logger"
--
DROP PROCEDURE IF EXISTS instancevalidator_logger$$

--
-- Удалить процедуру "instancevalidator_lock"
--
DROP PROCEDURE IF EXISTS instancevalidator_lock$$

--
-- Удалить процедуру "instancevalidator_islocked"
--
DROP PROCEDURE IF EXISTS instancevalidator_islocked$$

--
-- Удалить процедуру "instancevalidator_delete"
--
DROP PROCEDURE IF EXISTS instancevalidator_delete$$

--
-- Удалить процедуру "instancevalidator_copy"
--
DROP PROCEDURE IF EXISTS instancevalidator_copy$$

--
-- Удалить процедуру "instancevalidator_client_trigger"
--
DROP PROCEDURE IF EXISTS instancevalidator_client_trigger$$

--
-- Удалить процедуру "instancevalidator_brief"
--
DROP PROCEDURE IF EXISTS instancevalidator_brief$$

--
-- Удалить процедуру "init"
--
DROP PROCEDURE IF EXISTS init$$

--
-- Удалить процедуру "groupuser_unlock"
--
DROP PROCEDURE IF EXISTS groupuser_unlock$$

--
-- Удалить процедуру "groupuser_save"
--
DROP PROCEDURE IF EXISTS groupuser_save$$

--
-- Удалить процедуру "groupuser_parent"
--
DROP PROCEDURE IF EXISTS groupuser_parent$$

--
-- Удалить процедуру "groupuser_logger"
--
DROP PROCEDURE IF EXISTS groupuser_logger$$

--
-- Удалить процедуру "groupuser_lock"
--
DROP PROCEDURE IF EXISTS groupuser_lock$$

--
-- Удалить процедуру "groupuser_islocked"
--
DROP PROCEDURE IF EXISTS groupuser_islocked$$

--
-- Удалить процедуру "groupuser_delete"
--
DROP PROCEDURE IF EXISTS groupuser_delete$$

--
-- Удалить процедуру "groupuser_copy"
--
DROP PROCEDURE IF EXISTS groupuser_copy$$

--
-- Удалить процедуру "groupuser_client_trigger"
--
DROP PROCEDURE IF EXISTS groupuser_client_trigger$$

--
-- Удалить процедуру "groupuser_brief"
--
DROP PROCEDURE IF EXISTS groupuser_brief$$

--
-- Удалить процедуру "groups_unlock"
--
DROP PROCEDURE IF EXISTS groups_unlock$$

--
-- Удалить процедуру "groups_save"
--
DROP PROCEDURE IF EXISTS groups_save$$

--
-- Удалить процедуру "groups_parent"
--
DROP PROCEDURE IF EXISTS groups_parent$$

--
-- Удалить процедуру "groups_logger"
--
DROP PROCEDURE IF EXISTS groups_logger$$

--
-- Удалить процедуру "groups_lock"
--
DROP PROCEDURE IF EXISTS groups_lock$$

--
-- Удалить процедуру "groups_islocked"
--
DROP PROCEDURE IF EXISTS groups_islocked$$

--
-- Удалить процедуру "groups_delete"
--
DROP PROCEDURE IF EXISTS groups_delete$$

--
-- Удалить процедуру "groups_copy"
--
DROP PROCEDURE IF EXISTS groups_copy$$

--
-- Удалить процедуру "groups_client_trigger"
--
DROP PROCEDURE IF EXISTS groups_client_trigger$$

--
-- Удалить процедуру "groups_brief"
--
DROP PROCEDURE IF EXISTS groups_brief$$

--
-- Удалить процедуру "GetServerTime"
--
DROP PROCEDURE IF EXISTS GetServerTime$$

--
-- Удалить процедуру "genreference_unlock"
--
DROP PROCEDURE IF EXISTS genreference_unlock$$

--
-- Удалить процедуру "genreference_save"
--
DROP PROCEDURE IF EXISTS genreference_save$$

--
-- Удалить процедуру "genreference_parent"
--
DROP PROCEDURE IF EXISTS genreference_parent$$

--
-- Удалить процедуру "genreference_logger"
--
DROP PROCEDURE IF EXISTS genreference_logger$$

--
-- Удалить процедуру "genreference_lock"
--
DROP PROCEDURE IF EXISTS genreference_lock$$

--
-- Удалить процедуру "genreference_islocked"
--
DROP PROCEDURE IF EXISTS genreference_islocked$$

--
-- Удалить процедуру "genreference_delete"
--
DROP PROCEDURE IF EXISTS genreference_delete$$

--
-- Удалить процедуру "genreference_copy"
--
DROP PROCEDURE IF EXISTS genreference_copy$$

--
-- Удалить процедуру "genreference_client_trigger"
--
DROP PROCEDURE IF EXISTS genreference_client_trigger$$

--
-- Удалить процедуру "genreference_brief"
--
DROP PROCEDURE IF EXISTS genreference_brief$$

--
-- Удалить процедуру "genpackage_unlock"
--
DROP PROCEDURE IF EXISTS genpackage_unlock$$

--
-- Удалить процедуру "genpackage_save"
--
DROP PROCEDURE IF EXISTS genpackage_save$$

--
-- Удалить процедуру "genpackage_parent"
--
DROP PROCEDURE IF EXISTS genpackage_parent$$

--
-- Удалить процедуру "genpackage_logger"
--
DROP PROCEDURE IF EXISTS genpackage_logger$$

--
-- Удалить процедуру "genpackage_lock"
--
DROP PROCEDURE IF EXISTS genpackage_lock$$

--
-- Удалить процедуру "genpackage_islocked"
--
DROP PROCEDURE IF EXISTS genpackage_islocked$$

--
-- Удалить процедуру "genpackage_delete"
--
DROP PROCEDURE IF EXISTS genpackage_delete$$

--
-- Удалить процедуру "genpackage_copy"
--
DROP PROCEDURE IF EXISTS genpackage_copy$$

--
-- Удалить процедуру "genpackage_client_trigger"
--
DROP PROCEDURE IF EXISTS genpackage_client_trigger$$

--
-- Удалить процедуру "genpackage_brief"
--
DROP PROCEDURE IF EXISTS genpackage_brief$$

--
-- Удалить процедуру "genmanualcode_unlock"
--
DROP PROCEDURE IF EXISTS genmanualcode_unlock$$

--
-- Удалить процедуру "genmanualcode_save"
--
DROP PROCEDURE IF EXISTS genmanualcode_save$$

--
-- Удалить процедуру "genmanualcode_parent"
--
DROP PROCEDURE IF EXISTS genmanualcode_parent$$

--
-- Удалить процедуру "genmanualcode_logger"
--
DROP PROCEDURE IF EXISTS genmanualcode_logger$$

--
-- Удалить процедуру "genmanualcode_lock"
--
DROP PROCEDURE IF EXISTS genmanualcode_lock$$

--
-- Удалить процедуру "genmanualcode_islocked"
--
DROP PROCEDURE IF EXISTS genmanualcode_islocked$$

--
-- Удалить процедуру "genmanualcode_delete"
--
DROP PROCEDURE IF EXISTS genmanualcode_delete$$

--
-- Удалить процедуру "genmanualcode_copy"
--
DROP PROCEDURE IF EXISTS genmanualcode_copy$$

--
-- Удалить процедуру "genmanualcode_client_trigger"
--
DROP PROCEDURE IF EXISTS genmanualcode_client_trigger$$

--
-- Удалить процедуру "genmanualcode_brief"
--
DROP PROCEDURE IF EXISTS genmanualcode_brief$$

--
-- Удалить процедуру "generator_target_unlock"
--
DROP PROCEDURE IF EXISTS generator_target_unlock$$

--
-- Удалить процедуру "generator_target_save"
--
DROP PROCEDURE IF EXISTS generator_target_save$$

--
-- Удалить процедуру "generator_target_parent"
--
DROP PROCEDURE IF EXISTS generator_target_parent$$

--
-- Удалить процедуру "generator_target_logger"
--
DROP PROCEDURE IF EXISTS generator_target_logger$$

--
-- Удалить процедуру "generator_target_lock"
--
DROP PROCEDURE IF EXISTS generator_target_lock$$

--
-- Удалить процедуру "generator_target_islocked"
--
DROP PROCEDURE IF EXISTS generator_target_islocked$$

--
-- Удалить процедуру "generator_target_delete"
--
DROP PROCEDURE IF EXISTS generator_target_delete$$

--
-- Удалить процедуру "generator_target_copy"
--
DROP PROCEDURE IF EXISTS generator_target_copy$$

--
-- Удалить процедуру "generator_target_client_trigger"
--
DROP PROCEDURE IF EXISTS generator_target_client_trigger$$

--
-- Удалить процедуру "generator_target_brief"
--
DROP PROCEDURE IF EXISTS generator_target_brief$$

--
-- Удалить процедуру "gencontrols_unlock"
--
DROP PROCEDURE IF EXISTS gencontrols_unlock$$

--
-- Удалить процедуру "gencontrols_save"
--
DROP PROCEDURE IF EXISTS gencontrols_save$$

--
-- Удалить процедуру "gencontrols_parent"
--
DROP PROCEDURE IF EXISTS gencontrols_parent$$

--
-- Удалить процедуру "gencontrols_logger"
--
DROP PROCEDURE IF EXISTS gencontrols_logger$$

--
-- Удалить процедуру "gencontrols_lock"
--
DROP PROCEDURE IF EXISTS gencontrols_lock$$

--
-- Удалить процедуру "gencontrols_islocked"
--
DROP PROCEDURE IF EXISTS gencontrols_islocked$$

--
-- Удалить процедуру "gencontrols_delete"
--
DROP PROCEDURE IF EXISTS gencontrols_delete$$

--
-- Удалить процедуру "gencontrols_copy"
--
DROP PROCEDURE IF EXISTS gencontrols_copy$$

--
-- Удалить процедуру "gencontrols_client_trigger"
--
DROP PROCEDURE IF EXISTS gencontrols_client_trigger$$

--
-- Удалить процедуру "gencontrols_brief"
--
DROP PROCEDURE IF EXISTS gencontrols_brief$$

--
-- Удалить процедуру "fldextenders_unlock"
--
DROP PROCEDURE IF EXISTS fldextenders_unlock$$

--
-- Удалить процедуру "fldextenders_save"
--
DROP PROCEDURE IF EXISTS fldextenders_save$$

--
-- Удалить процедуру "fldextenders_parent"
--
DROP PROCEDURE IF EXISTS fldextenders_parent$$

--
-- Удалить процедуру "fldextenders_logger"
--
DROP PROCEDURE IF EXISTS fldextenders_logger$$

--
-- Удалить процедуру "fldextenders_lock"
--
DROP PROCEDURE IF EXISTS fldextenders_lock$$

--
-- Удалить процедуру "fldextenders_islocked"
--
DROP PROCEDURE IF EXISTS fldextenders_islocked$$

--
-- Удалить процедуру "fldextenders_delete"
--
DROP PROCEDURE IF EXISTS fldextenders_delete$$

--
-- Удалить процедуру "fldextenders_copy"
--
DROP PROCEDURE IF EXISTS fldextenders_copy$$

--
-- Удалить процедуру "fldextenders_client_trigger"
--
DROP PROCEDURE IF EXISTS fldextenders_client_trigger$$

--
-- Удалить процедуру "fldextenders_brief"
--
DROP PROCEDURE IF EXISTS fldextenders_brief$$

--
-- Удалить процедуру "filters_unlock"
--
DROP PROCEDURE IF EXISTS filters_unlock$$

--
-- Удалить процедуру "filters_save"
--
DROP PROCEDURE IF EXISTS filters_save$$

--
-- Удалить процедуру "filters_parent"
--
DROP PROCEDURE IF EXISTS filters_parent$$

--
-- Удалить процедуру "filters_logger"
--
DROP PROCEDURE IF EXISTS filters_logger$$

--
-- Удалить процедуру "filters_lock"
--
DROP PROCEDURE IF EXISTS filters_lock$$

--
-- Удалить процедуру "filters_islocked"
--
DROP PROCEDURE IF EXISTS filters_islocked$$

--
-- Удалить процедуру "filters_delete"
--
DROP PROCEDURE IF EXISTS filters_delete$$

--
-- Удалить процедуру "filters_copy"
--
DROP PROCEDURE IF EXISTS filters_copy$$

--
-- Удалить процедуру "filters_client_trigger"
--
DROP PROCEDURE IF EXISTS filters_client_trigger$$

--
-- Удалить процедуру "filters_brief"
--
DROP PROCEDURE IF EXISTS filters_brief$$

--
-- Удалить процедуру "filterfieldgroup_unlock"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_unlock$$

--
-- Удалить процедуру "filterfieldgroup_save"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_save$$

--
-- Удалить процедуру "filterfieldgroup_parent"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_parent$$

--
-- Удалить процедуру "filterfieldgroup_logger"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_logger$$

--
-- Удалить процедуру "filterfieldgroup_lock"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_lock$$

--
-- Удалить процедуру "filterfieldgroup_islocked"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_islocked$$

--
-- Удалить процедуру "filterfieldgroup_delete"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_delete$$

--
-- Удалить процедуру "filterfieldgroup_copy"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_copy$$

--
-- Удалить процедуру "filterfieldgroup_client_trigger"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_client_trigger$$

--
-- Удалить процедуру "filterfieldgroup_brief"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_brief$$

--
-- Удалить процедуру "fileterfield_unlock"
--
DROP PROCEDURE IF EXISTS fileterfield_unlock$$

--
-- Удалить процедуру "fileterfield_save"
--
DROP PROCEDURE IF EXISTS fileterfield_save$$

--
-- Удалить процедуру "fileterfield_parent"
--
DROP PROCEDURE IF EXISTS fileterfield_parent$$

--
-- Удалить процедуру "fileterfield_logger"
--
DROP PROCEDURE IF EXISTS fileterfield_logger$$

--
-- Удалить процедуру "fileterfield_lock"
--
DROP PROCEDURE IF EXISTS fileterfield_lock$$

--
-- Удалить процедуру "fileterfield_islocked"
--
DROP PROCEDURE IF EXISTS fileterfield_islocked$$

--
-- Удалить процедуру "fileterfield_delete"
--
DROP PROCEDURE IF EXISTS fileterfield_delete$$

--
-- Удалить процедуру "fileterfield_copy"
--
DROP PROCEDURE IF EXISTS fileterfield_copy$$

--
-- Удалить процедуру "fileterfield_client_trigger"
--
DROP PROCEDURE IF EXISTS fileterfield_client_trigger$$

--
-- Удалить процедуру "fileterfield_brief"
--
DROP PROCEDURE IF EXISTS fileterfield_brief$$

--
-- Удалить процедуру "field_unlock"
--
DROP PROCEDURE IF EXISTS field_unlock$$

--
-- Удалить процедуру "field_save"
--
DROP PROCEDURE IF EXISTS field_save$$

--
-- Удалить процедуру "field_parent"
--
DROP PROCEDURE IF EXISTS field_parent$$

--
-- Удалить процедуру "field_logger"
--
DROP PROCEDURE IF EXISTS field_logger$$

--
-- Удалить процедуру "field_lock"
--
DROP PROCEDURE IF EXISTS field_lock$$

--
-- Удалить процедуру "field_islocked"
--
DROP PROCEDURE IF EXISTS field_islocked$$

--
-- Удалить процедуру "field_delete"
--
DROP PROCEDURE IF EXISTS field_delete$$

--
-- Удалить процедуру "field_copy"
--
DROP PROCEDURE IF EXISTS field_copy$$

--
-- Удалить процедуру "field_client_trigger"
--
DROP PROCEDURE IF EXISTS field_client_trigger$$

--
-- Удалить процедуру "field_brief"
--
DROP PROCEDURE IF EXISTS field_brief$$

--
-- Удалить процедуру "fieldvalidator_unlock"
--
DROP PROCEDURE IF EXISTS fieldvalidator_unlock$$

--
-- Удалить процедуру "fieldvalidator_save"
--
DROP PROCEDURE IF EXISTS fieldvalidator_save$$

--
-- Удалить процедуру "fieldvalidator_parent"
--
DROP PROCEDURE IF EXISTS fieldvalidator_parent$$

--
-- Удалить процедуру "fieldvalidator_logger"
--
DROP PROCEDURE IF EXISTS fieldvalidator_logger$$

--
-- Удалить процедуру "fieldvalidator_lock"
--
DROP PROCEDURE IF EXISTS fieldvalidator_lock$$

--
-- Удалить процедуру "fieldvalidator_islocked"
--
DROP PROCEDURE IF EXISTS fieldvalidator_islocked$$

--
-- Удалить процедуру "fieldvalidator_delete"
--
DROP PROCEDURE IF EXISTS fieldvalidator_delete$$

--
-- Удалить процедуру "fieldvalidator_copy"
--
DROP PROCEDURE IF EXISTS fieldvalidator_copy$$

--
-- Удалить процедуру "fieldvalidator_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldvalidator_client_trigger$$

--
-- Удалить процедуру "fieldvalidator_brief"
--
DROP PROCEDURE IF EXISTS fieldvalidator_brief$$

--
-- Удалить процедуру "fieldtype_unlock"
--
DROP PROCEDURE IF EXISTS fieldtype_unlock$$

--
-- Удалить процедуру "fieldtype_save"
--
DROP PROCEDURE IF EXISTS fieldtype_save$$

--
-- Удалить процедуру "fieldtype_parent"
--
DROP PROCEDURE IF EXISTS fieldtype_parent$$

--
-- Удалить процедуру "fieldtype_logger"
--
DROP PROCEDURE IF EXISTS fieldtype_logger$$

--
-- Удалить процедуру "fieldtype_lock"
--
DROP PROCEDURE IF EXISTS fieldtype_lock$$

--
-- Удалить процедуру "fieldtype_islocked"
--
DROP PROCEDURE IF EXISTS fieldtype_islocked$$

--
-- Удалить процедуру "fieldtype_delete"
--
DROP PROCEDURE IF EXISTS fieldtype_delete$$

--
-- Удалить процедуру "fieldtype_copy"
--
DROP PROCEDURE IF EXISTS fieldtype_copy$$

--
-- Удалить процедуру "fieldtype_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldtype_client_trigger$$

--
-- Удалить процедуру "fieldtype_brief"
--
DROP PROCEDURE IF EXISTS fieldtype_brief$$

--
-- Удалить процедуру "fieldtypemap_unlock"
--
DROP PROCEDURE IF EXISTS fieldtypemap_unlock$$

--
-- Удалить процедуру "fieldtypemap_save"
--
DROP PROCEDURE IF EXISTS fieldtypemap_save$$

--
-- Удалить процедуру "fieldtypemap_parent"
--
DROP PROCEDURE IF EXISTS fieldtypemap_parent$$

--
-- Удалить процедуру "fieldtypemap_logger"
--
DROP PROCEDURE IF EXISTS fieldtypemap_logger$$

--
-- Удалить процедуру "fieldtypemap_lock"
--
DROP PROCEDURE IF EXISTS fieldtypemap_lock$$

--
-- Удалить процедуру "fieldtypemap_islocked"
--
DROP PROCEDURE IF EXISTS fieldtypemap_islocked$$

--
-- Удалить процедуру "fieldtypemap_delete"
--
DROP PROCEDURE IF EXISTS fieldtypemap_delete$$

--
-- Удалить процедуру "fieldtypemap_copy"
--
DROP PROCEDURE IF EXISTS fieldtypemap_copy$$

--
-- Удалить процедуру "fieldtypemap_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldtypemap_client_trigger$$

--
-- Удалить процедуру "fieldtypemap_brief"
--
DROP PROCEDURE IF EXISTS fieldtypemap_brief$$

--
-- Удалить процедуру "fieldsrcdef_unlock"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_unlock$$

--
-- Удалить процедуру "fieldsrcdef_save"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_save$$

--
-- Удалить процедуру "fieldsrcdef_parent"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_parent$$

--
-- Удалить процедуру "fieldsrcdef_logger"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_logger$$

--
-- Удалить процедуру "fieldsrcdef_lock"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_lock$$

--
-- Удалить процедуру "fieldsrcdef_islocked"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_islocked$$

--
-- Удалить процедуру "fieldsrcdef_delete"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_delete$$

--
-- Удалить процедуру "fieldsrcdef_copy"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_copy$$

--
-- Удалить процедуру "fieldsrcdef_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_client_trigger$$

--
-- Удалить процедуру "fieldsrcdef_brief"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_brief$$

--
-- Удалить процедуру "fieldrestriction_unlock"
--
DROP PROCEDURE IF EXISTS fieldrestriction_unlock$$

--
-- Удалить процедуру "fieldrestriction_save"
--
DROP PROCEDURE IF EXISTS fieldrestriction_save$$

--
-- Удалить процедуру "fieldrestriction_parent"
--
DROP PROCEDURE IF EXISTS fieldrestriction_parent$$

--
-- Удалить процедуру "fieldrestriction_logger"
--
DROP PROCEDURE IF EXISTS fieldrestriction_logger$$

--
-- Удалить процедуру "fieldrestriction_lock"
--
DROP PROCEDURE IF EXISTS fieldrestriction_lock$$

--
-- Удалить процедуру "fieldrestriction_islocked"
--
DROP PROCEDURE IF EXISTS fieldrestriction_islocked$$

--
-- Удалить процедуру "fieldrestriction_delete"
--
DROP PROCEDURE IF EXISTS fieldrestriction_delete$$

--
-- Удалить процедуру "fieldrestriction_copy"
--
DROP PROCEDURE IF EXISTS fieldrestriction_copy$$

--
-- Удалить процедуру "fieldrestriction_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldrestriction_client_trigger$$

--
-- Удалить процедуру "fieldrestriction_brief"
--
DROP PROCEDURE IF EXISTS fieldrestriction_brief$$

--
-- Удалить процедуру "fieldparammap_unlock"
--
DROP PROCEDURE IF EXISTS fieldparammap_unlock$$

--
-- Удалить процедуру "fieldparammap_save"
--
DROP PROCEDURE IF EXISTS fieldparammap_save$$

--
-- Удалить процедуру "fieldparammap_parent"
--
DROP PROCEDURE IF EXISTS fieldparammap_parent$$

--
-- Удалить процедуру "fieldparammap_logger"
--
DROP PROCEDURE IF EXISTS fieldparammap_logger$$

--
-- Удалить процедуру "fieldparammap_lock"
--
DROP PROCEDURE IF EXISTS fieldparammap_lock$$

--
-- Удалить процедуру "fieldparammap_islocked"
--
DROP PROCEDURE IF EXISTS fieldparammap_islocked$$

--
-- Удалить процедуру "fieldparammap_delete"
--
DROP PROCEDURE IF EXISTS fieldparammap_delete$$

--
-- Удалить процедуру "fieldparammap_copy"
--
DROP PROCEDURE IF EXISTS fieldparammap_copy$$

--
-- Удалить процедуру "fieldparammap_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldparammap_client_trigger$$

--
-- Удалить процедуру "fieldparammap_brief"
--
DROP PROCEDURE IF EXISTS fieldparammap_brief$$

--
-- Удалить процедуру "fieldmenu_unlock"
--
DROP PROCEDURE IF EXISTS fieldmenu_unlock$$

--
-- Удалить процедуру "fieldmenu_save"
--
DROP PROCEDURE IF EXISTS fieldmenu_save$$

--
-- Удалить процедуру "fieldmenu_parent"
--
DROP PROCEDURE IF EXISTS fieldmenu_parent$$

--
-- Удалить процедуру "fieldmenu_logger"
--
DROP PROCEDURE IF EXISTS fieldmenu_logger$$

--
-- Удалить процедуру "fieldmenu_lock"
--
DROP PROCEDURE IF EXISTS fieldmenu_lock$$

--
-- Удалить процедуру "fieldmenu_islocked"
--
DROP PROCEDURE IF EXISTS fieldmenu_islocked$$

--
-- Удалить процедуру "fieldmenu_delete"
--
DROP PROCEDURE IF EXISTS fieldmenu_delete$$

--
-- Удалить процедуру "fieldmenu_copy"
--
DROP PROCEDURE IF EXISTS fieldmenu_copy$$

--
-- Удалить процедуру "fieldmenu_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldmenu_client_trigger$$

--
-- Удалить процедуру "fieldmenu_brief"
--
DROP PROCEDURE IF EXISTS fieldmenu_brief$$

--
-- Удалить процедуру "fieldexpression_unlock"
--
DROP PROCEDURE IF EXISTS fieldexpression_unlock$$

--
-- Удалить процедуру "fieldexpression_save"
--
DROP PROCEDURE IF EXISTS fieldexpression_save$$

--
-- Удалить процедуру "fieldexpression_parent"
--
DROP PROCEDURE IF EXISTS fieldexpression_parent$$

--
-- Удалить процедуру "fieldexpression_logger"
--
DROP PROCEDURE IF EXISTS fieldexpression_logger$$

--
-- Удалить процедуру "fieldexpression_lock"
--
DROP PROCEDURE IF EXISTS fieldexpression_lock$$

--
-- Удалить процедуру "fieldexpression_islocked"
--
DROP PROCEDURE IF EXISTS fieldexpression_islocked$$

--
-- Удалить процедуру "fieldexpression_delete"
--
DROP PROCEDURE IF EXISTS fieldexpression_delete$$

--
-- Удалить процедуру "fieldexpression_copy"
--
DROP PROCEDURE IF EXISTS fieldexpression_copy$$

--
-- Удалить процедуру "fieldexpression_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldexpression_client_trigger$$

--
-- Удалить процедуру "fieldexpression_brief"
--
DROP PROCEDURE IF EXISTS fieldexpression_brief$$

--
-- Удалить процедуру "extenderinterface_unlock"
--
DROP PROCEDURE IF EXISTS extenderinterface_unlock$$

--
-- Удалить процедуру "extenderinterface_save"
--
DROP PROCEDURE IF EXISTS extenderinterface_save$$

--
-- Удалить процедуру "extenderinterface_parent"
--
DROP PROCEDURE IF EXISTS extenderinterface_parent$$

--
-- Удалить процедуру "extenderinterface_logger"
--
DROP PROCEDURE IF EXISTS extenderinterface_logger$$

--
-- Удалить процедуру "extenderinterface_lock"
--
DROP PROCEDURE IF EXISTS extenderinterface_lock$$

--
-- Удалить процедуру "extenderinterface_islocked"
--
DROP PROCEDURE IF EXISTS extenderinterface_islocked$$

--
-- Удалить процедуру "extenderinterface_delete"
--
DROP PROCEDURE IF EXISTS extenderinterface_delete$$

--
-- Удалить процедуру "extenderinterface_copy"
--
DROP PROCEDURE IF EXISTS extenderinterface_copy$$

--
-- Удалить процедуру "extenderinterface_client_trigger"
--
DROP PROCEDURE IF EXISTS extenderinterface_client_trigger$$

--
-- Удалить процедуру "extenderinterface_brief"
--
DROP PROCEDURE IF EXISTS extenderinterface_brief$$

--
-- Удалить процедуру "epfilterlink_unlock"
--
DROP PROCEDURE IF EXISTS epfilterlink_unlock$$

--
-- Удалить процедуру "epfilterlink_save"
--
DROP PROCEDURE IF EXISTS epfilterlink_save$$

--
-- Удалить процедуру "epfilterlink_parent"
--
DROP PROCEDURE IF EXISTS epfilterlink_parent$$

--
-- Удалить процедуру "epfilterlink_logger"
--
DROP PROCEDURE IF EXISTS epfilterlink_logger$$

--
-- Удалить процедуру "epfilterlink_lock"
--
DROP PROCEDURE IF EXISTS epfilterlink_lock$$

--
-- Удалить процедуру "epfilterlink_islocked"
--
DROP PROCEDURE IF EXISTS epfilterlink_islocked$$

--
-- Удалить процедуру "epfilterlink_delete"
--
DROP PROCEDURE IF EXISTS epfilterlink_delete$$

--
-- Удалить процедуру "epfilterlink_copy"
--
DROP PROCEDURE IF EXISTS epfilterlink_copy$$

--
-- Удалить процедуру "epfilterlink_client_trigger"
--
DROP PROCEDURE IF EXISTS epfilterlink_client_trigger$$

--
-- Удалить процедуру "epfilterlink_brief"
--
DROP PROCEDURE IF EXISTS epfilterlink_brief$$

--
-- Удалить процедуру "enumitem_unlock"
--
DROP PROCEDURE IF EXISTS enumitem_unlock$$

--
-- Удалить процедуру "enumitem_save"
--
DROP PROCEDURE IF EXISTS enumitem_save$$

--
-- Удалить процедуру "enumitem_parent"
--
DROP PROCEDURE IF EXISTS enumitem_parent$$

--
-- Удалить процедуру "enumitem_logger"
--
DROP PROCEDURE IF EXISTS enumitem_logger$$

--
-- Удалить процедуру "enumitem_lock"
--
DROP PROCEDURE IF EXISTS enumitem_lock$$

--
-- Удалить процедуру "enumitem_islocked"
--
DROP PROCEDURE IF EXISTS enumitem_islocked$$

--
-- Удалить процедуру "enumitem_delete"
--
DROP PROCEDURE IF EXISTS enumitem_delete$$

--
-- Удалить процедуру "enumitem_copy"
--
DROP PROCEDURE IF EXISTS enumitem_copy$$

--
-- Удалить процедуру "enumitem_client_trigger"
--
DROP PROCEDURE IF EXISTS enumitem_client_trigger$$

--
-- Удалить процедуру "enumitem_brief"
--
DROP PROCEDURE IF EXISTS enumitem_brief$$

--
-- Удалить процедуру "entrypoints_unlock"
--
DROP PROCEDURE IF EXISTS entrypoints_unlock$$

--
-- Удалить процедуру "entrypoints_save"
--
DROP PROCEDURE IF EXISTS entrypoints_save$$

--
-- Удалить процедуру "entrypoints_parent"
--
DROP PROCEDURE IF EXISTS entrypoints_parent$$

--
-- Удалить процедуру "entrypoints_logger"
--
DROP PROCEDURE IF EXISTS entrypoints_logger$$

--
-- Удалить процедуру "entrypoints_lock"
--
DROP PROCEDURE IF EXISTS entrypoints_lock$$

--
-- Удалить процедуру "entrypoints_islocked"
--
DROP PROCEDURE IF EXISTS entrypoints_islocked$$

--
-- Удалить процедуру "entrypoints_delete"
--
DROP PROCEDURE IF EXISTS entrypoints_delete$$

--
-- Удалить процедуру "entrypoints_copy"
--
DROP PROCEDURE IF EXISTS entrypoints_copy$$

--
-- Удалить процедуру "entrypoints_client_trigger"
--
DROP PROCEDURE IF EXISTS entrypoints_client_trigger$$

--
-- Удалить процедуру "entrypoints_brief"
--
DROP PROCEDURE IF EXISTS entrypoints_brief$$

--
-- Удалить процедуру "dinamicfilterscript_unlock"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_unlock$$

--
-- Удалить процедуру "dinamicfilterscript_save"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_save$$

--
-- Удалить процедуру "dinamicfilterscript_parent"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_parent$$

--
-- Удалить процедуру "dinamicfilterscript_logger"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_logger$$

--
-- Удалить процедуру "dinamicfilterscript_lock"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_lock$$

--
-- Удалить процедуру "dinamicfilterscript_islocked"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_islocked$$

--
-- Удалить процедуру "dinamicfilterscript_delete"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_delete$$

--
-- Удалить процедуру "dinamicfilterscript_copy"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_copy$$

--
-- Удалить процедуру "dinamicfilterscript_client_trigger"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_client_trigger$$

--
-- Удалить процедуру "dinamicfilterscript_brief"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_brief$$

--
-- Удалить процедуру "constraintfield_unlock"
--
DROP PROCEDURE IF EXISTS constraintfield_unlock$$

--
-- Удалить процедуру "constraintfield_save"
--
DROP PROCEDURE IF EXISTS constraintfield_save$$

--
-- Удалить процедуру "constraintfield_parent"
--
DROP PROCEDURE IF EXISTS constraintfield_parent$$

--
-- Удалить процедуру "constraintfield_logger"
--
DROP PROCEDURE IF EXISTS constraintfield_logger$$

--
-- Удалить процедуру "constraintfield_lock"
--
DROP PROCEDURE IF EXISTS constraintfield_lock$$

--
-- Удалить процедуру "constraintfield_islocked"
--
DROP PROCEDURE IF EXISTS constraintfield_islocked$$

--
-- Удалить процедуру "constraintfield_delete"
--
DROP PROCEDURE IF EXISTS constraintfield_delete$$

--
-- Удалить процедуру "constraintfield_copy"
--
DROP PROCEDURE IF EXISTS constraintfield_copy$$

--
-- Удалить процедуру "constraintfield_client_trigger"
--
DROP PROCEDURE IF EXISTS constraintfield_client_trigger$$

--
-- Удалить процедуру "constraintfield_brief"
--
DROP PROCEDURE IF EXISTS constraintfield_brief$$

--
-- Удалить процедуру "bpu_gettotemp"
--
DROP PROCEDURE IF EXISTS bpu_gettotemp$$

--
-- Удалить процедуру "bpu_droptempdata"
--
DROP PROCEDURE IF EXISTS bpu_droptempdata$$

--
-- Удалить процедуру "bpu_copy"
--
DROP PROCEDURE IF EXISTS bpu_copy$$

--
-- Удалить процедуру "bpu_commitfromtemp"
--
DROP PROCEDURE IF EXISTS bpu_commitfromtemp$$

--
-- Удалить процедуру "bprcfg_copy"
--
DROP PROCEDURE IF EXISTS bprcfg_copy$$

--
-- Удалить процедуру "bpdr_copy"
--
DROP PROCEDURE IF EXISTS bpdr_copy$$

--
-- Удалить процедуру "bpdi_copy"
--
DROP PROCEDURE IF EXISTS bpdi_copy$$

--
-- Удалить процедуру "bpc_info_unlock"
--
DROP PROCEDURE IF EXISTS bpc_info_unlock$$

--
-- Удалить процедуру "bpc_info_save"
--
DROP PROCEDURE IF EXISTS bpc_info_save$$

--
-- Удалить процедуру "bpc_info_parent"
--
DROP PROCEDURE IF EXISTS bpc_info_parent$$

--
-- Удалить процедуру "bpc_info_logger"
--
DROP PROCEDURE IF EXISTS bpc_info_logger$$

--
-- Удалить процедуру "bpc_info_lock"
--
DROP PROCEDURE IF EXISTS bpc_info_lock$$

--
-- Удалить процедуру "bpc_info_islocked"
--
DROP PROCEDURE IF EXISTS bpc_info_islocked$$

--
-- Удалить процедуру "bpc_info_delete"
--
DROP PROCEDURE IF EXISTS bpc_info_delete$$

--
-- Удалить процедуру "bpc_info_copy"
--
DROP PROCEDURE IF EXISTS bpc_info_copy$$

--
-- Удалить процедуру "bpc_info_client_trigger"
--
DROP PROCEDURE IF EXISTS bpc_info_client_trigger$$

--
-- Удалить процедуру "bpc_info_brief"
--
DROP PROCEDURE IF EXISTS bpc_info_brief$$

--
-- Удалить процедуру "bpc_copy"
--
DROP PROCEDURE IF EXISTS bpc_copy$$

--
-- Удалить процедуру "armtypes_unlock"
--
DROP PROCEDURE IF EXISTS armtypes_unlock$$

--
-- Удалить процедуру "armtypes_save"
--
DROP PROCEDURE IF EXISTS armtypes_save$$

--
-- Удалить процедуру "armtypes_parent"
--
DROP PROCEDURE IF EXISTS armtypes_parent$$

--
-- Удалить процедуру "armtypes_logger"
--
DROP PROCEDURE IF EXISTS armtypes_logger$$

--
-- Удалить процедуру "armtypes_lock"
--
DROP PROCEDURE IF EXISTS armtypes_lock$$

--
-- Удалить процедуру "armtypes_islocked"
--
DROP PROCEDURE IF EXISTS armtypes_islocked$$

--
-- Удалить процедуру "armtypes_delete"
--
DROP PROCEDURE IF EXISTS armtypes_delete$$

--
-- Удалить процедуру "armtypes_copy"
--
DROP PROCEDURE IF EXISTS armtypes_copy$$

--
-- Удалить процедуру "armtypes_client_trigger"
--
DROP PROCEDURE IF EXISTS armtypes_client_trigger$$

--
-- Удалить процедуру "armtypes_brief"
--
DROP PROCEDURE IF EXISTS armtypes_brief$$

--
-- Удалить процедуру "armjrnlrun_unlock"
--
DROP PROCEDURE IF EXISTS armjrnlrun_unlock$$

--
-- Удалить процедуру "armjrnlrun_save"
--
DROP PROCEDURE IF EXISTS armjrnlrun_save$$

--
-- Удалить процедуру "armjrnlrun_parent"
--
DROP PROCEDURE IF EXISTS armjrnlrun_parent$$

--
-- Удалить процедуру "armjrnlrun_logger"
--
DROP PROCEDURE IF EXISTS armjrnlrun_logger$$

--
-- Удалить процедуру "armjrnlrun_lock"
--
DROP PROCEDURE IF EXISTS armjrnlrun_lock$$

--
-- Удалить процедуру "armjrnlrun_islocked"
--
DROP PROCEDURE IF EXISTS armjrnlrun_islocked$$

--
-- Удалить процедуру "armjrnlrun_delete"
--
DROP PROCEDURE IF EXISTS armjrnlrun_delete$$

--
-- Удалить процедуру "armjrnlrun_copy"
--
DROP PROCEDURE IF EXISTS armjrnlrun_copy$$

--
-- Удалить процедуру "armjrnlrun_client_trigger"
--
DROP PROCEDURE IF EXISTS armjrnlrun_client_trigger$$

--
-- Удалить процедуру "armjrnlrun_brief"
--
DROP PROCEDURE IF EXISTS armjrnlrun_brief$$

--
-- Удалить процедуру "armjrnlrep_unlock"
--
DROP PROCEDURE IF EXISTS armjrnlrep_unlock$$

--
-- Удалить процедуру "armjrnlrep_save"
--
DROP PROCEDURE IF EXISTS armjrnlrep_save$$

--
-- Удалить процедуру "armjrnlrep_parent"
--
DROP PROCEDURE IF EXISTS armjrnlrep_parent$$

--
-- Удалить процедуру "armjrnlrep_logger"
--
DROP PROCEDURE IF EXISTS armjrnlrep_logger$$

--
-- Удалить процедуру "armjrnlrep_lock"
--
DROP PROCEDURE IF EXISTS armjrnlrep_lock$$

--
-- Удалить процедуру "armjrnlrep_islocked"
--
DROP PROCEDURE IF EXISTS armjrnlrep_islocked$$

--
-- Удалить процедуру "armjrnlrep_delete"
--
DROP PROCEDURE IF EXISTS armjrnlrep_delete$$

--
-- Удалить процедуру "armjrnlrep_copy"
--
DROP PROCEDURE IF EXISTS armjrnlrep_copy$$

--
-- Удалить процедуру "armjrnlrep_client_trigger"
--
DROP PROCEDURE IF EXISTS armjrnlrep_client_trigger$$

--
-- Удалить процедуру "armjrnlrep_brief"
--
DROP PROCEDURE IF EXISTS armjrnlrep_brief$$

--
-- Удалить процедуру "armjrnladd_unlock"
--
DROP PROCEDURE IF EXISTS armjrnladd_unlock$$

--
-- Удалить процедуру "armjrnladd_save"
--
DROP PROCEDURE IF EXISTS armjrnladd_save$$

--
-- Удалить процедуру "armjrnladd_parent"
--
DROP PROCEDURE IF EXISTS armjrnladd_parent$$

--
-- Удалить процедуру "armjrnladd_logger"
--
DROP PROCEDURE IF EXISTS armjrnladd_logger$$

--
-- Удалить процедуру "armjrnladd_lock"
--
DROP PROCEDURE IF EXISTS armjrnladd_lock$$

--
-- Удалить процедуру "armjrnladd_islocked"
--
DROP PROCEDURE IF EXISTS armjrnladd_islocked$$

--
-- Удалить процедуру "armjrnladd_delete"
--
DROP PROCEDURE IF EXISTS armjrnladd_delete$$

--
-- Удалить процедуру "armjrnladd_copy"
--
DROP PROCEDURE IF EXISTS armjrnladd_copy$$

--
-- Удалить процедуру "armjrnladd_client_trigger"
--
DROP PROCEDURE IF EXISTS armjrnladd_client_trigger$$

--
-- Удалить процедуру "armjrnladd_brief"
--
DROP PROCEDURE IF EXISTS armjrnladd_brief$$

--
-- Удалить процедуру "armjournal_unlock"
--
DROP PROCEDURE IF EXISTS armjournal_unlock$$

--
-- Удалить процедуру "armjournal_save"
--
DROP PROCEDURE IF EXISTS armjournal_save$$

--
-- Удалить процедуру "armjournal_parent"
--
DROP PROCEDURE IF EXISTS armjournal_parent$$

--
-- Удалить процедуру "armjournal_logger"
--
DROP PROCEDURE IF EXISTS armjournal_logger$$

--
-- Удалить процедуру "armjournal_lock"
--
DROP PROCEDURE IF EXISTS armjournal_lock$$

--
-- Удалить процедуру "armjournal_islocked"
--
DROP PROCEDURE IF EXISTS armjournal_islocked$$

--
-- Удалить процедуру "armjournal_delete"
--
DROP PROCEDURE IF EXISTS armjournal_delete$$

--
-- Удалить процедуру "armjournal_copy"
--
DROP PROCEDURE IF EXISTS armjournal_copy$$

--
-- Удалить процедуру "armjournal_client_trigger"
--
DROP PROCEDURE IF EXISTS armjournal_client_trigger$$

--
-- Удалить процедуру "armjournal_brief"
--
DROP PROCEDURE IF EXISTS armjournal_brief$$

DELIMITER ;

--
-- Удалить таблицу "workplace"
--
DROP TABLE IF EXISTS workplace;

--
-- Удалить таблицу "viewcolumn"
--
DROP TABLE IF EXISTS viewcolumn;

--
-- Удалить таблицу "validator"
--
DROP TABLE IF EXISTS validator;

--
-- Удалить таблицу "users"
--
DROP TABLE IF EXISTS users;

--
-- Удалить таблицу "uniqueconstraint"
--
DROP TABLE IF EXISTS uniqueconstraint;

--
-- Удалить таблицу "typemenu"
--
DROP TABLE IF EXISTS typemenu;

--
-- Удалить таблицу "typelist"
--
DROP TABLE IF EXISTS typelist;

--
-- Удалить таблицу "the_session"
--
DROP TABLE IF EXISTS the_session;

--
-- Удалить таблицу "sysrefcache"
--
DROP TABLE IF EXISTS sysrefcache;

--
-- Удалить таблицу "sysoptions"
--
DROP TABLE IF EXISTS sysoptions;

--
-- Удалить таблицу "syslog"
--
DROP TABLE IF EXISTS syslog;

--
-- Удалить таблицу "structrestriction"
--
DROP TABLE IF EXISTS structrestriction;

--
-- Удалить таблицу "sharedmethod"
--
DROP TABLE IF EXISTS sharedmethod;

--
-- Удалить таблицу "script"
--
DROP TABLE IF EXISTS script;

--
-- Удалить таблицу "rptstruct"
--
DROP TABLE IF EXISTS rptstruct;

--
-- Удалить таблицу "rptformula"
--
DROP TABLE IF EXISTS rptformula;

--
-- Удалить таблицу "rptfields"
--
DROP TABLE IF EXISTS rptfields;

--
-- Удалить таблицу "rpresult"
--
DROP TABLE IF EXISTS rpresult;

--
-- Удалить таблицу "reports"
--
DROP TABLE IF EXISTS reports;

--
-- Удалить таблицу "queryresult"
--
DROP TABLE IF EXISTS queryresult;

--
-- Удалить таблицу "partview_lnk"
--
DROP TABLE IF EXISTS partview_lnk;

--
-- Удалить таблицу "partview"
--
DROP TABLE IF EXISTS partview;

--
-- Удалить таблицу "partparammap"
--
DROP TABLE IF EXISTS partparammap;

--
-- Удалить таблицу "partmenu"
--
DROP TABLE IF EXISTS partmenu;

--
-- Удалить таблицу "part"
--
DROP TABLE IF EXISTS part;

--
-- Удалить таблицу "parentpackage"
--
DROP TABLE IF EXISTS parentpackage;

--
-- Удалить таблицу "parameters"
--
DROP TABLE IF EXISTS parameters;

--
-- Удалить таблицу "objstatus"
--
DROP TABLE IF EXISTS objstatus;

--
-- Удалить таблицу "objecttype"
--
DROP TABLE IF EXISTS objecttype;

--
-- Удалить таблицу "objectmode"
--
DROP TABLE IF EXISTS objectmode;

--
-- Удалить таблицу "num_zones"
--
DROP TABLE IF EXISTS num_zones;

--
-- Удалить таблицу "num_values"
--
DROP TABLE IF EXISTS num_values;

--
-- Удалить таблицу "num_head"
--
DROP TABLE IF EXISTS num_head;

--
-- Удалить таблицу "nextstate"
--
DROP TABLE IF EXISTS nextstate;

--
-- Удалить таблицу "mtzextrel"
--
DROP TABLE IF EXISTS mtzextrel;

--
-- Удалить таблицу "mtzext_def"
--
DROP TABLE IF EXISTS mtzext_def;

--
-- Удалить таблицу "mtzapp"
--
DROP TABLE IF EXISTS mtzapp;

--
-- Удалить таблицу "methodrestriction"
--
DROP TABLE IF EXISTS methodrestriction;

--
-- Удалить таблицу "localizeinfo"
--
DROP TABLE IF EXISTS localizeinfo;

--
-- Удалить таблицу "journalsrc"
--
DROP TABLE IF EXISTS journalsrc;

--
-- Удалить таблицу "journalcolumn"
--
DROP TABLE IF EXISTS journalcolumn;

--
-- Удалить таблицу "journal"
--
DROP TABLE IF EXISTS journal;

--
-- Удалить таблицу "jcolumnsource"
--
DROP TABLE IF EXISTS jcolumnsource;

--
-- Удалить таблицу "iu_u_def_temp"
--
DROP TABLE IF EXISTS iu_u_def_temp;

--
-- Удалить таблицу "iu_u_def"
--
DROP TABLE IF EXISTS iu_u_def;

--
-- Удалить таблицу "iu_rcfg_mod"
--
DROP TABLE IF EXISTS iu_rcfg_mod;

--
-- Удалить таблицу "iu_rcfg_docmode"
--
DROP TABLE IF EXISTS iu_rcfg_docmode;

--
-- Удалить таблицу "iu_rcfg_def"
--
DROP TABLE IF EXISTS iu_rcfg_def;

--
-- Удалить таблицу "iu_int_modules"
--
DROP TABLE IF EXISTS iu_int_modules;

--
-- Удалить таблицу "iu_crole"
--
DROP TABLE IF EXISTS iu_crole;

--
-- Удалить таблицу "instancevalidator"
--
DROP TABLE IF EXISTS instancevalidator;

--
-- Удалить таблицу "instance"
--
DROP TABLE IF EXISTS instance;

--
-- Удалить таблицу "groupuser"
--
DROP TABLE IF EXISTS groupuser;

--
-- Удалить таблицу "groups"
--
DROP TABLE IF EXISTS groups;

--
-- Удалить таблицу "genreference"
--
DROP TABLE IF EXISTS genreference;

--
-- Удалить таблицу "genpackage"
--
DROP TABLE IF EXISTS genpackage;

--
-- Удалить таблицу "genmanualcode"
--
DROP TABLE IF EXISTS genmanualcode;

--
-- Удалить таблицу "generator_target"
--
DROP TABLE IF EXISTS generator_target;

--
-- Удалить таблицу "gencontrols"
--
DROP TABLE IF EXISTS gencontrols;

--
-- Удалить таблицу "fldextenders"
--
DROP TABLE IF EXISTS fldextenders;

--
-- Удалить таблицу "filters"
--
DROP TABLE IF EXISTS filters;

--
-- Удалить таблицу "filterfieldgroup"
--
DROP TABLE IF EXISTS filterfieldgroup;

--
-- Удалить таблицу "fileterfield"
--
DROP TABLE IF EXISTS fileterfield;

--
-- Удалить таблицу "fieldvalidator"
--
DROP TABLE IF EXISTS fieldvalidator;

--
-- Удалить таблицу "fieldtypemap"
--
DROP TABLE IF EXISTS fieldtypemap;

--
-- Удалить таблицу "fieldtype"
--
DROP TABLE IF EXISTS fieldtype;

--
-- Удалить таблицу "fieldsrcdef"
--
DROP TABLE IF EXISTS fieldsrcdef;

--
-- Удалить таблицу "fieldrestriction"
--
DROP TABLE IF EXISTS fieldrestriction;

--
-- Удалить таблицу "fieldparammap"
--
DROP TABLE IF EXISTS fieldparammap;

--
-- Удалить таблицу "fieldmenu"
--
DROP TABLE IF EXISTS fieldmenu;

--
-- Удалить таблицу "fieldexpression"
--
DROP TABLE IF EXISTS fieldexpression;

--
-- Удалить таблицу "field"
--
DROP TABLE IF EXISTS field;

--
-- Удалить таблицу "extenderinterface"
--
DROP TABLE IF EXISTS extenderinterface;

--
-- Удалить таблицу "epfilterlink"
--
DROP TABLE IF EXISTS epfilterlink;

--
-- Удалить таблицу "enumitem"
--
DROP TABLE IF EXISTS enumitem;

--
-- Удалить таблицу "entrypoints"
--
DROP TABLE IF EXISTS entrypoints;

--
-- Удалить таблицу "dinamicfilterscript"
--
DROP TABLE IF EXISTS dinamicfilterscript;

--
-- Удалить таблицу "constraintfield"
--
DROP TABLE IF EXISTS constraintfield;

--
-- Удалить таблицу "bpc_info"
--
DROP TABLE IF EXISTS bpc_info;

--
-- Удалить таблицу "armtypes"
--
DROP TABLE IF EXISTS armtypes;

--
-- Удалить таблицу "armjrnlrun"
--
DROP TABLE IF EXISTS armjrnlrun;

--
-- Удалить таблицу "armjrnlrep"
--
DROP TABLE IF EXISTS armjrnlrep;

--
-- Удалить таблицу "armjrnladd"
--
DROP TABLE IF EXISTS armjrnladd;

--
-- Удалить таблицу "armjournal"
--
DROP TABLE IF EXISTS armjournal;

--
-- Установка базы данных по умолчанию
--
USE survey;

--
-- Создать таблицу "armjournal"
--
CREATE TABLE IF NOT EXISTS armjournal (
  instanceid binary(16) DEFAULT NULL,
  armjournalid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thejournal binary(16) DEFAULT NULL,
  PRIMARY KEY (armjournalid),
  INDEX parent_armjournal (instanceid),
  CONSTRAINT fk_c41c0e058cf34b439d6ec5fcd37beb47 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjrnladd"
--
CREATE TABLE IF NOT EXISTS armjrnladd (
  parentstructrowid binary(16) NOT NULL,
  armjrnladdid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  theextention binary(16) DEFAULT NULL,
  PRIMARY KEY (armjrnladdid),
  INDEX parent_armjrnladd (parentstructrowid),
  CONSTRAINT fk_f837abedcae9430a9dee519dbb1b79d5 FOREIGN KEY (parentstructrowid)
  REFERENCES armjournal (armjournalid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjrnlrep"
--
CREATE TABLE IF NOT EXISTS armjrnlrep (
  parentstructrowid binary(16) NOT NULL,
  armjrnlrepid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  repname varchar(255) DEFAULT NULL,
  thereport binary(16) DEFAULT NULL,
  PRIMARY KEY (armjrnlrepid),
  INDEX parent_armjrnlrep (parentstructrowid),
  CONSTRAINT fk_c2763400be344033b4b5756cd5252cea FOREIGN KEY (parentstructrowid)
  REFERENCES armjournal (armjournalid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjrnlrun"
--
CREATE TABLE IF NOT EXISTS armjrnlrun (
  parentstructrowid binary(16) NOT NULL,
  armjrnlrunid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  theextention binary(16) DEFAULT NULL,
  PRIMARY KEY (armjrnlrunid),
  INDEX parent_armjrnlrun (parentstructrowid),
  CONSTRAINT fk_4fe8318100a54b599413d06318a119d4 FOREIGN KEY (parentstructrowid)
  REFERENCES armjournal (armjournalid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armtypes"
--
CREATE TABLE IF NOT EXISTS armtypes (
  instanceid binary(16) DEFAULT NULL,
  armtypesid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thedocumenttype binary(16) DEFAULT NULL,
  PRIMARY KEY (armtypesid),
  INDEX parent_armtypes (instanceid),
  CONSTRAINT fk_30f737ce1c814672b0f96e5bf4b15971 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "bpc_info"
--
CREATE TABLE IF NOT EXISTS bpc_info (
  instanceid binary(16) DEFAULT NULL,
  bpc_infoid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  PRIMARY KEY (bpc_infoid),
  INDEX parent_bpc_info (instanceid),
  CONSTRAINT fk_f50248a1151e4d9c87d0906acfd35c9f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "constraintfield"
--
CREATE TABLE IF NOT EXISTS constraintfield (
  parentstructrowid binary(16) NOT NULL,
  constraintfieldid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thefield binary(16) DEFAULT NULL,
  PRIMARY KEY (constraintfieldid),
  INDEX parent_constraintfield (parentstructrowid),
  CONSTRAINT fk_c70106b1aa9541738097614495d6ef28 FOREIGN KEY (parentstructrowid)
  REFERENCES uniqueconstraint (uniqueconstraintid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 744
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "dinamicfilterscript"
--
CREATE TABLE IF NOT EXISTS dinamicfilterscript (
  parentstructrowid binary(16) NOT NULL,
  dinamicfilterscriptid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (dinamicfilterscriptid),
  INDEX parent_dinamicfilterscript (parentstructrowid),
  CONSTRAINT fk_23e26182cc8442d6b7a2d8da0026ebee FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "entrypoints"
--
CREATE TABLE IF NOT EXISTS entrypoints (
  instanceid binary(16) DEFAULT NULL,
  entrypointsid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  parentrowid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(38) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  astoolbaritem int(11) DEFAULT NULL,
  actiontype int(11) DEFAULT NULL,
  thefilter binary(16) DEFAULT NULL,
  journal binary(16) DEFAULT NULL,
  report binary(16) DEFAULT NULL,
  document binary(16) DEFAULT NULL,
  method binary(16) DEFAULT NULL,
  iconfile varchar(2000) DEFAULT NULL,
  theextention binary(16) DEFAULT NULL,
  arm binary(16) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  objecttype binary(16) DEFAULT NULL,
  journalfixedquery text DEFAULT NULL,
  allowadd int(11) DEFAULT NULL,
  allowedit int(11) DEFAULT NULL,
  allowdel int(11) DEFAULT NULL,
  allowfilter int(11) DEFAULT NULL,
  allowprint int(11) DEFAULT NULL,
  PRIMARY KEY (entrypointsid),
  INDEX parent_entrypoints (instanceid),
  CONSTRAINT fk_ef4ede2c458b4eabafe366aa500081da FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "enumitem"
--
CREATE TABLE IF NOT EXISTS enumitem (
  parentstructrowid binary(16) NOT NULL,
  enumitemid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  namevalue int(11) DEFAULT NULL,
  nameincode varchar(100) DEFAULT NULL,
  PRIMARY KEY (enumitemid),
  INDEX parent_enumitem (parentstructrowid),
  CONSTRAINT fk_35f46d2361f8413b924f83792f76e698 FOREIGN KEY (parentstructrowid)
  REFERENCES fieldtype (fieldtypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 225
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "epfilterlink"
--
CREATE TABLE IF NOT EXISTS epfilterlink (
  parentstructrowid binary(16) NOT NULL,
  epfilterlinkid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  rowsource varchar(255) DEFAULT NULL,
  theexpression text DEFAULT NULL,
  filterfield varchar(255) DEFAULT NULL,
  PRIMARY KEY (epfilterlinkid),
  INDEX parent_epfilterlink (parentstructrowid),
  CONSTRAINT fk_d407359f220449699789956215e456e6 FOREIGN KEY (parentstructrowid)
  REFERENCES entrypoints (entrypointsid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "extenderinterface"
--
CREATE TABLE IF NOT EXISTS extenderinterface (
  parentstructrowid binary(16) NOT NULL,
  extenderinterfaceid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thename varchar(255) DEFAULT NULL,
  targetplatform binary(16) DEFAULT NULL,
  theobject varchar(255) DEFAULT NULL,
  theconfig varchar(512) DEFAULT NULL,
  PRIMARY KEY (extenderinterfaceid),
  INDEX parent_extenderinterface (parentstructrowid),
  CONSTRAINT fk_0fefa9963bad4ebba9ad52ac582cd0a7 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "field"
--
CREATE TABLE IF NOT EXISTS field (
  parentstructrowid binary(16) NOT NULL,
  fieldid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  tabname varchar(60) DEFAULT NULL,
  fieldgroupbox varchar(60) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  fieldtype binary(16) DEFAULT NULL,
  isbrief int(11) DEFAULT NULL,
  istabbrief int(11) DEFAULT NULL,
  allownull int(11) DEFAULT NULL,
  datasize int(11) DEFAULT NULL,
  referencetype int(11) DEFAULT NULL,
  reftotype binary(16) DEFAULT NULL,
  reftopart binary(16) DEFAULT NULL,
  thestyle varchar(50) DEFAULT NULL,
  internalreference int(11) DEFAULT NULL,
  createrefonly int(11) DEFAULT NULL,
  isautonumber int(11) DEFAULT NULL,
  thenumerator binary(16) DEFAULT NULL,
  zonetemplate varchar(255) DEFAULT NULL,
  numberdatefield binary(16) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  shablonbrief varchar(100) DEFAULT NULL,
  thenameclass varchar(100) DEFAULT NULL,
  themask varchar(64) DEFAULT NULL,
  PRIMARY KEY (fieldid),
  INDEX parent_field (parentstructrowid),
  CONSTRAINT fk_0670efa4512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 267
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldexpression"
--
CREATE TABLE IF NOT EXISTS fieldexpression (
  parentstructrowid binary(16) NOT NULL,
  fieldexpressionid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (fieldexpressionid),
  INDEX parent_fieldexpression (parentstructrowid),
  CONSTRAINT fk_34b08ed0c4b54b9cba59870a4599f52a FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldmenu"
--
CREATE TABLE IF NOT EXISTS fieldmenu (
  parentstructrowid binary(16) NOT NULL,
  fieldmenuid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  tooltip varchar(80) DEFAULT NULL,
  actionid binary(16) DEFAULT NULL,
  ismenuitem int(11) DEFAULT NULL,
  istoolbarbutton int(11) DEFAULT NULL,
  hotkey varchar(20) DEFAULT NULL,
  PRIMARY KEY (fieldmenuid),
  INDEX parent_fieldmenu (parentstructrowid),
  CONSTRAINT fk_4189c3e471c2423da56f4e71cb91b52d FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldparammap"
--
CREATE TABLE IF NOT EXISTS fieldparammap (
  parentstructrowid binary(16) NOT NULL,
  fieldparammapid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  fieldname varchar(255) DEFAULT NULL,
  paramname varchar(80) DEFAULT NULL,
  noedit int(11) DEFAULT NULL,
  PRIMARY KEY (fieldparammapid),
  INDEX parent_fieldparammap (parentstructrowid),
  CONSTRAINT fk_54752ae806b04ec68daa692e52a0d36c FOREIGN KEY (parentstructrowid)
  REFERENCES fieldmenu (fieldmenuid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldrestriction"
--
CREATE TABLE IF NOT EXISTS fieldrestriction (
  parentstructrowid binary(16) NOT NULL,
  fieldrestrictionid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thepart binary(16) DEFAULT NULL,
  thefield binary(16) DEFAULT NULL,
  allowread int(11) DEFAULT NULL,
  allowmodify int(11) DEFAULT NULL,
  mandatoryfield int(11) DEFAULT NULL,
  PRIMARY KEY (fieldrestrictionid),
  INDEX parent_fieldrestriction (parentstructrowid),
  CONSTRAINT fk_24c5119c5dc94aacbb01b8cf8eba998e FOREIGN KEY (parentstructrowid)
  REFERENCES objectmode (objectmodeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldsrcdef"
--
CREATE TABLE IF NOT EXISTS fieldsrcdef (
  parentstructrowid binary(16) NOT NULL,
  fieldsrcdefid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  provider varchar(128) DEFAULT NULL,
  connectionstring varchar(512) DEFAULT NULL,
  datasource varchar(512) DEFAULT NULL,
  idfield varchar(128) DEFAULT NULL,
  briefstring varchar(512) DEFAULT NULL,
  filterstring varchar(512) DEFAULT NULL,
  sortfield varchar(512) DEFAULT NULL,
  descriptionstring text DEFAULT NULL,
  dontshowdialog int(11) DEFAULT NULL,
  PRIMARY KEY (fieldsrcdefid),
  INDEX parent_fieldsrcdef (parentstructrowid),
  CONSTRAINT fk_d3f1af81912c4948a87ddf549ee796e2 FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldtype"
--
CREATE TABLE IF NOT EXISTS fieldtype (
  instanceid binary(16) DEFAULT NULL,
  fieldtypeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  typestyle int(11) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  allowsize int(11) DEFAULT NULL,
  minimum varchar(64) DEFAULT NULL,
  maximum varchar(64) DEFAULT NULL,
  allowlikesearch int(11) DEFAULT NULL,
  gridsorttype int(11) DEFAULT NULL,
  delayedsave int(11) DEFAULT NULL,
  PRIMARY KEY (fieldtypeid),
  INDEX parent_fieldtype (instanceid),
  CONSTRAINT fk_0670efa5512711d58822204c4f4f5020 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 218
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldtypemap"
--
CREATE TABLE IF NOT EXISTS fieldtypemap (
  parentstructrowid binary(16) NOT NULL,
  fieldtypemapid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  stoagetype varchar(255) DEFAULT NULL,
  fixedsize int(11) DEFAULT NULL,
  PRIMARY KEY (fieldtypemapid),
  INDEX parent_fieldtypemap (parentstructrowid),
  CONSTRAINT fk_0670efa6512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES fieldtype (fieldtypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 143
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldvalidator"
--
CREATE TABLE IF NOT EXISTS fieldvalidator (
  parentstructrowid binary(16) NOT NULL,
  fieldvalidatorid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (fieldvalidatorid),
  INDEX parent_fieldvalidator (parentstructrowid),
  CONSTRAINT fk_b40bbed584c54b0b8679172aa1acdad9 FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fileterfield"
--
CREATE TABLE IF NOT EXISTS fileterfield (
  parentstructrowid binary(16) NOT NULL,
  fileterfieldid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  fieldtype binary(16) DEFAULT NULL,
  fieldsize int(11) DEFAULT NULL,
  reftype int(11) DEFAULT NULL,
  reftotype binary(16) DEFAULT NULL,
  reftopart binary(16) DEFAULT NULL,
  valuearray int(11) DEFAULT NULL,
  PRIMARY KEY (fileterfieldid),
  INDEX parent_fileterfield (parentstructrowid),
  CONSTRAINT fk_f4b3740ce6764b6ea833ede44cb9fa63 FOREIGN KEY (parentstructrowid)
  REFERENCES filterfieldgroup (filterfieldgroupid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 963
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "filterfieldgroup"
--
CREATE TABLE IF NOT EXISTS filterfieldgroup (
  instanceid binary(16) DEFAULT NULL,
  filterfieldgroupid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  allowignore int(11) DEFAULT NULL,
  PRIMARY KEY (filterfieldgroupid),
  INDEX parent_filterfieldgroup (instanceid),
  CONSTRAINT fk_98c6d923b807418c91e7c351511b5eb1 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "filters"
--
CREATE TABLE IF NOT EXISTS filters (
  instanceid binary(16) DEFAULT NULL,
  filtersid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  thecaption varchar(80) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (filtersid),
  INDEX parent_filters (instanceid),
  CONSTRAINT fk_b75ad7246b6f45bdb0bbc75d17309dc9 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fldextenders"
--
CREATE TABLE IF NOT EXISTS fldextenders (
  parentstructrowid binary(16) NOT NULL,
  fldextendersid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thename varchar(255) DEFAULT NULL,
  targetplatform binary(16) DEFAULT NULL,
  theobject varchar(255) DEFAULT NULL,
  theconfig varchar(512) DEFAULT NULL,
  PRIMARY KEY (fldextendersid),
  INDEX parent_fldextenders (parentstructrowid),
  CONSTRAINT fk_5d0b0e1a80364b12b08160139558b594 FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "gencontrols"
--
CREATE TABLE IF NOT EXISTS gencontrols (
  parentstructrowid binary(16) NOT NULL,
  gencontrolsid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  controlprogid varchar(255) DEFAULT NULL,
  controlclassid varchar(40) DEFAULT NULL,
  versionmajor int(11) DEFAULT NULL,
  versionminor int(11) DEFAULT NULL,
  PRIMARY KEY (gencontrolsid),
  INDEX parent_gencontrols (parentstructrowid),
  CONSTRAINT fk_04b31cfb6525474a9f16999870d8eaaf FOREIGN KEY (parentstructrowid)
  REFERENCES generator_target (generator_targetid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "generator_target"
--
CREATE TABLE IF NOT EXISTS generator_target (
  parentstructrowid binary(16) NOT NULL,
  generator_targetid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  targettype int(11) DEFAULT NULL,
  queuename varchar(255) DEFAULT NULL,
  generatorprogid varchar(255) DEFAULT NULL,
  generatorstyle int(11) DEFAULT NULL,
  thedevelopmentenv int(11) DEFAULT NULL,
  PRIMARY KEY (generator_targetid),
  INDEX parent_generator_target (parentstructrowid),
  CONSTRAINT fk_0670efb9512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES genpackage (genpackageid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1365
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "genmanualcode"
--
CREATE TABLE IF NOT EXISTS genmanualcode (
  parentstructrowid binary(16) NOT NULL,
  genmanualcodeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(80) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (genmanualcodeid),
  INDEX parent_genmanualcode (parentstructrowid),
  CONSTRAINT fk_766993ca7de64ada82168bddf2b0588e FOREIGN KEY (parentstructrowid)
  REFERENCES generator_target (generator_targetid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 963
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "genpackage"
--
CREATE TABLE IF NOT EXISTS genpackage (
  instanceid binary(16) DEFAULT NULL,
  genpackageid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  PRIMARY KEY (genpackageid),
  INDEX parent_genpackage (instanceid),
  CONSTRAINT fk_4612c6057e7247d08a2852cc7bff4c7f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "genreference"
--
CREATE TABLE IF NOT EXISTS genreference (
  parentstructrowid binary(16) NOT NULL,
  genreferenceid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  refclassid varchar(40) DEFAULT NULL,
  versionmajor int(11) DEFAULT NULL,
  versionminor int(11) DEFAULT NULL,
  PRIMARY KEY (genreferenceid),
  INDEX parent_genreference (parentstructrowid),
  CONSTRAINT fk_673e809bcff64309a52bfe2118ae508e FOREIGN KEY (parentstructrowid)
  REFERENCES generator_target (generator_targetid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "groups"
--
CREATE TABLE IF NOT EXISTS groups (
  instanceid binary(16) DEFAULT NULL,
  groupsid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  adgroup varchar(255) DEFAULT NULL,
  PRIMARY KEY (groupsid),
  INDEX parent_groups (instanceid),
  CONSTRAINT fk_a40e6aee7b41476d923caca251c08e87 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "groupuser"
--
CREATE TABLE IF NOT EXISTS groupuser (
  parentstructrowid binary(16) NOT NULL,
  groupuserid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theuser binary(16) DEFAULT NULL,
  PRIMARY KEY (groupuserid),
  INDEX parent_groupuser (parentstructrowid),
  CONSTRAINT fk_fe2c9352e29a420b91343e3bdd832a6e FOREIGN KEY (parentstructrowid)
  REFERENCES groups (groupsid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "instance"
--
CREATE TABLE IF NOT EXISTS instance (
  instanceid binary(16) NOT NULL,
  lockuserid binary(16) DEFAULT NULL,
  locksessionid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  changestamp date DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  objtype varchar(255) DEFAULT NULL,
  exportcounter int(11) DEFAULT NULL,
  ownerpartname varchar(255) DEFAULT NULL,
  ownerrowid binary(16) DEFAULT NULL,
  status binary(16) DEFAULT NULL,
  archived int(11) DEFAULT 0,
  PRIMARY KEY (instanceid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 780
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "instancevalidator"
--
CREATE TABLE IF NOT EXISTS instancevalidator (
  parentstructrowid binary(16) NOT NULL,
  instancevalidatorid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (instancevalidatorid),
  INDEX parent_instancevalidator (parentstructrowid),
  CONSTRAINT fk_42515bade23340db8f9045dcfce01be6 FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_crole"
--
CREATE TABLE IF NOT EXISTS iu_crole (
  instanceid binary(16) DEFAULT NULL,
  iu_croleid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  archived int(11) DEFAULT 0,
  name varchar(120) DEFAULT NULL,
  allowsetuser int(11) DEFAULT NULL,
  PRIMARY KEY (iu_croleid),
  INDEX parent_iu_crole (instanceid),
  CONSTRAINT fk_2ea051107dd64b91b774af6ecbc42108 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_int_modules"
--
CREATE TABLE IF NOT EXISTS iu_int_modules (
  instanceid binary(16) DEFAULT NULL,
  iu_int_modulesid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  theicon varchar(64) DEFAULT NULL,
  groupname varchar(60) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  visiblecontrol int(11) DEFAULT NULL,
  controldocmode varchar(10) DEFAULT NULL,
  otherdocmode varchar(10) DEFAULT NULL,
  mydocmode varchar(10) DEFAULT NULL,
  allobjects int(11) DEFAULT NULL,
  colegsobject int(11) DEFAULT NULL,
  substructobjects int(11) DEFAULT NULL,
  PRIMARY KEY (iu_int_modulesid),
  INDEX parent_iu_int_modules (instanceid),
  CONSTRAINT fk_dba8d884728647828b286af8916220b6 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_rcfg_def"
--
CREATE TABLE IF NOT EXISTS iu_rcfg_def (
  instanceid binary(16) DEFAULT NULL,
  iu_rcfg_defid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  archived int(11) DEFAULT 0,
  therole binary(16) DEFAULT NULL,
  PRIMARY KEY (iu_rcfg_defid),
  INDEX parent_iu_rcfg_def (instanceid),
  CONSTRAINT fk_10f3c6e757424731b94c647263e4e304 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_rcfg_docmode"
--
CREATE TABLE IF NOT EXISTS iu_rcfg_docmode (
  instanceid binary(16) DEFAULT NULL,
  iu_rcfg_docmodeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  the_document binary(16) DEFAULT NULL,
  addmode varchar(4) DEFAULT NULL,
  editmode varchar(4) DEFAULT NULL,
  allowadd int(11) DEFAULT NULL,
  allowdelete int(11) DEFAULT NULL,
  PRIMARY KEY (iu_rcfg_docmodeid),
  INDEX parent_iu_rcfg_docmode (instanceid),
  CONSTRAINT fk_cf7ed0a3642c4b10834721d86bfecbc4 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_rcfg_mod"
--
CREATE TABLE IF NOT EXISTS iu_rcfg_mod (
  instanceid binary(16) DEFAULT NULL,
  iu_rcfg_modid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  moduleaccessible int(11) DEFAULT NULL,
  theicon varchar(64) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  groupname varchar(60) DEFAULT NULL,
  allobjects int(11) DEFAULT NULL,
  colegsobject int(11) DEFAULT NULL,
  substructobjects int(11) DEFAULT NULL,
  mydocmode varchar(10) DEFAULT NULL,
  otherdocmode varchar(10) DEFAULT NULL,
  controldocmode varchar(10) DEFAULT NULL,
  visiblecontrol int(11) DEFAULT NULL,
  PRIMARY KEY (iu_rcfg_modid),
  INDEX parent_iu_rcfg_mod (instanceid),
  CONSTRAINT fk_fa0e39846b7c45c8aecfe2fc7ecb622b FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_u_def"
--
CREATE TABLE IF NOT EXISTS iu_u_def (
  instanceid binary(16) DEFAULT NULL,
  iu_u_defid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theclient binary(16) DEFAULT NULL,
  lastname varchar(120) DEFAULT NULL,
  name varchar(120) DEFAULT NULL,
  surname varchar(120) DEFAULT NULL,
  currole binary(16) DEFAULT NULL,
  sendtomail int(11) DEFAULT NULL,
  freelancer int(11) DEFAULT NULL,
  email varchar(60) DEFAULT NULL,
  thephone varchar(40) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  PRIMARY KEY (iu_u_defid),
  INDEX parent_iu_u_def (instanceid),
  CONSTRAINT fk_a63cbdcf3ddd4164949752fe925b2a13 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_u_def_temp"
--
CREATE TABLE IF NOT EXISTS iu_u_def_temp (
  sessionid binary(16) NOT NULL DEFAULT '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
  instanceid binary(16) DEFAULT NULL,
  iu_u_defid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theclient binary(16) DEFAULT NULL,
  lastname varchar(120) DEFAULT NULL,
  name varchar(120) DEFAULT NULL,
  surname varchar(120) DEFAULT NULL,
  currole binary(16) DEFAULT NULL,
  sendtomail int(11) DEFAULT NULL,
  freelancer int(11) DEFAULT NULL,
  email varchar(60) DEFAULT NULL,
  thephone varchar(40) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  PRIMARY KEY (sessionid, iu_u_defid),
  INDEX idx_session_iu_u_def_temp (sessionid),
  CONSTRAINT fk_a63cbdcf3ddd4164949752fe925b2a13_temp FOREIGN KEY (sessionid)
  REFERENCES the_session (the_sessionid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "jcolumnsource"
--
CREATE TABLE IF NOT EXISTS jcolumnsource (
  parentstructrowid binary(16) NOT NULL,
  jcolumnsourceid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  srcpartview binary(16) DEFAULT NULL,
  viewfield varchar(255) DEFAULT NULL,
  PRIMARY KEY (jcolumnsourceid),
  INDEX parent_jcolumnsource (parentstructrowid),
  CONSTRAINT fk_8d8c85ebd15e45d7b13b0b4001eb9ac2 FOREIGN KEY (parentstructrowid)
  REFERENCES journalcolumn (journalcolumnid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1092
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "journal"
--
CREATE TABLE IF NOT EXISTS journal (
  instanceid binary(16) DEFAULT NULL,
  journalid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(32) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  jrnliconcls varchar(80) DEFAULT NULL,
  usefavorites int(11) DEFAULT NULL,
  PRIMARY KEY (journalid),
  INDEX parent_journal (instanceid),
  CONSTRAINT fk_34c46c6e921547468d9d4800b6549003 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "journalcolumn"
--
CREATE TABLE IF NOT EXISTS journalcolumn (
  instanceid binary(16) DEFAULT NULL,
  journalcolumnid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  columnalignment int(11) DEFAULT NULL,
  colsort int(11) DEFAULT NULL,
  groupaggregation int(11) DEFAULT NULL,
  PRIMARY KEY (journalcolumnid),
  INDEX parent_journalcolumn (instanceid),
  CONSTRAINT fk_f8d77b31a757488cbb5822700737d4b8 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1092
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "journalsrc"
--
CREATE TABLE IF NOT EXISTS journalsrc (
  instanceid binary(16) DEFAULT NULL,
  journalsrcid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  partview binary(16) DEFAULT NULL,
  onrun int(11) DEFAULT NULL,
  openmode varchar(64) DEFAULT NULL,
  viewalias varchar(255) DEFAULT NULL,
  PRIMARY KEY (journalsrcid),
  INDEX parent_journalsrc (instanceid),
  CONSTRAINT fk_dac3244d70d645a4885dd610f748ebfc FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "localizeinfo"
--
CREATE TABLE IF NOT EXISTS localizeinfo (
  instanceid binary(16) DEFAULT NULL,
  localizeinfoid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  langfull varchar(255) DEFAULT NULL,
  langshort varchar(255) DEFAULT NULL,
  PRIMARY KEY (localizeinfoid),
  INDEX parent_localizeinfo (instanceid),
  CONSTRAINT fk_a57d435a73b34107b22bc18782085c84 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "methodrestriction"
--
CREATE TABLE IF NOT EXISTS methodrestriction (
  parentstructrowid binary(16) NOT NULL,
  methodrestrictionid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  part binary(16) DEFAULT NULL,
  method binary(16) DEFAULT NULL,
  isrestricted int(11) DEFAULT NULL,
  PRIMARY KEY (methodrestrictionid),
  INDEX parent_methodrestriction (parentstructrowid),
  CONSTRAINT fk_0f7b3070f7094e7d868ccc337e3075d1 FOREIGN KEY (parentstructrowid)
  REFERENCES objectmode (objectmodeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "mtzapp"
--
CREATE TABLE IF NOT EXISTS mtzapp (
  instanceid binary(16) DEFAULT NULL,
  mtzappid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  dbname varchar(64) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (mtzappid),
  INDEX parent_mtzapp (instanceid),
  CONSTRAINT fk_8cdbe0c259894210bdfb33c2c45f2509 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "mtzext_def"
--
CREATE TABLE IF NOT EXISTS mtzext_def (
  instanceid binary(16) DEFAULT NULL,
  mtzext_defid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  exttype int(11) DEFAULT NULL,
  thedescription text DEFAULT NULL,
  PRIMARY KEY (mtzext_defid),
  INDEX parent_mtzext_def (instanceid),
  CONSTRAINT fk_7f62144a857648bcacba1f9dc4874459 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "mtzextrel"
--
CREATE TABLE IF NOT EXISTS mtzextrel (
  instanceid binary(16) DEFAULT NULL,
  mtzextrelid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theplatform int(11) DEFAULT NULL,
  theclassname varchar(255) DEFAULT NULL,
  thelibraryname varchar(255) DEFAULT NULL,
  PRIMARY KEY (mtzextrelid),
  INDEX parent_mtzextrel (instanceid),
  CONSTRAINT fk_e48fe6dd79f94d42bac3cb39f69171bc FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "nextstate"
--
CREATE TABLE IF NOT EXISTS nextstate (
  parentstructrowid binary(16) NOT NULL,
  nextstateid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thestate binary(16) DEFAULT NULL,
  PRIMARY KEY (nextstateid),
  INDEX parent_nextstate (parentstructrowid),
  CONSTRAINT fk_11c1a17929b24ddcbdb71eb21d2ff878 FOREIGN KEY (parentstructrowid)
  REFERENCES objstatus (objstatusid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "num_head"
--
CREATE TABLE IF NOT EXISTS num_head (
  instanceid binary(16) DEFAULT NULL,
  num_headid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  shema int(11) DEFAULT NULL,
  PRIMARY KEY (num_headid),
  INDEX parent_num_head (instanceid),
  CONSTRAINT fk_c436bed9294e48a78c376d4cf32343be FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "num_values"
--
CREATE TABLE IF NOT EXISTS num_values (
  parentstructrowid binary(16) NOT NULL,
  num_valuesid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  the_value int(11) DEFAULT NULL,
  ownerpartname varchar(64) DEFAULT NULL,
  ownerrowid binary(16) DEFAULT NULL,
  PRIMARY KEY (num_valuesid),
  INDEX parent_num_values (parentstructrowid),
  CONSTRAINT fk_833dc00be8d74d9191032dd084befc1e FOREIGN KEY (parentstructrowid)
  REFERENCES num_zones (num_zonesid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "num_zones"
--
CREATE TABLE IF NOT EXISTS num_zones (
  instanceid binary(16) DEFAULT NULL,
  num_zonesid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  zonemask varchar(255) DEFAULT NULL,
  PRIMARY KEY (num_zonesid),
  INDEX parent_num_zones (instanceid),
  CONSTRAINT fk_59512432e6df41f9a4366bf7db1800bb FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "objectmode"
--
CREATE TABLE IF NOT EXISTS objectmode (
  parentstructrowid binary(16) NOT NULL,
  objectmodeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(5) DEFAULT NULL,
  defaultmode int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (objectmodeid),
  INDEX parent_objectmode (parentstructrowid),
  CONSTRAINT fk_1168296da01c45dbb67d76a07f3ff64c FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "objecttype"
--
CREATE TABLE IF NOT EXISTS objecttype (
  instanceid binary(16) DEFAULT NULL,
  objecttypeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  package binary(16) DEFAULT NULL,
  the_comment varchar(255) DEFAULT NULL,
  name varchar(14) DEFAULT NULL,
  issingleinstance int(11) DEFAULT NULL,
  chooseview binary(16) DEFAULT NULL,
  onrun binary(16) DEFAULT NULL,
  oncreate binary(16) DEFAULT NULL,
  ondelete binary(16) DEFAULT NULL,
  allowreftoobject int(11) DEFAULT NULL,
  allowsearch int(11) DEFAULT NULL,
  replicatype int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  useownership int(11) DEFAULT NULL,
  usearchiving int(11) DEFAULT NULL,
  commitfullobject int(11) DEFAULT NULL,
  objiconcls varchar(80) DEFAULT NULL,
  PRIMARY KEY (objecttypeid),
  INDEX parent_objecttype (instanceid),
  CONSTRAINT fk_0670efaf512711d58822204c4f4f5020 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 910
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "objstatus"
--
CREATE TABLE IF NOT EXISTS objstatus (
  parentstructrowid binary(16) NOT NULL,
  objstatusid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  isstartup int(11) DEFAULT NULL,
  isarchive int(11) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  PRIMARY KEY (objstatusid),
  INDEX parent_objstatus (parentstructrowid),
  CONSTRAINT fk_df46c86638f84ef192e25f899d98bd16 FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "parameters"
--
CREATE TABLE IF NOT EXISTS parameters (
  parentstructrowid binary(16) NOT NULL,
  parametersid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  typeofparm binary(16) DEFAULT NULL,
  datasize int(11) DEFAULT NULL,
  allownull int(11) DEFAULT NULL,
  outparam int(11) DEFAULT NULL,
  referencetype int(11) DEFAULT NULL,
  reftotype binary(16) DEFAULT NULL,
  reftopart binary(16) DEFAULT NULL,
  PRIMARY KEY (parametersid),
  INDEX parent_parameters (parentstructrowid),
  CONSTRAINT fk_e598e74ca9de404186fa972e95635600 FOREIGN KEY (parentstructrowid)
  REFERENCES script (scriptid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 338
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "parentpackage"
--
CREATE TABLE IF NOT EXISTS parentpackage (
  parentstructrowid binary(16) NOT NULL,
  parentpackageid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  package binary(16) DEFAULT NULL,
  PRIMARY KEY (parentpackageid),
  INDEX parent_parentpackage (parentstructrowid),
  CONSTRAINT fk_6ea00756b9804d23b209202389953a13 FOREIGN KEY (parentstructrowid)
  REFERENCES mtzapp (mtzappid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "part"
--
CREATE TABLE IF NOT EXISTS part (
  parentstructrowid binary(16) NOT NULL,
  partid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  parentrowid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  parttype int(11) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  name varchar(20) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  nolog int(11) DEFAULT NULL,
  manualregister int(11) DEFAULT NULL,
  oncreate binary(16) DEFAULT NULL,
  onsave binary(16) DEFAULT NULL,
  onrun binary(16) DEFAULT NULL,
  ondelete binary(16) DEFAULT NULL,
  addbehaivor int(11) DEFAULT NULL,
  extenderobject binary(16) DEFAULT NULL,
  shablonbrief varchar(100) DEFAULT NULL,
  rulebrief varchar(500) DEFAULT NULL,
  isjormalchange int(11) DEFAULT NULL,
  usearchiving int(11) DEFAULT NULL,
  integerpkey int(11) DEFAULT NULL,
  particoncls varchar(80) DEFAULT NULL,
  PRIMARY KEY (partid),
  INDEX parent_part (parentstructrowid),
  CONSTRAINT fk_0670efb1512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 571
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partmenu"
--
CREATE TABLE IF NOT EXISTS partmenu (
  parentstructrowid binary(16) NOT NULL,
  partmenuid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  tooltip varchar(80) DEFAULT NULL,
  the_action binary(16) DEFAULT NULL,
  ismenuitem int(11) DEFAULT NULL,
  istoolbarbutton int(11) DEFAULT NULL,
  hotkey varchar(20) DEFAULT NULL,
  PRIMARY KEY (partmenuid),
  INDEX parent_partmenu (parentstructrowid),
  CONSTRAINT fk_548e9e2e89f64822a312101ca4a9fe74 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partparammap"
--
CREATE TABLE IF NOT EXISTS partparammap (
  parentstructrowid binary(16) NOT NULL,
  partparammapid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  fieldname varchar(255) DEFAULT NULL,
  paramname varchar(80) DEFAULT NULL,
  noedit int(11) DEFAULT NULL,
  PRIMARY KEY (partparammapid),
  INDEX parent_partparammap (parentstructrowid),
  CONSTRAINT fk_f8be6fca595d4f46acdbfb5838a246ca FOREIGN KEY (parentstructrowid)
  REFERENCES partmenu (partmenuid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partview"
--
CREATE TABLE IF NOT EXISTS partview (
  parentstructrowid binary(16) NOT NULL,
  partviewid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(64) DEFAULT NULL,
  forchoose int(11) DEFAULT NULL,
  filterfield0 varchar(255) DEFAULT NULL,
  filterfield1 varchar(255) DEFAULT NULL,
  filterfield2 varchar(255) DEFAULT NULL,
  filterfield3 varchar(255) DEFAULT NULL,
  PRIMARY KEY (partviewid),
  INDEX parent_partview (parentstructrowid),
  CONSTRAINT fk_d713b64d4ce8466dbe2b448874dc0469 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 190
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partview_lnk"
--
CREATE TABLE IF NOT EXISTS partview_lnk (
  parentstructrowid binary(16) NOT NULL,
  partview_lnkid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theview binary(16) DEFAULT NULL,
  thejoinsource binary(16) DEFAULT NULL,
  reftype int(11) DEFAULT NULL,
  thejoindestination binary(16) DEFAULT NULL,
  handjoin varchar(255) DEFAULT NULL,
  seq int(11) DEFAULT NULL,
  PRIMARY KEY (partview_lnkid),
  INDEX parent_partview_lnk (parentstructrowid),
  CONSTRAINT fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61 FOREIGN KEY (parentstructrowid)
  REFERENCES partview (partviewid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "queryresult"
--
CREATE TABLE IF NOT EXISTS queryresult (
  queryresultid binary(16) NOT NULL,
  result binary(16) DEFAULT NULL
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "reports"
--
CREATE TABLE IF NOT EXISTS reports (
  instanceid binary(16) DEFAULT NULL,
  reportsid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  reportfile_ext varchar(4) DEFAULT NULL,
  reportfile varchar(255) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  preparemethod binary(16) DEFAULT NULL,
  reporttype int(11) DEFAULT NULL,
  thereportext binary(16) DEFAULT NULL,
  reportview varchar(255) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (reportsid),
  INDEX parent_reports (instanceid),
  CONSTRAINT fk_259b3dfab8ac417888fd4b715d372fc3 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rpresult"
--
CREATE TABLE IF NOT EXISTS rpresult (
  rpresultid binary(16) NOT NULL,
  parentlevel int(11) NOT NULL,
  partname varchar(255) DEFAULT NULL,
  rowid binary(16) DEFAULT NULL
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rptfields"
--
CREATE TABLE IF NOT EXISTS rptfields (
  parentstructrowid binary(16) NOT NULL,
  rptfieldsid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  fieldtype binary(16) DEFAULT NULL,
  fieldsize int(11) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  PRIMARY KEY (rptfieldsid),
  INDEX parent_rptfields (parentstructrowid),
  CONSTRAINT fk_0c77d0de559e43fcb181156e126543f1 FOREIGN KEY (parentstructrowid)
  REFERENCES rptstruct (rptstructid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rptformula"
--
CREATE TABLE IF NOT EXISTS rptformula (
  instanceid binary(16) DEFAULT NULL,
  rptformulaid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  code text DEFAULT NULL,
  platform binary(16) DEFAULT NULL,
  PRIMARY KEY (rptformulaid),
  INDEX parent_rptformula (instanceid),
  CONSTRAINT fk_e422132e07f44c0f8246b0f16cd9186a FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rptstruct"
--
CREATE TABLE IF NOT EXISTS rptstruct (
  instanceid binary(16) DEFAULT NULL,
  rptstructid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  parentrowid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  PRIMARY KEY (rptstructid),
  INDEX parent_rptstruct (instanceid),
  CONSTRAINT fk_f5e8492a2224452f85ffa14882c6554f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "script"
--
CREATE TABLE IF NOT EXISTS script (
  parentstructrowid binary(16) NOT NULL,
  scriptid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (scriptid),
  INDEX parent_script (parentstructrowid),
  CONSTRAINT fk_0670efa3512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES sharedmethod (sharedmethodid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1365
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "sharedmethod"
--
CREATE TABLE IF NOT EXISTS sharedmethod (
  instanceid binary(16) DEFAULT NULL,
  sharedmethodid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  returntype binary(16) DEFAULT NULL,
  PRIMARY KEY (sharedmethodid),
  INDEX parent_sharedmethod (instanceid),
  CONSTRAINT fk_0670efad512711d58822204c4f4f5020 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 496
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "structrestriction"
--
CREATE TABLE IF NOT EXISTS structrestriction (
  parentstructrowid binary(16) NOT NULL,
  structrestrictionid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  struct binary(16) DEFAULT NULL,
  allowread int(11) DEFAULT NULL,
  allowadd int(11) DEFAULT NULL,
  allowedit int(11) DEFAULT NULL,
  allowdelete int(11) DEFAULT NULL,
  PRIMARY KEY (structrestrictionid),
  INDEX parent_structrestriction (parentstructrowid),
  CONSTRAINT fk_f448ac333b13489993ee47d3d62962ec FOREIGN KEY (parentstructrowid)
  REFERENCES objectmode (objectmodeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "syslog"
--
CREATE TABLE IF NOT EXISTS syslog (
  instanceid binary(16) DEFAULT NULL,
  syslogid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thesession binary(16) DEFAULT NULL,
  the_resource varchar(255) DEFAULT NULL,
  logstructid varchar(255) DEFAULT NULL,
  verb varchar(80) DEFAULT NULL,
  loginstanceid binary(16) DEFAULT NULL,
  PRIMARY KEY (syslogid),
  INDEX parent_syslog (instanceid),
  CONSTRAINT fk_45eadae898374ee59a3107370302f20f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "sysoptions"
--
CREATE TABLE IF NOT EXISTS sysoptions (
  sysoptionsid binary(16) NOT NULL,
  name varchar(255) DEFAULT NULL,
  value varchar(255) DEFAULT NULL,
  optiontype varchar(255) DEFAULT NULL,
  PRIMARY KEY (sysoptionsid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 152
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "sysrefcache"
--
CREATE TABLE IF NOT EXISTS sysrefcache (
  instanceid binary(16) DEFAULT NULL,
  sysrefcacheid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  cachetype int(11) DEFAULT NULL,
  objectownerid binary(16) DEFAULT NULL,
  sessionid binary(16) DEFAULT NULL,
  modulename varchar(40) DEFAULT NULL,
  PRIMARY KEY (sysrefcacheid),
  INDEX parent_sysrefcache (instanceid),
  CONSTRAINT fk_35d224df283041549e80ff578aab323c FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "the_session"
--
CREATE TABLE IF NOT EXISTS the_session (
  instanceid binary(16) DEFAULT NULL,
  the_sessionid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  applicationid binary(16) DEFAULT NULL,
  userrole binary(16) DEFAULT NULL,
  closedat datetime DEFAULT NULL,
  closed int(11) DEFAULT NULL,
  usersid binary(16) DEFAULT NULL,
  lastaccess datetime DEFAULT NULL,
  startat datetime DEFAULT NULL,
  lang varchar(25) DEFAULT NULL,
  login varchar(255) DEFAULT NULL,
  PRIMARY KEY (the_sessionid),
  INDEX parent_the_session (instanceid),
  CONSTRAINT fk_78943ea279364f58b31676e4f968e3b4 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 744
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "typelist"
--
CREATE TABLE IF NOT EXISTS typelist (
  typelistid binary(16) NOT NULL,
  name varchar(255) NOT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  registerproc varchar(255) DEFAULT NULL,
  deleteproc varchar(255) DEFAULT NULL,
  hclproc varchar(255) DEFAULT NULL,
  propagateproc varchar(255) DEFAULT NULL,
  PRIMARY KEY (typelistid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 399
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "typemenu"
--
CREATE TABLE IF NOT EXISTS typemenu (
  parentstructrowid binary(16) NOT NULL,
  typemenuid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  tooltip varchar(80) DEFAULT NULL,
  the_action binary(16) DEFAULT NULL,
  ismenuitem int(11) DEFAULT NULL,
  istoolbarbutton int(11) DEFAULT NULL,
  hotkey varchar(20) DEFAULT NULL,
  PRIMARY KEY (typemenuid),
  INDEX parent_typemenu (parentstructrowid),
  CONSTRAINT fk_8776747a743d47b9af1cab00ff81154f FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "uniqueconstraint"
--
CREATE TABLE IF NOT EXISTS uniqueconstraint (
  parentstructrowid binary(16) NOT NULL,
  uniqueconstraintid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  perparent int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (uniqueconstraintid),
  INDEX parent_uniqueconstraint (parentstructrowid),
  CONSTRAINT fk_9caa5c89f1cb4b62b1d0ff2d29a40057 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 744
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "users"
--
CREATE TABLE IF NOT EXISTS users (
  instanceid binary(16) DEFAULT NULL,
  usersid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  family varchar(255) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  surname varchar(255) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  password varchar(80) DEFAULT NULL,
  domainame varchar(255) DEFAULT NULL,
  email varchar(255) DEFAULT NULL,
  phone varchar(20) DEFAULT NULL,
  localphone varchar(20) DEFAULT NULL,
  PRIMARY KEY (usersid),
  INDEX parent_users (instanceid),
  CONSTRAINT fk_148bb85509654e9ea3d648dcc8ce528b FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "validator"
--
CREATE TABLE IF NOT EXISTS validator (
  parentstructrowid binary(16) NOT NULL,
  validatorid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (validatorid),
  INDEX parent_validator (parentstructrowid),
  CONSTRAINT fk_7d323655bad74d12afc2e7ff3613b4a1 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "viewcolumn"
--
CREATE TABLE IF NOT EXISTS viewcolumn (
  parentstructrowid binary(16) NOT NULL,
  viewcolumnid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(64) DEFAULT NULL,
  frompart binary(16) DEFAULT NULL,
  field binary(16) DEFAULT NULL,
  aggregation int(11) DEFAULT NULL,
  expression text DEFAULT NULL,
  forcombo int(11) DEFAULT NULL,
  PRIMARY KEY (viewcolumnid),
  INDEX parent_viewcolumn (parentstructrowid),
  CONSTRAINT fk_3bf43d5e0eb54ddb8efa62df3261a272 FOREIGN KEY (parentstructrowid)
  REFERENCES partview (partviewid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 313
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "workplace"
--
CREATE TABLE IF NOT EXISTS workplace (
  instanceid binary(16) DEFAULT NULL,
  workplaceid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  theversion varchar(30) DEFAULT NULL,
  theplatform int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (workplaceid),
  INDEX parent_workplace (instanceid),
  CONSTRAINT fk_973921c449264c9da7816062cf81b5ad FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Создать процедуру "armjournal_brief"
--
CREATE PROCEDURE armjournal_brief (acursession varchar(38),
aarmjournalid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aarmjournalid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM armjournal
    WHERE armjournalid = g2b(aarmjournalid);
    IF aec > 0 THEN
      SET abrief = armjournal_brief_f(g2b(aarmjournalid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "armjournal_client_trigger"
--
CREATE PROCEDURE armjournal_client_trigger (acursession varchar(38),
aARMJournalid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "armjournal_copy"
--
CREATE PROCEDURE armjournal_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_armjournal CURSOR FOR
    SELECT
      armjournalid
    FROM armjournal
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO armjournal (armjournalid
    , instanceid
    , thejournal)
      SELECT
        copymap(acopyaction, b2g(armjournalid)),
        copymap(acopyaction, b2g(instanceid)),
        thejournal

      FROM armjournal
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_armjournal;
    SET fetch_done = FALSE;
    FETCH copy_cursor_armjournal INTO aid;
    WHILE NOT fetch_done DO
      CALL armjrnlrep_copy(acursession, acopyaction, ainstanceid, aid);
      CALL armjrnlrun_copy(acursession, acopyaction, ainstanceid, aid);
      CALL armjrnladd_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_armjournal INTO aid;
    END WHILE;

    CLOSE copy_cursor_armjournal;
  END
  $$

--
-- Создать процедуру "armjournal_delete"
--
CREATE PROCEDURE armjournal_delete (acursession varchar(38),
aarmjournalid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjournal
    WHERE armjournalid = g2b(aarmjournalid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=armjournal' result;
        LEAVE body;
      END IF;
      CALL armjournal_logger(acursession, aarmjournalid);
      DELETE
        FROM armjournal
      WHERE armjournalid = g2b(aarmjournalid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'armjournal'
        AND ownerrowid = g2b(aarmjournalid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "armjournal_islocked"
--
CREATE PROCEDURE armjournal_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM armjournal
    WHERE armjournalid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "armjournal_lock"
--
CREATE PROCEDURE armjournal_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjournal_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE armjournal
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE armjournalid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE armjournal
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE armjournalid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjournal_logger"
--
CREATE PROCEDURE armjournal_logger (acursession varchar(38),
aarmjournalid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjournal_parent"
--
CREATE PROCEDURE armjournal_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM armjournal
    WHERE armjournalid = arowid;
  END
  $$

--
-- Создать процедуру "armjournal_save"
--
CREATE PROCEDURE armjournal_save (acursession varchar(38),
ainstanceid varchar(38),
aarmjournalid varchar(38)
, athejournal varchar(38)/* журнал *//* журнал */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjournal
    WHERE armjournalid = g2b(aarmjournalid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=armjournal' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL armjournal_logger(acursession, aarmjournalid);
        UPDATE armjournal
        SET changestamp = NOW(),
            thejournal = g2b(athejournal)
        WHERE armjournalid = g2b(aarmjournalid);


        CALL armjournal_client_trigger(acursession, aarmjournalid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=armjournal' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO armjournal (changestamp, armjournalid
          , instanceid
          , thejournal)
            VALUES (NOW(), g2b(aarmjournalid), g2b(ainstanceid), g2b(athejournal));


          CALL armjournal_client_trigger(acursession, aarmjournalid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "armjournal_unlock"
--
CREATE PROCEDURE armjournal_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjournal_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE armjournal
      SET lockuserid = NULL
      WHERE armjournalid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE armjournal
      SET locksessionid = NULL
      WHERE armjournalid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnladd_brief"
--
CREATE PROCEDURE armjrnladd_brief (acursession varchar(38),
aarmjrnladdid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aarmjrnladdid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM armjrnladd
    WHERE armjrnladdid = g2b(aarmjrnladdid);
    IF aec > 0 THEN
      SET abrief = armjrnladd_brief_f(g2b(aarmjrnladdid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "armjrnladd_client_trigger"
--
CREATE PROCEDURE armjrnladd_client_trigger (acursession varchar(38),
aARMJRNLADDid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "armjrnladd_copy"
--
CREATE PROCEDURE armjrnladd_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO armjrnladd (armjrnladdid
    , parentstructrowid
    , name

    , theextention)
      SELECT
        copymap(acopyaction, b2g(armjrnladdid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        theextention

      FROM armjrnladd
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "armjrnladd_delete"
--
CREATE PROCEDURE armjrnladd_delete (acursession varchar(38),
aarmjrnladdid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjrnladd
    WHERE armjrnladdid = g2b(aarmjrnladdid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=armjrnladd' result;
        LEAVE body;
      END IF;
      CALL armjrnladd_logger(acursession, aarmjrnladdid);
      DELETE
        FROM armjrnladd
      WHERE armjrnladdid = g2b(aarmjrnladdid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'armjrnladd'
        AND ownerrowid = g2b(aarmjrnladdid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "armjrnladd_islocked"
--
CREATE PROCEDURE armjrnladd_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM armjrnladd
    WHERE armjrnladdid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "armjrnladd_lock"
--
CREATE PROCEDURE armjrnladd_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjrnladd_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE armjrnladd
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE armjrnladdid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE armjrnladd
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE armjrnladdid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnladd_logger"
--
CREATE PROCEDURE armjrnladd_logger (acursession varchar(38),
aarmjrnladdid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnladd_parent"
--
CREATE PROCEDURE armjrnladd_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM armjrnladd
    WHERE armjrnladdid = arowid;
    SET aparenttable = 'armjournal';
  END
  $$

--
-- Создать процедуру "armjrnladd_save"
--
CREATE PROCEDURE armjrnladd_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aarmjrnladdid varchar(38)
, aname
varchar(255)/* название *//* название */
, atheextention varchar(38)/* расширение *//* расширение */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjrnladd
    WHERE armjrnladdid = g2b(aarmjrnladdid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=armjrnladd' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL armjrnladd_logger(acursession, aarmjrnladdid);
        UPDATE armjrnladd
        SET changestamp = NOW(),
            name = aname,
            theextention = g2b(atheextention)
        WHERE armjrnladdid = g2b(aarmjrnladdid);


        CALL armjrnladd_client_trigger(acursession, aarmjrnladdid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=armjrnladd' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO armjrnladd (changestamp, armjrnladdid
          , parentstructrowid
          , name

          , theextention)
            VALUES (NOW(), g2b(aarmjrnladdid), g2b(aparentstructrowid), aname, g2b(atheextention));


          CALL armjrnladd_client_trigger(acursession, aarmjrnladdid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "armjrnladd_unlock"
--
CREATE PROCEDURE armjrnladd_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjrnladd_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE armjrnladd
      SET lockuserid = NULL
      WHERE armjrnladdid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE armjrnladd
      SET locksessionid = NULL
      WHERE armjrnladdid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnlrep_brief"
--
CREATE PROCEDURE armjrnlrep_brief (acursession varchar(38),
aarmjrnlrepid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aarmjrnlrepid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM armjrnlrep
    WHERE armjrnlrepid = g2b(aarmjrnlrepid);
    IF aec > 0 THEN
      SET abrief = armjrnlrep_brief_f(g2b(aarmjrnlrepid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "armjrnlrep_client_trigger"
--
CREATE PROCEDURE armjrnlrep_client_trigger (acursession varchar(38),
aARMJRNLREPid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "armjrnlrep_copy"
--
CREATE PROCEDURE armjrnlrep_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO armjrnlrep (armjrnlrepid
    , parentstructrowid
    , repname

    , thereport)
      SELECT
        copymap(acopyaction, b2g(armjrnlrepid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        repname,
        thereport

      FROM armjrnlrep
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "armjrnlrep_delete"
--
CREATE PROCEDURE armjrnlrep_delete (acursession varchar(38),
aarmjrnlrepid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjrnlrep
    WHERE armjrnlrepid = g2b(aarmjrnlrepid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=armjrnlrep' result;
        LEAVE body;
      END IF;
      CALL armjrnlrep_logger(acursession, aarmjrnlrepid);
      DELETE
        FROM armjrnlrep
      WHERE armjrnlrepid = g2b(aarmjrnlrepid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'armjrnlrep'
        AND ownerrowid = g2b(aarmjrnlrepid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "armjrnlrep_islocked"
--
CREATE PROCEDURE armjrnlrep_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM armjrnlrep
    WHERE armjrnlrepid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "armjrnlrep_lock"
--
CREATE PROCEDURE armjrnlrep_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjrnlrep_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE armjrnlrep
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE armjrnlrepid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE armjrnlrep
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE armjrnlrepid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnlrep_logger"
--
CREATE PROCEDURE armjrnlrep_logger (acursession varchar(38),
aarmjrnlrepid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnlrep_parent"
--
CREATE PROCEDURE armjrnlrep_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM armjrnlrep
    WHERE armjrnlrepid = arowid;
    SET aparenttable = 'armjournal';
  END
  $$

--
-- Создать процедуру "armjrnlrep_save"
--
CREATE PROCEDURE armjrnlrep_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aarmjrnlrepid varchar(38)
, arepname
varchar(255)/* название отчета *//* название отчета */
, athereport varchar(38)/* отчет *//* отчет */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjrnlrep
    WHERE armjrnlrepid = g2b(aarmjrnlrepid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=armjrnlrep' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL armjrnlrep_logger(acursession, aarmjrnlrepid);
        UPDATE armjrnlrep
        SET changestamp = NOW(),
            repname = arepname,
            thereport = g2b(athereport)
        WHERE armjrnlrepid = g2b(aarmjrnlrepid);


        CALL armjrnlrep_client_trigger(acursession, aarmjrnlrepid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=armjrnlrep' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO armjrnlrep (changestamp, armjrnlrepid
          , parentstructrowid
          , repname

          , thereport)
            VALUES (NOW(), g2b(aarmjrnlrepid), g2b(aparentstructrowid), arepname, g2b(athereport));


          CALL armjrnlrep_client_trigger(acursession, aarmjrnlrepid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "armjrnlrep_unlock"
--
CREATE PROCEDURE armjrnlrep_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjrnlrep_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE armjrnlrep
      SET lockuserid = NULL
      WHERE armjrnlrepid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE armjrnlrep
      SET locksessionid = NULL
      WHERE armjrnlrepid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnlrun_brief"
--
CREATE PROCEDURE armjrnlrun_brief (acursession varchar(38),
aarmjrnlrunid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aarmjrnlrunid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM armjrnlrun
    WHERE armjrnlrunid = g2b(aarmjrnlrunid);
    IF aec > 0 THEN
      SET abrief = armjrnlrun_brief_f(g2b(aarmjrnlrunid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "armjrnlrun_client_trigger"
--
CREATE PROCEDURE armjrnlrun_client_trigger (acursession varchar(38),
aARMJRNLRUNid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "armjrnlrun_copy"
--
CREATE PROCEDURE armjrnlrun_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO armjrnlrun (armjrnlrunid
    , parentstructrowid
    , name

    , theextention)
      SELECT
        copymap(acopyaction, b2g(armjrnlrunid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        theextention

      FROM armjrnlrun
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "armjrnlrun_delete"
--
CREATE PROCEDURE armjrnlrun_delete (acursession varchar(38),
aarmjrnlrunid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjrnlrun
    WHERE armjrnlrunid = g2b(aarmjrnlrunid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=armjrnlrun' result;
        LEAVE body;
      END IF;
      CALL armjrnlrun_logger(acursession, aarmjrnlrunid);
      DELETE
        FROM armjrnlrun
      WHERE armjrnlrunid = g2b(aarmjrnlrunid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'armjrnlrun'
        AND ownerrowid = g2b(aarmjrnlrunid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "armjrnlrun_islocked"
--
CREATE PROCEDURE armjrnlrun_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM armjrnlrun
    WHERE armjrnlrunid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "armjrnlrun_lock"
--
CREATE PROCEDURE armjrnlrun_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjrnlrun_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE armjrnlrun
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE armjrnlrunid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE armjrnlrun
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE armjrnlrunid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnlrun_logger"
--
CREATE PROCEDURE armjrnlrun_logger (acursession varchar(38),
aarmjrnlrunid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armjrnlrun_parent"
--
CREATE PROCEDURE armjrnlrun_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM armjrnlrun
    WHERE armjrnlrunid = arowid;
    SET aparenttable = 'armjournal';
  END
  $$

--
-- Создать процедуру "armjrnlrun_save"
--
CREATE PROCEDURE armjrnlrun_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aarmjrnlrunid varchar(38)
, aname
varchar(255)/* название *//* название */
, atheextention varchar(38)/* расширение *//* расширение */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armjrnlrun
    WHERE armjrnlrunid = g2b(aarmjrnlrunid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=armjrnlrun' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL armjrnlrun_logger(acursession, aarmjrnlrunid);
        UPDATE armjrnlrun
        SET changestamp = NOW(),
            name = aname,
            theextention = g2b(atheextention)
        WHERE armjrnlrunid = g2b(aarmjrnlrunid);


        CALL armjrnlrun_client_trigger(acursession, aarmjrnlrunid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=armjrnlrun' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO armjrnlrun (changestamp, armjrnlrunid
          , parentstructrowid
          , name

          , theextention)
            VALUES (NOW(), g2b(aarmjrnlrunid), g2b(aparentstructrowid), aname, g2b(atheextention));


          CALL armjrnlrun_client_trigger(acursession, aarmjrnlrunid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "armjrnlrun_unlock"
--
CREATE PROCEDURE armjrnlrun_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armjrnlrun_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE armjrnlrun
      SET lockuserid = NULL
      WHERE armjrnlrunid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE armjrnlrun
      SET locksessionid = NULL
      WHERE armjrnlrunid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armtypes_brief"
--
CREATE PROCEDURE armtypes_brief (acursession varchar(38),
aarmtypesid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aarmtypesid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM armtypes
    WHERE armtypesid = g2b(aarmtypesid);
    IF aec > 0 THEN
      SET abrief = armtypes_brief_f(g2b(aarmtypesid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "armtypes_client_trigger"
--
CREATE PROCEDURE armtypes_client_trigger (acursession varchar(38),
aARMTypesid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "armtypes_copy"
--
CREATE PROCEDURE armtypes_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO armtypes (armtypesid
    , instanceid
    , thedocumenttype)
      SELECT
        copymap(acopyaction, b2g(armtypesid)),
        copymap(acopyaction, b2g(instanceid)),
        thedocumenttype

      FROM armtypes
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "armtypes_delete"
--
CREATE PROCEDURE armtypes_delete (acursession varchar(38),
aarmtypesid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armtypes
    WHERE armtypesid = g2b(aarmtypesid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=armtypes' result;
        LEAVE body;
      END IF;
      CALL armtypes_logger(acursession, aarmtypesid);
      DELETE
        FROM armtypes
      WHERE armtypesid = g2b(aarmtypesid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'armtypes'
        AND ownerrowid = g2b(aarmtypesid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "armtypes_islocked"
--
CREATE PROCEDURE armtypes_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM armtypes
    WHERE armtypesid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "armtypes_lock"
--
CREATE PROCEDURE armtypes_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armtypes_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE armtypes
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE armtypesid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE armtypes
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE armtypesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armtypes_logger"
--
CREATE PROCEDURE armtypes_logger (acursession varchar(38),
aarmtypesid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "armtypes_parent"
--
CREATE PROCEDURE armtypes_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM armtypes
    WHERE armtypesid = arowid;
  END
  $$

--
-- Создать процедуру "armtypes_save"
--
CREATE PROCEDURE armtypes_save (acursession varchar(38),
ainstanceid varchar(38),
aarmtypesid varchar(38)
, athedocumenttype varchar(38)/* тип документа *//* тип документа */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM armtypes
    WHERE armtypesid = g2b(aarmtypesid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=armtypes' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL armtypes_logger(acursession, aarmtypesid);
        UPDATE armtypes
        SET changestamp = NOW(),
            thedocumenttype = g2b(athedocumenttype)
        WHERE armtypesid = g2b(aarmtypesid);


        CALL armtypes_client_trigger(acursession, aarmtypesid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=armtypes' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO armtypes (changestamp, armtypesid
          , instanceid
          , thedocumenttype)
            VALUES (NOW(), g2b(aarmtypesid), g2b(ainstanceid), g2b(athedocumenttype));


          CALL armtypes_client_trigger(acursession, aarmtypesid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "armtypes_unlock"
--
CREATE PROCEDURE armtypes_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL armtypes_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE armtypes
      SET lockuserid = NULL
      WHERE armtypesid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE armtypes
      SET locksessionid = NULL
      WHERE armtypesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "bpc_copy"
--
CREATE PROCEDURE bpc_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL bpc_info_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpc_info_brief"
--
CREATE PROCEDURE bpc_info_brief (acursession varchar(38),
abpc_infoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF abpc_infoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM bpc_info
    WHERE bpc_infoid = g2b(abpc_infoid);
    IF aec > 0 THEN
      SET abrief = bpc_info_brief_f(g2b(abpc_infoid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "bpc_info_client_trigger"
--
CREATE PROCEDURE bpc_info_client_trigger (acursession varchar(38),
abpc_infoid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "bpc_info_copy"
--
CREATE PROCEDURE bpc_info_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO bpc_info (bpc_infoid
    , instanceid
    , name)
      SELECT
        copymap(acopyaction, b2g(bpc_infoid)),
        copymap(acopyaction, b2g(instanceid)),
        name

      FROM bpc_info
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "bpc_info_delete"
--
CREATE PROCEDURE bpc_info_delete (acursession varchar(38),
abpc_infoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM bpc_info
    WHERE bpc_infoid = g2b(abpc_infoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bpc.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=bpc_info' result;
        LEAVE body;
      END IF;
      CALL bpc_info_logger(acursession, abpc_infoid);
      DELETE
        FROM bpc_info
      WHERE bpc_infoid = g2b(abpc_infoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'bpc_info'
        AND ownerrowid = g2b(abpc_infoid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpc_info_islocked"
--
CREATE PROCEDURE bpc_info_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM bpc_info
    WHERE bpc_infoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "bpc_info_lock"
--
CREATE PROCEDURE bpc_info_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL bpc_info_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE bpc_info
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE bpc_infoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE bpc_info
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE bpc_infoid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "bpc_info_logger"
--
CREATE PROCEDURE bpc_info_logger (acursession varchar(38),
abpc_infoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "bpc_info_parent"
--
CREATE PROCEDURE bpc_info_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM bpc_info
    WHERE bpc_infoid = arowid;
  END
  $$

--
-- Создать процедуру "bpc_info_save"
--
CREATE PROCEDURE bpc_info_save (acursession varchar(38),
ainstanceid varchar(38),
abpc_infoid varchar(38)
, aname
varchar(255)/* название *//* название */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM bpc_info
    WHERE bpc_infoid = g2b(abpc_infoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bpc.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=bpc_info' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL bpc_info_logger(acursession, abpc_infoid);
        UPDATE bpc_info
        SET changestamp = NOW(),
            name = aname
        WHERE bpc_infoid = g2b(abpc_infoid);


        CALL bpc_info_client_trigger(acursession, abpc_infoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bpc.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=bpc_info' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM bpc_info
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <bpc_info>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO bpc_info (changestamp, bpc_infoid
          , instanceid
          , name)
            VALUES (NOW(), g2b(abpc_infoid), g2b(ainstanceid), aname);


          CALL bpc_info_client_trigger(acursession, abpc_infoid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "bpc_info_unlock"
--
CREATE PROCEDURE bpc_info_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL bpc_info_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE bpc_info
      SET lockuserid = NULL
      WHERE bpc_infoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE bpc_info
      SET locksessionid = NULL
      WHERE bpc_infoid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "bpdi_copy"
--
CREATE PROCEDURE bpdi_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL iu_int_modules_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpdr_copy"
--
CREATE PROCEDURE bpdr_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL iu_crole_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bprcfg_copy"
--
CREATE PROCEDURE bprcfg_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL iu_rcfg_mod_copy(acursession, aaction, ainstanceid);
    CALL iu_rcfg_docmode_copy(acursession, aaction, ainstanceid);
    CALL iu_rcfg_def_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpu_commitfromtemp"
--
CREATE PROCEDURE bpu_commitfromtemp (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    CALL iu_u_def_commitfromtemp(acursession, ainstanceid);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpu_copy"
--
CREATE PROCEDURE bpu_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL iu_u_def_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpu_droptempdata"
--
CREATE PROCEDURE bpu_droptempdata (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    CALL iu_u_def_droptempdata(acursession, ainstanceid);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "bpu_gettotemp"
--
CREATE PROCEDURE bpu_gettotemp (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    CALL iu_u_def_gettotemp(acursession, ainstanceid);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "constraintfield_brief"
--
CREATE PROCEDURE constraintfield_brief (acursession varchar(38),
aconstraintfieldid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aconstraintfieldid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM constraintfield
    WHERE constraintfieldid = g2b(aconstraintfieldid);
    IF aec > 0 THEN
      SET abrief = constraintfield_brief_f(g2b(aconstraintfieldid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "constraintfield_client_trigger"
--
CREATE PROCEDURE constraintfield_client_trigger (acursession varchar(38),
aCONSTRAINTFIELDid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "constraintfield_copy"
--
CREATE PROCEDURE constraintfield_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO constraintfield (constraintfieldid
    , parentstructrowid
    , thefield)
      SELECT
        copymap(acopyaction, b2g(constraintfieldid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        thefield

      FROM constraintfield
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "constraintfield_delete"
--
CREATE PROCEDURE constraintfield_delete (acursession varchar(38),
aconstraintfieldid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM constraintfield
    WHERE constraintfieldid = g2b(aconstraintfieldid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=constraintfield' result;
        LEAVE body;
      END IF;
      CALL constraintfield_logger(acursession, aconstraintfieldid);
      DELETE
        FROM constraintfield
      WHERE constraintfieldid = g2b(aconstraintfieldid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'constraintfield'
        AND ownerrowid = g2b(aconstraintfieldid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "constraintfield_islocked"
--
CREATE PROCEDURE constraintfield_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM constraintfield
    WHERE constraintfieldid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "constraintfield_lock"
--
CREATE PROCEDURE constraintfield_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL constraintfield_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE constraintfield
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE constraintfieldid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE constraintfield
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE constraintfieldid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "constraintfield_logger"
--
CREATE PROCEDURE constraintfield_logger (acursession varchar(38),
aconstraintfieldid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "constraintfield_parent"
--
CREATE PROCEDURE constraintfield_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM constraintfield
    WHERE constraintfieldid = arowid;
    SET aparenttable = 'uniqueconstraint';
  END
  $$

--
-- Создать процедуру "constraintfield_save"
--
CREATE PROCEDURE constraintfield_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aconstraintfieldid varchar(38)
, athefield varchar(38)/* поле *//* поле */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM constraintfield
    WHERE constraintfieldid = g2b(aconstraintfieldid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=constraintfield' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL constraintfield_logger(acursession, aconstraintfieldid);
        UPDATE constraintfield
        SET changestamp = NOW(),
            thefield = g2b(athefield)
        WHERE constraintfieldid = g2b(aconstraintfieldid);


        CALL constraintfield_client_trigger(acursession, aconstraintfieldid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=constraintfield' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO constraintfield (changestamp, constraintfieldid
          , parentstructrowid
          , thefield)
            VALUES (NOW(), g2b(aconstraintfieldid), g2b(aparentstructrowid), g2b(athefield));


          CALL constraintfield_client_trigger(acursession, aconstraintfieldid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "constraintfield_unlock"
--
CREATE PROCEDURE constraintfield_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL constraintfield_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE constraintfield
      SET lockuserid = NULL
      WHERE constraintfieldid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE constraintfield
      SET locksessionid = NULL
      WHERE constraintfieldid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_brief"
--
CREATE PROCEDURE dinamicfilterscript_brief (acursession varchar(38),
adinamicfilterscriptid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF adinamicfilterscriptid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM dinamicfilterscript
    WHERE dinamicfilterscriptid = g2b(adinamicfilterscriptid);
    IF aec > 0 THEN
      SET abrief = dinamicfilterscript_brief_f(g2b(adinamicfilterscriptid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_client_trigger"
--
CREATE PROCEDURE dinamicfilterscript_client_trigger (acursession varchar(38),
aDINAMICFILTERSCRIPTid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "dinamicfilterscript_copy"
--
CREATE PROCEDURE dinamicfilterscript_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO dinamicfilterscript (dinamicfilterscriptid
    , parentstructrowid
    , target

    , code)
      SELECT
        copymap(acopyaction, b2g(dinamicfilterscriptid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        code

      FROM dinamicfilterscript
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_delete"
--
CREATE PROCEDURE dinamicfilterscript_delete (acursession varchar(38),
adinamicfilterscriptid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM dinamicfilterscript
    WHERE dinamicfilterscriptid = g2b(adinamicfilterscriptid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=dinamicfilterscript' result;
        LEAVE body;
      END IF;
      CALL dinamicfilterscript_logger(acursession, adinamicfilterscriptid);
      DELETE
        FROM dinamicfilterscript
      WHERE dinamicfilterscriptid = g2b(adinamicfilterscriptid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'dinamicfilterscript'
        AND ownerrowid = g2b(adinamicfilterscriptid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_islocked"
--
CREATE PROCEDURE dinamicfilterscript_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM dinamicfilterscript
    WHERE dinamicfilterscriptid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_lock"
--
CREATE PROCEDURE dinamicfilterscript_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL dinamicfilterscript_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE dinamicfilterscript
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE dinamicfilterscriptid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE dinamicfilterscript
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE dinamicfilterscriptid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_logger"
--
CREATE PROCEDURE dinamicfilterscript_logger (acursession varchar(38),
adinamicfilterscriptid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_parent"
--
CREATE PROCEDURE dinamicfilterscript_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM dinamicfilterscript
    WHERE dinamicfilterscriptid = arowid;
    SET aparenttable = 'field';
  END
  $$

--
-- Создать процедуру "dinamicfilterscript_save"
--
CREATE PROCEDURE dinamicfilterscript_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
adinamicfilterscriptid varchar(38)
, atarget varchar(38)/* целевая платформа *//* целевая платформа */
, acode
text/* скрипт *//* скрипт */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM dinamicfilterscript
    WHERE dinamicfilterscriptid = g2b(adinamicfilterscriptid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=dinamicfilterscript' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL dinamicfilterscript_logger(acursession, adinamicfilterscriptid);
        UPDATE dinamicfilterscript
        SET changestamp = NOW(),
            target = g2b(atarget),
            code = acode
        WHERE dinamicfilterscriptid = g2b(adinamicfilterscriptid);


        CALL dinamicfilterscript_client_trigger(acursession, adinamicfilterscriptid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=dinamicfilterscript' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO dinamicfilterscript (changestamp, dinamicfilterscriptid
          , parentstructrowid
          , target

          , code)
            VALUES (NOW(), g2b(adinamicfilterscriptid), g2b(aparentstructrowid), g2b(atarget), acode);


          CALL dinamicfilterscript_client_trigger(acursession, adinamicfilterscriptid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "dinamicfilterscript_unlock"
--
CREATE PROCEDURE dinamicfilterscript_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL dinamicfilterscript_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE dinamicfilterscript
      SET lockuserid = NULL
      WHERE dinamicfilterscriptid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE dinamicfilterscript
      SET locksessionid = NULL
      WHERE dinamicfilterscriptid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "entrypoints_brief"
--
CREATE PROCEDURE entrypoints_brief (acursession varchar(38),
aentrypointsid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aentrypointsid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM entrypoints
    WHERE entrypointsid = g2b(aentrypointsid);
    IF aec > 0 THEN
      SET abrief = entrypoints_brief_f(g2b(aentrypointsid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "entrypoints_client_trigger"
--
CREATE PROCEDURE entrypoints_client_trigger (acursession varchar(38),
aEntryPointsid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "entrypoints_copy"
--
CREATE PROCEDURE entrypoints_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_entrypoints CURSOR FOR
    SELECT
      entrypointsid
    FROM entrypoints
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO entrypoints (entrypointsid
    , instanceid
    , parentrowid
    , sequence

    , name

    , caption

    , astoolbaritem

    , actiontype

    , thefilter

    , journal

    , report

    , document

    , method

    , iconfile

    , theextention

    , arm

    , thecomment

    , objecttype

    , journalfixedquery

    , allowadd

    , allowedit

    , allowdel

    , allowfilter

    , allowprint)
      SELECT
        copymap(acopyaction, b2g(entrypointsid)),
        copymap(acopyaction, b2g(instanceid)),
        copymap(acopyaction, b2g(parentrowid)),
        sequence,
        name,
        caption,
        astoolbaritem,
        actiontype,
        thefilter,
        journal,
        report,
        document,
        method,
        iconfile,
        theextention,
        arm,
        thecomment,
        objecttype,
        journalfixedquery,
        allowadd,
        allowedit,
        allowdel,
        allowfilter,
        allowprint

      FROM entrypoints
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_entrypoints;
    SET fetch_done = FALSE;
    FETCH copy_cursor_entrypoints INTO aid;
    WHILE NOT fetch_done DO
      CALL epfilterlink_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_entrypoints INTO aid;
    END WHILE;

    CLOSE copy_cursor_entrypoints;
  END
  $$

--
-- Создать процедуру "entrypoints_delete"
--
CREATE PROCEDURE entrypoints_delete (acursession varchar(38),
aentrypointsid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM entrypoints
    WHERE entrypointsid = g2b(aentrypointsid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=entrypoints' result;
        LEAVE body;
      END IF;
      CALL entrypoints_logger(acursession, aentrypointsid);
      DELETE
        FROM entrypoints
      WHERE entrypointsid = g2b(aentrypointsid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'entrypoints'
        AND ownerrowid = g2b(aentrypointsid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "entrypoints_islocked"
--
CREATE PROCEDURE entrypoints_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM entrypoints
    WHERE entrypointsid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "entrypoints_lock"
--
CREATE PROCEDURE entrypoints_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL entrypoints_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE entrypoints
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE entrypointsid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE entrypoints
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE entrypointsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "entrypoints_logger"
--
CREATE PROCEDURE entrypoints_logger (acursession varchar(38),
aentrypointsid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "entrypoints_parent"
--
CREATE PROCEDURE entrypoints_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM entrypoints
    WHERE entrypointsid = arowid;
  END
  $$

--
-- Создать процедуру "entrypoints_save"
--
CREATE PROCEDURE entrypoints_save (acursession varchar(38),
ainstanceid varchar(38),
aentrypointsid varchar(38)
, aparentrowid varchar(38)
, asequence
integer/* последовательность *//* последовательность */
, aname
varchar(38)/* название *//* название */
, acaption
varchar(255)/* заголовок *//* заголовок */
, aastoolbaritem
integer/* включить в тулбар *//* включить в тулбар */
, aactiontype
integer/* вариант действия *//* вариант действия */
, athefilter varchar(38)/* фильтр *//* фильтр */
, ajournal varchar(38)/* журнал *//* журнал */
, areport varchar(38)/* отчет *//* отчет */
, adocument varchar(38)/* документ *//* документ */
, amethod varchar(38)/* метод *//* метод */
, aiconfile
varchar(2000)/* файл картинки *//* файл картинки */
, atheextention varchar(38)/* расширение *//* расширение */
, aarm varchar(38)/* арм *//* арм */
, athecomment
text/* примечание *//* примечание */
, aobjecttype varchar(38)/* тип документа *//* тип документа */
, ajournalfixedquery
text/* ограничения к журналу *//* ограничения к журналу */
, aallowadd
integer/* разрешено добавление *//* разрешено добавление */
, aallowedit
integer/* разрешено редактирование *//* разрешено редактирование */
, aallowdel
integer/* рарешено удаление *//* рарешено удаление */
, aallowfilter
integer/* разрешен фильтр *//* разрешен фильтр */
, aallowprint
integer/* разрешена печать *//* разрешена печать */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM entrypoints
    WHERE entrypointsid = g2b(aentrypointsid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=entrypoints' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL entrypoints_logger(acursession, aentrypointsid);
        UPDATE entrypoints
        SET changestamp = NOW(),
            parentrowid = g2b(aparentrowid),
            sequence = asequence,
            name = aname,
            caption = acaption,
            astoolbaritem = aastoolbaritem,
            actiontype = aactiontype,
            thefilter = g2b(athefilter),
            journal = g2b(ajournal),
            report = g2b(areport),
            document = g2b(adocument),
            method = g2b(amethod),
            iconfile = aiconfile,
            theextention = g2b(atheextention),
            arm = g2b(aarm),
            thecomment = athecomment,
            objecttype = g2b(aobjecttype),
            journalfixedquery = ajournalfixedquery,
            allowadd = aallowadd,
            allowedit = aallowedit,
            allowdel = aallowdel,
            allowfilter = aallowfilter,
            allowprint = aallowprint
        WHERE entrypointsid = g2b(aentrypointsid);


        CALL entrypoints_client_trigger(acursession, aentrypointsid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=entrypoints' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO entrypoints (changestamp, entrypointsid
          , parentrowid
          , instanceid
          , sequence

          , name

          , caption

          , astoolbaritem

          , actiontype

          , thefilter

          , journal

          , report

          , document

          , method

          , iconfile

          , theextention

          , arm

          , thecomment

          , objecttype

          , journalfixedquery

          , allowadd

          , allowedit

          , allowdel

          , allowfilter

          , allowprint)
            VALUES (NOW(), g2b(aentrypointsid), g2b(aparentrowid), g2b(ainstanceid), asequence, aname, acaption, aastoolbaritem, aactiontype, g2b(athefilter), g2b(ajournal), g2b(areport), g2b(adocument), g2b(amethod), aiconfile, g2b(atheextention), g2b(aarm), athecomment, g2b(aobjecttype), ajournalfixedquery, aallowadd, aallowedit, aallowdel, aallowfilter, aallowprint);


          CALL entrypoints_client_trigger(acursession, aentrypointsid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "entrypoints_unlock"
--
CREATE PROCEDURE entrypoints_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL entrypoints_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE entrypoints
      SET lockuserid = NULL
      WHERE entrypointsid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE entrypoints
      SET locksessionid = NULL
      WHERE entrypointsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "enumitem_brief"
--
CREATE PROCEDURE enumitem_brief (acursession varchar(38),
aenumitemid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aenumitemid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM enumitem
    WHERE enumitemid = g2b(aenumitemid);
    IF aec > 0 THEN
      SET abrief = enumitem_brief_f(g2b(aenumitemid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "enumitem_client_trigger"
--
CREATE PROCEDURE enumitem_client_trigger (acursession varchar(38),
aENUMITEMid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "enumitem_copy"
--
CREATE PROCEDURE enumitem_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO enumitem (enumitemid
    , parentstructrowid
    , name

    , namevalue

    , nameincode)
      SELECT
        copymap(acopyaction, b2g(enumitemid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        namevalue,
        nameincode

      FROM enumitem
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "enumitem_delete"
--
CREATE PROCEDURE enumitem_delete (acursession varchar(38),
aenumitemid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM enumitem
    WHERE enumitemid = g2b(aenumitemid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=enumitem' result;
        LEAVE body;
      END IF;
      CALL enumitem_logger(acursession, aenumitemid);
      DELETE
        FROM enumitem
      WHERE enumitemid = g2b(aenumitemid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'enumitem'
        AND ownerrowid = g2b(aenumitemid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "enumitem_islocked"
--
CREATE PROCEDURE enumitem_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM enumitem
    WHERE enumitemid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "enumitem_lock"
--
CREATE PROCEDURE enumitem_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL enumitem_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE enumitem
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE enumitemid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE enumitem
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE enumitemid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "enumitem_logger"
--
CREATE PROCEDURE enumitem_logger (acursession varchar(38),
aenumitemid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "enumitem_parent"
--
CREATE PROCEDURE enumitem_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM enumitem
    WHERE enumitemid = arowid;
    SET aparenttable = 'fieldtype';
  END
  $$

--
-- Создать процедуру "enumitem_save"
--
CREATE PROCEDURE enumitem_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aenumitemid varchar(38)
, aname
varchar(255)/* название *//* название */
, anamevalue
integer/* значение *//* значение */
, anameincode
varchar(100)/* название в коде *//* название в коде */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM enumitem
    WHERE enumitemid = g2b(aenumitemid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=enumitem' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL enumitem_logger(acursession, aenumitemid);
        UPDATE enumitem
        SET changestamp = NOW(),
            name = aname,
            namevalue = anamevalue,
            nameincode = anameincode
        WHERE enumitemid = g2b(aenumitemid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM enumitem
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND namevalue = anamevalue;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=зачения' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM enumitem
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=зачения' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL enumitem_client_trigger(acursession, aenumitemid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=enumitem' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO enumitem (changestamp, enumitemid
          , parentstructrowid
          , name

          , namevalue

          , nameincode)
            VALUES (NOW(), g2b(aenumitemid), g2b(aparentstructrowid), aname, anamevalue, anameincode);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM enumitem
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND namevalue = anamevalue;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=зачения' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM enumitem
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=зачения' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL enumitem_client_trigger(acursession, aenumitemid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "enumitem_unlock"
--
CREATE PROCEDURE enumitem_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL enumitem_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE enumitem
      SET lockuserid = NULL
      WHERE enumitemid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE enumitem
      SET locksessionid = NULL
      WHERE enumitemid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "epfilterlink_brief"
--
CREATE PROCEDURE epfilterlink_brief (acursession varchar(38),
aepfilterlinkid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aepfilterlinkid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM epfilterlink
    WHERE epfilterlinkid = g2b(aepfilterlinkid);
    IF aec > 0 THEN
      SET abrief = epfilterlink_brief_f(g2b(aepfilterlinkid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "epfilterlink_client_trigger"
--
CREATE PROCEDURE epfilterlink_client_trigger (acursession varchar(38),
aEPFilterLinkid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "epfilterlink_copy"
--
CREATE PROCEDURE epfilterlink_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO epfilterlink (epfilterlinkid
    , parentstructrowid
    , rowsource

    , theexpression

    , filterfield)
      SELECT
        copymap(acopyaction, b2g(epfilterlinkid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        rowsource,
        theexpression,
        filterfield

      FROM epfilterlink
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "epfilterlink_delete"
--
CREATE PROCEDURE epfilterlink_delete (acursession varchar(38),
aepfilterlinkid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM epfilterlink
    WHERE epfilterlinkid = g2b(aepfilterlinkid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=epfilterlink' result;
        LEAVE body;
      END IF;
      CALL epfilterlink_logger(acursession, aepfilterlinkid);
      DELETE
        FROM epfilterlink
      WHERE epfilterlinkid = g2b(aepfilterlinkid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'epfilterlink'
        AND ownerrowid = g2b(aepfilterlinkid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "epfilterlink_islocked"
--
CREATE PROCEDURE epfilterlink_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM epfilterlink
    WHERE epfilterlinkid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "epfilterlink_lock"
--
CREATE PROCEDURE epfilterlink_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL epfilterlink_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE epfilterlink
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE epfilterlinkid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE epfilterlink
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE epfilterlinkid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "epfilterlink_logger"
--
CREATE PROCEDURE epfilterlink_logger (acursession varchar(38),
aepfilterlinkid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "epfilterlink_parent"
--
CREATE PROCEDURE epfilterlink_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM epfilterlink
    WHERE epfilterlinkid = arowid;
    SET aparenttable = 'entrypoints';
  END
  $$

--
-- Создать процедуру "epfilterlink_save"
--
CREATE PROCEDURE epfilterlink_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aepfilterlinkid varchar(38)
, arowsource
varchar(255)/* источник *//* источник */
, atheexpression
text/* выражение *//* выражение */
, afilterfield
varchar(255)/* поле фильтра *//* поле фильтра */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM epfilterlink
    WHERE epfilterlinkid = g2b(aepfilterlinkid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=epfilterlink' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL epfilterlink_logger(acursession, aepfilterlinkid);
        UPDATE epfilterlink
        SET changestamp = NOW(),
            rowsource = arowsource,
            theexpression = atheexpression,
            filterfield = afilterfield
        WHERE epfilterlinkid = g2b(aepfilterlinkid);


        CALL epfilterlink_client_trigger(acursession, aepfilterlinkid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=epfilterlink' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO epfilterlink (changestamp, epfilterlinkid
          , parentstructrowid
          , rowsource

          , theexpression

          , filterfield)
            VALUES (NOW(), g2b(aepfilterlinkid), g2b(aparentstructrowid), arowsource, atheexpression, afilterfield);


          CALL epfilterlink_client_trigger(acursession, aepfilterlinkid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "epfilterlink_unlock"
--
CREATE PROCEDURE epfilterlink_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL epfilterlink_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE epfilterlink
      SET lockuserid = NULL
      WHERE epfilterlinkid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE epfilterlink
      SET locksessionid = NULL
      WHERE epfilterlinkid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "extenderinterface_brief"
--
CREATE PROCEDURE extenderinterface_brief (acursession varchar(38),
aextenderinterfaceid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aextenderinterfaceid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM extenderinterface
    WHERE extenderinterfaceid = g2b(aextenderinterfaceid);
    IF aec > 0 THEN
      SET abrief = extenderinterface_brief_f(g2b(aextenderinterfaceid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "extenderinterface_client_trigger"
--
CREATE PROCEDURE extenderinterface_client_trigger (acursession varchar(38),
aExtenderInterfaceid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "extenderinterface_copy"
--
CREATE PROCEDURE extenderinterface_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO extenderinterface (extenderinterfaceid
    , parentstructrowid
    , thename

    , targetplatform

    , theobject

    , theconfig)
      SELECT
        copymap(acopyaction, b2g(extenderinterfaceid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        thename,
        targetplatform,
        theobject,
        theconfig

      FROM extenderinterface
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "extenderinterface_delete"
--
CREATE PROCEDURE extenderinterface_delete (acursession varchar(38),
aextenderinterfaceid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM extenderinterface
    WHERE extenderinterfaceid = g2b(aextenderinterfaceid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=extenderinterface' result;
        LEAVE body;
      END IF;
      CALL extenderinterface_logger(acursession, aextenderinterfaceid);
      DELETE
        FROM extenderinterface
      WHERE extenderinterfaceid = g2b(aextenderinterfaceid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'extenderinterface'
        AND ownerrowid = g2b(aextenderinterfaceid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "extenderinterface_islocked"
--
CREATE PROCEDURE extenderinterface_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM extenderinterface
    WHERE extenderinterfaceid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "extenderinterface_lock"
--
CREATE PROCEDURE extenderinterface_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL extenderinterface_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE extenderinterface
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE extenderinterfaceid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE extenderinterface
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE extenderinterfaceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "extenderinterface_logger"
--
CREATE PROCEDURE extenderinterface_logger (acursession varchar(38),
aextenderinterfaceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "extenderinterface_parent"
--
CREATE PROCEDURE extenderinterface_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM extenderinterface
    WHERE extenderinterfaceid = arowid;
    SET aparenttable = 'part';
  END
  $$

--
-- Создать процедуру "extenderinterface_save"
--
CREATE PROCEDURE extenderinterface_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aextenderinterfaceid varchar(38)
, athename
varchar(255)/* название *//* название */
, atargetplatform varchar(38)/* целевая платформа *//* целевая платформа */
, atheobject
varchar(255)/* объект *//* объект */
, atheconfig
varchar(512)/* конфиг *//* конфиг */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM extenderinterface
    WHERE extenderinterfaceid = g2b(aextenderinterfaceid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=extenderinterface' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL extenderinterface_logger(acursession, aextenderinterfaceid);
        UPDATE extenderinterface
        SET changestamp = NOW(),
            thename = athename,
            targetplatform = g2b(atargetplatform),
            theobject = atheobject,
            theconfig = atheconfig
        WHERE extenderinterfaceid = g2b(aextenderinterfaceid);


        CALL extenderinterface_client_trigger(acursession, aextenderinterfaceid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=extenderinterface' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO extenderinterface (changestamp, extenderinterfaceid
          , parentstructrowid
          , thename

          , targetplatform

          , theobject

          , theconfig)
            VALUES (NOW(), g2b(aextenderinterfaceid), g2b(aparentstructrowid), athename, g2b(atargetplatform), atheobject, atheconfig);


          CALL extenderinterface_client_trigger(acursession, aextenderinterfaceid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "extenderinterface_unlock"
--
CREATE PROCEDURE extenderinterface_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL extenderinterface_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE extenderinterface
      SET lockuserid = NULL
      WHERE extenderinterfaceid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE extenderinterface
      SET locksessionid = NULL
      WHERE extenderinterfaceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldexpression_brief"
--
CREATE PROCEDURE fieldexpression_brief (acursession varchar(38),
afieldexpressionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldexpressionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldexpression
    WHERE fieldexpressionid = g2b(afieldexpressionid);
    IF aec > 0 THEN
      SET abrief = fieldexpression_brief_f(g2b(afieldexpressionid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldexpression_client_trigger"
--
CREATE PROCEDURE fieldexpression_client_trigger (acursession varchar(38),
aFIELDEXPRESSIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldexpression_copy"
--
CREATE PROCEDURE fieldexpression_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldexpression (fieldexpressionid
    , parentstructrowid
    , target

    , code)
      SELECT
        copymap(acopyaction, b2g(fieldexpressionid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        code

      FROM fieldexpression
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fieldexpression_delete"
--
CREATE PROCEDURE fieldexpression_delete (acursession varchar(38),
afieldexpressionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldexpression
    WHERE fieldexpressionid = g2b(afieldexpressionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldexpression' result;
        LEAVE body;
      END IF;
      CALL fieldexpression_logger(acursession, afieldexpressionid);
      DELETE
        FROM fieldexpression
      WHERE fieldexpressionid = g2b(afieldexpressionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldexpression'
        AND ownerrowid = g2b(afieldexpressionid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldexpression_islocked"
--
CREATE PROCEDURE fieldexpression_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldexpression
    WHERE fieldexpressionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldexpression_lock"
--
CREATE PROCEDURE fieldexpression_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldexpression_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldexpression
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldexpressionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldexpression
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldexpressionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldexpression_logger"
--
CREATE PROCEDURE fieldexpression_logger (acursession varchar(38),
afieldexpressionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldexpression_parent"
--
CREATE PROCEDURE fieldexpression_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldexpression
    WHERE fieldexpressionid = arowid;
    SET aparenttable = 'field';
  END
  $$

--
-- Создать процедуру "fieldexpression_save"
--
CREATE PROCEDURE fieldexpression_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldexpressionid varchar(38)
, atarget varchar(38)/* платформа *//* платформа */
, acode
text/* скрипт *//* скрипт */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldexpression
    WHERE fieldexpressionid = g2b(afieldexpressionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldexpression' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldexpression_logger(acursession, afieldexpressionid);
        UPDATE fieldexpression
        SET changestamp = NOW(),
            target = g2b(atarget),
            code = acode
        WHERE fieldexpressionid = g2b(afieldexpressionid);


        CALL fieldexpression_client_trigger(acursession, afieldexpressionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldexpression' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldexpression (changestamp, fieldexpressionid
          , parentstructrowid
          , target

          , code)
            VALUES (NOW(), g2b(afieldexpressionid), g2b(aparentstructrowid), g2b(atarget), acode);


          CALL fieldexpression_client_trigger(acursession, afieldexpressionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldexpression_unlock"
--
CREATE PROCEDURE fieldexpression_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldexpression_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldexpression
      SET lockuserid = NULL
      WHERE fieldexpressionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldexpression
      SET locksessionid = NULL
      WHERE fieldexpressionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldmenu_brief"
--
CREATE PROCEDURE fieldmenu_brief (acursession varchar(38),
afieldmenuid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldmenuid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldmenu
    WHERE fieldmenuid = g2b(afieldmenuid);
    IF aec > 0 THEN
      SET abrief = fieldmenu_brief_f(g2b(afieldmenuid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldmenu_client_trigger"
--
CREATE PROCEDURE fieldmenu_client_trigger (acursession varchar(38),
aFIELDMENUid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldmenu_copy"
--
CREATE PROCEDURE fieldmenu_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_fieldmenu CURSOR FOR
    SELECT
      fieldmenuid
    FROM fieldmenu
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldmenu (fieldmenuid
    , parentstructrowid
    , name

    , caption

    , tooltip

    , actionid

    , ismenuitem

    , istoolbarbutton

    , hotkey)
      SELECT
        copymap(acopyaction, b2g(fieldmenuid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        caption,
        tooltip,
        actionid,
        ismenuitem,
        istoolbarbutton,
        hotkey

      FROM fieldmenu
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_fieldmenu;
    SET fetch_done = FALSE;
    FETCH copy_cursor_fieldmenu INTO aid;
    WHILE NOT fetch_done DO
      CALL fieldparammap_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_fieldmenu INTO aid;
    END WHILE;

    CLOSE copy_cursor_fieldmenu;
  END
  $$

--
-- Создать процедуру "fieldmenu_delete"
--
CREATE PROCEDURE fieldmenu_delete (acursession varchar(38),
afieldmenuid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldmenu
    WHERE fieldmenuid = g2b(afieldmenuid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldmenu' result;
        LEAVE body;
      END IF;
      CALL fieldmenu_logger(acursession, afieldmenuid);
      DELETE
        FROM fieldmenu
      WHERE fieldmenuid = g2b(afieldmenuid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldmenu'
        AND ownerrowid = g2b(afieldmenuid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldmenu_islocked"
--
CREATE PROCEDURE fieldmenu_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldmenu
    WHERE fieldmenuid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldmenu_lock"
--
CREATE PROCEDURE fieldmenu_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldmenu_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldmenu
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldmenuid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldmenu
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldmenuid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldmenu_logger"
--
CREATE PROCEDURE fieldmenu_logger (acursession varchar(38),
afieldmenuid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldmenu_parent"
--
CREATE PROCEDURE fieldmenu_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldmenu
    WHERE fieldmenuid = arowid;
    SET aparenttable = 'field';
  END
  $$

--
-- Создать процедуру "fieldmenu_save"
--
CREATE PROCEDURE fieldmenu_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldmenuid varchar(38)
, aname
varchar(64)/* название *//* название */
, acaption
varchar(80)/* заголовок *//* заголовок */
, atooltip
varchar(80)/* подсказка *//* подсказка */
, aactionid varchar(38)/* идентификатор вызываемого метода *//* идентификатор вызываемого метода */
, aismenuitem
integer/* в меню *//* в меню */
, aistoolbarbutton
integer/* в тулбар *//* в тулбар */
, ahotkey
varchar(20)/* горячая клавиша *//* горячая клавиша */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldmenu
    WHERE fieldmenuid = g2b(afieldmenuid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldmenu' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldmenu_logger(acursession, afieldmenuid);
        UPDATE fieldmenu
        SET changestamp = NOW(),
            name = aname,
            caption = acaption,
            tooltip = atooltip,
            actionid = g2b(aactionid),
            ismenuitem = aismenuitem,
            istoolbarbutton = aistoolbarbutton,
            hotkey = ahotkey
        WHERE fieldmenuid = g2b(afieldmenuid);


        CALL fieldmenu_client_trigger(acursession, afieldmenuid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldmenu' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldmenu (changestamp, fieldmenuid
          , parentstructrowid
          , name

          , caption

          , tooltip

          , actionid

          , ismenuitem

          , istoolbarbutton

          , hotkey)
            VALUES (NOW(), g2b(afieldmenuid), g2b(aparentstructrowid), aname, acaption, atooltip, g2b(aactionid), aismenuitem, aistoolbarbutton, ahotkey);


          CALL fieldmenu_client_trigger(acursession, afieldmenuid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldmenu_unlock"
--
CREATE PROCEDURE fieldmenu_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldmenu_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldmenu
      SET lockuserid = NULL
      WHERE fieldmenuid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldmenu
      SET locksessionid = NULL
      WHERE fieldmenuid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldparammap_brief"
--
CREATE PROCEDURE fieldparammap_brief (acursession varchar(38),
afieldparammapid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldparammapid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldparammap
    WHERE fieldparammapid = g2b(afieldparammapid);
    IF aec > 0 THEN
      SET abrief = fieldparammap_brief_f(g2b(afieldparammapid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldparammap_client_trigger"
--
CREATE PROCEDURE fieldparammap_client_trigger (acursession varchar(38),
aFIELDPARAMMAPid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldparammap_copy"
--
CREATE PROCEDURE fieldparammap_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldparammap (fieldparammapid
    , parentstructrowid
    , fieldname

    , paramname

    , noedit)
      SELECT
        copymap(acopyaction, b2g(fieldparammapid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        fieldname,
        paramname,
        noedit

      FROM fieldparammap
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fieldparammap_delete"
--
CREATE PROCEDURE fieldparammap_delete (acursession varchar(38),
afieldparammapid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldparammap
    WHERE fieldparammapid = g2b(afieldparammapid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldparammap' result;
        LEAVE body;
      END IF;
      CALL fieldparammap_logger(acursession, afieldparammapid);
      DELETE
        FROM fieldparammap
      WHERE fieldparammapid = g2b(afieldparammapid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldparammap'
        AND ownerrowid = g2b(afieldparammapid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldparammap_islocked"
--
CREATE PROCEDURE fieldparammap_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldparammap
    WHERE fieldparammapid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldparammap_lock"
--
CREATE PROCEDURE fieldparammap_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldparammap_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldparammap
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldparammapid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldparammap
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldparammapid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldparammap_logger"
--
CREATE PROCEDURE fieldparammap_logger (acursession varchar(38),
afieldparammapid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldparammap_parent"
--
CREATE PROCEDURE fieldparammap_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldparammap
    WHERE fieldparammapid = arowid;
    SET aparenttable = 'fieldmenu';
  END
  $$

--
-- Создать процедуру "fieldparammap_save"
--
CREATE PROCEDURE fieldparammap_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldparammapid varchar(38)
, afieldname
varchar(255)/* поле (значение) *//* поле (значение) */
, aparamname
varchar(80)/* параметр *//* параметр */
, anoedit
integer/* редактировать параметр нельзя *//* редактировать параметр нельзя */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldparammap
    WHERE fieldparammapid = g2b(afieldparammapid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldparammap' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldparammap_logger(acursession, afieldparammapid);
        UPDATE fieldparammap
        SET changestamp = NOW(),
            fieldname = afieldname,
            paramname = aparamname,
            noedit = anoedit
        WHERE fieldparammapid = g2b(afieldparammapid);


        CALL fieldparammap_client_trigger(acursession, afieldparammapid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldparammap' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldparammap (changestamp, fieldparammapid
          , parentstructrowid
          , fieldname

          , paramname

          , noedit)
            VALUES (NOW(), g2b(afieldparammapid), g2b(aparentstructrowid), afieldname, aparamname, anoedit);


          CALL fieldparammap_client_trigger(acursession, afieldparammapid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldparammap_unlock"
--
CREATE PROCEDURE fieldparammap_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldparammap_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldparammap
      SET lockuserid = NULL
      WHERE fieldparammapid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldparammap
      SET locksessionid = NULL
      WHERE fieldparammapid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldrestriction_brief"
--
CREATE PROCEDURE fieldrestriction_brief (acursession varchar(38),
afieldrestrictionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldrestrictionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldrestriction
    WHERE fieldrestrictionid = g2b(afieldrestrictionid);
    IF aec > 0 THEN
      SET abrief = fieldrestriction_brief_f(g2b(afieldrestrictionid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldrestriction_client_trigger"
--
CREATE PROCEDURE fieldrestriction_client_trigger (acursession varchar(38),
aFIELDRESTRICTIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldrestriction_copy"
--
CREATE PROCEDURE fieldrestriction_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldrestriction (fieldrestrictionid
    , parentstructrowid
    , thepart

    , thefield

    , allowread

    , allowmodify

    , mandatoryfield)
      SELECT
        copymap(acopyaction, b2g(fieldrestrictionid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        thepart,
        thefield,
        allowread,
        allowmodify,
        mandatoryfield

      FROM fieldrestriction
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fieldrestriction_delete"
--
CREATE PROCEDURE fieldrestriction_delete (acursession varchar(38),
afieldrestrictionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldrestriction
    WHERE fieldrestrictionid = g2b(afieldrestrictionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldrestriction' result;
        LEAVE body;
      END IF;
      CALL fieldrestriction_logger(acursession, afieldrestrictionid);
      DELETE
        FROM fieldrestriction
      WHERE fieldrestrictionid = g2b(afieldrestrictionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldrestriction'
        AND ownerrowid = g2b(afieldrestrictionid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldrestriction_islocked"
--
CREATE PROCEDURE fieldrestriction_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldrestriction
    WHERE fieldrestrictionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldrestriction_lock"
--
CREATE PROCEDURE fieldrestriction_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldrestriction_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldrestriction
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldrestrictionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldrestriction
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldrestrictionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldrestriction_logger"
--
CREATE PROCEDURE fieldrestriction_logger (acursession varchar(38),
afieldrestrictionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldrestriction_parent"
--
CREATE PROCEDURE fieldrestriction_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldrestriction
    WHERE fieldrestrictionid = arowid;
    SET aparenttable = 'objectmode';
  END
  $$

--
-- Создать процедуру "fieldrestriction_save"
--
CREATE PROCEDURE fieldrestriction_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldrestrictionid varchar(38)
, athepart varchar(38)/* структура, которой принадлежит поле *//* структура, которой принадлежит поле */
, athefield varchar(38)/* поле, на которое накладывается ограничение *//* поле, на которое накладывается ограничение */
, aallowread
integer/* разрешен просмотр *//* разрешен просмотр */
, aallowmodify
integer/* разрешена модификация *//* разрешена модификация */
, amandatoryfield
integer/* обязательное поле *//* обязательное поле */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldrestriction
    WHERE fieldrestrictionid = g2b(afieldrestrictionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldrestriction' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldrestriction_logger(acursession, afieldrestrictionid);
        UPDATE fieldrestriction
        SET changestamp = NOW(),
            thepart = g2b(athepart),
            thefield = g2b(athefield),
            allowread = aallowread,
            allowmodify = aallowmodify,
            mandatoryfield = amandatoryfield
        WHERE fieldrestrictionid = g2b(afieldrestrictionid);


        CALL fieldrestriction_client_trigger(acursession, afieldrestrictionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldrestriction' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldrestriction (changestamp, fieldrestrictionid
          , parentstructrowid
          , thepart

          , thefield

          , allowread

          , allowmodify

          , mandatoryfield)
            VALUES (NOW(), g2b(afieldrestrictionid), g2b(aparentstructrowid), g2b(athepart), g2b(athefield), aallowread, aallowmodify, amandatoryfield);


          CALL fieldrestriction_client_trigger(acursession, afieldrestrictionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldrestriction_unlock"
--
CREATE PROCEDURE fieldrestriction_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldrestriction_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldrestriction
      SET lockuserid = NULL
      WHERE fieldrestrictionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldrestriction
      SET locksessionid = NULL
      WHERE fieldrestrictionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldsrcdef_brief"
--
CREATE PROCEDURE fieldsrcdef_brief (acursession varchar(38),
afieldsrcdefid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldsrcdefid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldsrcdef
    WHERE fieldsrcdefid = g2b(afieldsrcdefid);
    IF aec > 0 THEN
      SET abrief = fieldsrcdef_brief_f(g2b(afieldsrcdefid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldsrcdef_client_trigger"
--
CREATE PROCEDURE fieldsrcdef_client_trigger (acursession varchar(38),
aFIELDSRCDEFid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldsrcdef_copy"
--
CREATE PROCEDURE fieldsrcdef_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldsrcdef (fieldsrcdefid
    , parentstructrowid
    , provider

    , connectionstring

    , datasource

    , idfield

    , briefstring

    , filterstring

    , sortfield

    , descriptionstring

    , dontshowdialog)
      SELECT
        copymap(acopyaction, b2g(fieldsrcdefid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        provider,
        connectionstring,
        datasource,
        idfield,
        briefstring,
        filterstring,
        sortfield,
        descriptionstring,
        dontshowdialog

      FROM fieldsrcdef
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fieldsrcdef_delete"
--
CREATE PROCEDURE fieldsrcdef_delete (acursession varchar(38),
afieldsrcdefid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldsrcdef
    WHERE fieldsrcdefid = g2b(afieldsrcdefid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldsrcdef' result;
        LEAVE body;
      END IF;
      CALL fieldsrcdef_logger(acursession, afieldsrcdefid);
      DELETE
        FROM fieldsrcdef
      WHERE fieldsrcdefid = g2b(afieldsrcdefid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldsrcdef'
        AND ownerrowid = g2b(afieldsrcdefid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldsrcdef_islocked"
--
CREATE PROCEDURE fieldsrcdef_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldsrcdef
    WHERE fieldsrcdefid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldsrcdef_lock"
--
CREATE PROCEDURE fieldsrcdef_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldsrcdef_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldsrcdef
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldsrcdefid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldsrcdef
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldsrcdefid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldsrcdef_logger"
--
CREATE PROCEDURE fieldsrcdef_logger (acursession varchar(38),
afieldsrcdefid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldsrcdef_parent"
--
CREATE PROCEDURE fieldsrcdef_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldsrcdef
    WHERE fieldsrcdefid = arowid;
    SET aparenttable = 'field';
  END
  $$

--
-- Создать процедуру "fieldsrcdef_save"
--
CREATE PROCEDURE fieldsrcdef_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldsrcdefid varchar(38)
, aprovider
varchar(128)/* провайдер *//* провайдер */
, aconnectionstring
varchar(512)/* строка соединения с источником *//* строка соединения с источником */
, adatasource
varchar(512)/* источник данных *//* источник данных */
, aidfield
varchar(128)/* id *//* id */
, abriefstring
varchar(512)/* источник краткой информации *//* источник краткой информации */
, afilterstring
varchar(512)/* фильтр источника данных *//* фильтр источника данных */
, asortfield
varchar(512)/* сортировка источника данных *//* сортировка источника данных */
, adescriptionstring
text/* примечания *//* примечания */
, adontshowdialog
integer/* не показывать форму выбора *//* не показывать форму выбора */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldsrcdef
    WHERE fieldsrcdefid = g2b(afieldsrcdefid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldsrcdef' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldsrcdef_logger(acursession, afieldsrcdefid);
        UPDATE fieldsrcdef
        SET changestamp = NOW(),
            provider = aprovider,
            connectionstring = aconnectionstring,
            datasource = adatasource,
            idfield = aidfield,
            briefstring = abriefstring,
            filterstring = afilterstring,
            sortfield = asortfield,
            descriptionstring = adescriptionstring,
            dontshowdialog = adontshowdialog
        WHERE fieldsrcdefid = g2b(afieldsrcdefid);


        CALL fieldsrcdef_client_trigger(acursession, afieldsrcdefid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldsrcdef' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM fieldsrcdef
        WHERE parentstructrowid = g2b(aparentstructrowid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <fieldsrcdef>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldsrcdef (changestamp, fieldsrcdefid
          , parentstructrowid
          , provider

          , connectionstring

          , datasource

          , idfield

          , briefstring

          , filterstring

          , sortfield

          , descriptionstring

          , dontshowdialog)
            VALUES (NOW(), g2b(afieldsrcdefid), g2b(aparentstructrowid), aprovider, aconnectionstring, adatasource, aidfield, abriefstring, afilterstring, asortfield, adescriptionstring, adontshowdialog);


          CALL fieldsrcdef_client_trigger(acursession, afieldsrcdefid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldsrcdef_unlock"
--
CREATE PROCEDURE fieldsrcdef_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldsrcdef_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldsrcdef
      SET lockuserid = NULL
      WHERE fieldsrcdefid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldsrcdef
      SET locksessionid = NULL
      WHERE fieldsrcdefid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldtypemap_brief"
--
CREATE PROCEDURE fieldtypemap_brief (acursession varchar(38),
afieldtypemapid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldtypemapid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldtypemap
    WHERE fieldtypemapid = g2b(afieldtypemapid);
    IF aec > 0 THEN
      SET abrief = fieldtypemap_brief_f(g2b(afieldtypemapid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldtypemap_client_trigger"
--
CREATE PROCEDURE fieldtypemap_client_trigger (acursession varchar(38),
aFIELDTYPEMAPid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldtypemap_copy"
--
CREATE PROCEDURE fieldtypemap_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldtypemap (fieldtypemapid
    , parentstructrowid
    , target

    , stoagetype

    , fixedsize)
      SELECT
        copymap(acopyaction, b2g(fieldtypemapid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        stoagetype,
        fixedsize

      FROM fieldtypemap
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fieldtypemap_delete"
--
CREATE PROCEDURE fieldtypemap_delete (acursession varchar(38),
afieldtypemapid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldtypemap
    WHERE fieldtypemapid = g2b(afieldtypemapid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldtypemap' result;
        LEAVE body;
      END IF;
      CALL fieldtypemap_logger(acursession, afieldtypemapid);
      DELETE
        FROM fieldtypemap
      WHERE fieldtypemapid = g2b(afieldtypemapid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldtypemap'
        AND ownerrowid = g2b(afieldtypemapid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldtypemap_islocked"
--
CREATE PROCEDURE fieldtypemap_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldtypemap
    WHERE fieldtypemapid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldtypemap_lock"
--
CREATE PROCEDURE fieldtypemap_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldtypemap_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldtypemap
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldtypemapid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldtypemap
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldtypemapid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldtypemap_logger"
--
CREATE PROCEDURE fieldtypemap_logger (acursession varchar(38),
afieldtypemapid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldtypemap_parent"
--
CREATE PROCEDURE fieldtypemap_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldtypemap
    WHERE fieldtypemapid = arowid;
    SET aparenttable = 'fieldtype';
  END
  $$

--
-- Создать процедуру "fieldtypemap_save"
--
CREATE PROCEDURE fieldtypemap_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldtypemapid varchar(38)
, atarget varchar(38)/* платформа *//* платформа */
, astoagetype
varchar(255)/* тип хранения *//* тип хранения */
, afixedsize
integer/* размер *//* размер */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldtypemap
    WHERE fieldtypemapid = g2b(afieldtypemapid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldtypemap' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldtypemap_logger(acursession, afieldtypemapid);
        UPDATE fieldtypemap
        SET changestamp = NOW(),
            target = g2b(atarget),
            stoagetype = astoagetype,
            fixedsize = afixedsize
        WHERE fieldtypemapid = g2b(afieldtypemapid);


        CALL fieldtypemap_client_trigger(acursession, afieldtypemapid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldtypemap' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldtypemap (changestamp, fieldtypemapid
          , parentstructrowid
          , target

          , stoagetype

          , fixedsize)
            VALUES (NOW(), g2b(afieldtypemapid), g2b(aparentstructrowid), g2b(atarget), astoagetype, afixedsize);


          CALL fieldtypemap_client_trigger(acursession, afieldtypemapid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldtypemap_unlock"
--
CREATE PROCEDURE fieldtypemap_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldtypemap_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldtypemap
      SET lockuserid = NULL
      WHERE fieldtypemapid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldtypemap
      SET locksessionid = NULL
      WHERE fieldtypemapid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldtype_brief"
--
CREATE PROCEDURE fieldtype_brief (acursession varchar(38),
afieldtypeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldtypeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldtype
    WHERE fieldtypeid = g2b(afieldtypeid);
    IF aec > 0 THEN
      SET abrief = fieldtype_brief_f(g2b(afieldtypeid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldtype_client_trigger"
--
CREATE PROCEDURE fieldtype_client_trigger (acursession varchar(38),
aFIELDTYPEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldtype_copy"
--
CREATE PROCEDURE fieldtype_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_fieldtype CURSOR FOR
    SELECT
      fieldtypeid
    FROM fieldtype
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldtype (fieldtypeid
    , instanceid
    , name

    , typestyle

    , the_comment

    , allowsize

    , minimum

    , maximum

    , allowlikesearch

    , gridsorttype

    , delayedsave)
      SELECT
        copymap(acopyaction, b2g(fieldtypeid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        typestyle,
        the_comment,
        allowsize,
        minimum,
        maximum,
        allowlikesearch,
        gridsorttype,
        delayedsave

      FROM fieldtype
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_fieldtype;
    SET fetch_done = FALSE;
    FETCH copy_cursor_fieldtype INTO aid;
    WHILE NOT fetch_done DO
      CALL enumitem_copy(acursession, acopyaction, ainstanceid, aid);
      CALL fieldtypemap_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_fieldtype INTO aid;
    END WHILE;

    CLOSE copy_cursor_fieldtype;
  END
  $$

--
-- Создать процедуру "fieldtype_delete"
--
CREATE PROCEDURE fieldtype_delete (acursession varchar(38),
afieldtypeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldtype
    WHERE fieldtypeid = g2b(afieldtypeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldtype' result;
        LEAVE body;
      END IF;
      CALL fieldtype_logger(acursession, afieldtypeid);
      DELETE
        FROM fieldtype
      WHERE fieldtypeid = g2b(afieldtypeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldtype'
        AND ownerrowid = g2b(afieldtypeid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldtype_islocked"
--
CREATE PROCEDURE fieldtype_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldtype
    WHERE fieldtypeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldtype_lock"
--
CREATE PROCEDURE fieldtype_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldtype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldtype
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldtypeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldtype
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldtypeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldtype_logger"
--
CREATE PROCEDURE fieldtype_logger (acursession varchar(38),
afieldtypeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldtype_parent"
--
CREATE PROCEDURE fieldtype_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM fieldtype
    WHERE fieldtypeid = arowid;
  END
  $$

--
-- Создать процедуру "fieldtype_save"
--
CREATE PROCEDURE fieldtype_save (acursession varchar(38),
ainstanceid varchar(38),
afieldtypeid varchar(38)
, aname
varchar(255)/* название *//* название */
, atypestyle
integer/* трактовка *//* трактовка */
, athe_comment
text/* описание *//* описание */
, aallowsize
integer/* нужен размер *//* нужен размер */
, aminimum
varchar(64)/* минимум *//* минимум */
, amaximum
varchar(64)/* максимум *//* максимум */
, aallowlikesearch
integer/* поиск текста *//* поиск текста */
, agridsorttype
integer/* вариант сортировки в табличном представлении *//* вариант сортировки в табличном представлении */
, adelayedsave
integer/* отложенное сохранение *//* отложенное сохранение */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldtype
    WHERE fieldtypeid = g2b(afieldtypeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldtype' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldtype_logger(acursession, afieldtypeid);
        UPDATE fieldtype
        SET changestamp = NOW(),
            name = aname,
            typestyle = atypestyle,
            the_comment = athe_comment,
            allowsize = aallowsize,
            minimum = aminimum,
            maximum = amaximum,
            allowlikesearch = aallowlikesearch,
            gridsorttype = agridsorttype,
            delayedsave = adelayedsave
        WHERE fieldtypeid = g2b(afieldtypeid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM fieldtype
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=тип поля' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL fieldtype_client_trigger(acursession, afieldtypeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldtype' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldtype (changestamp, fieldtypeid
          , instanceid
          , name

          , typestyle

          , the_comment

          , allowsize

          , minimum

          , maximum

          , allowlikesearch

          , gridsorttype

          , delayedsave)
            VALUES (NOW(), g2b(afieldtypeid), g2b(ainstanceid), aname, atypestyle, athe_comment, aallowsize, aminimum, amaximum, aallowlikesearch, agridsorttype, adelayedsave);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM fieldtype
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=тип поля' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL fieldtype_client_trigger(acursession, afieldtypeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldtype_unlock"
--
CREATE PROCEDURE fieldtype_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldtype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldtype
      SET lockuserid = NULL
      WHERE fieldtypeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldtype
      SET locksessionid = NULL
      WHERE fieldtypeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldvalidator_brief"
--
CREATE PROCEDURE fieldvalidator_brief (acursession varchar(38),
afieldvalidatorid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldvalidatorid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fieldvalidator
    WHERE fieldvalidatorid = g2b(afieldvalidatorid);
    IF aec > 0 THEN
      SET abrief = fieldvalidator_brief_f(g2b(afieldvalidatorid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fieldvalidator_client_trigger"
--
CREATE PROCEDURE fieldvalidator_client_trigger (acursession varchar(38),
aFIELDVALIDATORid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fieldvalidator_copy"
--
CREATE PROCEDURE fieldvalidator_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fieldvalidator (fieldvalidatorid
    , parentstructrowid
    , target

    , code)
      SELECT
        copymap(acopyaction, b2g(fieldvalidatorid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        code

      FROM fieldvalidator
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fieldvalidator_delete"
--
CREATE PROCEDURE fieldvalidator_delete (acursession varchar(38),
afieldvalidatorid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldvalidator
    WHERE fieldvalidatorid = g2b(afieldvalidatorid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fieldvalidator' result;
        LEAVE body;
      END IF;
      CALL fieldvalidator_logger(acursession, afieldvalidatorid);
      DELETE
        FROM fieldvalidator
      WHERE fieldvalidatorid = g2b(afieldvalidatorid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fieldvalidator'
        AND ownerrowid = g2b(afieldvalidatorid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fieldvalidator_islocked"
--
CREATE PROCEDURE fieldvalidator_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fieldvalidator
    WHERE fieldvalidatorid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fieldvalidator_lock"
--
CREATE PROCEDURE fieldvalidator_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldvalidator_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fieldvalidator
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldvalidatorid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fieldvalidator
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldvalidatorid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldvalidator_logger"
--
CREATE PROCEDURE fieldvalidator_logger (acursession varchar(38),
afieldvalidatorid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fieldvalidator_parent"
--
CREATE PROCEDURE fieldvalidator_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fieldvalidator
    WHERE fieldvalidatorid = arowid;
    SET aparenttable = 'field';
  END
  $$

--
-- Создать процедуру "fieldvalidator_save"
--
CREATE PROCEDURE fieldvalidator_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldvalidatorid varchar(38)
, atarget varchar(38)/* платформа *//* платформа */
, acode
text/* скрипт *//* скрипт */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fieldvalidator
    WHERE fieldvalidatorid = g2b(afieldvalidatorid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fieldvalidator' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fieldvalidator_logger(acursession, afieldvalidatorid);
        UPDATE fieldvalidator
        SET changestamp = NOW(),
            target = g2b(atarget),
            code = acode
        WHERE fieldvalidatorid = g2b(afieldvalidatorid);


        CALL fieldvalidator_client_trigger(acursession, afieldvalidatorid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fieldvalidator' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fieldvalidator (changestamp, fieldvalidatorid
          , parentstructrowid
          , target

          , code)
            VALUES (NOW(), g2b(afieldvalidatorid), g2b(aparentstructrowid), g2b(atarget), acode);


          CALL fieldvalidator_client_trigger(acursession, afieldvalidatorid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fieldvalidator_unlock"
--
CREATE PROCEDURE fieldvalidator_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fieldvalidator_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fieldvalidator
      SET lockuserid = NULL
      WHERE fieldvalidatorid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fieldvalidator
      SET locksessionid = NULL
      WHERE fieldvalidatorid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "field_brief"
--
CREATE PROCEDURE field_brief (acursession varchar(38),
afieldid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afieldid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM field
    WHERE fieldid = g2b(afieldid);
    IF aec > 0 THEN
      SET abrief = field_brief_f(g2b(afieldid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "field_client_trigger"
--
CREATE PROCEDURE field_client_trigger (acursession varchar(38),
aFIELDid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "field_copy"
--
CREATE PROCEDURE field_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_field CURSOR FOR
    SELECT
      fieldid
    FROM field
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO field (fieldid
    , parentstructrowid
    , tabname

    , fieldgroupbox

    , sequence

    , caption

    , name

    , fieldtype

    , isbrief

    , istabbrief

    , allownull

    , datasize

    , referencetype

    , reftotype

    , reftopart

    , thestyle

    , internalreference

    , createrefonly

    , isautonumber

    , thenumerator

    , zonetemplate

    , numberdatefield

    , thecomment

    , shablonbrief

    , thenameclass

    , themask)
      SELECT
        copymap(acopyaction, b2g(fieldid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        tabname,
        fieldgroupbox,
        sequence,
        caption,
        name,
        fieldtype,
        isbrief,
        istabbrief,
        allownull,
        datasize,
        referencetype,
        reftotype,
        reftopart,
        thestyle,
        internalreference,
        createrefonly,
        isautonumber,
        thenumerator,
        zonetemplate,
        numberdatefield,
        thecomment,
        shablonbrief,
        thenameclass,
        themask

      FROM field
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_field;
    SET fetch_done = FALSE;
    FETCH copy_cursor_field INTO aid;
    WHILE NOT fetch_done DO
      CALL fldextenders_copy(acursession, acopyaction, ainstanceid, aid);
      CALL fieldsrcdef_copy(acursession, acopyaction, ainstanceid, aid);
      CALL dinamicfilterscript_copy(acursession, acopyaction, ainstanceid, aid);
      CALL fieldexpression_copy(acursession, acopyaction, ainstanceid, aid);
      CALL fieldvalidator_copy(acursession, acopyaction, ainstanceid, aid);
      CALL fieldmenu_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_field INTO aid;
    END WHILE;

    CLOSE copy_cursor_field;
  END
  $$

--
-- Создать процедуру "field_delete"
--
CREATE PROCEDURE field_delete (acursession varchar(38),
afieldid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM field
    WHERE fieldid = g2b(afieldid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=field' result;
        LEAVE body;
      END IF;
      CALL field_logger(acursession, afieldid);
      DELETE
        FROM field
      WHERE fieldid = g2b(afieldid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'field'
        AND ownerrowid = g2b(afieldid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "field_islocked"
--
CREATE PROCEDURE field_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM field
    WHERE fieldid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "field_lock"
--
CREATE PROCEDURE field_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL field_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE field
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fieldid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE field
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fieldid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "field_logger"
--
CREATE PROCEDURE field_logger (acursession varchar(38),
afieldid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "field_parent"
--
CREATE PROCEDURE field_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM field
    WHERE fieldid = arowid;
    SET aparenttable = 'part';
  END
  $$

--
-- Создать процедуру "field_save"
--
CREATE PROCEDURE field_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afieldid varchar(38)
, atabname
varchar(60)/* имя вкладки *//* имя вкладки */
, afieldgroupbox
varchar(60)/* имя группы *//* имя группы */
, asequence
integer/* № п/п *//* № п/п */
, acaption
varchar(80)/* надпись *//* надпись */
, aname
varchar(64)/* имя поля *//* имя поля */
, afieldtype varchar(38)/* тип поля *//* тип поля */
, aisbrief
integer/* краткая информация *//* краткая информация */
, aistabbrief
integer/* для отображения в таблице *//* для отображения в таблице */
, aallownull
integer/* может быть пустым *//* может быть пустым */
, adatasize
integer/* размер поля *//* размер поля */
, areferencetype
integer/* тип ссылки *//* тип ссылки */
, areftotype varchar(38)/* ссылка на тип *//* ссылка на тип */
, areftopart varchar(38)/* ссылка на раздел *//* ссылка на раздел */
, athestyle
varchar(50)/* стиль *//* стиль */
, ainternalreference
integer/* ссылка в пределах объекта *//* ссылка в пределах объекта */
, acreaterefonly
integer/* только создание объекта *//* только создание объекта */
, aisautonumber
integer/* автонумерация *//* автонумерация */
, athenumerator varchar(38)/* нумератор *//* нумератор */
, azonetemplate
varchar(255)/* шаблон зоны нумерации *//* шаблон зоны нумерации */
, anumberdatefield varchar(38)/* поле для расчета даты *//* поле для расчета даты */
, athecomment
text/* описание *//* описание */
, ashablonbrief
varchar(100)/* шаблон для краткого отображения *//* шаблон для краткого отображения */
, athenameclass
varchar(100)/* имя класса для мастера строк *//* имя класса для мастера строк */
, athemask
varchar(64)/* маска *//* маска */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM field
    WHERE fieldid = g2b(afieldid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=field' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL field_logger(acursession, afieldid);
        UPDATE field
        SET changestamp = NOW(),
            tabname = atabname,
            fieldgroupbox = afieldgroupbox,
            sequence = asequence,
            caption = acaption,
            name = aname,
            fieldtype = g2b(afieldtype),
            isbrief = aisbrief,
            istabbrief = aistabbrief,
            allownull = aallownull,
            datasize = adatasize,
            referencetype = areferencetype,
            reftotype = g2b(areftotype),
            reftopart = g2b(areftopart),
            thestyle = athestyle,
            internalreference = ainternalreference,
            createrefonly = acreaterefonly,
            isautonumber = aisautonumber,
            thenumerator = g2b(athenumerator),
            zonetemplate = azonetemplate,
            numberdatefield = g2b(anumberdatefield),
            thecomment = athecomment,
            shablonbrief = ashablonbrief,
            thenameclass = athenameclass,
            themask = athemask
        WHERE fieldid = g2b(afieldid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM field
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=поле' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM field
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND sequence = asequence;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=поле' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL field_client_trigger(acursession, afieldid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=field' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO field (changestamp, fieldid
          , parentstructrowid
          , tabname

          , fieldgroupbox

          , sequence

          , caption

          , name

          , fieldtype

          , isbrief

          , istabbrief

          , allownull

          , datasize

          , referencetype

          , reftotype

          , reftopart

          , thestyle

          , internalreference

          , createrefonly

          , isautonumber

          , thenumerator

          , zonetemplate

          , numberdatefield

          , thecomment

          , shablonbrief

          , thenameclass

          , themask)
            VALUES (NOW(), g2b(afieldid), g2b(aparentstructrowid), atabname, afieldgroupbox, asequence, acaption, aname, g2b(afieldtype), aisbrief, aistabbrief, aallownull, adatasize, areferencetype, g2b(areftotype), g2b(areftopart), athestyle, ainternalreference, acreaterefonly, aisautonumber, g2b(athenumerator), azonetemplate, g2b(anumberdatefield), athecomment, ashablonbrief, athenameclass, athemask);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM field
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=поле' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM field
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND sequence = asequence;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=поле' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL field_client_trigger(acursession, afieldid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "field_unlock"
--
CREATE PROCEDURE field_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL field_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE field
      SET lockuserid = NULL
      WHERE fieldid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE field
      SET locksessionid = NULL
      WHERE fieldid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fileterfield_brief"
--
CREATE PROCEDURE fileterfield_brief (acursession varchar(38),
afileterfieldid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afileterfieldid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fileterfield
    WHERE fileterfieldid = g2b(afileterfieldid);
    IF aec > 0 THEN
      SET abrief = fileterfield_brief_f(g2b(afileterfieldid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fileterfield_client_trigger"
--
CREATE PROCEDURE fileterfield_client_trigger (acursession varchar(38),
aFileterFieldid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fileterfield_copy"
--
CREATE PROCEDURE fileterfield_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fileterfield (fileterfieldid
    , parentstructrowid
    , sequence

    , name

    , caption

    , fieldtype

    , fieldsize

    , reftype

    , reftotype

    , reftopart

    , valuearray)
      SELECT
        copymap(acopyaction, b2g(fileterfieldid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        sequence,
        name,
        caption,
        fieldtype,
        fieldsize,
        reftype,
        reftotype,
        reftopart,
        valuearray

      FROM fileterfield
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fileterfield_delete"
--
CREATE PROCEDURE fileterfield_delete (acursession varchar(38),
afileterfieldid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fileterfield
    WHERE fileterfieldid = g2b(afileterfieldid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fileterfield' result;
        LEAVE body;
      END IF;
      CALL fileterfield_logger(acursession, afileterfieldid);
      DELETE
        FROM fileterfield
      WHERE fileterfieldid = g2b(afileterfieldid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fileterfield'
        AND ownerrowid = g2b(afileterfieldid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fileterfield_islocked"
--
CREATE PROCEDURE fileterfield_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fileterfield
    WHERE fileterfieldid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fileterfield_lock"
--
CREATE PROCEDURE fileterfield_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fileterfield_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fileterfield
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fileterfieldid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fileterfield
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fileterfieldid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fileterfield_logger"
--
CREATE PROCEDURE fileterfield_logger (acursession varchar(38),
afileterfieldid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fileterfield_parent"
--
CREATE PROCEDURE fileterfield_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fileterfield
    WHERE fileterfieldid = arowid;
    SET aparenttable = 'filterfieldgroup';
  END
  $$

--
-- Создать процедуру "fileterfield_save"
--
CREATE PROCEDURE fileterfield_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afileterfieldid varchar(38)
, asequence
integer/* последовательность *//* последовательность */
, aname
varchar(255)/* название *//* название */
, acaption
varchar(255)/* заголовок *//* заголовок */
, afieldtype varchar(38)/* тип поля *//* тип поля */
, afieldsize
integer/* размер *//* размер */
, areftype
integer/* тип ссылки *//* тип ссылки */
, areftotype varchar(38)/* тип, куда ссылаемся *//* тип, куда ссылаемся */
, areftopart varchar(38)/* раздел, куда ссылаемся *//* раздел, куда ссылаемся */
, avaluearray
integer/* массив значений *//* массив значений */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fileterfield
    WHERE fileterfieldid = g2b(afileterfieldid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fileterfield' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fileterfield_logger(acursession, afileterfieldid);
        UPDATE fileterfield
        SET changestamp = NOW(),
            sequence = asequence,
            name = aname,
            caption = acaption,
            fieldtype = g2b(afieldtype),
            fieldsize = afieldsize,
            reftype = areftype,
            reftotype = g2b(areftotype),
            reftopart = g2b(areftopart),
            valuearray = avaluearray
        WHERE fileterfieldid = g2b(afileterfieldid);


        CALL fileterfield_client_trigger(acursession, afileterfieldid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fileterfield' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fileterfield (changestamp, fileterfieldid
          , parentstructrowid
          , sequence

          , name

          , caption

          , fieldtype

          , fieldsize

          , reftype

          , reftotype

          , reftopart

          , valuearray)
            VALUES (NOW(), g2b(afileterfieldid), g2b(aparentstructrowid), asequence, aname, acaption, g2b(afieldtype), afieldsize, areftype, g2b(areftotype), g2b(areftopart), avaluearray);


          CALL fileterfield_client_trigger(acursession, afileterfieldid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fileterfield_unlock"
--
CREATE PROCEDURE fileterfield_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fileterfield_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fileterfield
      SET lockuserid = NULL
      WHERE fileterfieldid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fileterfield
      SET locksessionid = NULL
      WHERE fileterfieldid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_brief"
--
CREATE PROCEDURE filterfieldgroup_brief (acursession varchar(38),
afilterfieldgroupid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afilterfieldgroupid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM filterfieldgroup
    WHERE filterfieldgroupid = g2b(afilterfieldgroupid);
    IF aec > 0 THEN
      SET abrief = filterfieldgroup_brief_f(g2b(afilterfieldgroupid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "filterfieldgroup_client_trigger"
--
CREATE PROCEDURE filterfieldgroup_client_trigger (acursession varchar(38),
aFilterFieldGroupid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "filterfieldgroup_copy"
--
CREATE PROCEDURE filterfieldgroup_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_filterfieldgroup CURSOR FOR
    SELECT
      filterfieldgroupid
    FROM filterfieldgroup
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO filterfieldgroup (filterfieldgroupid
    , instanceid
    , sequence

    , name

    , caption

    , allowignore)
      SELECT
        copymap(acopyaction, b2g(filterfieldgroupid)),
        copymap(acopyaction, b2g(instanceid)),
        sequence,
        name,
        caption,
        allowignore

      FROM filterfieldgroup
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_filterfieldgroup;
    SET fetch_done = FALSE;
    FETCH copy_cursor_filterfieldgroup INTO aid;
    WHILE NOT fetch_done DO
      CALL fileterfield_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_filterfieldgroup INTO aid;
    END WHILE;

    CLOSE copy_cursor_filterfieldgroup;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_delete"
--
CREATE PROCEDURE filterfieldgroup_delete (acursession varchar(38),
afilterfieldgroupid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM filterfieldgroup
    WHERE filterfieldgroupid = g2b(afilterfieldgroupid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=filterfieldgroup' result;
        LEAVE body;
      END IF;
      CALL filterfieldgroup_logger(acursession, afilterfieldgroupid);
      DELETE
        FROM filterfieldgroup
      WHERE filterfieldgroupid = g2b(afilterfieldgroupid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'filterfieldgroup'
        AND ownerrowid = g2b(afilterfieldgroupid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_islocked"
--
CREATE PROCEDURE filterfieldgroup_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM filterfieldgroup
    WHERE filterfieldgroupid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_lock"
--
CREATE PROCEDURE filterfieldgroup_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL filterfieldgroup_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE filterfieldgroup
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE filterfieldgroupid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE filterfieldgroup
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE filterfieldgroupid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_logger"
--
CREATE PROCEDURE filterfieldgroup_logger (acursession varchar(38),
afilterfieldgroupid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_parent"
--
CREATE PROCEDURE filterfieldgroup_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM filterfieldgroup
    WHERE filterfieldgroupid = arowid;
  END
  $$

--
-- Создать процедуру "filterfieldgroup_save"
--
CREATE PROCEDURE filterfieldgroup_save (acursession varchar(38),
ainstanceid varchar(38),
afilterfieldgroupid varchar(38)
, asequence
integer/* последовательность *//* последовательность */
, aname
varchar(64)/* название *//* название */
, acaption
varchar(255)/* заголовок *//* заголовок */
, aallowignore
integer/* можно отключать *//* можно отключать */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM filterfieldgroup
    WHERE filterfieldgroupid = g2b(afilterfieldgroupid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=filterfieldgroup' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL filterfieldgroup_logger(acursession, afilterfieldgroupid);
        UPDATE filterfieldgroup
        SET changestamp = NOW(),
            sequence = asequence,
            name = aname,
            caption = acaption,
            allowignore = aallowignore
        WHERE filterfieldgroupid = g2b(afilterfieldgroupid);


        CALL filterfieldgroup_client_trigger(acursession, afilterfieldgroupid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=filterfieldgroup' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO filterfieldgroup (changestamp, filterfieldgroupid
          , instanceid
          , sequence

          , name

          , caption

          , allowignore)
            VALUES (NOW(), g2b(afilterfieldgroupid), g2b(ainstanceid), asequence, aname, acaption, aallowignore);


          CALL filterfieldgroup_client_trigger(acursession, afilterfieldgroupid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "filterfieldgroup_unlock"
--
CREATE PROCEDURE filterfieldgroup_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL filterfieldgroup_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE filterfieldgroup
      SET lockuserid = NULL
      WHERE filterfieldgroupid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE filterfieldgroup
      SET locksessionid = NULL
      WHERE filterfieldgroupid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "filters_brief"
--
CREATE PROCEDURE filters_brief (acursession varchar(38),
afiltersid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afiltersid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM filters
    WHERE filtersid = g2b(afiltersid);
    IF aec > 0 THEN
      SET abrief = filters_brief_f(g2b(afiltersid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "filters_client_trigger"
--
CREATE PROCEDURE filters_client_trigger (acursession varchar(38),
aFiltersid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "filters_copy"
--
CREATE PROCEDURE filters_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO filters (filtersid
    , instanceid
    , name

    , thecaption

    , thecomment)
      SELECT
        copymap(acopyaction, b2g(filtersid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        thecaption,
        thecomment

      FROM filters
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "filters_delete"
--
CREATE PROCEDURE filters_delete (acursession varchar(38),
afiltersid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM filters
    WHERE filtersid = g2b(afiltersid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=filters' result;
        LEAVE body;
      END IF;
      CALL filters_logger(acursession, afiltersid);
      DELETE
        FROM filters
      WHERE filtersid = g2b(afiltersid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'filters'
        AND ownerrowid = g2b(afiltersid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "filters_islocked"
--
CREATE PROCEDURE filters_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM filters
    WHERE filtersid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "filters_lock"
--
CREATE PROCEDURE filters_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL filters_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE filters
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE filtersid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE filters
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE filtersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "filters_logger"
--
CREATE PROCEDURE filters_logger (acursession varchar(38),
afiltersid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "filters_parent"
--
CREATE PROCEDURE filters_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM filters
    WHERE filtersid = arowid;
  END
  $$

--
-- Создать процедуру "filters_save"
--
CREATE PROCEDURE filters_save (acursession varchar(38),
ainstanceid varchar(38),
afiltersid varchar(38)
, aname
varchar(255)/* название *//* название */
, athecaption
varchar(80)/* заголовок *//* заголовок */
, athecomment
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM filters
    WHERE filtersid = g2b(afiltersid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=filters' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL filters_logger(acursession, afiltersid);
        UPDATE filters
        SET changestamp = NOW(),
            name = aname,
            thecaption = athecaption,
            thecomment = athecomment
        WHERE filtersid = g2b(afiltersid);


        CALL filters_client_trigger(acursession, afiltersid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzfltr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=filters' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM filters
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <filters>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO filters (changestamp, filtersid
          , instanceid
          , name

          , thecaption

          , thecomment)
            VALUES (NOW(), g2b(afiltersid), g2b(ainstanceid), aname, athecaption, athecomment);


          CALL filters_client_trigger(acursession, afiltersid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "filters_unlock"
--
CREATE PROCEDURE filters_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL filters_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE filters
      SET lockuserid = NULL
      WHERE filtersid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE filters
      SET locksessionid = NULL
      WHERE filtersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fldextenders_brief"
--
CREATE PROCEDURE fldextenders_brief (acursession varchar(38),
afldextendersid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF afldextendersid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM fldextenders
    WHERE fldextendersid = g2b(afldextendersid);
    IF aec > 0 THEN
      SET abrief = fldextenders_brief_f(g2b(afldextendersid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "fldextenders_client_trigger"
--
CREATE PROCEDURE fldextenders_client_trigger (acursession varchar(38),
aFldExtendersid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "fldextenders_copy"
--
CREATE PROCEDURE fldextenders_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO fldextenders (fldextendersid
    , parentstructrowid
    , thename

    , targetplatform

    , theobject

    , theconfig)
      SELECT
        copymap(acopyaction, b2g(fldextendersid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        thename,
        targetplatform,
        theobject,
        theconfig

      FROM fldextenders
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "fldextenders_delete"
--
CREATE PROCEDURE fldextenders_delete (acursession varchar(38),
afldextendersid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fldextenders
    WHERE fldextendersid = g2b(afldextendersid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=fldextenders' result;
        LEAVE body;
      END IF;
      CALL fldextenders_logger(acursession, afldextendersid);
      DELETE
        FROM fldextenders
      WHERE fldextendersid = g2b(afldextendersid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'fldextenders'
        AND ownerrowid = g2b(afldextendersid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "fldextenders_islocked"
--
CREATE PROCEDURE fldextenders_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM fldextenders
    WHERE fldextendersid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "fldextenders_lock"
--
CREATE PROCEDURE fldextenders_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fldextenders_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE fldextenders
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE fldextendersid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE fldextenders
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE fldextendersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fldextenders_logger"
--
CREATE PROCEDURE fldextenders_logger (acursession varchar(38),
afldextendersid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "fldextenders_parent"
--
CREATE PROCEDURE fldextenders_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM fldextenders
    WHERE fldextendersid = arowid;
    SET aparenttable = 'field';
  END
  $$

--
-- Создать процедуру "fldextenders_save"
--
CREATE PROCEDURE fldextenders_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
afldextendersid varchar(38)
, athename
varchar(255)/* название *//* название */
, atargetplatform varchar(38)/* целевая платформа *//* целевая платформа */
, atheobject
varchar(255)/* объект *//* объект */
, atheconfig
varchar(512)/* конфиг *//* конфиг */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM fldextenders
    WHERE fldextendersid = g2b(afldextendersid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=fldextenders' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL fldextenders_logger(acursession, afldextendersid);
        UPDATE fldextenders
        SET changestamp = NOW(),
            thename = athename,
            targetplatform = g2b(atargetplatform),
            theobject = atheobject,
            theconfig = atheconfig
        WHERE fldextendersid = g2b(afldextendersid);


        CALL fldextenders_client_trigger(acursession, afldextendersid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=fldextenders' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO fldextenders (changestamp, fldextendersid
          , parentstructrowid
          , thename

          , targetplatform

          , theobject

          , theconfig)
            VALUES (NOW(), g2b(afldextendersid), g2b(aparentstructrowid), athename, g2b(atargetplatform), atheobject, atheconfig);


          CALL fldextenders_client_trigger(acursession, afldextendersid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "fldextenders_unlock"
--
CREATE PROCEDURE fldextenders_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL fldextenders_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE fldextenders
      SET lockuserid = NULL
      WHERE fldextendersid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE fldextenders
      SET locksessionid = NULL
      WHERE fldextendersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "gencontrols_brief"
--
CREATE PROCEDURE gencontrols_brief (acursession varchar(38),
agencontrolsid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agencontrolsid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM gencontrols
    WHERE gencontrolsid = g2b(agencontrolsid);
    IF aec > 0 THEN
      SET abrief = gencontrols_brief_f(g2b(agencontrolsid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "gencontrols_client_trigger"
--
CREATE PROCEDURE gencontrols_client_trigger (acursession varchar(38),
aGENCONTROLSid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "gencontrols_copy"
--
CREATE PROCEDURE gencontrols_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO gencontrols (gencontrolsid
    , parentstructrowid
    , controlprogid

    , controlclassid

    , versionmajor

    , versionminor)
      SELECT
        copymap(acopyaction, b2g(gencontrolsid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        controlprogid,
        controlclassid,
        versionmajor,
        versionminor

      FROM gencontrols
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "gencontrols_delete"
--
CREATE PROCEDURE gencontrols_delete (acursession varchar(38),
agencontrolsid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM gencontrols
    WHERE gencontrolsid = g2b(agencontrolsid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=gencontrols' result;
        LEAVE body;
      END IF;
      CALL gencontrols_logger(acursession, agencontrolsid);
      DELETE
        FROM gencontrols
      WHERE gencontrolsid = g2b(agencontrolsid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'gencontrols'
        AND ownerrowid = g2b(agencontrolsid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "gencontrols_islocked"
--
CREATE PROCEDURE gencontrols_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM gencontrols
    WHERE gencontrolsid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "gencontrols_lock"
--
CREATE PROCEDURE gencontrols_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL gencontrols_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE gencontrols
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE gencontrolsid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE gencontrols
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE gencontrolsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "gencontrols_logger"
--
CREATE PROCEDURE gencontrols_logger (acursession varchar(38),
agencontrolsid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "gencontrols_parent"
--
CREATE PROCEDURE gencontrols_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM gencontrols
    WHERE gencontrolsid = arowid;
    SET aparenttable = 'generator_target';
  END
  $$

--
-- Создать процедуру "gencontrols_save"
--
CREATE PROCEDURE gencontrols_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
agencontrolsid varchar(38)
, acontrolprogid
varchar(255)/* progid контрольконо элемента *//* progid контрольконо элемента */
, acontrolclassid
varchar(40)/* класс контрольногоэлемента *//* класс контрольногоэлемента */
, aversionmajor
integer/* версия *//* версия */
, aversionminor
integer/* подверсия *//* подверсия */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM gencontrols
    WHERE gencontrolsid = g2b(agencontrolsid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=gencontrols' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL gencontrols_logger(acursession, agencontrolsid);
        UPDATE gencontrols
        SET changestamp = NOW(),
            controlprogid = acontrolprogid,
            controlclassid = acontrolclassid,
            versionmajor = aversionmajor,
            versionminor = aversionminor
        WHERE gencontrolsid = g2b(agencontrolsid);


        CALL gencontrols_client_trigger(acursession, agencontrolsid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=gencontrols' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO gencontrols (changestamp, gencontrolsid
          , parentstructrowid
          , controlprogid

          , controlclassid

          , versionmajor

          , versionminor)
            VALUES (NOW(), g2b(agencontrolsid), g2b(aparentstructrowid), acontrolprogid, acontrolclassid, aversionmajor, aversionminor);


          CALL gencontrols_client_trigger(acursession, agencontrolsid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "gencontrols_unlock"
--
CREATE PROCEDURE gencontrols_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL gencontrols_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE gencontrols
      SET lockuserid = NULL
      WHERE gencontrolsid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE gencontrols
      SET locksessionid = NULL
      WHERE gencontrolsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "generator_target_brief"
--
CREATE PROCEDURE generator_target_brief (acursession varchar(38),
agenerator_targetid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agenerator_targetid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM generator_target
    WHERE generator_targetid = g2b(agenerator_targetid);
    IF aec > 0 THEN
      SET abrief = generator_target_brief_f(g2b(agenerator_targetid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "generator_target_client_trigger"
--
CREATE PROCEDURE generator_target_client_trigger (acursession varchar(38),
aGENERATOR_TARGETid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "generator_target_copy"
--
CREATE PROCEDURE generator_target_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_generator_target CURSOR FOR
    SELECT
      generator_targetid
    FROM generator_target
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO generator_target (generator_targetid
    , parentstructrowid
    , name

    , targettype

    , queuename

    , generatorprogid

    , generatorstyle

    , thedevelopmentenv)
      SELECT
        copymap(acopyaction, b2g(generator_targetid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        targettype,
        queuename,
        generatorprogid,
        generatorstyle,
        thedevelopmentenv

      FROM generator_target
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_generator_target;
    SET fetch_done = FALSE;
    FETCH copy_cursor_generator_target INTO aid;
    WHILE NOT fetch_done DO
      CALL genreference_copy(acursession, acopyaction, ainstanceid, aid);
      CALL genmanualcode_copy(acursession, acopyaction, ainstanceid, aid);
      CALL gencontrols_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_generator_target INTO aid;
    END WHILE;

    CLOSE copy_cursor_generator_target;
  END
  $$

--
-- Создать процедуру "generator_target_delete"
--
CREATE PROCEDURE generator_target_delete (acursession varchar(38),
agenerator_targetid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM generator_target
    WHERE generator_targetid = g2b(agenerator_targetid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=generator_target' result;
        LEAVE body;
      END IF;
      CALL generator_target_logger(acursession, agenerator_targetid);
      DELETE
        FROM generator_target
      WHERE generator_targetid = g2b(agenerator_targetid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'generator_target'
        AND ownerrowid = g2b(agenerator_targetid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "generator_target_islocked"
--
CREATE PROCEDURE generator_target_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM generator_target
    WHERE generator_targetid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "generator_target_lock"
--
CREATE PROCEDURE generator_target_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL generator_target_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE generator_target
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE generator_targetid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE generator_target
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE generator_targetid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "generator_target_logger"
--
CREATE PROCEDURE generator_target_logger (acursession varchar(38),
agenerator_targetid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "generator_target_parent"
--
CREATE PROCEDURE generator_target_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM generator_target
    WHERE generator_targetid = arowid;
    SET aparenttable = 'genpackage';
  END
  $$

--
-- Создать процедуру "generator_target_save"
--
CREATE PROCEDURE generator_target_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
agenerator_targetid varchar(38)
, aname
varchar(255)/* название *//* название */
, atargettype
integer/* тип платформы *//* тип платформы */
, aqueuename
varchar(255)/* очередь *//* очередь */
, ageneratorprogid
varchar(255)/* com класс *//* com класс */
, ageneratorstyle
integer/* вариант *//* вариант */
, athedevelopmentenv
integer/* среда разработки *//* среда разработки */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM generator_target
    WHERE generator_targetid = g2b(agenerator_targetid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=generator_target' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL generator_target_logger(acursession, agenerator_targetid);
        UPDATE generator_target
        SET changestamp = NOW(),
            name = aname,
            targettype = atargettype,
            queuename = aqueuename,
            generatorprogid = ageneratorprogid,
            generatorstyle = ageneratorstyle,
            thedevelopmentenv = athedevelopmentenv
        WHERE generator_targetid = g2b(agenerator_targetid);


        CALL generator_target_client_trigger(acursession, agenerator_targetid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=generator_target' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO generator_target (changestamp, generator_targetid
          , parentstructrowid
          , name

          , targettype

          , queuename

          , generatorprogid

          , generatorstyle

          , thedevelopmentenv)
            VALUES (NOW(), g2b(agenerator_targetid), g2b(aparentstructrowid), aname, atargettype, aqueuename, ageneratorprogid, ageneratorstyle, athedevelopmentenv);


          CALL generator_target_client_trigger(acursession, agenerator_targetid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "generator_target_unlock"
--
CREATE PROCEDURE generator_target_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL generator_target_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE generator_target
      SET lockuserid = NULL
      WHERE generator_targetid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE generator_target
      SET locksessionid = NULL
      WHERE generator_targetid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genmanualcode_brief"
--
CREATE PROCEDURE genmanualcode_brief (acursession varchar(38),
agenmanualcodeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agenmanualcodeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM genmanualcode
    WHERE genmanualcodeid = g2b(agenmanualcodeid);
    IF aec > 0 THEN
      SET abrief = genmanualcode_brief_f(g2b(agenmanualcodeid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "genmanualcode_client_trigger"
--
CREATE PROCEDURE genmanualcode_client_trigger (acursession varchar(38),
aGENMANUALCODEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "genmanualcode_copy"
--
CREATE PROCEDURE genmanualcode_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO genmanualcode (genmanualcodeid
    , parentstructrowid
    , name

    , the_alias

    , code)
      SELECT
        copymap(acopyaction, b2g(genmanualcodeid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        the_alias,
        code

      FROM genmanualcode
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "genmanualcode_delete"
--
CREATE PROCEDURE genmanualcode_delete (acursession varchar(38),
agenmanualcodeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM genmanualcode
    WHERE genmanualcodeid = g2b(agenmanualcodeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=genmanualcode' result;
        LEAVE body;
      END IF;
      CALL genmanualcode_logger(acursession, agenmanualcodeid);
      DELETE
        FROM genmanualcode
      WHERE genmanualcodeid = g2b(agenmanualcodeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'genmanualcode'
        AND ownerrowid = g2b(agenmanualcodeid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "genmanualcode_islocked"
--
CREATE PROCEDURE genmanualcode_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM genmanualcode
    WHERE genmanualcodeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "genmanualcode_lock"
--
CREATE PROCEDURE genmanualcode_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL genmanualcode_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE genmanualcode
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE genmanualcodeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE genmanualcode
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE genmanualcodeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genmanualcode_logger"
--
CREATE PROCEDURE genmanualcode_logger (acursession varchar(38),
agenmanualcodeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genmanualcode_parent"
--
CREATE PROCEDURE genmanualcode_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM genmanualcode
    WHERE genmanualcodeid = arowid;
    SET aparenttable = 'generator_target';
  END
  $$

--
-- Создать процедуру "genmanualcode_save"
--
CREATE PROCEDURE genmanualcode_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
agenmanualcodeid varchar(38)
, aname
varchar(255)/* название *//* название */
, athe_alias
varchar(80)/* псевдоним *//* псевдоним */
, acode
text/* код *//* код */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM genmanualcode
    WHERE genmanualcodeid = g2b(agenmanualcodeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=genmanualcode' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL genmanualcode_logger(acursession, agenmanualcodeid);
        UPDATE genmanualcode
        SET changestamp = NOW(),
            name = aname,
            the_alias = athe_alias,
            code = acode
        WHERE genmanualcodeid = g2b(agenmanualcodeid);


        CALL genmanualcode_client_trigger(acursession, agenmanualcodeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=genmanualcode' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO genmanualcode (changestamp, genmanualcodeid
          , parentstructrowid
          , name

          , the_alias

          , code)
            VALUES (NOW(), g2b(agenmanualcodeid), g2b(aparentstructrowid), aname, athe_alias, acode);


          CALL genmanualcode_client_trigger(acursession, agenmanualcodeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "genmanualcode_unlock"
--
CREATE PROCEDURE genmanualcode_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL genmanualcode_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE genmanualcode
      SET lockuserid = NULL
      WHERE genmanualcodeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE genmanualcode
      SET locksessionid = NULL
      WHERE genmanualcodeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genpackage_brief"
--
CREATE PROCEDURE genpackage_brief (acursession varchar(38),
agenpackageid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agenpackageid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM genpackage
    WHERE genpackageid = g2b(agenpackageid);
    IF aec > 0 THEN
      SET abrief = genpackage_brief_f(g2b(agenpackageid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "genpackage_client_trigger"
--
CREATE PROCEDURE genpackage_client_trigger (acursession varchar(38),
aGENPACKAGEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "genpackage_copy"
--
CREATE PROCEDURE genpackage_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_genpackage CURSOR FOR
    SELECT
      genpackageid
    FROM genpackage
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO genpackage (genpackageid
    , instanceid
    , name)
      SELECT
        copymap(acopyaction, b2g(genpackageid)),
        copymap(acopyaction, b2g(instanceid)),
        name

      FROM genpackage
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_genpackage;
    SET fetch_done = FALSE;
    FETCH copy_cursor_genpackage INTO aid;
    WHILE NOT fetch_done DO
      CALL generator_target_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_genpackage INTO aid;
    END WHILE;

    CLOSE copy_cursor_genpackage;
  END
  $$

--
-- Создать процедуру "genpackage_delete"
--
CREATE PROCEDURE genpackage_delete (acursession varchar(38),
agenpackageid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM genpackage
    WHERE genpackageid = g2b(agenpackageid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=genpackage' result;
        LEAVE body;
      END IF;
      CALL genpackage_logger(acursession, agenpackageid);
      DELETE
        FROM genpackage
      WHERE genpackageid = g2b(agenpackageid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'genpackage'
        AND ownerrowid = g2b(agenpackageid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "genpackage_islocked"
--
CREATE PROCEDURE genpackage_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM genpackage
    WHERE genpackageid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "genpackage_lock"
--
CREATE PROCEDURE genpackage_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL genpackage_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE genpackage
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE genpackageid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE genpackage
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE genpackageid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genpackage_logger"
--
CREATE PROCEDURE genpackage_logger (acursession varchar(38),
agenpackageid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genpackage_parent"
--
CREATE PROCEDURE genpackage_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM genpackage
    WHERE genpackageid = arowid;
  END
  $$

--
-- Создать процедуру "genpackage_save"
--
CREATE PROCEDURE genpackage_save (acursession varchar(38),
ainstanceid varchar(38),
agenpackageid varchar(38)
, aname
varchar(255)/* название *//* название */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM genpackage
    WHERE genpackageid = g2b(agenpackageid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=genpackage' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL genpackage_logger(acursession, agenpackageid);
        UPDATE genpackage
        SET changestamp = NOW(),
            name = aname
        WHERE genpackageid = g2b(agenpackageid);


        CALL genpackage_client_trigger(acursession, agenpackageid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=genpackage' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO genpackage (changestamp, genpackageid
          , instanceid
          , name)
            VALUES (NOW(), g2b(agenpackageid), g2b(ainstanceid), aname);


          CALL genpackage_client_trigger(acursession, agenpackageid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "genpackage_unlock"
--
CREATE PROCEDURE genpackage_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL genpackage_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE genpackage
      SET lockuserid = NULL
      WHERE genpackageid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE genpackage
      SET locksessionid = NULL
      WHERE genpackageid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genreference_brief"
--
CREATE PROCEDURE genreference_brief (acursession varchar(38),
agenreferenceid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agenreferenceid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM genreference
    WHERE genreferenceid = g2b(agenreferenceid);
    IF aec > 0 THEN
      SET abrief = genreference_brief_f(g2b(agenreferenceid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "genreference_client_trigger"
--
CREATE PROCEDURE genreference_client_trigger (acursession varchar(38),
aGENREFERENCEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "genreference_copy"
--
CREATE PROCEDURE genreference_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO genreference (genreferenceid
    , parentstructrowid
    , name

    , refclassid

    , versionmajor

    , versionminor)
      SELECT
        copymap(acopyaction, b2g(genreferenceid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        refclassid,
        versionmajor,
        versionminor

      FROM genreference
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "genreference_delete"
--
CREATE PROCEDURE genreference_delete (acursession varchar(38),
agenreferenceid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM genreference
    WHERE genreferenceid = g2b(agenreferenceid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=genreference' result;
        LEAVE body;
      END IF;
      CALL genreference_logger(acursession, agenreferenceid);
      DELETE
        FROM genreference
      WHERE genreferenceid = g2b(agenreferenceid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'genreference'
        AND ownerrowid = g2b(agenreferenceid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "genreference_islocked"
--
CREATE PROCEDURE genreference_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM genreference
    WHERE genreferenceid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "genreference_lock"
--
CREATE PROCEDURE genreference_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL genreference_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE genreference
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE genreferenceid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE genreference
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE genreferenceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genreference_logger"
--
CREATE PROCEDURE genreference_logger (acursession varchar(38),
agenreferenceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "genreference_parent"
--
CREATE PROCEDURE genreference_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM genreference
    WHERE genreferenceid = arowid;
    SET aparenttable = 'generator_target';
  END
  $$

--
-- Создать процедуру "genreference_save"
--
CREATE PROCEDURE genreference_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
agenreferenceid varchar(38)
, aname
varchar(255)/* название *//* название */
, arefclassid
varchar(40)/* класс ссылки *//* класс ссылки */
, aversionmajor
integer/* номер версии *//* номер версии */
, aversionminor
integer/* подверсия *//* подверсия */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM genreference
    WHERE genreferenceid = g2b(agenreferenceid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=genreference' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL genreference_logger(acursession, agenreferenceid);
        UPDATE genreference
        SET changestamp = NOW(),
            name = aname,
            refclassid = arefclassid,
            versionmajor = aversionmajor,
            versionminor = aversionminor
        WHERE genreferenceid = g2b(agenreferenceid);


        CALL genreference_client_trigger(acursession, agenreferenceid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=genreference' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO genreference (changestamp, genreferenceid
          , parentstructrowid
          , name

          , refclassid

          , versionmajor

          , versionminor)
            VALUES (NOW(), g2b(agenreferenceid), g2b(aparentstructrowid), aname, arefclassid, aversionmajor, aversionminor);


          CALL genreference_client_trigger(acursession, agenreferenceid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "genreference_unlock"
--
CREATE PROCEDURE genreference_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL genreference_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE genreference
      SET lockuserid = NULL
      WHERE genreferenceid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE genreference
      SET locksessionid = NULL
      WHERE genreferenceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "GetServerTime"
--
CREATE PROCEDURE GetServerTime (OUT aServerTime datetime/* Текущее время */

)
body:
  BEGIN

    SET aServerTime = NOW();


  END
  $$

--
-- Создать процедуру "groups_brief"
--
CREATE PROCEDURE groups_brief (acursession varchar(38),
agroupsid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agroupsid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM groups
    WHERE groupsid = g2b(agroupsid);
    IF aec > 0 THEN
      SET abrief = groups_brief_f(g2b(agroupsid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "groups_client_trigger"
--
CREATE PROCEDURE groups_client_trigger (acursession varchar(38),
aGroupsid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "groups_copy"
--
CREATE PROCEDURE groups_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_groups CURSOR FOR
    SELECT
      groupsid
    FROM groups
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO groups (groupsid
    , instanceid
    , name

    , adgroup)
      SELECT
        copymap(acopyaction, b2g(groupsid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        adgroup

      FROM groups
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_groups;
    SET fetch_done = FALSE;
    FETCH copy_cursor_groups INTO aid;
    WHILE NOT fetch_done DO
      CALL groupuser_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_groups INTO aid;
    END WHILE;

    CLOSE copy_cursor_groups;
  END
  $$

--
-- Создать процедуру "groups_delete"
--
CREATE PROCEDURE groups_delete (acursession varchar(38),
agroupsid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM groups
    WHERE groupsid = g2b(agroupsid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=groups' result;
        LEAVE body;
      END IF;
      CALL groups_logger(acursession, agroupsid);
      DELETE
        FROM groups
      WHERE groupsid = g2b(agroupsid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'groups'
        AND ownerrowid = g2b(agroupsid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "groups_islocked"
--
CREATE PROCEDURE groups_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM groups
    WHERE groupsid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "groups_lock"
--
CREATE PROCEDURE groups_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL groups_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE groups
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE groupsid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE groups
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE groupsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "groups_logger"
--
CREATE PROCEDURE groups_logger (acursession varchar(38),
agroupsid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "groups_parent"
--
CREATE PROCEDURE groups_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM groups
    WHERE groupsid = arowid;
  END
  $$

--
-- Создать процедуру "groups_save"
--
CREATE PROCEDURE groups_save (acursession varchar(38),
ainstanceid varchar(38),
agroupsid varchar(38)
, aname
varchar(80)/* название *//* название */
, aadgroup
varchar(255)/* группа ad *//* группа ad */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM groups
    WHERE groupsid = g2b(agroupsid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=groups' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL groups_logger(acursession, agroupsid);
        UPDATE groups
        SET changestamp = NOW(),
            name = aname,
            adgroup = aadgroup
        WHERE groupsid = g2b(agroupsid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM groups
        WHERE instanceid = g2b(ainstanceid)
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=группы' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL groups_client_trigger(acursession, agroupsid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=groups' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO groups (changestamp, groupsid
          , instanceid
          , name

          , adgroup)
            VALUES (NOW(), g2b(agroupsid), g2b(ainstanceid), aname, aadgroup);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM groups
          WHERE instanceid = g2b(ainstanceid)
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=группы' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL groups_client_trigger(acursession, agroupsid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "groups_unlock"
--
CREATE PROCEDURE groups_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL groups_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE groups
      SET lockuserid = NULL
      WHERE groupsid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE groups
      SET locksessionid = NULL
      WHERE groupsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "groupuser_brief"
--
CREATE PROCEDURE groupuser_brief (acursession varchar(38),
agroupuserid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF agroupuserid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM groupuser
    WHERE groupuserid = g2b(agroupuserid);
    IF aec > 0 THEN
      SET abrief = groupuser_brief_f(g2b(agroupuserid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "groupuser_client_trigger"
--
CREATE PROCEDURE groupuser_client_trigger (acursession varchar(38),
aGroupUserid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "groupuser_copy"
--
CREATE PROCEDURE groupuser_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO groupuser (groupuserid
    , parentstructrowid
    , theuser)
      SELECT
        copymap(acopyaction, b2g(groupuserid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        theuser

      FROM groupuser
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "groupuser_delete"
--
CREATE PROCEDURE groupuser_delete (acursession varchar(38),
agroupuserid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM groupuser
    WHERE groupuserid = g2b(agroupuserid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=groupuser' result;
        LEAVE body;
      END IF;
      CALL groupuser_logger(acursession, agroupuserid);
      DELETE
        FROM groupuser
      WHERE groupuserid = g2b(agroupuserid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'groupuser'
        AND ownerrowid = g2b(agroupuserid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "groupuser_islocked"
--
CREATE PROCEDURE groupuser_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM groupuser
    WHERE groupuserid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "groupuser_lock"
--
CREATE PROCEDURE groupuser_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL groupuser_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE groupuser
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE groupuserid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE groupuser
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE groupuserid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "groupuser_logger"
--
CREATE PROCEDURE groupuser_logger (acursession varchar(38),
agroupuserid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "groupuser_parent"
--
CREATE PROCEDURE groupuser_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM groupuser
    WHERE groupuserid = arowid;
    SET aparenttable = 'groups';
  END
  $$

--
-- Создать процедуру "groupuser_save"
--
CREATE PROCEDURE groupuser_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
agroupuserid varchar(38)
, atheuser varchar(38)/* пользователь *//* пользователь */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM groupuser
    WHERE groupuserid = g2b(agroupuserid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=groupuser' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL groupuser_logger(acursession, agroupuserid);
        UPDATE groupuser
        SET changestamp = NOW(),
            theuser = g2b(atheuser)
        WHERE groupuserid = g2b(agroupuserid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM groupuser
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND theuser = g2b(atheuser);
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=состав группы' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL groupuser_client_trigger(acursession, agroupuserid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=groupuser' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO groupuser (changestamp, groupuserid
          , parentstructrowid
          , theuser)
            VALUES (NOW(), g2b(agroupuserid), g2b(aparentstructrowid), g2b(atheuser));
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM groupuser
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND theuser = g2b(atheuser);
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=состав группы' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL groupuser_client_trigger(acursession, agroupuserid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "groupuser_unlock"
--
CREATE PROCEDURE groupuser_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL groupuser_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE groupuser
      SET lockuserid = NULL
      WHERE groupuserid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE groupuser
      SET locksessionid = NULL
      WHERE groupuserid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "init"
--
CREATE PROCEDURE init ()
BEGIN
  DECLARE aid binary(16);
  DECLARE ainstid binary(16);
  DECLARE auid binary(16);
  DECLARE asession varchar(38);
  DECLARE acid binary(16);
  DECLARE asecid binary(16);
  DECLARE ahid binary(16);
  DECLARE atmpstr varchar(255);
  DECLARE aec int;
  SELECT
    COUNT(*) INTO aec
  FROM instance
  WHERE objtype = 'mtzsystem';
  IF aec = 0 THEN
    SET ainstid = g2b('ee28f9e4-afe3-44e9-8fef-411e81913423');
    INSERT INTO instance (instanceid, objtype, name, changestamp)
      VALUES (ainstid, 'mtzsystem', 'системная информация', NOW());
  ELSE
    SELECT
      instanceid INTO ainstid
    FROM instance
    WHERE objtype = 'mtzsystem';
  END IF;
  SET auid = g2b('38def86a-191e-49a8-963b-63e0c94f4f99');
  SET asecid = g2b('993daafd-589e-480d-97ff-1f9ab0568800');
  SET ahid = g2b('27f56741-4140-4c9c-909b-446eca089409');
  SELECT
    COUNT(*) INTO aec
  FROM users
  WHERE usersid = auid;
  IF aec = 0 THEN
    INSERT INTO users (usersid, instanceid, login, password, changestamp)
      VALUES (auid, NULL, 'init', 'init', NOW());
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdpos';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdpos', 'vdpos_register', 'vdpos_delete', 'vdpos_hcl', 'vdpos_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vkusr';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vkusr', 'vkusr_register', 'vkusr_delete', 'vkusr_hcl', 'vkusr_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vkrot';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vkrot', 'vkrot_register', 'vkrot_delete', 'vkrot_hcl', 'vkrot_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdage';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdage', 'vdage_register', 'vdage_delete', 'vdage_hcl', 'vdage_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdfrmt';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdfrmt', 'vdfrmt_register', 'vdfrmt_delete', 'vdfrmt_hcl', 'vdfrmt_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'bpu';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'bpu', 'bpu_register', 'bpu_delete', 'bpu_hcl', 'bpu_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzmetamodel';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzmetamodel', 'mtzmetamodel_register', 'mtzmetamodel_delete', 'mtzmetamodel_hcl', 'mtzmetamodel_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzjrnl';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzjrnl', 'mtzjrnl_register', 'mtzjrnl_delete', 'mtzjrnl_hcl', 'mtzjrnl_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'bpc';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'bpc', 'bpc_register', 'bpc_delete', 'bpc_hcl', 'bpc_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vkprj';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vkprj', 'vkprj_register', 'vkprj_delete', 'vkprj_hcl', 'vkprj_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdrg';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdrg', 'vdrg_register', 'vdrg_delete', 'vdrg_hcl', 'vdrg_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzsystem';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzsystem', 'mtzsystem_register', 'mtzsystem_delete', 'mtzsystem_hcl', 'mtzsystem_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdtt';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdtt', 'vdtt_register', 'vdtt_delete', 'vdtt_hcl', 'vdtt_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdpt';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdpt', 'vdpt_register', 'vdpt_delete', 'vdpt_hcl', 'vdpt_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzwp';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzwp', 'mtzwp_register', 'mtzwp_delete', 'mtzwp_hcl', 'mtzwp_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vddev';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vddev', 'vddev_register', 'vddev_delete', 'vddev_hcl', 'vddev_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'bpdr';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'bpdr', 'bpdr_register', 'bpdr_delete', 'bpdr_hcl', 'bpdr_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdapl';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdapl', 'vdapl_register', 'vdapl_delete', 'vdapl_hcl', 'vdapl_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdmstat';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdmstat', 'vdmstat_register', 'vdmstat_delete', 'vdmstat_hcl', 'vdmstat_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdcn';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdcn', 'vdcn_register', 'vdcn_delete', 'vdcn_hcl', 'vdcn_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdappr';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdappr', 'vdappr_register', 'vdappr_delete', 'vdappr_hcl', 'vdappr_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdt';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdt', 'vdt_register', 'vdt_delete', 'vdt_hcl', 'vdt_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzusers';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzusers', 'mtzusers_register', 'mtzusers_delete', 'mtzusers_hcl', 'mtzusers_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdrel';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdrel', 'vdrel_register', 'vdrel_delete', 'vdrel_hcl', 'vdrel_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vkads';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vkads', 'vkads_register', 'vkads_delete', 'vkads_hcl', 'vkads_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'stdnumerator';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'stdnumerator', 'stdnumerator_register', 'stdnumerator_delete', 'stdnumerator_hcl', 'stdnumerator_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzext';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzext', 'mtzext_register', 'mtzext_delete', 'mtzext_hcl', 'mtzext_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdast';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdast', 'vdast_register', 'vdast_delete', 'vdast_hcl', 'vdast_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'bprcfg';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'bprcfg', 'bprcfg_register', 'bprcfg_delete', 'bprcfg_hcl', 'bprcfg_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdos';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdos', 'vdos_register', 'vdos_delete', 'vdos_hcl', 'vdos_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdinter';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdinter', 'vdinter_register', 'vdinter_delete', 'vdinter_hcl', 'vdinter_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vkcam';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vkcam', 'vkcam_register', 'vkcam_delete', 'vkcam_hcl', 'vkcam_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vktrg';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vktrg', 'vktrg_register', 'vktrg_delete', 'vktrg_hcl', 'vktrg_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vkbrk';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vkbrk', 'vkbrk_register', 'vkbrk_delete', 'vkbrk_hcl', 'vkbrk_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzfltr';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzfltr', 'mtzfltr_register', 'mtzfltr_delete', 'mtzfltr_hcl', 'mtzfltr_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'bpdi';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'bpdi', 'bpdi_register', 'bpdi_delete', 'bpdi_hcl', 'bpdi_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdcst';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdcst', 'vdcst_register', 'vdcst_delete', 'vdcst_hcl', 'vdcst_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdbrw';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdbrw', 'vdbrw_register', 'vdbrw_delete', 'vdbrw_hcl', 'vdbrw_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vdcat';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vdcat', 'vdcat_register', 'vdcat_delete', 'vdcat_hcl', 'vdcat_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'mtzrprt';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'mtzrprt', 'mtzrprt_register', 'mtzrprt_delete', 'mtzrprt_hcl', 'mtzrprt_propagate');
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typelist
  WHERE name = 'vktsk';
  IF aec = 0 THEN
    INSERT INTO typelist (typelistid, name, registerproc, deleteproc, hclproc, propagateproc)
      VALUES (g2b(UUID()), 'vktsk', 'vktsk_register', 'vktsk_delete', 'vktsk_hcl', 'vktsk_propagate');
  END IF;

  SET aid = g2b('f7735f74-4fec-4b16-b5c4-aa93371ba47d');
  CALL sysoptions_save(b2g(aid), 'vk_position', 'vdpos', 'struct_type');

  SET aid = g2b('c64eead4-9d61-4b53-9949-e794ed192294');
  CALL sysoptions_save(b2g(aid), 'vk_position', 'autovk_position', 'defview');

  SET aid = g2b('f43d1b42-abf0-4b7b-8c03-e24b89e8caad');
  CALL sysoptions_save(b2g(aid), 'vk_cab', 'vkusr', 'struct_type');

  SET aid = g2b('c1cc2d25-b063-450d-94a5-99feb95eaa64');
  CALL sysoptions_save(b2g(aid), 'vk_cab', 'autovk_cab', 'defview');

  SET aid = g2b('bb0a4a88-6bfd-4345-bbe8-414a4800598c');
  CALL sysoptions_save(b2g(aid), 'vk_usr', 'vkusr', 'struct_type');

  SET aid = g2b('be7aba05-269d-49a5-a54a-16f9c79fcba1');
  CALL sysoptions_save(b2g(aid), 'vk_usr', 'autovk_usr', 'defview');

  SET aid = g2b('2a7270f4-0a44-45ac-bf7d-0f9414f55691');
  CALL sysoptions_save(b2g(aid), 'vk_rotinfo', 'vkrot', 'struct_type');

  SET aid = g2b('cfb9ae45-071e-47b0-80f6-faa5e2c052b6');
  CALL sysoptions_save(b2g(aid), 'vk_rotinfo', 'autovk_rotinfo', 'defview');

  SET aid = g2b('e79378ac-62ad-4680-8b5d-820960ed1a94');
  CALL sysoptions_save(b2g(aid), 'vk_rotads', 'vkrot', 'struct_type');

  SET aid = g2b('7c1d771e-c90d-4c09-8411-1a69ca9534b3');
  CALL sysoptions_save(b2g(aid), 'vk_rotads', 'autovk_rotads', 'defview');

  SET aid = g2b('f0a8aba9-f3c8-4088-85d8-bcf04e0463eb');
  CALL sysoptions_save(b2g(aid), 'vk_rotowner', 'vkrot', 'struct_type');

  SET aid = g2b('741a7598-ec7b-4e4a-9354-a7cf846cfd29');
  CALL sysoptions_save(b2g(aid), 'vk_rotowner', 'autovk_rotowner', 'defview');

  SET aid = g2b('6ee3e7b4-f049-442e-b388-568c68856530');
  CALL sysoptions_save(b2g(aid), 'vk_age', 'vdage', 'struct_type');

  SET aid = g2b('a391aad1-6f1d-41d2-95c9-b47f295221f3');
  CALL sysoptions_save(b2g(aid), 'vk_age', 'autovk_age', 'defview');

  SET aid = g2b('17dbeca6-bd52-43b8-b95c-6bd8699b9394');
  CALL sysoptions_save(b2g(aid), 'vk_adformat', 'vdfrmt', 'struct_type');

  SET aid = g2b('5287e2e5-7a21-4c9a-81b4-89186a89ec14');
  CALL sysoptions_save(b2g(aid), 'vk_adformat', 'autovk_adformat', 'defview');

  SET aid = g2b('6988c503-7e5a-40a7-81e4-2aa55196d29a');
  CALL sysoptions_save(b2g(aid), 'iu_u_def', 'bpu', 'struct_type');

  SET aid = g2b('5a6d1ae9-dfd7-4023-bbb3-3bf183add956');
  CALL sysoptions_save(b2g(aid), 'iu_u_def', 'autoiu_u_def', 'defview');

  SET aid = g2b('a9d13db7-f13b-4c78-8790-d263d5a970ed');
  CALL sysoptions_save(b2g(aid), 'genpackage', 'mtzmetamodel', 'struct_type');

  SET aid = g2b('d81baef1-b6a2-4441-a861-a9f66293163d');
  CALL sysoptions_save(b2g(aid), 'generator_target', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('69c879e6-5803-4f66-b9b0-ae4347c53ce1');
  CALL sysoptions_save(b2g(aid), 'generator_target', 'genpackage', 'parent');

  SET aid = g2b('def245da-30ae-4a76-b58d-32c8d11b60d7');
  CALL sysoptions_save(b2g(aid), 'genreference', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('2d00c138-719a-47de-b7a0-69689e240659');
  CALL sysoptions_save(b2g(aid), 'genreference', 'generator_target', 'parent');

  SET aid = g2b('ece9f87c-b4f5-44dd-b5e3-159089332d53');
  CALL sysoptions_save(b2g(aid), 'genmanualcode', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('23b0c317-14da-473d-b1ad-99efc84cd196');
  CALL sysoptions_save(b2g(aid), 'genmanualcode', 'generator_target', 'parent');

  SET aid = g2b('a7e7647c-4b0b-4952-acfe-251f6d2b1604');
  CALL sysoptions_save(b2g(aid), 'gencontrols', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('ff8de6ad-1024-4884-9ef3-d0c7a32ead1b');
  CALL sysoptions_save(b2g(aid), 'gencontrols', 'generator_target', 'parent');

  SET aid = g2b('5426f592-e8d2-44c1-8cef-f6fecc621fda');
  CALL sysoptions_save(b2g(aid), 'genpackage', 'autogenpackage', 'defview');

  SET aid = g2b('3a47de37-b043-4277-a9b3-6d7ae228b78d');
  CALL sysoptions_save(b2g(aid), 'generator_target', 'autogenerator_target', 'defview');

  SET aid = g2b('8a630815-287f-4ebb-8574-2398f019013d');
  CALL sysoptions_save(b2g(aid), 'genreference', 'autogenreference', 'defview');

  SET aid = g2b('63df4844-e5fd-4f87-9476-fe864fce7848');
  CALL sysoptions_save(b2g(aid), 'genmanualcode', 'autogenmanualcode', 'defview');

  SET aid = g2b('bfb66cb3-20a0-439a-a5da-d78c5e6d123d');
  CALL sysoptions_save(b2g(aid), 'gencontrols', 'autogencontrols', 'defview');

  SET aid = g2b('878da760-09be-40a7-b2cb-cb14224edf20');
  CALL sysoptions_save(b2g(aid), 'localizeinfo', 'mtzmetamodel', 'struct_type');

  SET aid = g2b('7f65d271-5e3a-4be8-92d2-d26c56e35f94');
  CALL sysoptions_save(b2g(aid), 'localizeinfo', 'autolocalizeinfo', 'defview');

  SET aid = g2b('5db0073f-4a8d-478c-9df2-4acf5f17d89a');
  CALL sysoptions_save(b2g(aid), 'fieldtype', 'mtzmetamodel', 'struct_type');

  SET aid = g2b('0bc965e3-9af9-4dd6-ae61-0419d2816cd8');
  CALL sysoptions_save(b2g(aid), 'enumitem', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('64bc9ddd-a6eb-44b1-8196-f4756b5e64ad');
  CALL sysoptions_save(b2g(aid), 'enumitem', 'fieldtype', 'parent');

  SET aid = g2b('c22b384b-3a33-4b0d-9875-6e073676323f');
  CALL sysoptions_save(b2g(aid), 'fieldtypemap', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('03651b0f-a732-419a-b858-87cf253946ed');
  CALL sysoptions_save(b2g(aid), 'fieldtypemap', 'fieldtype', 'parent');

  SET aid = g2b('4751f190-6b1d-48e2-8b7f-b50adc81dbd3');
  CALL sysoptions_save(b2g(aid), 'fieldtype', 'autofieldtype', 'defview');

  SET aid = g2b('2737248f-3e88-4602-990d-a345b3145bd0');
  CALL sysoptions_save(b2g(aid), 'enumitem', 'autoenumitem', 'defview');

  SET aid = g2b('2f8f5b56-77f4-45c3-9c5c-991677bf009c');
  CALL sysoptions_save(b2g(aid), 'fieldtypemap', 'autofieldtypemap', 'defview');

  SET aid = g2b('a68bfc42-ba0b-4e9f-b43c-c22f6a887134');
  CALL sysoptions_save(b2g(aid), 'sharedmethod', 'mtzmetamodel', 'struct_type');

  SET aid = g2b('521a778c-1d02-411a-8af5-8971def082a7');
  CALL sysoptions_save(b2g(aid), 'script', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('cff65a38-fcca-4f0b-a660-33d4a6388405');
  CALL sysoptions_save(b2g(aid), 'script', 'sharedmethod', 'parent');

  SET aid = g2b('ccb0fd7f-fb1d-4c6a-99c7-1a8565abf123');
  CALL sysoptions_save(b2g(aid), 'parameters', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('b9a1b232-bb94-462c-a984-dfd0c9c19fae');
  CALL sysoptions_save(b2g(aid), 'parameters', 'script', 'parent');

  SET aid = g2b('48e60a2a-0d9c-4807-90a5-7093e6975c04');
  CALL sysoptions_save(b2g(aid), 'sharedmethod', 'autosharedmethod', 'defview');

  SET aid = g2b('bcef53f0-9bea-49fe-82c5-aec66abfe6a2');
  CALL sysoptions_save(b2g(aid), 'script', 'autoscript', 'defview');

  SET aid = g2b('1fa48bcd-3fbc-4760-9156-9fbb1678babf');
  CALL sysoptions_save(b2g(aid), 'parameters', 'autoparameters', 'defview');

  SET aid = g2b('f581813e-cd46-4c2f-9827-cb5e6b76c7ca');
  CALL sysoptions_save(b2g(aid), 'objecttype', 'mtzmetamodel', 'struct_type');

  SET aid = g2b('4fabfe2f-72a8-469f-ac56-d48b4a1522cc');
  CALL sysoptions_save(b2g(aid), 'objstatus', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('d023571a-a8e7-4b20-a590-6c358a4bcfb1');
  CALL sysoptions_save(b2g(aid), 'objstatus', 'objecttype', 'parent');

  SET aid = g2b('15c360e1-62b0-40b0-8af9-2888713fb658');
  CALL sysoptions_save(b2g(aid), 'nextstate', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('11b239c9-da07-4438-9bfd-7b47cc9e6d66');
  CALL sysoptions_save(b2g(aid), 'nextstate', 'objstatus', 'parent');

  SET aid = g2b('faccc759-7c6a-4a3a-a5b2-c9ce835e1c0a');
  CALL sysoptions_save(b2g(aid), 'objectmode', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('18fff991-ebb3-4b80-8514-53146d46f1d6');
  CALL sysoptions_save(b2g(aid), 'objectmode', 'objecttype', 'parent');

  SET aid = g2b('f436fd5f-8c76-4c7f-9a94-50536a58e3a4');
  CALL sysoptions_save(b2g(aid), 'structrestriction', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('4fcfbe5b-a3c5-4799-86b5-cfdd78580a9a');
  CALL sysoptions_save(b2g(aid), 'structrestriction', 'objectmode', 'parent');

  SET aid = g2b('93c1b60f-1731-40f3-b88e-9f138e0ddde8');
  CALL sysoptions_save(b2g(aid), 'methodrestriction', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('bfb11f0e-a953-48fb-9c18-60acaa0a43ea');
  CALL sysoptions_save(b2g(aid), 'methodrestriction', 'objectmode', 'parent');

  SET aid = g2b('12c3c0dc-294d-405f-9e19-9c4f59729084');
  CALL sysoptions_save(b2g(aid), 'fieldrestriction', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('1c3cab54-dd31-4c54-ba2f-6ff5e3439a42');
  CALL sysoptions_save(b2g(aid), 'fieldrestriction', 'objectmode', 'parent');

  SET aid = g2b('a49b593b-11c2-4acf-87cf-9c1141ca4fd8');
  CALL sysoptions_save(b2g(aid), 'typemenu', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('28093c41-690e-4755-b538-654b7806899d');
  CALL sysoptions_save(b2g(aid), 'typemenu', 'objecttype', 'parent');

  SET aid = g2b('f456edef-d69c-40eb-8902-c49b68855731');
  CALL sysoptions_save(b2g(aid), 'instancevalidator', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('de53e14c-deb4-4ea0-8589-01ac3fc4016f');
  CALL sysoptions_save(b2g(aid), 'instancevalidator', 'objecttype', 'parent');

  SET aid = g2b('bd4cad32-72d4-40a6-b8bf-e163e2dbd948');
  CALL sysoptions_save(b2g(aid), 'part', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('3bdeb3ad-05e8-4dc1-8bed-8aeaecbf3360');
  CALL sysoptions_save(b2g(aid), 'part', 'objecttype', 'parent');

  SET aid = g2b('84c2925d-b29f-4479-8778-9a32ab18ce55');
  CALL sysoptions_save(b2g(aid), 'partmenu', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('4561bd06-62d6-42f6-87d6-42045dd04bc3');
  CALL sysoptions_save(b2g(aid), 'partmenu', 'part', 'parent');

  SET aid = g2b('f80cdf54-74d5-4178-bd81-16ed99eb01cc');
  CALL sysoptions_save(b2g(aid), 'partparammap', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('03bb5cbb-b464-45ad-a371-48cd9dc8db8c');
  CALL sysoptions_save(b2g(aid), 'partparammap', 'partmenu', 'parent');

  SET aid = g2b('9a50c6fe-1548-4de7-9ed8-ddc673b6c22c');
  CALL sysoptions_save(b2g(aid), 'partview', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('7158eda6-983d-4c44-810f-215384920d5e');
  CALL sysoptions_save(b2g(aid), 'partview', 'part', 'parent');

  SET aid = g2b('2b9a3aed-3b2c-4c48-8c15-954fd5996112');
  CALL sysoptions_save(b2g(aid), 'viewcolumn', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('3097d9ed-29b8-4cc9-b414-62312d302a8e');
  CALL sysoptions_save(b2g(aid), 'viewcolumn', 'partview', 'parent');

  SET aid = g2b('1b0bac13-ff9e-45b2-a7ee-e09c695157b2');
  CALL sysoptions_save(b2g(aid), 'partview_lnk', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('6d11a5b8-8103-4e6d-b9ab-e3d47cb362c5');
  CALL sysoptions_save(b2g(aid), 'partview_lnk', 'partview', 'parent');

  SET aid = g2b('ff882c2f-13df-4b54-a96d-1ccb78f75a04');
  CALL sysoptions_save(b2g(aid), 'validator', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('c906f847-6565-4078-bb5d-5e2679c670ee');
  CALL sysoptions_save(b2g(aid), 'validator', 'part', 'parent');

  SET aid = g2b('4e2d1673-a72a-4729-9688-a21b075ead28');
  CALL sysoptions_save(b2g(aid), 'uniqueconstraint', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('285bcc5d-dad1-472a-8aa6-faf06c684063');
  CALL sysoptions_save(b2g(aid), 'uniqueconstraint', 'part', 'parent');

  SET aid = g2b('1dca18b0-78d0-4af1-a8cc-e53846afba59');
  CALL sysoptions_save(b2g(aid), 'constraintfield', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('203f5750-0e5d-4e2e-b74b-30c866a75e1f');
  CALL sysoptions_save(b2g(aid), 'constraintfield', 'uniqueconstraint', 'parent');

  SET aid = g2b('c63426e6-121c-41ab-b771-67ad3bc6d535');
  CALL sysoptions_save(b2g(aid), 'extenderinterface', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('c8acc0a9-ebbf-4d3c-90bd-8b2aff66af1e');
  CALL sysoptions_save(b2g(aid), 'extenderinterface', 'part', 'parent');

  SET aid = g2b('c3ba4b0f-9dd3-40b3-80a3-b2e3846c70d5');
  CALL sysoptions_save(b2g(aid), 'field', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('44642d93-5c69-4a02-bc7b-cadfc586d4b8');
  CALL sysoptions_save(b2g(aid), 'field', 'part', 'parent');

  SET aid = g2b('d86634db-ab9f-4789-876d-9fbcef1e274e');
  CALL sysoptions_save(b2g(aid), 'fldextenders', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('a343b47e-d7e5-4217-a73c-2ffa67bb0879');
  CALL sysoptions_save(b2g(aid), 'fldextenders', 'field', 'parent');

  SET aid = g2b('ff000879-3651-4c4c-8f43-ca89812bb074');
  CALL sysoptions_save(b2g(aid), 'fieldsrcdef', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('d24e7acd-dcf9-45b0-bda9-157b5638cb56');
  CALL sysoptions_save(b2g(aid), 'fieldsrcdef', 'field', 'parent');

  SET aid = g2b('b6173f3e-82d2-4e54-b7ac-d1d07d7ae9b6');
  CALL sysoptions_save(b2g(aid), 'dinamicfilterscript', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('10a530ec-7bfd-48d9-a5b7-0e93ac164d45');
  CALL sysoptions_save(b2g(aid), 'dinamicfilterscript', 'field', 'parent');

  SET aid = g2b('34ae8b58-5bb7-44e3-a6c5-735223814596');
  CALL sysoptions_save(b2g(aid), 'fieldexpression', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('f95f1793-10a2-4c09-8384-ffe09844b2e5');
  CALL sysoptions_save(b2g(aid), 'fieldexpression', 'field', 'parent');

  SET aid = g2b('0754f72e-fe37-4d2d-bfef-7a760821751e');
  CALL sysoptions_save(b2g(aid), 'fieldvalidator', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('91e1fb7f-24a2-4587-9ff3-a6f306b104fe');
  CALL sysoptions_save(b2g(aid), 'fieldvalidator', 'field', 'parent');

  SET aid = g2b('f094185d-07e6-4433-927c-e8161d4c42c5');
  CALL sysoptions_save(b2g(aid), 'fieldmenu', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('78de4f4b-992f-472b-96ca-2cc506b8736d');
  CALL sysoptions_save(b2g(aid), 'fieldmenu', 'field', 'parent');

  SET aid = g2b('9dc705c9-3630-4121-aa63-e5c2abba055b');
  CALL sysoptions_save(b2g(aid), 'fieldparammap', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('be04baae-fdaa-4101-acfb-203c213487a6');
  CALL sysoptions_save(b2g(aid), 'fieldparammap', 'fieldmenu', 'parent');

  SET aid = g2b('e34bc24d-e567-4776-a46c-f597ba854a43');
  CALL sysoptions_save(b2g(aid), 'objecttype', 'autoobjecttype', 'defview');

  SET aid = g2b('c4acc1ee-088a-4bbc-b31f-daeab956fd45');
  CALL sysoptions_save(b2g(aid), 'objstatus', 'autoobjstatus', 'defview');

  SET aid = g2b('1db30afb-201b-46ac-b989-65639140295e');
  CALL sysoptions_save(b2g(aid), 'nextstate', 'autonextstate', 'defview');

  SET aid = g2b('073ec315-0a87-4fb7-9842-ce60ee5b34f5');
  CALL sysoptions_save(b2g(aid), 'objectmode', 'autoobjectmode', 'defview');

  SET aid = g2b('a7a75dce-6eaf-4464-bb5f-65e9d604c8a4');
  CALL sysoptions_save(b2g(aid), 'structrestriction', 'autostructrestriction', 'defview');

  SET aid = g2b('ef96f476-604e-4b0b-b5f9-aec7ebfaf5d5');
  CALL sysoptions_save(b2g(aid), 'methodrestriction', 'automethodrestriction', 'defview');

  SET aid = g2b('6298a72b-243b-433e-9851-20430408cc60');
  CALL sysoptions_save(b2g(aid), 'fieldrestriction', 'autofieldrestriction', 'defview');

  SET aid = g2b('48cec391-5707-4a4a-a567-3db25e66a9fe');
  CALL sysoptions_save(b2g(aid), 'typemenu', 'autotypemenu', 'defview');

  SET aid = g2b('7c3060dd-0785-4329-801e-0fe211da8744');
  CALL sysoptions_save(b2g(aid), 'instancevalidator', 'autoinstancevalidator', 'defview');


  SET aid = g2b('4f8b2f6c-1be5-4aaa-9d61-5cd444bd2453');
  CALL sysoptions_save(b2g(aid), 'partmenu', 'autopartmenu', 'defview');

  SET aid = g2b('f7c0caa7-e6f6-4a1a-a5d0-20dec6d849e0');
  CALL sysoptions_save(b2g(aid), 'partparammap', 'autopartparammap', 'defview');

  SET aid = g2b('5ec07ec3-7e3d-42e6-a488-ee26af3feaba');
  CALL sysoptions_save(b2g(aid), 'partview', 'autopartview', 'defview');

  SET aid = g2b('30e939d1-f2c6-4f22-911d-3bf182749ba2');
  CALL sysoptions_save(b2g(aid), 'viewcolumn', 'autoviewcolumn', 'defview');

  SET aid = g2b('3024745e-9cb6-400a-8645-ca1a7aa188bc');
  CALL sysoptions_save(b2g(aid), 'partview_lnk', 'autopartview_lnk', 'defview');

  SET aid = g2b('dfd78e23-86d9-4155-861a-47547eee75c1');
  CALL sysoptions_save(b2g(aid), 'validator', 'autovalidator', 'defview');

  SET aid = g2b('b26f45fd-af87-4c2d-a495-5e67b6af0539');
  CALL sysoptions_save(b2g(aid), 'uniqueconstraint', 'autouniqueconstraint', 'defview');

  SET aid = g2b('93436f0f-74f5-4bfd-a0b5-726fa9c38785');
  CALL sysoptions_save(b2g(aid), 'constraintfield', 'autoconstraintfield', 'defview');

  SET aid = g2b('1aa6b319-2047-4c06-a794-7ac792b7f351');
  CALL sysoptions_save(b2g(aid), 'extenderinterface', 'autoextenderinterface', 'defview');

  SET aid = g2b('403870fe-c67b-4b80-a41b-9fa2d90ec81a');
  CALL sysoptions_save(b2g(aid), 'field', 'autofield', 'defview');

  SET aid = g2b('1628a775-a12f-4bc2-a777-d4688fa7d6bc');
  CALL sysoptions_save(b2g(aid), 'fldextenders', 'autofldextenders', 'defview');

  SET aid = g2b('37fbf961-d6d1-4012-b458-4dc7c27ee021');
  CALL sysoptions_save(b2g(aid), 'fieldsrcdef', 'autofieldsrcdef', 'defview');

  SET aid = g2b('66014338-36cd-485c-a8b9-01c2220e51e4');
  CALL sysoptions_save(b2g(aid), 'dinamicfilterscript', 'autodinamicfilterscript', 'defview');

  SET aid = g2b('ec4cdb72-fb5f-48d8-b98d-d28e9200633e');
  CALL sysoptions_save(b2g(aid), 'fieldexpression', 'autofieldexpression', 'defview');

  SET aid = g2b('c02baf6f-6238-414d-b527-5a7387772bdc');
  CALL sysoptions_save(b2g(aid), 'fieldvalidator', 'autofieldvalidator', 'defview');

  SET aid = g2b('54a54e33-31d3-46e1-bc4e-9ae9b60b6661');
  CALL sysoptions_save(b2g(aid), 'fieldmenu', 'autofieldmenu', 'defview');

  SET aid = g2b('a55e875a-6c71-4d07-afb9-3580ec643380');
  CALL sysoptions_save(b2g(aid), 'fieldparammap', 'autofieldparammap', 'defview');

  SET aid = g2b('2c3bba40-47ca-4377-84ec-d17262021159');
  CALL sysoptions_save(b2g(aid), 'mtzapp', 'mtzmetamodel', 'struct_type');

  SET aid = g2b('620bafac-5825-4b38-8697-57374889b729');
  CALL sysoptions_save(b2g(aid), 'parentpackage', 'mtzmetamodel', 'struct_type');
  SET aid = g2b('45543174-af32-48c8-8bd9-3d59ba0d04cd');
  CALL sysoptions_save(b2g(aid), 'parentpackage', 'mtzapp', 'parent');

  SET aid = g2b('fb62e1a3-7b4f-4a3c-9aca-cc1f92bdf540');
  CALL sysoptions_save(b2g(aid), 'mtzapp', 'automtzapp', 'defview');

  SET aid = g2b('f6be89bd-0d15-455c-ad1b-708f0f942f39');
  CALL sysoptions_save(b2g(aid), 'parentpackage', 'autoparentpackage', 'defview');

  SET aid = g2b('7c845ce4-6b84-4664-ab30-1472bd5ff0f7');
  CALL sysoptions_save(b2g(aid), 'journalcolumn', 'mtzjrnl', 'struct_type');

  SET aid = g2b('fbb263a6-43e7-45d5-a484-76d05f2b8c99');
  CALL sysoptions_save(b2g(aid), 'jcolumnsource', 'mtzjrnl', 'struct_type');
  SET aid = g2b('180dbcce-2730-42ff-b058-49271d147789');
  CALL sysoptions_save(b2g(aid), 'jcolumnsource', 'journalcolumn', 'parent');

  SET aid = g2b('bd57a1f5-a8c6-410e-8e41-bae7cb35d007');
  CALL sysoptions_save(b2g(aid), 'journalcolumn', 'autojournalcolumn', 'defview');

  SET aid = g2b('92778e38-054c-465f-bed7-237654942da9');
  CALL sysoptions_save(b2g(aid), 'jcolumnsource', 'autojcolumnsource', 'defview');

  SET aid = g2b('4be6cfcb-ce9a-497f-8ce7-7ca155584d08');
  CALL sysoptions_save(b2g(aid), 'journalsrc', 'mtzjrnl', 'struct_type');

  SET aid = g2b('55ae0d69-6bb4-4f56-86b4-3e6833b0379f');
  CALL sysoptions_save(b2g(aid), 'journalsrc', 'autojournalsrc', 'defview');

  SET aid = g2b('ab57a1df-91b6-4f49-9312-ff7c70eb8297');
  CALL sysoptions_save(b2g(aid), 'journal', 'mtzjrnl', 'struct_type');

  SET aid = g2b('32ba14df-0464-4d77-88ac-5c6055a35c99');
  CALL sysoptions_save(b2g(aid), 'journal', 'autojournal', 'defview');

  SET aid = g2b('fc5b5d78-e5f3-40b7-90bb-89e42b4217d5');
  CALL sysoptions_save(b2g(aid), 'bpc_info', 'bpc', 'struct_type');

  SET aid = g2b('bed6f0ea-4133-4a92-a722-38b5db7fcd7a');
  CALL sysoptions_save(b2g(aid), 'bpc_info', 'autobpc_info', 'defview');

  SET aid = g2b('43f5406f-f559-4a24-a7f6-72a3f0cb663d');
  CALL sysoptions_save(b2g(aid), 'vk_prj', 'vkprj', 'struct_type');

  SET aid = g2b('64762185-feda-4a10-b0cd-580803560bd0');
  CALL sysoptions_save(b2g(aid), 'vk_prj', 'autovk_prj', 'defview');

  SET aid = g2b('1460447b-e984-4853-ac99-d8f7a4960769');
  CALL sysoptions_save(b2g(aid), 'vk_prjowner', 'vkprj', 'struct_type');

  SET aid = g2b('adb88f39-6f02-4e35-acc9-c1600139a29e');
  CALL sysoptions_save(b2g(aid), 'vk_prjowner', 'autovk_prjowner', 'defview');

  SET aid = g2b('0b733d94-c552-450b-ade5-68af611ccbbb');
  CALL sysoptions_save(b2g(aid), 'vk_region', 'vdrg', 'struct_type');

  SET aid = g2b('73d995fd-390f-41a4-a012-ad2c9b57ea29');
  CALL sysoptions_save(b2g(aid), 'vk_region', 'autovk_region', 'defview');

  SET aid = g2b('b2fc3435-1965-420c-a428-2929308447ac');
  CALL sysoptions_save(b2g(aid), 'the_session', 'mtzsystem', 'struct_type');

  SET aid = g2b('d2b45e08-4d04-4285-970a-123d3ac6c9d6');
  CALL sysoptions_save(b2g(aid), 'the_session', 'autothe_session', 'defview');

  SET aid = g2b('c2913043-21d1-472a-ad50-02d5fc03afe7');
  CALL sysoptions_save(b2g(aid), 'sysrefcache', 'mtzsystem', 'struct_type');

  SET aid = g2b('4fc37f53-3d12-4d75-9e20-2efad88bd726');
  CALL sysoptions_save(b2g(aid), 'sysrefcache', 'autosysrefcache', 'defview');

  SET aid = g2b('d848f6d2-2959-43ce-8f64-7155ae119a05');
  CALL sysoptions_save(b2g(aid), 'syslog', 'mtzsystem', 'struct_type');

  SET aid = g2b('0e1b575e-2c5f-43e6-a601-eea8ae0bdb84');
  CALL sysoptions_save(b2g(aid), 'syslog', 'autosyslog', 'defview');

  SET aid = g2b('26ffd2b7-3837-479d-99ca-71f79386307b');
  CALL sysoptions_save(b2g(aid), 'vk_tasktype', 'vdtt', 'struct_type');

  SET aid = g2b('540585a7-be3b-449f-9559-38959ab08962');
  CALL sysoptions_save(b2g(aid), 'vk_tasktype', 'autovk_tasktype', 'defview');

  SET aid = g2b('ab93b5be-0647-45ac-9a9f-3f5fa3fcf205');
  CALL sysoptions_save(b2g(aid), 'vk_paytype', 'vdpt', 'struct_type');

  SET aid = g2b('072a1840-8746-4207-b145-8b2c4cca1921');
  CALL sysoptions_save(b2g(aid), 'vk_paytype', 'autovk_paytype', 'defview');

  SET aid = g2b('194db352-47c6-46b4-9605-42ea3807ee16');
  CALL sysoptions_save(b2g(aid), 'armjournal', 'mtzwp', 'struct_type');

  SET aid = g2b('fe4b2823-20f3-4af3-beb9-b1290971c284');
  CALL sysoptions_save(b2g(aid), 'armjrnlrep', 'mtzwp', 'struct_type');
  SET aid = g2b('f3dcf7bb-b9d8-421e-9399-5e77bff2678a');
  CALL sysoptions_save(b2g(aid), 'armjrnlrep', 'armjournal', 'parent');

  SET aid = g2b('118bfa22-6d43-4e12-b596-f7117ec035e5');
  CALL sysoptions_save(b2g(aid), 'armjrnlrun', 'mtzwp', 'struct_type');
  SET aid = g2b('8b8391e4-837c-4a3d-9547-838d115d13aa');
  CALL sysoptions_save(b2g(aid), 'armjrnlrun', 'armjournal', 'parent');

  SET aid = g2b('2f39b9c7-3510-4682-89da-749056aa2688');
  CALL sysoptions_save(b2g(aid), 'armjrnladd', 'mtzwp', 'struct_type');
  SET aid = g2b('6d00c414-7c25-4cf7-9208-c2d0d601cf23');
  CALL sysoptions_save(b2g(aid), 'armjrnladd', 'armjournal', 'parent');

  SET aid = g2b('7bd62cdb-f734-4f2c-a2a6-72a30cde9d47');
  CALL sysoptions_save(b2g(aid), 'armjournal', 'autoarmjournal', 'defview');

  SET aid = g2b('80199746-6c06-4674-847c-6828f00652ec');
  CALL sysoptions_save(b2g(aid), 'armjrnlrep', 'autoarmjrnlrep', 'defview');

  SET aid = g2b('fa1808f4-6f2e-40b5-bfd0-bad6a1520c84');
  CALL sysoptions_save(b2g(aid), 'armjrnlrun', 'autoarmjrnlrun', 'defview');

  SET aid = g2b('6fc80045-40f9-40aa-a95e-f6227c63d3ee');
  CALL sysoptions_save(b2g(aid), 'armjrnladd', 'autoarmjrnladd', 'defview');

  SET aid = g2b('0adf47a1-6f9f-4e86-983f-20046c09a8de');
  CALL sysoptions_save(b2g(aid), 'entrypoints', 'mtzwp', 'struct_type');

  SET aid = g2b('230baa26-a354-4a3c-b07d-fbf422ad4f16');
  CALL sysoptions_save(b2g(aid), 'epfilterlink', 'mtzwp', 'struct_type');
  SET aid = g2b('6e717f09-9bc8-46ee-a656-6581a8b3b353');
  CALL sysoptions_save(b2g(aid), 'epfilterlink', 'entrypoints', 'parent');


  SET aid = g2b('d17b23aa-ff06-4cd6-bf68-523814df248c');
  CALL sysoptions_save(b2g(aid), 'epfilterlink', 'autoepfilterlink', 'defview');

  SET aid = g2b('4bec1f9b-89fc-41d8-88cb-a953fa4e706c');
  CALL sysoptions_save(b2g(aid), 'workplace', 'mtzwp', 'struct_type');

  SET aid = g2b('0a1581d2-8c2d-4e9b-81e5-cf432e28f4aa');
  CALL sysoptions_save(b2g(aid), 'workplace', 'autoworkplace', 'defview');

  SET aid = g2b('b84fa687-1ae4-4cc6-8157-1d259fe9d894');
  CALL sysoptions_save(b2g(aid), 'armtypes', 'mtzwp', 'struct_type');

  SET aid = g2b('7e1f6af9-eee2-41e0-9d88-7e973c0f447a');
  CALL sysoptions_save(b2g(aid), 'armtypes', 'autoarmtypes', 'defview');

  SET aid = g2b('c042c16a-b5f7-48cb-bbbb-a00be84760cf');
  CALL sysoptions_save(b2g(aid), 'vk_device', 'vddev', 'struct_type');

  SET aid = g2b('f00104aa-4ab3-4ee0-89c2-de87fa87d4a2');
  CALL sysoptions_save(b2g(aid), 'vk_device', 'autovk_device', 'defview');

  SET aid = g2b('46d48d4e-2b6f-4896-b7c5-364f99ed481a');
  CALL sysoptions_save(b2g(aid), 'iu_crole', 'bpdr', 'struct_type');

  SET aid = g2b('bda0a536-6149-4796-836b-a8b3d4ff8051');
  CALL sysoptions_save(b2g(aid), 'iu_crole', 'autoiu_crole', 'defview');

  SET aid = g2b('f0b9120b-4cbd-472a-9598-3b82037aa307');
  CALL sysoptions_save(b2g(aid), 'vk_platform', 'vdapl', 'struct_type');

  SET aid = g2b('819bd60d-a22d-498a-801f-e97f87155154');
  CALL sysoptions_save(b2g(aid), 'vk_platform', 'autovk_platform', 'defview');

  SET aid = g2b('618af37a-ec13-4505-8972-4608650b9f20');
  CALL sysoptions_save(b2g(aid), 'vk_matrialstatus', 'vdmstat', 'struct_type');

  SET aid = g2b('95a0cfe6-7638-41cb-8c7a-1e484a6884cd');
  CALL sysoptions_save(b2g(aid), 'vk_matrialstatus', 'autovk_matrialstatus', 'defview');

  SET aid = g2b('dbe6a12b-83cd-44c7-ab0e-e849ac664c6c');
  CALL sysoptions_save(b2g(aid), 'vk_country', 'vdcn', 'struct_type');

  SET aid = g2b('a6a16680-02bb-48d0-af76-fcee15ab2526');
  CALL sysoptions_save(b2g(aid), 'vk_country', 'autovk_country', 'defview');

  SET aid = g2b('ea4d6ffd-5e22-4eb3-8aa2-32c3fbafd319');
  CALL sysoptions_save(b2g(aid), 'vk_approve', 'vdappr', 'struct_type');

  SET aid = g2b('066eb2d8-c1f5-4319-987b-1853ca6ef104');
  CALL sysoptions_save(b2g(aid), 'vk_approve', 'autovk_approve', 'defview');

  SET aid = g2b('a3740f37-ab97-4a84-a7c7-ec79f616c898');
  CALL sysoptions_save(b2g(aid), 'vk_town', 'vdt', 'struct_type');

  SET aid = g2b('9da45643-6cc1-49ee-9817-cb700e4870ca');
  CALL sysoptions_save(b2g(aid), 'vk_town', 'autovk_town', 'defview');

  SET aid = g2b('b813870d-7d14-44c1-a423-7021580b7927');
  CALL sysoptions_save(b2g(aid), 'users', 'mtzusers', 'struct_type');

  SET aid = g2b('8d8a1043-79f0-42bd-8206-44cad39c4b6e');
  CALL sysoptions_save(b2g(aid), 'users', 'autousers', 'defview');

  SET aid = g2b('837223ee-b845-4ace-8b5f-91171ac54113');
  CALL sysoptions_save(b2g(aid), 'groups', 'mtzusers', 'struct_type');

  SET aid = g2b('6646062b-f137-4bbb-b687-43cd0aa269bc');
  CALL sysoptions_save(b2g(aid), 'groupuser', 'mtzusers', 'struct_type');
  SET aid = g2b('2c2cbb19-fe63-4fd5-b063-c72a374cb948');
  CALL sysoptions_save(b2g(aid), 'groupuser', 'groups', 'parent');

  SET aid = g2b('5a0212c9-2d5c-43d9-a89b-38733fd2767d');
  CALL sysoptions_save(b2g(aid), 'groups', 'autogroups', 'defview');

  SET aid = g2b('e1b16a7a-8e64-4df6-9376-b17cfa9f1fd9');
  CALL sysoptions_save(b2g(aid), 'groupuser', 'autogroupuser', 'defview');

  SET aid = g2b('e8067227-189a-446b-b6a3-695d9576563b');
  CALL sysoptions_save(b2g(aid), 'vk_religion', 'vdrel', 'struct_type');

  SET aid = g2b('21c67bdc-3c26-48b5-802a-1b9970dc74d6');
  CALL sysoptions_save(b2g(aid), 'vk_religion', 'autovk_religion', 'defview');

  SET aid = g2b('3f64da9c-9a76-499f-98d4-5ce4d5482620');
  CALL sysoptions_save(b2g(aid), 'vk_adsdaydemografy', 'vkads', 'struct_type');

  SET aid = g2b('2ffd1962-aa18-4cb9-8b2d-64248176f704');
  CALL sysoptions_save(b2g(aid), 'vk_adsdaydemografy', 'autovk_adsdaydemografy', 'defview');

  SET aid = g2b('449d5f6d-8f9a-4ed8-8815-04ca44b44bdd');
  CALL sysoptions_save(b2g(aid), 'vk_adinfo', 'vkads', 'struct_type');

  SET aid = g2b('2ffd8da3-2833-44c3-9ddf-c03cbcbee742');
  CALL sysoptions_save(b2g(aid), 'vk_adinfo', 'autovk_adinfo', 'defview');

  SET aid = g2b('c59e537c-1fc7-4a9b-8310-13510aef7214');
  CALL sysoptions_save(b2g(aid), 'vk_adsowner', 'vkads', 'struct_type');

  SET aid = g2b('f157c831-70d2-48ff-a8ca-9bad777d10f2');
  CALL sysoptions_save(b2g(aid), 'vk_adsowner', 'autovk_adsowner', 'defview');

  SET aid = g2b('954e20b4-e497-46a7-8243-d8a48031e41d');
  CALL sysoptions_save(b2g(aid), 'vk_adovstat', 'vkads', 'struct_type');

  SET aid = g2b('5abce582-232d-4508-a4cf-dd00b3804e94');
  CALL sysoptions_save(b2g(aid), 'vk_adovstat', 'autovk_adovstat', 'defview');

  SET aid = g2b('5a7f4bad-6183-441e-be94-564b02294956');
  CALL sysoptions_save(b2g(aid), 'vk_adstrg', 'vkads', 'struct_type');

  SET aid = g2b('50adddc3-4e81-42ac-8e40-54ad960b2298');
  CALL sysoptions_save(b2g(aid), 'vk_adstrg', 'autovk_adstrg', 'defview');

  SET aid = g2b('a52bbbf9-1f82-4879-85f5-4f315c29a83a');
  CALL sysoptions_save(b2g(aid), 'vk_adsovdemografy', 'vkads', 'struct_type');

  SET aid = g2b('4d1bdf0d-3b50-474f-8d55-fe7f08c3c445');
  CALL sysoptions_save(b2g(aid), 'vk_adsovdemografy', 'autovk_adsovdemografy', 'defview');

  SET aid = g2b('5fa6d5c2-f656-44c4-bbcb-cc8a039da48a');
  CALL sysoptions_save(b2g(aid), 'vk_adsutm', 'vkads', 'struct_type');

  SET aid = g2b('edc2aafd-d92c-49b8-aa3a-b98f22ee24fe');
  CALL sysoptions_save(b2g(aid), 'vk_adsutm', 'autovk_adsutm', 'defview');

  SET aid = g2b('25ce6d72-b5d4-4845-b35e-d006f8c8aa68');
  CALL sysoptions_save(b2g(aid), 'vk_adstat', 'vkads', 'struct_type');

  SET aid = g2b('e8206c5b-9861-4fce-9c73-2ec4e2516be5');
  CALL sysoptions_save(b2g(aid), 'vk_adstat', 'autovk_adstat', 'defview');

  SET aid = g2b('ff6d2a9d-2bc7-4409-a249-86a512cfba7a');
  CALL sysoptions_save(b2g(aid), 'num_zones', 'stdnumerator', 'struct_type');

  SET aid = g2b('e75ae0f3-aba1-45fc-936a-ab4c66d7b9b0');
  CALL sysoptions_save(b2g(aid), 'num_values', 'stdnumerator', 'struct_type');
  SET aid = g2b('e035d06e-d06a-4de3-b5fd-e2bebf878c0a');
  CALL sysoptions_save(b2g(aid), 'num_values', 'num_zones', 'parent');

  SET aid = g2b('9c136f5f-b507-4e71-9df0-f461ad10106c');
  CALL sysoptions_save(b2g(aid), 'num_zones', 'autonum_zones', 'defview');

  SET aid = g2b('a73165f9-9c5c-4083-8c98-5db7ccc3096e');
  CALL sysoptions_save(b2g(aid), 'num_values', 'autonum_values', 'defview');

  SET aid = g2b('a7864253-a03f-416f-8605-e1fafd21df50');
  CALL sysoptions_save(b2g(aid), 'num_head', 'stdnumerator', 'struct_type');

  SET aid = g2b('544d77c6-484c-4e55-9ddd-7462cbcaddc2');
  CALL sysoptions_save(b2g(aid), 'num_head', 'autonum_head', 'defview');

  SET aid = g2b('446693cd-a19c-4dd8-8eec-618d08363868');
  CALL sysoptions_save(b2g(aid), 'mtzext_def', 'mtzext', 'struct_type');

  SET aid = g2b('9d311dc7-0791-4c4e-b13f-6c26ecc9a605');
  CALL sysoptions_save(b2g(aid), 'mtzext_def', 'automtzext_def', 'defview');

  SET aid = g2b('b832cbc5-39ea-4b38-9e81-61afa71196ec');
  CALL sysoptions_save(b2g(aid), 'mtzextrel', 'mtzext', 'struct_type');

  SET aid = g2b('8be77482-d5c2-4b71-b32e-5279e431ea06');
  CALL sysoptions_save(b2g(aid), 'mtzextrel', 'automtzextrel', 'defview');

  SET aid = g2b('5cf57a69-4aa6-4c07-82d6-45cf969ca169');
  CALL sysoptions_save(b2g(aid), 'vk_adstate', 'vdast', 'struct_type');

  SET aid = g2b('50bbecca-d580-4289-9743-c71f73b38ec9');
  CALL sysoptions_save(b2g(aid), 'vk_adstate', 'autovk_adstate', 'defview');

  SET aid = g2b('4c5c5553-8b81-4b87-b63a-0ae9d1d93761');
  CALL sysoptions_save(b2g(aid), 'iu_rcfg_mod', 'bprcfg', 'struct_type');

  SET aid = g2b('01132f86-0169-49e9-ac24-83aa43601d71');
  CALL sysoptions_save(b2g(aid), 'iu_rcfg_mod', 'autoiu_rcfg_mod', 'defview');

  SET aid = g2b('f1a41f74-d89f-4426-86b2-c126ba8c6e50');
  CALL sysoptions_save(b2g(aid), 'iu_rcfg_docmode', 'bprcfg', 'struct_type');

  SET aid = g2b('02975b0a-0efb-4310-802c-76aa5f1ba5e9');
  CALL sysoptions_save(b2g(aid), 'iu_rcfg_docmode', 'autoiu_rcfg_docmode', 'defview');

  SET aid = g2b('871e37de-342e-4f1d-9900-9485950e2b09');
  CALL sysoptions_save(b2g(aid), 'iu_rcfg_def', 'bprcfg', 'struct_type');

  SET aid = g2b('b421ad23-23a7-4b76-8b53-505df49ea5d0');
  CALL sysoptions_save(b2g(aid), 'iu_rcfg_def', 'autoiu_rcfg_def', 'defview');

  SET aid = g2b('7933f266-dc75-4c77-9f94-a4c1d7570ff6');
  CALL sysoptions_save(b2g(aid), 'vk_os', 'vdos', 'struct_type');

  SET aid = g2b('8e9f5415-1dce-40d1-9ff2-d3d37860ad22');
  CALL sysoptions_save(b2g(aid), 'vk_os', 'autovk_os', 'defview');

  SET aid = g2b('55a01ff3-aa8d-4033-b8e6-2b39faedef33');
  CALL sysoptions_save(b2g(aid), 'vk_interest', 'vdinter', 'struct_type');

  SET aid = g2b('e579fad0-a80c-424b-b482-a650cbdb8ff2');
  CALL sysoptions_save(b2g(aid), 'vk_interest', 'autovk_interest', 'defview');

  SET aid = g2b('94918827-b985-4b2d-b4d8-c98bb4db7813');
  CALL sysoptions_save(b2g(aid), 'vk_camovstat', 'vkcam', 'struct_type');

  SET aid = g2b('fe955482-f330-4886-a582-9121db123703');
  CALL sysoptions_save(b2g(aid), 'vk_camovstat', 'autovk_camovstat', 'defview');

  SET aid = g2b('658a3d4b-1999-4395-9af8-2f372b697940');
  CALL sysoptions_save(b2g(aid), 'vk_camowner', 'vkcam', 'struct_type');

  SET aid = g2b('5e7c2090-f4b1-43cb-a1d2-a5f0056d571c');
  CALL sysoptions_save(b2g(aid), 'vk_camowner', 'autovk_camowner', 'defview');

  SET aid = g2b('2db223d8-03d4-4598-84cc-1da2c75d6a61');
  CALL sysoptions_save(b2g(aid), 'vk_camp', 'vkcam', 'struct_type');

  SET aid = g2b('9f822ac8-1372-4901-9126-b81da10a9af0');
  CALL sysoptions_save(b2g(aid), 'vk_camp', 'autovk_camp', 'defview');

  SET aid = g2b('8f07cef5-880d-4853-b9c4-79c2e4bde890');
  CALL sysoptions_save(b2g(aid), 'vk_camstat', 'vkcam', 'struct_type');

  SET aid = g2b('24e1d33c-d3d1-4dfb-8c07-27bb9a91fd23');
  CALL sysoptions_save(b2g(aid), 'vk_camstat', 'autovk_camstat', 'defview');

  SET aid = g2b('ef6a0574-e502-4257-9d32-8413c338e7fd');
  CALL sysoptions_save(b2g(aid), 'vk_trgfiles', 'vktrg', 'struct_type');

  SET aid = g2b('70b955d0-e50c-4bc9-a0f1-a16e68bd7196');
  CALL sysoptions_save(b2g(aid), 'vk_trgfiles', 'autovk_trgfiles', 'defview');

  SET aid = g2b('60a3baa1-605c-45de-ac61-729dde1fee2e');
  CALL sysoptions_save(b2g(aid), 'vk_trginfo', 'vktrg', 'struct_type');

  SET aid = g2b('8415021a-9bc4-4f54-b789-005a6fcc0de1');
  CALL sysoptions_save(b2g(aid), 'vk_trginfo', 'autovk_trginfo', 'defview');

  SET aid = g2b('285f1daa-f076-4dfa-8b5f-119ea4189be0');
  CALL sysoptions_save(b2g(aid), 'vk_trgowner', 'vktrg', 'struct_type');

  SET aid = g2b('eca17255-943f-4958-aba9-a12f191af25d');
  CALL sysoptions_save(b2g(aid), 'vk_trgowner', 'autovk_trgowner', 'defview');

  SET aid = g2b('cf5f28a7-85a2-4859-ac0f-f1056d4761c1');
  CALL sysoptions_save(b2g(aid), 'vk_brkinfo', 'vkbrk', 'struct_type');

  SET aid = g2b('d406fd73-a08a-4a26-84d3-898ded7e12fa');
  CALL sysoptions_save(b2g(aid), 'vk_brkinfo', 'autovk_brkinfo', 'defview');

  SET aid = g2b('a1e55967-44b3-47e0-976d-7e9f9b28127d');
  CALL sysoptions_save(b2g(aid), 'vk_brkowner', 'vkbrk', 'struct_type');

  SET aid = g2b('14a3bb8c-d0db-4bf6-8a61-84ed86439985');
  CALL sysoptions_save(b2g(aid), 'vk_brkowner', 'autovk_brkowner', 'defview');

  SET aid = g2b('1ce557be-079f-45f3-b396-15cfeadf301b');
  CALL sysoptions_save(b2g(aid), 'filterfieldgroup', 'mtzfltr', 'struct_type');

  SET aid = g2b('983b20b6-6434-4210-a6cd-7f295015d8e6');
  CALL sysoptions_save(b2g(aid), 'fileterfield', 'mtzfltr', 'struct_type');
  SET aid = g2b('d1a118c8-8ba1-45f2-9bc7-c4c3c4bf1a1e');
  CALL sysoptions_save(b2g(aid), 'fileterfield', 'filterfieldgroup', 'parent');

  SET aid = g2b('1a679aba-25c4-4d43-977d-d3b66afbfaba');
  CALL sysoptions_save(b2g(aid), 'filterfieldgroup', 'autofilterfieldgroup', 'defview');

  SET aid = g2b('ed5ddf5d-3468-49fd-9a9f-6bc231a24a42');
  CALL sysoptions_save(b2g(aid), 'fileterfield', 'autofileterfield', 'defview');

  SET aid = g2b('f2b0f140-0a02-4af3-8f28-f58618c97903');
  CALL sysoptions_save(b2g(aid), 'filters', 'mtzfltr', 'struct_type');

  SET aid = g2b('52431265-ecfd-4aef-9448-61a1bfcc8785');
  CALL sysoptions_save(b2g(aid), 'filters', 'autofilters', 'defview');

  SET aid = g2b('a0b767bc-c2de-4fec-8100-040fced983e3');
  CALL sysoptions_save(b2g(aid), 'iu_int_modules', 'bpdi', 'struct_type');

  SET aid = g2b('46c17297-0779-46d9-986c-28f0efeb1102');
  CALL sysoptions_save(b2g(aid), 'iu_int_modules', 'autoiu_int_modules', 'defview');

  SET aid = g2b('904532a9-4bb8-4416-a2e3-1f28ba12e121');
  CALL sysoptions_save(b2g(aid), 'vk_castate', 'vdcst', 'struct_type');

  SET aid = g2b('d7d0e9d8-d847-4c6f-b7dc-9d7a0a202373');
  CALL sysoptions_save(b2g(aid), 'vk_castate', 'autovk_castate', 'defview');

  SET aid = g2b('1a045ba8-7d9d-4041-9c2d-e05f523f856a');
  CALL sysoptions_save(b2g(aid), 'vk_browser', 'vdbrw', 'struct_type');

  SET aid = g2b('4fb2ff27-032b-4a4a-9647-e019b34e2060');
  CALL sysoptions_save(b2g(aid), 'vk_browser', 'autovk_browser', 'defview');

  SET aid = g2b('7e263bac-abfb-4a65-a1d2-8a3354239a6d');
  CALL sysoptions_save(b2g(aid), 'vk_category', 'vdcat', 'struct_type');

  SET aid = g2b('2d054f0e-b4a9-4667-8155-63d7f2ceabf7');
  CALL sysoptions_save(b2g(aid), 'vk_category', 'autovk_category', 'defview');

  SET aid = g2b('59bcf26d-e936-43be-99d2-43661adea40c');
  CALL sysoptions_save(b2g(aid), 'rptstruct', 'mtzrprt', 'struct_type');

  SET aid = g2b('0a85b079-9344-4fbd-9e0c-b39b73d3491c');
  CALL sysoptions_save(b2g(aid), 'rptfields', 'mtzrprt', 'struct_type');
  SET aid = g2b('7f6e5609-1c3c-48e9-b918-1b73cbe83ddd');
  CALL sysoptions_save(b2g(aid), 'rptfields', 'rptstruct', 'parent');


  SET aid = g2b('74f86fd3-293c-4fec-9067-56efa66b3b54');
  CALL sysoptions_save(b2g(aid), 'rptfields', 'autorptfields', 'defview');

  SET aid = g2b('cb37665a-7455-4c13-9eb1-6ca15db04d22');
  CALL sysoptions_save(b2g(aid), 'rptformula', 'mtzrprt', 'struct_type');

  SET aid = g2b('b4d571d2-7cc7-4be7-8178-2a8b747a329e');
  CALL sysoptions_save(b2g(aid), 'rptformula', 'autorptformula', 'defview');

  SET aid = g2b('fb4b9f13-86f2-48b4-acb0-4a07dd045342');
  CALL sysoptions_save(b2g(aid), 'reports', 'mtzrprt', 'struct_type');

  SET aid = g2b('c44a43f2-e5a7-47aa-bf8f-30c74f0d284c');
  CALL sysoptions_save(b2g(aid), 'reports', 'autoreports', 'defview');

  SET aid = g2b('7efc8081-7eae-460f-b9dd-a28699e94ffb');
  CALL sysoptions_save(b2g(aid), 'vk_taskowner', 'vktsk', 'struct_type');

  SET aid = g2b('327b969c-e403-47c5-952e-4606a51ac90b');
  CALL sysoptions_save(b2g(aid), 'vk_taskowner', 'autovk_taskowner', 'defview');

  SET aid = g2b('096140cf-3faa-45f4-8f62-aa6722b66b38');
  CALL sysoptions_save(b2g(aid), 'vk_taskinfo', 'vktsk', 'struct_type');

  SET aid = g2b('203cd69c-a906-468e-8842-cbc8d1967c9e');
  CALL sysoptions_save(b2g(aid), 'vk_taskinfo', 'autovk_taskinfo', 'defview');

  SET aid = g2b('93978fbe-42a3-4c04-9d1f-400172fd5b40');
  CALL sysoptions_save(b2g(aid), 'vk_taskmsg', 'vktsk', 'struct_type');

  SET aid = g2b('1988aa7c-3a92-4c49-9bfd-b2a74719d8d3');
  CALL sysoptions_save(b2g(aid), 'vk_taskmsg', 'autovk_taskmsg', 'defview');
  SET aid = g2b('539637c3-d2d1-4865-b1ad-794a7e151b2c');
  CALL sysoptions_save(b2g(aid), '9181af0d-f0d0-4539-8cdb-67cdb500c41e', 'getfreenumber', 'methodname');
  SET aid = g2b('e3fe5890-3545-490c-b1fc-418bd2b92ea9');
  CALL sysoptions_save(b2g(aid), '2bb30818-90ed-4627-8abb-85b3fba46750', 'vbnewpayout', 'methodname');
  SET aid = g2b('e7cec5c9-5192-4fb3-80c7-374eb7ec81fe');
  CALL sysoptions_save(b2g(aid), '4fb59d1a-0123-47d3-9f4f-e12085c5d074', 'vbupdateitemname', 'methodname');
  SET aid = g2b('57023316-b568-437e-946d-4ce073a6d8ff');
  CALL sysoptions_save(b2g(aid), '477b8d25-4ff7-491a-a0b0-d3437ec16957', 'makenewfolderec', 'methodname');
  SET aid = g2b('7dfde093-f450-4715-967a-f2ba9e9aedc3');
  CALL sysoptions_save(b2g(aid), '42a1a436-8aa2-4f1f-999b-6680dff514de', 'vbsavehistory', 'methodname');
  SET aid = g2b('0ad1c5e6-b6a5-4394-aeb6-a6f014c52907');
  CALL sysoptions_save(b2g(aid), '6fb1873a-45a9-420f-90ce-cde34b5aee19', 'autoclosesession', 'methodname');
  SET aid = g2b('0899adbb-c6db-496d-913c-33d31fdf1d1c');
  CALL sysoptions_save(b2g(aid), '61393545-abf7-46f7-82f3-9b7e610dd9c0', 'vbupdateobjname', 'methodname');
  SET aid = g2b('c7316abc-87f0-440a-be14-bc5800e9ca83');
  CALL sysoptions_save(b2g(aid), '897d3b55-6599-42db-aa1c-54bab3d2f597', 'getnewnumber', 'methodname');
  SET aid = g2b('24b0741e-8433-4c43-af17-ae1da675fe8d');
  CALL sysoptions_save(b2g(aid), '2b0cee5c-7ffa-490d-9f5a-b5e8692551dd', 'erasenumber', 'methodname');
  SET aid = g2b('5a77793b-21d6-4830-9311-eedb61476b95');
  CALL sysoptions_save(b2g(aid), '73be205e-f7ea-4a5a-a41f-85e25ca6511e', 'sessioncheckpoint', 'methodname');
  SET aid = g2b('805584b4-71fc-46f3-bf43-46bcba8f0398');
  CALL sysoptions_save(b2g(aid), 'a87a3a65-ecd1-414f-8fdf-91e53aced1ba', 'rowstoinstances', 'methodname');
  SET aid = g2b('ea50a102-e7e5-494e-b10c-fccd5ad6eee0');
  CALL sysoptions_save(b2g(aid), 'a282dd68-9188-4c40-b0f2-be69caee3dea', 'checkverbright', 'methodname');
  SET aid = g2b('1be6d1f0-73bf-40c7-adc6-d0103e148238');
  CALL sysoptions_save(b2g(aid), '68bd7f75-ad54-4837-a6a7-a8dde3b2992a', 'mtzlogin', 'methodname');
  SET aid = g2b('213ab545-4c74-46af-9a55-b2e227517cfb');
  CALL sysoptions_save(b2g(aid), 'a2eee876-54d8-4aed-b124-775f5da2d911', 'vbaddobjbyref', 'methodname');
  SET aid = g2b('90e06cb3-8c51-4601-b737-2b7ccbafe161');
  CALL sysoptions_save(b2g(aid), '73e7cf77-e6ba-42b4-a03b-4f67eedef4f1', 'adminunlockall', 'methodname');
  SET aid = g2b('9a8960ad-3661-4e12-b070-cf86416d1273');
  CALL sysoptions_save(b2g(aid), '8d492a94-7078-4b7d-9847-aefc27b4855d', 'rowtoinstance', 'methodname');
  SET aid = g2b('98a3368c-1756-45b8-9e3b-26535557518b');
  CALL sysoptions_save(b2g(aid), '7929d795-41c5-4a5c-bff2-a4e677a62143', 'sessiontouch', 'methodname');
  SET aid = g2b('f278c815-fe38-4247-a36d-e537850813f5');
  CALL sysoptions_save(b2g(aid), '6c6e6daa-5cd2-48c3-a2aa-a24539b45a49', 'getservertime', 'methodname');
  SET aid = g2b('9b051e18-b9d8-441c-80a9-cf19bee9218c');
  CALL sysoptions_save(b2g(aid), '0c9985af-27ee-4ad5-a564-635e0bffc9d5', 'testnumber', 'methodname');
  SET aid = g2b('f7798bbc-0bf3-4d0f-aa7e-a89dadc64370');
  CALL sysoptions_save(b2g(aid), '8d3b38b4-c4f9-45ac-8ece-bf3be39d8100', 'logout', 'methodname');
  SET aid = g2b('19f3107b-7e6f-432a-b13f-e56b5282a943');
  CALL sysoptions_save(b2g(aid), 'd8914fb4-6b5d-491a-a72f-985617727583', 'wffuncname', 'methodname');
  SET aid = g2b('32e13266-9877-444c-9dfb-993836f87f5c');
  CALL sysoptions_save(b2g(aid), '074e33b9-1ec9-4aa1-8300-e98c73d55fe2', 'login', 'methodname');
  SET aid = g2b('54d9eb25-c688-43f0-88fd-a57a943377fe');
  CALL sysoptions_save(b2g(aid), 'd49a40b9-6174-4946-a81d-b7fe105c3546', 'adminunlock', 'methodname');
  SET aid = g2b('eae0ab6f-62e4-4445-aa63-826efa5ae219');
  CALL sysoptions_save(b2g(aid), '5b8fb7b9-d8b1-4ca0-90af-55f83d1a6e5d', 'vbmakereport', 'methodname');
  SET aid = g2b('d3cc9ce8-febb-4f24-9687-c578ada0fc4d');
  CALL sysoptions_save(b2g(aid), '94e8f6db-106a-44dc-9483-86c801798ff0', 'vbopenref', 'methodname');
  SET aid = g2b('336eac4a-b37e-4e40-ba4c-79e3fb7ed53e');
  CALL sysoptions_save(b2g(aid), '069956dc-3305-45ef-9331-91ce323b5942', 'wfdefname', 'methodname');
  SET aid = g2b('6b900fdf-afe6-4453-af47-541f49808c02');
  CALL sysoptions_save(b2g(aid), 'aa4085e6-745b-4a37-8ec4-65d99a653966', 'vbremovesymmetricobjref', 'methodname');
  SET aid = g2b('6cbb6348-f835-4257-98cb-829b1493e6d3');
  CALL sysoptions_save(b2g(aid), '49a49ae8-db4b-4329-80fb-801a24c9d7af', 'clearnumerators', 'methodname');
  SET aid = g2b('a13b6fcf-5574-4b4f-9e28-c4eb6f066373');
  CALL sysoptions_save(b2g(aid), '79e6bdeb-91d5-4b2e-81f7-3e091fb65e3a', 'vbcheckdescrs', 'methodname');
  SET aid = g2b('9f93ce56-5898-4780-b760-fdca4ed2dab4');
  CALL sysoptions_save(b2g(aid), '0454d6f0-8624-4887-94b0-64fbc74775e6', 'sessionverify', 'methodname');
  SET aid = g2b('d6337625-bc19-4696-b801-ac3c33c07535');
  CALL sysoptions_save(b2g(aid), '5b376af5-339b-4365-ba80-785e28bcf4da', 'vbupdatesymmetricobjref', 'methodname');
  SET aid = g2b('c0fe1466-419c-49a0-9f8e-427edca46e48');
  CALL sysoptions_save(b2g(aid), '31ec6cf7-8dbd-4efe-bf12-4d168f653d34', 'vbapplysecurity', 'methodname');
  SET aid = g2b('3ef02c5e-8a51-4a43-9d0c-8e75e00d2f79');
  CALL sysoptions_save(b2g(aid), '79ded4fd-045c-45f8-ac79-2e5a3d956d97', 'vbmigrateright', 'methodname');
  CALL login(asession, 'init', 'init');
  SELECT
    COUNT(*) INTO aec
  FROM instance
  WHERE objtype = 'mtzusers';
  IF aec = 0 THEN
    SET asecid = g2b('4e15269e-a33c-4222-82ca-59723d82b056');
    INSERT INTO instance (instanceid, objtype, name)
      VALUES (asecid, 'mtzusers', 'пользователи и группы');
  ELSE
    SELECT
      instanceid INTO asecid
    FROM instance
    WHERE objtype = 'mtzusers';
  END IF;
  DELETE
    FROM users
  WHERE login = 'supervisor';
  SET auid = g2b('76cf54c1-4bf0-4f1e-ae49-035c433782d7');
  INSERT INTO users (usersid, instanceid, password, login, name, changestamp)
    VALUES (auid, asecid, 'bami', 'supervisor', 'администратор', NOW());
  CALL logout(asession);
  DELETE
    FROM users
  WHERE login = 'init';
END
$$

--
-- Создать процедуру "instancevalidator_brief"
--
CREATE PROCEDURE instancevalidator_brief (acursession varchar(38),
ainstancevalidatorid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ainstancevalidatorid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instancevalidator
    WHERE instancevalidatorid = g2b(ainstancevalidatorid);
    IF aec > 0 THEN
      SET abrief = instancevalidator_brief_f(g2b(ainstancevalidatorid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "instancevalidator_client_trigger"
--
CREATE PROCEDURE instancevalidator_client_trigger (acursession varchar(38),
aINSTANCEVALIDATORid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "instancevalidator_copy"
--
CREATE PROCEDURE instancevalidator_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO instancevalidator (instancevalidatorid
    , parentstructrowid
    , target

    , code)
      SELECT
        copymap(acopyaction, b2g(instancevalidatorid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        code

      FROM instancevalidator
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "instancevalidator_delete"
--
CREATE PROCEDURE instancevalidator_delete (acursession varchar(38),
ainstancevalidatorid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM instancevalidator
    WHERE instancevalidatorid = g2b(ainstancevalidatorid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=instancevalidator' result;
        LEAVE body;
      END IF;
      CALL instancevalidator_logger(acursession, ainstancevalidatorid);
      DELETE
        FROM instancevalidator
      WHERE instancevalidatorid = g2b(ainstancevalidatorid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'instancevalidator'
        AND ownerrowid = g2b(ainstancevalidatorid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "instancevalidator_islocked"
--
CREATE PROCEDURE instancevalidator_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM instancevalidator
    WHERE instancevalidatorid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "instancevalidator_lock"
--
CREATE PROCEDURE instancevalidator_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL instancevalidator_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE instancevalidator
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE instancevalidatorid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE instancevalidator
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE instancevalidatorid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "instancevalidator_logger"
--
CREATE PROCEDURE instancevalidator_logger (acursession varchar(38),
ainstancevalidatorid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "instancevalidator_parent"
--
CREATE PROCEDURE instancevalidator_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM instancevalidator
    WHERE instancevalidatorid = arowid;
    SET aparenttable = 'objecttype';
  END
  $$

--
-- Создать процедуру "instancevalidator_save"
--
CREATE PROCEDURE instancevalidator_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
ainstancevalidatorid varchar(38)
, atarget varchar(38)/* платформа *//* платформа */
, acode
text/* скрипт *//* скрипт */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM instancevalidator
    WHERE instancevalidatorid = g2b(ainstancevalidatorid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=instancevalidator' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL instancevalidator_logger(acursession, ainstancevalidatorid);
        UPDATE instancevalidator
        SET changestamp = NOW(),
            target = g2b(atarget),
            code = acode
        WHERE instancevalidatorid = g2b(ainstancevalidatorid);


        CALL instancevalidator_client_trigger(acursession, ainstancevalidatorid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=instancevalidator' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO instancevalidator (changestamp, instancevalidatorid
          , parentstructrowid
          , target

          , code)
            VALUES (NOW(), g2b(ainstancevalidatorid), g2b(aparentstructrowid), g2b(atarget), acode);


          CALL instancevalidator_client_trigger(acursession, ainstancevalidatorid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "instancevalidator_unlock"
--
CREATE PROCEDURE instancevalidator_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL instancevalidator_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE instancevalidator
      SET lockuserid = NULL
      WHERE instancevalidatorid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE instancevalidator
      SET locksessionid = NULL
      WHERE instancevalidatorid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "instance_archive"
--
CREATE PROCEDURE instance_archive (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      UPDATE instance
      SET archived = 1
      WHERE instanceid = g2b(ainstanceid);
    END IF;
  END
  $$

--
-- Создать процедуру "instance_brief"
--
CREATE PROCEDURE instance_brief (acursession varchar(38),
ainstanceid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE atmpstr varchar(255);
    DECLARE aaccess int;
    DECLARE atmpbrief varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    IF ainstanceid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      SELECT
        CONCAT(IFNULL(name, ''), '; ', IFNULL(objtype, '')) INTO abrief
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
  END
  $$

--
-- Создать процедуру "instance_delete"
--
CREATE PROCEDURE instance_delete (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      DELETE
        FROM instance
      WHERE instanceid = g2b(ainstanceid);
    END IF;
  END
  $$

--
-- Создать процедуру "instance_hcl"
--
CREATE PROCEDURE instance_hcl (acursession varchar(38),
arowid varchar(38),
OUT aislocked int)
body:
  BEGIN
    DECLARE atmpstr varchar(255);
    DECLARE aobjtype varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      SET aislocked = 0;
    END IF;
  END
  $$

--
-- Создать процедуру "instance_islocked"
--
CREATE PROCEDURE instance_islocked (acursession varchar(38),
arowid varchar(38),
OUT aislocked integer)
body:
  BEGIN
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(arowid);
    IF aec > 0 THEN
      SELECT
        auserid = usersid
      FROM the_session
      WHERE the_sessionid = g2b(acursession);
      SELECT
        alockuserid = lockuserid,
        alocksessionid = locksessionid
      FROM instance
      WHERE instanceid = g2b(arowid);
      /* verify this row */
      IF NOT alockuserid IS NULL THEN
        IF alockuserid <> auserid THEN
          SET aislocked = 4; /* checkout by another user */
          LEAVE body;
        ELSE
          SET aislocked = 2; /* checkout by caller */
          LEAVE body;
        END IF;
      END IF;
      IF NOT alocksessionid IS NULL THEN
        IF alocksessionid <> acursession THEN
          SET aislocked = 3; /* lockes by another user */
          LEAVE body;
        ELSE
          SET aislocked = 1; /* locked by caller */
          LEAVE body;
        END IF;
      END IF;
    END IF;
  END
  $$

--
-- Создать процедуру "instance_lock"
--
CREATE PROCEDURE instance_lock (acursession varchar(38),
arowid varchar(38),
alockmode integer)
body:
  BEGIN

    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(arowid);
    IF aec > 0 THEN
      SELECT
        auserid = usersid
      FROM the_session
      WHERE the_sessionid = g2b(acursession);
      CALL instance_islocked(acursession, arowid, aislocked);
      IF aislocked >= 3 THEN
        LEAVE body;
      END IF;
      IF alockmode = 2 THEN
        UPDATE instance
        SET lockuserid = g2b(auserid),
            locksessionid = NULL
        WHERE instanceid = g2b(arowid);
        LEAVE body;
      END IF;
      IF alockmode = 1 THEN
        UPDATE instance
        SET lockuserid = NULL,
            locksessionid = g2b(acursession)
        WHERE instanceid = g2b(arowid);
        LEAVE body;
      END IF;
    END IF;
  END
  $$

--
-- Создать процедуру "instance_owner"
--
CREATE PROCEDURE instance_owner (acursession varchar(38), ainstanceid varchar(38), aownerpartname varchar(255), aownerrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      IF aownerpartname IS NULL
        OR aownerrowid IS NULL THEN
        UPDATE instance
        SET ownerpartname = NULL,
            ownerrowid = NULL
        WHERE instanceid = g2b(ainstanceid);
      ELSE
        UPDATE instance
        SET ownerpartname = aownerpartname,
            ownerrowid = g2b(aownerrowid)
        WHERE instanceid = g2b(ainstanceid);
      END IF;
    END IF;
  END
  $$

--
-- Создать процедуру "instance_rearchive"
--
CREATE PROCEDURE instance_rearchive (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      UPDATE instance
      SET archived = 0
      WHERE instanceid = g2b(ainstanceid);
    END IF;
  END
  $$

--
-- Создать процедуру "instance_save"
--
CREATE PROCEDURE instance_save (acursession varchar(38),
ainstanceid varchar(38),
aobjtype varchar(255),
aname varchar(255))
body:
  BEGIN
    DECLARE atmpstr varchar(255);
    DECLARE assid binary(16);
    DECLARE atmpid binary(16);
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE astatusid binary(16);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(ainstanceid);
    IF aec > 0 THEN
      UPDATE instance
      SET name = aname,
          changestamp = NOW()
      WHERE instanceid = g2b(ainstanceid);
    ELSE
      SELECT
        COUNT(*) INTO aec
      FROM typelist
      WHERE name = aobjtype;
      IF aec THEN
        START TRANSACTION;
          SET astatusid = NULL;
          SELECT
            objstatusid INTO astatusid
          FROM objstatus
            JOIN objecttype
              ON objecttype.objecttypeid = objstatus.parentstructrowid
              AND objecttype.name = aobjtype
              AND isstartup <> 0;
          IF NOT astatusid IS NULL THEN
            INSERT INTO instance (instanceid, name, objtype, status, changestamp)
              VALUES (g2b(ainstanceid), aname, aobjtype, g2b(astatusid), NOW());
          ELSE
            INSERT INTO instance (instanceid, name, objtype, changestamp)
              VALUES (g2b(ainstanceid), aname, aobjtype, NOW());
          END IF;
        COMMIT;
      END IF;
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "instance_unlock"
--
CREATE PROCEDURE instance_unlock (acursession varchar(38),
arowid varchar(38))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked int;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM instance
    WHERE instanceid = g2b(arowid);
    IF aec > 0 THEN
      CALL instance_islocked(acursession, arowid, aislocked);
      IF aislocked >= 3 THEN
        LEAVE body;
      END IF;
      IF aislocked = 2 THEN
        UPDATE instance
        SET lockuserid = NULL
        WHERE instanceid = g2b(arowid);
        LEAVE body;
      END IF;
      IF aislocked = 1 THEN
        UPDATE instance
        SET locksessionid = NULL
        WHERE instanceid = g2b(arowid);
        LEAVE body;
      END IF;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_crole_archive"
--
CREATE PROCEDURE iu_crole_archive (acursession varchar(38),
aiu_croleid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_crole
    WHERE iu_croleid = g2b(aiu_croleid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bpdr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_crole' result;
        LEAVE body;
      END IF;
      CALL iu_crole_logger(acursession, aiu_croleid);
      UPDATE iu_crole
      SET archived = 1
      WHERE iu_croleid = g2b(aiu_croleid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_crole_brief"
--
CREATE PROCEDURE iu_crole_brief (acursession varchar(38),
aiu_croleid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aiu_croleid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM iu_crole
    WHERE iu_croleid = g2b(aiu_croleid);
    IF aec > 0 THEN
      SET abrief = iu_crole_brief_f(g2b(aiu_croleid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "iu_crole_client_trigger"
--
CREATE PROCEDURE iu_crole_client_trigger (acursession varchar(38),
aiu_croleid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "iu_crole_copy"
--
CREATE PROCEDURE iu_crole_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO iu_crole (iu_croleid
    , instanceid
    , archived
    , name

    , allowsetuser)
      SELECT
        copymap(acopyaction, b2g(iu_croleid)),
        copymap(acopyaction, b2g(instanceid)),
        archived,
        name,
        allowsetuser

      FROM iu_crole
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_crole_delete"
--
CREATE PROCEDURE iu_crole_delete (acursession varchar(38),
aiu_croleid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_crole
    WHERE iu_croleid = g2b(aiu_croleid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bpdr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_crole' result;
        LEAVE body;
      END IF;
      CALL iu_crole_logger(acursession, aiu_croleid);
      DELETE
        FROM iu_crole
      WHERE iu_croleid = g2b(aiu_croleid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'iu_crole'
        AND ownerrowid = g2b(aiu_croleid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_crole_islocked"
--
CREATE PROCEDURE iu_crole_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM iu_crole
    WHERE iu_croleid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "iu_crole_lock"
--
CREATE PROCEDURE iu_crole_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_crole_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE iu_crole
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE iu_croleid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE iu_crole
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE iu_croleid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_crole_logger"
--
CREATE PROCEDURE iu_crole_logger (acursession varchar(38),
aiu_croleid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_crole_parent"
--
CREATE PROCEDURE iu_crole_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM iu_crole
    WHERE iu_croleid = arowid;
  END
  $$

--
-- Создать процедуру "iu_crole_save"
--
CREATE PROCEDURE iu_crole_save (acursession varchar(38),
ainstanceid varchar(38),
aiu_croleid varchar(38)
, aname
varchar(120)/* название *//* название */
, aallowsetuser
integer/* требует явного назначения *//* требует явного назначения */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_crole
    WHERE iu_croleid = g2b(aiu_croleid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bpdr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=iu_crole' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL iu_crole_logger(acursession, aiu_croleid);
        UPDATE iu_crole
        SET changestamp = NOW(),
            name = aname,
            allowsetuser = aallowsetuser
        WHERE iu_croleid = g2b(aiu_croleid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM iu_crole
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=роль правило=(уникальность для роль.название)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL iu_crole_client_trigger(acursession, aiu_croleid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bpdr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=iu_crole' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO iu_crole (changestamp, iu_croleid
          , instanceid
          , name

          , allowsetuser)
            VALUES (NOW(), g2b(aiu_croleid), g2b(ainstanceid), aname, aallowsetuser);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM iu_crole
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=роль правило=(уникальность для роль.название)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL iu_crole_client_trigger(acursession, aiu_croleid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "iu_crole_unlock"
--
CREATE PROCEDURE iu_crole_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_crole_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE iu_crole
      SET lockuserid = NULL
      WHERE iu_croleid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE iu_crole
      SET locksessionid = NULL
      WHERE iu_croleid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_int_modules_brief"
--
CREATE PROCEDURE iu_int_modules_brief (acursession varchar(38),
aiu_int_modulesid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aiu_int_modulesid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM iu_int_modules
    WHERE iu_int_modulesid = g2b(aiu_int_modulesid);
    IF aec > 0 THEN
      SET abrief = iu_int_modules_brief_f(g2b(aiu_int_modulesid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "iu_int_modules_client_trigger"
--
CREATE PROCEDURE iu_int_modules_client_trigger (acursession varchar(38),
aiu_int_modulesid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "iu_int_modules_copy"
--
CREATE PROCEDURE iu_int_modules_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO iu_int_modules (iu_int_modulesid
    , instanceid
    , sequence

    , theicon

    , groupname

    , name

    , caption

    , visiblecontrol

    , controldocmode

    , otherdocmode

    , mydocmode

    , allobjects

    , colegsobject

    , substructobjects)
      SELECT
        copymap(acopyaction, b2g(iu_int_modulesid)),
        copymap(acopyaction, b2g(instanceid)),
        sequence,
        theicon,
        groupname,
        name,
        caption,
        visiblecontrol,
        controldocmode,
        otherdocmode,
        mydocmode,
        allobjects,
        colegsobject,
        substructobjects

      FROM iu_int_modules
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_int_modules_delete"
--
CREATE PROCEDURE iu_int_modules_delete (acursession varchar(38),
aiu_int_modulesid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_int_modules
    WHERE iu_int_modulesid = g2b(aiu_int_modulesid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bpdi.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_int_modules' result;
        LEAVE body;
      END IF;
      CALL iu_int_modules_logger(acursession, aiu_int_modulesid);
      DELETE
        FROM iu_int_modules
      WHERE iu_int_modulesid = g2b(aiu_int_modulesid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'iu_int_modules'
        AND ownerrowid = g2b(aiu_int_modulesid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_int_modules_islocked"
--
CREATE PROCEDURE iu_int_modules_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM iu_int_modules
    WHERE iu_int_modulesid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "iu_int_modules_lock"
--
CREATE PROCEDURE iu_int_modules_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_int_modules_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE iu_int_modules
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE iu_int_modulesid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE iu_int_modules
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE iu_int_modulesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_int_modules_logger"
--
CREATE PROCEDURE iu_int_modules_logger (acursession varchar(38),
aiu_int_modulesid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_int_modules_parent"
--
CREATE PROCEDURE iu_int_modules_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM iu_int_modules
    WHERE iu_int_modulesid = arowid;
  END
  $$

--
-- Создать процедуру "iu_int_modules_save"
--
CREATE PROCEDURE iu_int_modules_save (acursession varchar(38),
ainstanceid varchar(38),
aiu_int_modulesid varchar(38)
, asequence
integer/* № п/п *//* № п/п */
, atheicon
varchar(64)/* иконка *//* иконка */
, agroupname
varchar(60)/* меню верхнего урровня *//* меню верхнего урровня */
, aname
varchar(255)/* название меню *//* название меню */
, acaption
varchar(80)/* надпись *//* надпись */
, avisiblecontrol
integer/* управление видимостью *//* управление видимостью */
, acontroldocmode
varchar(10)/* документы на контроле *//* документы на контроле */
, aotherdocmode
varchar(10)/* чужие документы *//* чужие документы */
, amydocmode
varchar(10)/* мои документы *//* мои документы */
, aallobjects
integer/* вся фирма *//* вся фирма */
, acolegsobject
integer/* объекты коллег *//* объекты коллег */
, asubstructobjects
integer/* подчиненные подразделения *//* подчиненные подразделения */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_int_modules
    WHERE iu_int_modulesid = g2b(aiu_int_modulesid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bpdi.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=iu_int_modules' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL iu_int_modules_logger(acursession, aiu_int_modulesid);
        UPDATE iu_int_modules
        SET changestamp = NOW(),
            sequence = asequence,
            theicon = atheicon,
            groupname = agroupname,
            name = aname,
            caption = acaption,
            visiblecontrol = avisiblecontrol,
            controldocmode = acontroldocmode,
            otherdocmode = aotherdocmode,
            mydocmode = amydocmode,
            allobjects = aallobjects,
            colegsobject = acolegsobject,
            substructobjects = asubstructobjects
        WHERE iu_int_modulesid = g2b(aiu_int_modulesid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM iu_int_modules
        WHERE instanceid = g2b(ainstanceid)
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL iu_int_modules_client_trigger(acursession, aiu_int_modulesid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bpdi.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=iu_int_modules' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO iu_int_modules (changestamp, iu_int_modulesid
          , instanceid
          , sequence

          , theicon

          , groupname

          , name

          , caption

          , visiblecontrol

          , controldocmode

          , otherdocmode

          , mydocmode

          , allobjects

          , colegsobject

          , substructobjects)
            VALUES (NOW(), g2b(aiu_int_modulesid), g2b(ainstanceid), asequence, atheicon, agroupname, aname, acaption, avisiblecontrol, acontroldocmode, aotherdocmode, amydocmode, aallobjects, acolegsobject, asubstructobjects);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM iu_int_modules
          WHERE instanceid = g2b(ainstanceid)
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL iu_int_modules_client_trigger(acursession, aiu_int_modulesid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "iu_int_modules_unlock"
--
CREATE PROCEDURE iu_int_modules_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_int_modules_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE iu_int_modules
      SET lockuserid = NULL
      WHERE iu_int_modulesid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE iu_int_modules
      SET locksessionid = NULL
      WHERE iu_int_modulesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_archive"
--
CREATE PROCEDURE iu_rcfg_def_archive (acursession varchar(38),
aiu_rcfg_defid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_rcfg_def' result;
        LEAVE body;
      END IF;
      CALL iu_rcfg_def_logger(acursession, aiu_rcfg_defid);
      UPDATE iu_rcfg_def
      SET archived = 1
      WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_brief"
--
CREATE PROCEDURE iu_rcfg_def_brief (acursession varchar(38),
aiu_rcfg_defid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aiu_rcfg_defid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
    IF aec > 0 THEN
      SET abrief = iu_rcfg_def_brief_f(g2b(aiu_rcfg_defid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_client_trigger"
--
CREATE PROCEDURE iu_rcfg_def_client_trigger (acursession varchar(38),
aiu_rcfg_defid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "iu_rcfg_def_copy"
--
CREATE PROCEDURE iu_rcfg_def_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO iu_rcfg_def (iu_rcfg_defid
    , instanceid
    , archived
    , therole)
      SELECT
        copymap(acopyaction, b2g(iu_rcfg_defid)),
        copymap(acopyaction, b2g(instanceid)),
        archived,
        therole

      FROM iu_rcfg_def
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_delete"
--
CREATE PROCEDURE iu_rcfg_def_delete (acursession varchar(38),
aiu_rcfg_defid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_rcfg_def' result;
        LEAVE body;
      END IF;
      CALL iu_rcfg_def_logger(acursession, aiu_rcfg_defid);
      DELETE
        FROM iu_rcfg_def
      WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'iu_rcfg_def'
        AND ownerrowid = g2b(aiu_rcfg_defid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_islocked"
--
CREATE PROCEDURE iu_rcfg_def_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_lock"
--
CREATE PROCEDURE iu_rcfg_def_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_rcfg_def_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE iu_rcfg_def
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE iu_rcfg_defid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE iu_rcfg_def
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE iu_rcfg_defid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_logger"
--
CREATE PROCEDURE iu_rcfg_def_logger (acursession varchar(38),
aiu_rcfg_defid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_parent"
--
CREATE PROCEDURE iu_rcfg_def_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = arowid;
  END
  $$

--
-- Создать процедуру "iu_rcfg_def_save"
--
CREATE PROCEDURE iu_rcfg_def_save (acursession varchar(38),
ainstanceid varchar(38),
aiu_rcfg_defid varchar(38)
, atherole varchar(38)/* роль *//* роль */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=iu_rcfg_def' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL iu_rcfg_def_logger(acursession, aiu_rcfg_defid);
        UPDATE iu_rcfg_def
        SET changestamp = NOW(),
            therole = g2b(atherole)
        WHERE iu_rcfg_defid = g2b(aiu_rcfg_defid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM iu_rcfg_def
        WHERE 1 = 1
        AND therole = g2b(atherole);
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=роль правило=(роль уникальна)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL iu_rcfg_def_client_trigger(acursession, aiu_rcfg_defid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=iu_rcfg_def' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM iu_rcfg_def
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <iu_rcfg_def>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO iu_rcfg_def (changestamp, iu_rcfg_defid
          , instanceid
          , therole)
            VALUES (NOW(), g2b(aiu_rcfg_defid), g2b(ainstanceid), g2b(atherole));
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM iu_rcfg_def
          WHERE 1 = 1
          AND therole = g2b(atherole);
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=роль правило=(роль уникальна)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL iu_rcfg_def_client_trigger(acursession, aiu_rcfg_defid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "iu_rcfg_def_unlock"
--
CREATE PROCEDURE iu_rcfg_def_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_rcfg_def_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE iu_rcfg_def
      SET lockuserid = NULL
      WHERE iu_rcfg_defid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE iu_rcfg_def
      SET locksessionid = NULL
      WHERE iu_rcfg_defid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_brief"
--
CREATE PROCEDURE iu_rcfg_docmode_brief (acursession varchar(38),
aiu_rcfg_docmodeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aiu_rcfg_docmodeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_docmode
    WHERE iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid);
    IF aec > 0 THEN
      SET abrief = iu_rcfg_docmode_brief_f(g2b(aiu_rcfg_docmodeid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_client_trigger"
--
CREATE PROCEDURE iu_rcfg_docmode_client_trigger (acursession varchar(38),
aiu_rcfg_docmodeid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "iu_rcfg_docmode_copy"
--
CREATE PROCEDURE iu_rcfg_docmode_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO iu_rcfg_docmode (iu_rcfg_docmodeid
    , instanceid
    , the_document

    , addmode

    , editmode

    , allowadd

    , allowdelete)
      SELECT
        copymap(acopyaction, b2g(iu_rcfg_docmodeid)),
        copymap(acopyaction, b2g(instanceid)),
        the_document,
        addmode,
        editmode,
        allowadd,
        allowdelete

      FROM iu_rcfg_docmode
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_delete"
--
CREATE PROCEDURE iu_rcfg_docmode_delete (acursession varchar(38),
aiu_rcfg_docmodeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_docmode
    WHERE iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_rcfg_docmode' result;
        LEAVE body;
      END IF;
      CALL iu_rcfg_docmode_logger(acursession, aiu_rcfg_docmodeid);
      DELETE
        FROM iu_rcfg_docmode
      WHERE iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'iu_rcfg_docmode'
        AND ownerrowid = g2b(aiu_rcfg_docmodeid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_islocked"
--
CREATE PROCEDURE iu_rcfg_docmode_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM iu_rcfg_docmode
    WHERE iu_rcfg_docmodeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_lock"
--
CREATE PROCEDURE iu_rcfg_docmode_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_rcfg_docmode_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE iu_rcfg_docmode
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE iu_rcfg_docmodeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE iu_rcfg_docmode
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE iu_rcfg_docmodeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_logger"
--
CREATE PROCEDURE iu_rcfg_docmode_logger (acursession varchar(38),
aiu_rcfg_docmodeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_parent"
--
CREATE PROCEDURE iu_rcfg_docmode_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM iu_rcfg_docmode
    WHERE iu_rcfg_docmodeid = arowid;
  END
  $$

--
-- Создать процедуру "iu_rcfg_docmode_save"
--
CREATE PROCEDURE iu_rcfg_docmode_save (acursession varchar(38),
ainstanceid varchar(38),
aiu_rcfg_docmodeid varchar(38)
, athe_document varchar(38)/* тип документа *//* тип документа */
, aaddmode
varchar(4)/* режим для  создания *//* режим для  создания */
, aeditmode
varchar(4)/* режим для редактирования *//* режим для редактирования */
, aallowadd
integer/* можно создавать *//* можно создавать */
, aallowdelete
integer/* можно удалять *//* можно удалять */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_docmode
    WHERE iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=iu_rcfg_docmode' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL iu_rcfg_docmode_logger(acursession, aiu_rcfg_docmodeid);
        UPDATE iu_rcfg_docmode
        SET changestamp = NOW(),
            the_document = g2b(athe_document),
            addmode = aaddmode,
            editmode = aeditmode,
            allowadd = aallowadd,
            allowdelete = aallowdelete
        WHERE iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM iu_rcfg_docmode
        WHERE instanceid = g2b(ainstanceid)
        AND the_document = g2b(athe_document);
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=режим документа правило=(тип документа уникален)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL iu_rcfg_docmode_client_trigger(acursession, aiu_rcfg_docmodeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=iu_rcfg_docmode' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO iu_rcfg_docmode (changestamp, iu_rcfg_docmodeid
          , instanceid
          , the_document

          , addmode

          , editmode

          , allowadd

          , allowdelete)
            VALUES (NOW(), g2b(aiu_rcfg_docmodeid), g2b(ainstanceid), g2b(athe_document), aaddmode, aeditmode, aallowadd, aallowdelete);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM iu_rcfg_docmode
          WHERE instanceid = g2b(ainstanceid)
          AND the_document = g2b(athe_document);
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=режим документа правило=(тип документа уникален)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL iu_rcfg_docmode_client_trigger(acursession, aiu_rcfg_docmodeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "iu_rcfg_docmode_unlock"
--
CREATE PROCEDURE iu_rcfg_docmode_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_rcfg_docmode_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE iu_rcfg_docmode
      SET lockuserid = NULL
      WHERE iu_rcfg_docmodeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE iu_rcfg_docmode
      SET locksessionid = NULL
      WHERE iu_rcfg_docmodeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_brief"
--
CREATE PROCEDURE iu_rcfg_mod_brief (acursession varchar(38),
aiu_rcfg_modid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aiu_rcfg_modid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = g2b(aiu_rcfg_modid);
    IF aec > 0 THEN
      SET abrief = iu_rcfg_mod_brief_f(g2b(aiu_rcfg_modid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_client_trigger"
--
CREATE PROCEDURE iu_rcfg_mod_client_trigger (acursession varchar(38),
aiu_rcfg_modid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "iu_rcfg_mod_copy"
--
CREATE PROCEDURE iu_rcfg_mod_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO iu_rcfg_mod (iu_rcfg_modid
    , instanceid
    , sequence

    , caption

    , moduleaccessible

    , theicon

    , name

    , groupname

    , allobjects

    , colegsobject

    , substructobjects

    , mydocmode

    , otherdocmode

    , controldocmode

    , visiblecontrol)
      SELECT
        copymap(acopyaction, b2g(iu_rcfg_modid)),
        copymap(acopyaction, b2g(instanceid)),
        sequence,
        caption,
        moduleaccessible,
        theicon,
        name,
        groupname,
        allobjects,
        colegsobject,
        substructobjects,
        mydocmode,
        otherdocmode,
        controldocmode,
        visiblecontrol

      FROM iu_rcfg_mod
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_delete"
--
CREATE PROCEDURE iu_rcfg_mod_delete (acursession varchar(38),
aiu_rcfg_modid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = g2b(aiu_rcfg_modid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_rcfg_mod' result;
        LEAVE body;
      END IF;
      CALL iu_rcfg_mod_logger(acursession, aiu_rcfg_modid);
      DELETE
        FROM iu_rcfg_mod
      WHERE iu_rcfg_modid = g2b(aiu_rcfg_modid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'iu_rcfg_mod'
        AND ownerrowid = g2b(aiu_rcfg_modid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_islocked"
--
CREATE PROCEDURE iu_rcfg_mod_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_lock"
--
CREATE PROCEDURE iu_rcfg_mod_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_rcfg_mod_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE iu_rcfg_mod
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE iu_rcfg_modid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE iu_rcfg_mod
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE iu_rcfg_modid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_logger"
--
CREATE PROCEDURE iu_rcfg_mod_logger (acursession varchar(38),
aiu_rcfg_modid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_parent"
--
CREATE PROCEDURE iu_rcfg_mod_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = arowid;
  END
  $$

--
-- Создать процедуру "iu_rcfg_mod_save"
--
CREATE PROCEDURE iu_rcfg_mod_save (acursession varchar(38),
ainstanceid varchar(38),
aiu_rcfg_modid varchar(38)
, asequence
integer/* № п/п *//* № п/п */
, acaption
varchar(80)/* надпись *//* надпись */
, amoduleaccessible
integer/* разрешен *//* разрешен */
, atheicon
varchar(64)/* иконка *//* иконка */
, aname
varchar(255)/* название меню *//* название меню */
, agroupname
varchar(60)/* меню верхнего урровня *//* меню верхнего урровня */
, aallobjects
integer/* вся фирма *//* вся фирма */
, acolegsobject
integer/* объекты коллег *//* объекты коллег */
, asubstructobjects
integer/* подчиненные подразделения *//* подчиненные подразделения */
, amydocmode
varchar(10)/* мои документы *//* мои документы */
, aotherdocmode
varchar(10)/* чужие документы *//* чужие документы */
, acontroldocmode
varchar(10)/* документы на контроле *//* документы на контроле */
, avisiblecontrol
integer/* управление видимостью *//* управление видимостью */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = g2b(aiu_rcfg_modid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=iu_rcfg_mod' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL iu_rcfg_mod_logger(acursession, aiu_rcfg_modid);
        UPDATE iu_rcfg_mod
        SET changestamp = NOW(),
            sequence = asequence,
            caption = acaption,
            moduleaccessible = amoduleaccessible,
            theicon = atheicon,
            name = aname,
            groupname = agroupname,
            allobjects = aallobjects,
            colegsobject = acolegsobject,
            substructobjects = asubstructobjects,
            mydocmode = amydocmode,
            otherdocmode = aotherdocmode,
            controldocmode = acontroldocmode,
            visiblecontrol = avisiblecontrol
        WHERE iu_rcfg_modid = g2b(aiu_rcfg_modid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM iu_rcfg_mod
        WHERE instanceid = g2b(ainstanceid)
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL iu_rcfg_mod_client_trigger(acursession, aiu_rcfg_modid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bprcfg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=iu_rcfg_mod' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO iu_rcfg_mod (changestamp, iu_rcfg_modid
          , instanceid
          , sequence

          , caption

          , moduleaccessible

          , theicon

          , name

          , groupname

          , allobjects

          , colegsobject

          , substructobjects

          , mydocmode

          , otherdocmode

          , controldocmode

          , visiblecontrol)
            VALUES (NOW(), g2b(aiu_rcfg_modid), g2b(ainstanceid), asequence, acaption, amoduleaccessible, atheicon, aname, agroupname, aallobjects, acolegsobject, asubstructobjects, amydocmode, aotherdocmode, acontroldocmode, avisiblecontrol);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM iu_rcfg_mod
          WHERE instanceid = g2b(ainstanceid)
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=модуль правило=(модуль уникален)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL iu_rcfg_mod_client_trigger(acursession, aiu_rcfg_modid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "iu_rcfg_mod_unlock"
--
CREATE PROCEDURE iu_rcfg_mod_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_rcfg_mod_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE iu_rcfg_mod
      SET lockuserid = NULL
      WHERE iu_rcfg_modid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE iu_rcfg_mod
      SET locksessionid = NULL
      WHERE iu_rcfg_modid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_u_def_brief"
--
CREATE PROCEDURE iu_u_def_brief (acursession varchar(38),
aiu_u_defid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aiu_u_defid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM iu_u_def
    WHERE iu_u_defid = g2b(aiu_u_defid);
    IF aec > 0 THEN
      SET abrief = iu_u_def_brief_f(g2b(aiu_u_defid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "iu_u_def_client_trigger"
--
CREATE PROCEDURE iu_u_def_client_trigger (acursession varchar(38),
aiu_u_defid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "iu_u_def_commitfromtemp"
--
CREATE PROCEDURE iu_u_def_commitfromtemp (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    DELETE
      FROM iu_u_def
    WHERE instanceid = g2b(ainstanceid);
    INSERT INTO iu_u_def (timestamp, changestamp, iu_u_defid
    , instanceid
    , theclient

    , lastname

    , name

    , surname

    , currole

    , sendtomail

    , freelancer

    , email

    , thephone

    , login)
      SELECT
        timestamp,
        changestamp,
        iu_u_defid,
        instanceid,
        theclient,
        lastname,
        name,
        surname,
        currole,
        sendtomail,
        freelancer,
        email,
        thephone,
        login

      FROM iu_u_def_temp
      WHERE sessionid = g2b(acursession)
      AND instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_u_def_copy"
--
CREATE PROCEDURE iu_u_def_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO iu_u_def (iu_u_defid
    , instanceid
    , theclient

    , lastname

    , name

    , surname

    , currole

    , sendtomail

    , freelancer

    , email

    , thephone

    , login)
      SELECT
        copymap(acopyaction, b2g(iu_u_defid)),
        copymap(acopyaction, b2g(instanceid)),
        theclient,
        lastname,
        name,
        surname,
        currole,
        sendtomail,
        freelancer,
        email,
        thephone,
        login

      FROM iu_u_def
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_u_def_delete"
--
CREATE PROCEDURE iu_u_def_delete (acursession varchar(38),
aiu_u_defid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_u_def_temp
    WHERE sessionid = g2b(acursession)
    AND iu_u_defid = g2b(aiu_u_defid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'bpu.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=iu_u_def' result;
        LEAVE body;
      END IF;
      CALL iu_u_def_logger(acursession, aiu_u_defid);
      DELETE
        FROM iu_u_def_temp
      WHERE sessionid = g2b(acursession)
        AND iu_u_defid = g2b(aiu_u_defid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'iu_u_def'
        AND ownerrowid = g2b(aiu_u_defid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "iu_u_def_droptempdata"
--
CREATE PROCEDURE iu_u_def_droptempdata (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    DELETE
      FROM iu_u_def_temp
    WHERE sessionid = g2b(acursession)
      AND instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_u_def_gettotemp"
--
CREATE PROCEDURE iu_u_def_gettotemp (acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    DELETE
      FROM iu_u_def_temp
    WHERE sessionid = g2b(acursession)
      AND instanceid = g2b(ainstanceid);
    INSERT INTO iu_u_def_temp (timestamp, changestamp, sessionid, iu_u_defid
    , instanceid
    , theclient

    , lastname

    , name

    , surname

    , currole

    , sendtomail

    , freelancer

    , email

    , thephone

    , login)
      SELECT
        timestamp,
        changestamp,
        g2b(acursession),
        iu_u_defid,
        instanceid,
        theclient,
        lastname,
        name,
        surname,
        currole,
        sendtomail,
        freelancer,
        email,
        thephone,
        login

      FROM iu_u_def
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "iu_u_def_islocked"
--
CREATE PROCEDURE iu_u_def_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM iu_u_def
    WHERE iu_u_defid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "iu_u_def_lock"
--
CREATE PROCEDURE iu_u_def_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_u_def_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE iu_u_def
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE iu_u_defid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE iu_u_def
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE iu_u_defid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_u_def_logger"
--
CREATE PROCEDURE iu_u_def_logger (acursession varchar(38),
aiu_u_defid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "iu_u_def_parent"
--
CREATE PROCEDURE iu_u_def_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM iu_u_def
    WHERE iu_u_defid = arowid;
  END
  $$

--
-- Создать процедуру "iu_u_def_save"
--
CREATE PROCEDURE iu_u_def_save (acursession varchar(38),
ainstanceid varchar(38),
aiu_u_defid varchar(38)
, atheclient varchar(38)/* клиент *//* клиент */
, alastname
varchar(120)/* фамилия *//* фамилия */
, aname
varchar(120)/* имя *//* имя */
, asurname
varchar(120)/* отчество *//* отчество */
, acurrole varchar(38)/* роль в производстве *//* роль в производстве */
, asendtomail
integer/* оповещать по почте *//* оповещать по почте */
, afreelancer
integer/* удаленная работа *//* удаленная работа */
, aemail
varchar(60)/* e-mail *//* e-mail */
, athephone
varchar(40)/* телефон *//* телефон */
, alogin
varchar(64)/* имя для входа *//* имя для входа */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM iu_u_def_temp
    WHERE sessionid = g2b(acursession)
    AND iu_u_defid = g2b(aiu_u_defid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'bpu.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=iu_u_def' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL iu_u_def_logger(acursession, aiu_u_defid);
        UPDATE iu_u_def_temp
        SET changestamp = NOW(),
            theclient = g2b(atheclient),
            lastname = alastname,
            name = aname,
            surname = asurname,
            currole = g2b(acurrole),
            sendtomail = asendtomail,
            freelancer = afreelancer,
            email = aemail,
            thephone = athephone,
            login = alogin
        WHERE sessionid = g2b(acursession)
        AND iu_u_defid = g2b(aiu_u_defid);


        CALL iu_u_def_client_trigger(acursession, aiu_u_defid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'bpu.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=iu_u_def' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM iu_u_def_temp
        WHERE sessionid = g2b(acursession)
        AND instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <iu_u_def>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO iu_u_def_temp (changestamp, sessionid, iu_u_defid
          , instanceid
          , theclient

          , lastname

          , name

          , surname

          , currole

          , sendtomail

          , freelancer

          , email

          , thephone

          , login)
            VALUES (NOW(), g2b(acursession), g2b(aiu_u_defid), g2b(ainstanceid), g2b(atheclient), alastname, aname, asurname, g2b(acurrole), asendtomail, afreelancer, aemail, athephone, alogin);


          CALL iu_u_def_client_trigger(acursession, aiu_u_defid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "iu_u_def_unlock"
--
CREATE PROCEDURE iu_u_def_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL iu_u_def_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE iu_u_def
      SET lockuserid = NULL
      WHERE iu_u_defid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE iu_u_def
      SET locksessionid = NULL
      WHERE iu_u_defid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "jcolumnsource_brief"
--
CREATE PROCEDURE jcolumnsource_brief (acursession varchar(38),
ajcolumnsourceid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ajcolumnsourceid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM jcolumnsource
    WHERE jcolumnsourceid = g2b(ajcolumnsourceid);
    IF aec > 0 THEN
      SET abrief = jcolumnsource_brief_f(g2b(ajcolumnsourceid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "jcolumnsource_client_trigger"
--
CREATE PROCEDURE jcolumnsource_client_trigger (acursession varchar(38),
aJColumnSourceid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "jcolumnsource_copy"
--
CREATE PROCEDURE jcolumnsource_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO jcolumnsource (jcolumnsourceid
    , parentstructrowid
    , srcpartview

    , viewfield)
      SELECT
        copymap(acopyaction, b2g(jcolumnsourceid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        srcpartview,
        viewfield

      FROM jcolumnsource
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "jcolumnsource_delete"
--
CREATE PROCEDURE jcolumnsource_delete (acursession varchar(38),
ajcolumnsourceid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM jcolumnsource
    WHERE jcolumnsourceid = g2b(ajcolumnsourceid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=jcolumnsource' result;
        LEAVE body;
      END IF;
      CALL jcolumnsource_logger(acursession, ajcolumnsourceid);
      DELETE
        FROM jcolumnsource
      WHERE jcolumnsourceid = g2b(ajcolumnsourceid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'jcolumnsource'
        AND ownerrowid = g2b(ajcolumnsourceid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "jcolumnsource_islocked"
--
CREATE PROCEDURE jcolumnsource_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM jcolumnsource
    WHERE jcolumnsourceid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "jcolumnsource_lock"
--
CREATE PROCEDURE jcolumnsource_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL jcolumnsource_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE jcolumnsource
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE jcolumnsourceid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE jcolumnsource
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE jcolumnsourceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "jcolumnsource_logger"
--
CREATE PROCEDURE jcolumnsource_logger (acursession varchar(38),
ajcolumnsourceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "jcolumnsource_parent"
--
CREATE PROCEDURE jcolumnsource_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM jcolumnsource
    WHERE jcolumnsourceid = arowid;
    SET aparenttable = 'journalcolumn';
  END
  $$

--
-- Создать процедуру "jcolumnsource_save"
--
CREATE PROCEDURE jcolumnsource_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
ajcolumnsourceid varchar(38)
, asrcpartview varchar(38)/* представление *//* представление */
, aviewfield
varchar(255)/* поле представления *//* поле представления */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM jcolumnsource
    WHERE jcolumnsourceid = g2b(ajcolumnsourceid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=jcolumnsource' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL jcolumnsource_logger(acursession, ajcolumnsourceid);
        UPDATE jcolumnsource
        SET changestamp = NOW(),
            srcpartview = g2b(asrcpartview),
            viewfield = aviewfield
        WHERE jcolumnsourceid = g2b(ajcolumnsourceid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM jcolumnsource
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND srcpartview = g2b(asrcpartview);
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=состав колонки' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL jcolumnsource_client_trigger(acursession, ajcolumnsourceid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=jcolumnsource' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO jcolumnsource (changestamp, jcolumnsourceid
          , parentstructrowid
          , srcpartview

          , viewfield)
            VALUES (NOW(), g2b(ajcolumnsourceid), g2b(aparentstructrowid), g2b(asrcpartview), aviewfield);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM jcolumnsource
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND srcpartview = g2b(asrcpartview);
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=состав колонки' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL jcolumnsource_client_trigger(acursession, ajcolumnsourceid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "jcolumnsource_unlock"
--
CREATE PROCEDURE jcolumnsource_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL jcolumnsource_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE jcolumnsource
      SET lockuserid = NULL
      WHERE jcolumnsourceid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE jcolumnsource
      SET locksessionid = NULL
      WHERE jcolumnsourceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journalcolumn_brief"
--
CREATE PROCEDURE journalcolumn_brief (acursession varchar(38),
ajournalcolumnid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ajournalcolumnid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM journalcolumn
    WHERE journalcolumnid = g2b(ajournalcolumnid);
    IF aec > 0 THEN
      SET abrief = journalcolumn_brief_f(g2b(ajournalcolumnid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "journalcolumn_client_trigger"
--
CREATE PROCEDURE journalcolumn_client_trigger (acursession varchar(38),
aJournalColumnid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "journalcolumn_copy"
--
CREATE PROCEDURE journalcolumn_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_journalcolumn CURSOR FOR
    SELECT
      journalcolumnid
    FROM journalcolumn
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO journalcolumn (journalcolumnid
    , instanceid
    , sequence

    , name

    , columnalignment

    , colsort

    , groupaggregation)
      SELECT
        copymap(acopyaction, b2g(journalcolumnid)),
        copymap(acopyaction, b2g(instanceid)),
        sequence,
        name,
        columnalignment,
        colsort,
        groupaggregation

      FROM journalcolumn
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_journalcolumn;
    SET fetch_done = FALSE;
    FETCH copy_cursor_journalcolumn INTO aid;
    WHILE NOT fetch_done DO
      CALL jcolumnsource_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_journalcolumn INTO aid;
    END WHILE;

    CLOSE copy_cursor_journalcolumn;
  END
  $$

--
-- Создать процедуру "journalcolumn_delete"
--
CREATE PROCEDURE journalcolumn_delete (acursession varchar(38),
ajournalcolumnid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM journalcolumn
    WHERE journalcolumnid = g2b(ajournalcolumnid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=journalcolumn' result;
        LEAVE body;
      END IF;
      CALL journalcolumn_logger(acursession, ajournalcolumnid);
      DELETE
        FROM journalcolumn
      WHERE journalcolumnid = g2b(ajournalcolumnid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'journalcolumn'
        AND ownerrowid = g2b(ajournalcolumnid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "journalcolumn_islocked"
--
CREATE PROCEDURE journalcolumn_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM journalcolumn
    WHERE journalcolumnid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "journalcolumn_lock"
--
CREATE PROCEDURE journalcolumn_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL journalcolumn_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE journalcolumn
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE journalcolumnid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE journalcolumn
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE journalcolumnid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journalcolumn_logger"
--
CREATE PROCEDURE journalcolumn_logger (acursession varchar(38),
ajournalcolumnid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journalcolumn_parent"
--
CREATE PROCEDURE journalcolumn_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM journalcolumn
    WHERE journalcolumnid = arowid;
  END
  $$

--
-- Создать процедуру "journalcolumn_save"
--
CREATE PROCEDURE journalcolumn_save (acursession varchar(38),
ainstanceid varchar(38),
ajournalcolumnid varchar(38)
, asequence
integer/* последовательность *//* последовательность */
, aname
varchar(255)/* название *//* название */
, acolumnalignment
integer/* выравнивание *//* выравнивание */
, acolsort
integer/* сортировка колонки *//* сортировка колонки */
, agroupaggregation
integer/* аггрегация при группировке *//* аггрегация при группировке */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM journalcolumn
    WHERE journalcolumnid = g2b(ajournalcolumnid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=journalcolumn' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL journalcolumn_logger(acursession, ajournalcolumnid);
        UPDATE journalcolumn
        SET changestamp = NOW(),
            sequence = asequence,
            name = aname,
            columnalignment = acolumnalignment,
            colsort = acolsort,
            groupaggregation = agroupaggregation
        WHERE journalcolumnid = g2b(ajournalcolumnid);


        CALL journalcolumn_client_trigger(acursession, ajournalcolumnid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=journalcolumn' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO journalcolumn (changestamp, journalcolumnid
          , instanceid
          , sequence

          , name

          , columnalignment

          , colsort

          , groupaggregation)
            VALUES (NOW(), g2b(ajournalcolumnid), g2b(ainstanceid), asequence, aname, acolumnalignment, acolsort, agroupaggregation);


          CALL journalcolumn_client_trigger(acursession, ajournalcolumnid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "journalcolumn_unlock"
--
CREATE PROCEDURE journalcolumn_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL journalcolumn_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE journalcolumn
      SET lockuserid = NULL
      WHERE journalcolumnid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE journalcolumn
      SET locksessionid = NULL
      WHERE journalcolumnid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journalsrc_brief"
--
CREATE PROCEDURE journalsrc_brief (acursession varchar(38),
ajournalsrcid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ajournalsrcid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM journalsrc
    WHERE journalsrcid = g2b(ajournalsrcid);
    IF aec > 0 THEN
      SET abrief = journalsrc_brief_f(g2b(ajournalsrcid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "journalsrc_client_trigger"
--
CREATE PROCEDURE journalsrc_client_trigger (acursession varchar(38),
aJournalSrcid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "journalsrc_copy"
--
CREATE PROCEDURE journalsrc_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO journalsrc (journalsrcid
    , instanceid
    , partview

    , onrun

    , openmode

    , viewalias)
      SELECT
        copymap(acopyaction, b2g(journalsrcid)),
        copymap(acopyaction, b2g(instanceid)),
        partview,
        onrun,
        openmode,
        viewalias

      FROM journalsrc
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "journalsrc_delete"
--
CREATE PROCEDURE journalsrc_delete (acursession varchar(38),
ajournalsrcid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM journalsrc
    WHERE journalsrcid = g2b(ajournalsrcid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=journalsrc' result;
        LEAVE body;
      END IF;
      CALL journalsrc_logger(acursession, ajournalsrcid);
      DELETE
        FROM journalsrc
      WHERE journalsrcid = g2b(ajournalsrcid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'journalsrc'
        AND ownerrowid = g2b(ajournalsrcid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "journalsrc_islocked"
--
CREATE PROCEDURE journalsrc_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM journalsrc
    WHERE journalsrcid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "journalsrc_lock"
--
CREATE PROCEDURE journalsrc_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL journalsrc_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE journalsrc
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE journalsrcid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE journalsrc
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE journalsrcid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journalsrc_logger"
--
CREATE PROCEDURE journalsrc_logger (acursession varchar(38),
ajournalsrcid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journalsrc_parent"
--
CREATE PROCEDURE journalsrc_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM journalsrc
    WHERE journalsrcid = arowid;
  END
  $$

--
-- Создать процедуру "journalsrc_save"
--
CREATE PROCEDURE journalsrc_save (acursession varchar(38),
ainstanceid varchar(38),
ajournalsrcid varchar(38)
, apartview binary(16)/* представление *//* представление */
, aonrun
integer/* при открытии *//* при открытии */
, aopenmode
varchar(64)/* режим открытия *//* режим открытия */
, aviewalias
varchar(255)/* псевдоним представления *//* псевдоним представления */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM journalsrc
    WHERE journalsrcid = g2b(ajournalsrcid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=journalsrc' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL journalsrc_logger(acursession, ajournalsrcid);
        UPDATE journalsrc
        SET changestamp = NOW(),
            partview = apartview,
            onrun = aonrun,
            openmode = aopenmode,
            viewalias = aviewalias
        WHERE journalsrcid = g2b(ajournalsrcid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM journalsrc
        WHERE instanceid = g2b(ainstanceid)
        AND partview = g2b(apartview);
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=источники журнала' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL journalsrc_client_trigger(acursession, ajournalsrcid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=journalsrc' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO journalsrc (changestamp, journalsrcid
          , instanceid
          , partview

          , onrun

          , openmode

          , viewalias)
            VALUES (NOW(), g2b(ajournalsrcid), g2b(ainstanceid), apartview, aonrun, aopenmode, aviewalias);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM journalsrc
          WHERE instanceid = g2b(ainstanceid)
          AND partview = g2b(apartview);
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=источники журнала' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL journalsrc_client_trigger(acursession, ajournalsrcid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "journalsrc_unlock"
--
CREATE PROCEDURE journalsrc_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL journalsrc_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE journalsrc
      SET lockuserid = NULL
      WHERE journalsrcid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE journalsrc
      SET locksessionid = NULL
      WHERE journalsrcid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journal_brief"
--
CREATE PROCEDURE journal_brief (acursession varchar(38),
ajournalid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ajournalid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM journal
    WHERE journalid = g2b(ajournalid);
    IF aec > 0 THEN
      SET abrief = journal_brief_f(g2b(ajournalid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "journal_client_trigger"
--
CREATE PROCEDURE journal_client_trigger (acursession varchar(38),
aJournalid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "journal_copy"
--
CREATE PROCEDURE journal_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO journal (journalid
    , instanceid
    , name

    , the_alias

    , thecomment

    , jrnliconcls

    , usefavorites)
      SELECT
        copymap(acopyaction, b2g(journalid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        the_alias,
        thecomment,
        jrnliconcls,
        usefavorites

      FROM journal
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "journal_delete"
--
CREATE PROCEDURE journal_delete (acursession varchar(38),
ajournalid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM journal
    WHERE journalid = g2b(ajournalid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=journal' result;
        LEAVE body;
      END IF;
      CALL journal_logger(acursession, ajournalid);
      DELETE
        FROM journal
      WHERE journalid = g2b(ajournalid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'journal'
        AND ownerrowid = g2b(ajournalid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "journal_islocked"
--
CREATE PROCEDURE journal_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM journal
    WHERE journalid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "journal_lock"
--
CREATE PROCEDURE journal_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL journal_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE journal
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE journalid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE journal
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE journalid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journal_logger"
--
CREATE PROCEDURE journal_logger (acursession varchar(38),
ajournalid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "journal_parent"
--
CREATE PROCEDURE journal_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM journal
    WHERE journalid = arowid;
  END
  $$

--
-- Создать процедуру "journal_save"
--
CREATE PROCEDURE journal_save (acursession varchar(38),
ainstanceid varchar(38),
ajournalid varchar(38)
, aname
varchar(255)/* название *//* название */
, athe_alias
varchar(32)/* псевдоним *//* псевдоним */
, athecomment
text/* описание *//* описание */
, ajrnliconcls
varchar(80)/* иконка журнала *//* иконка журнала */
, ausefavorites
integer/* массовое выделение *//* массовое выделение */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM journal
    WHERE journalid = g2b(ajournalid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=journal' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL journal_logger(acursession, ajournalid);
        UPDATE journal
        SET changestamp = NOW(),
            name = aname,
            the_alias = athe_alias,
            thecomment = athecomment,
            jrnliconcls = ajrnliconcls,
            usefavorites = ausefavorites
        WHERE journalid = g2b(ajournalid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM journal
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=журнал правило=(уникальность для журнал.название)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM journal
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=журнал' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM journal
        WHERE 1 = 1
        AND the_alias = athe_alias;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=журнал' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL journal_client_trigger(acursession, ajournalid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzjrnl.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=journal' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM journal
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <journal>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO journal (changestamp, journalid
          , instanceid
          , name

          , the_alias

          , thecomment

          , jrnliconcls

          , usefavorites)
            VALUES (NOW(), g2b(ajournalid), g2b(ainstanceid), aname, athe_alias, athecomment, ajrnliconcls, ausefavorites);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM journal
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=журнал правило=(уникальность для журнал.название)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM journal
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=журнал' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM journal
          WHERE 1 = 1
          AND the_alias = athe_alias;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=журнал' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL journal_client_trigger(acursession, ajournalid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "journal_unlock"
--
CREATE PROCEDURE journal_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL journal_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE journal
      SET lockuserid = NULL
      WHERE journalid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE journal
      SET locksessionid = NULL
      WHERE journalid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "localizeinfo_brief"
--
CREATE PROCEDURE localizeinfo_brief (acursession varchar(38),
alocalizeinfoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF alocalizeinfoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM localizeinfo
    WHERE localizeinfoid = g2b(alocalizeinfoid);
    IF aec > 0 THEN
      SET abrief = localizeinfo_brief_f(g2b(alocalizeinfoid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "localizeinfo_client_trigger"
--
CREATE PROCEDURE localizeinfo_client_trigger (acursession varchar(38),
aLocalizeInfoid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "localizeinfo_copy"
--
CREATE PROCEDURE localizeinfo_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO localizeinfo (localizeinfoid
    , instanceid
    , langfull

    , langshort)
      SELECT
        copymap(acopyaction, b2g(localizeinfoid)),
        copymap(acopyaction, b2g(instanceid)),
        langfull,
        langshort

      FROM localizeinfo
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "localizeinfo_delete"
--
CREATE PROCEDURE localizeinfo_delete (acursession varchar(38),
alocalizeinfoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM localizeinfo
    WHERE localizeinfoid = g2b(alocalizeinfoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=localizeinfo' result;
        LEAVE body;
      END IF;
      CALL localizeinfo_logger(acursession, alocalizeinfoid);
      DELETE
        FROM localizeinfo
      WHERE localizeinfoid = g2b(alocalizeinfoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'localizeinfo'
        AND ownerrowid = g2b(alocalizeinfoid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "localizeinfo_islocked"
--
CREATE PROCEDURE localizeinfo_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM localizeinfo
    WHERE localizeinfoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "localizeinfo_lock"
--
CREATE PROCEDURE localizeinfo_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL localizeinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE localizeinfo
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE localizeinfoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE localizeinfo
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE localizeinfoid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "localizeinfo_logger"
--
CREATE PROCEDURE localizeinfo_logger (acursession varchar(38),
alocalizeinfoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "localizeinfo_parent"
--
CREATE PROCEDURE localizeinfo_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM localizeinfo
    WHERE localizeinfoid = arowid;
  END
  $$

--
-- Создать процедуру "localizeinfo_save"
--
CREATE PROCEDURE localizeinfo_save (acursession varchar(38),
ainstanceid varchar(38),
alocalizeinfoid varchar(38)
, alangfull
varchar(255)/* язык - название *//* язык - название */
, alangshort
varchar(255)/* код языка *//* код языка */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM localizeinfo
    WHERE localizeinfoid = g2b(alocalizeinfoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=localizeinfo' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL localizeinfo_logger(acursession, alocalizeinfoid);
        UPDATE localizeinfo
        SET changestamp = NOW(),
            langfull = alangfull,
            langshort = alangshort
        WHERE localizeinfoid = g2b(alocalizeinfoid);


        CALL localizeinfo_client_trigger(acursession, alocalizeinfoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=localizeinfo' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO localizeinfo (changestamp, localizeinfoid
          , instanceid
          , langfull

          , langshort)
            VALUES (NOW(), g2b(alocalizeinfoid), g2b(ainstanceid), alangfull, alangshort);


          CALL localizeinfo_client_trigger(acursession, alocalizeinfoid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "localizeinfo_unlock"
--
CREATE PROCEDURE localizeinfo_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL localizeinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE localizeinfo
      SET lockuserid = NULL
      WHERE localizeinfoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE localizeinfo
      SET locksessionid = NULL
      WHERE localizeinfoid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "Login"
--
CREATE PROCEDURE Login (OUT aTHE_SESSION varchar(38)/* Идентификатор новой сессии */

, aPWD varchar(80)/* Пароль */

, aUSR varchar(64)/* Имя пользователя */

)
body:
  BEGIN
    DECLARE aID binary(16);
    DECLARE aUSERSID binary(16);
    DECLARE asysid binary(16);
    DECLARE existsCnt int;
    DECLARE aStatus varchar(38);

    SET asysid = NULL;

    SELECT
      instanceid INTO asysid
    FROM instance
    WHERE objtype = 'MTZSYSTEM';

    SET athe_session = NULL;
    SET aUSERSID = NULL;

    IF aPWD IS NULL THEN
      SET athe_session = NULL;

    ELSE

      SELECT
        USERSID INTO ausersid
      FROM users
      WHERE Login = ausr
      AND Password = MD5(aPWD);
      SET aID = G2B(UUID());
      IF NOT aUSERSID IS NULL THEN
        IF asysid IS NULL THEN
          INSERT INTO the_session (the_sessionid, lastaccess, usersid, closed, startAt, changestamp)
            VALUES (aid, sysdate, ausersid, 0, NOW(), NOW());
        ELSE
          INSERT INTO the_session (instanceid, the_sessionid, lastaccess, usersid, closed, startAt, changestamp)
            VALUES (asysid, aid, NOW(), ausersid, 0, NOW(), NOW());
        END IF;

        SET athe_session = b2g(aid);
      END IF;
    -- call build_usercache(b2g(aid));

    END IF;

  END
  $$

--
-- Создать процедуру "Logout"
--
CREATE PROCEDURE Logout (aCURSESSION varchar(38))
body:
  BEGIN
    DECLARE existsCnt integer;
    SELECT
      COUNT(*) INTO existsCnt
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF existsCnt > 0 THEN
      UPDATE INSTANCE
      SET LockSessionID = NULL
      WHERE LockSessionID = acursession;
      UPDATE the_session
      SET closed = 1,
          closedAt = NOW(),
          changeStamp = NOW()
      WHERE the_sessionid = g2b(acursession);
      DELETE
        FROM SysRefCache
      WHERE sessionid = g2b(acursession);
    END IF;
  END
  $$

--
-- Создать процедуру "methodrestriction_brief"
--
CREATE PROCEDURE methodrestriction_brief (acursession varchar(38),
amethodrestrictionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF amethodrestrictionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM methodrestriction
    WHERE methodrestrictionid = g2b(amethodrestrictionid);
    IF aec > 0 THEN
      SET abrief = methodrestriction_brief_f(g2b(amethodrestrictionid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "methodrestriction_client_trigger"
--
CREATE PROCEDURE methodrestriction_client_trigger (acursession varchar(38),
aMETHODRESTRICTIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "methodrestriction_copy"
--
CREATE PROCEDURE methodrestriction_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO methodrestriction (methodrestrictionid
    , parentstructrowid
    , part

    , method

    , isrestricted)
      SELECT
        copymap(acopyaction, b2g(methodrestrictionid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        part,
        method,
        isrestricted

      FROM methodrestriction
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "methodrestriction_delete"
--
CREATE PROCEDURE methodrestriction_delete (acursession varchar(38),
amethodrestrictionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM methodrestriction
    WHERE methodrestrictionid = g2b(amethodrestrictionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=methodrestriction' result;
        LEAVE body;
      END IF;
      CALL methodrestriction_logger(acursession, amethodrestrictionid);
      DELETE
        FROM methodrestriction
      WHERE methodrestrictionid = g2b(amethodrestrictionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'methodrestriction'
        AND ownerrowid = g2b(amethodrestrictionid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "methodrestriction_islocked"
--
CREATE PROCEDURE methodrestriction_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM methodrestriction
    WHERE methodrestrictionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "methodrestriction_lock"
--
CREATE PROCEDURE methodrestriction_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL methodrestriction_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE methodrestriction
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE methodrestrictionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE methodrestriction
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE methodrestrictionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "methodrestriction_logger"
--
CREATE PROCEDURE methodrestriction_logger (acursession varchar(38),
amethodrestrictionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "methodrestriction_parent"
--
CREATE PROCEDURE methodrestriction_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM methodrestriction
    WHERE methodrestrictionid = arowid;
    SET aparenttable = 'objectmode';
  END
  $$

--
-- Создать процедуру "methodrestriction_save"
--
CREATE PROCEDURE methodrestriction_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
amethodrestrictionid varchar(38)
, apart varchar(38)/* структура, которой принадлежит метод *//* структура, которой принадлежит метод */
, amethod varchar(38)/* метод *//* метод */
, aisrestricted
integer/* запрещено использовать *//* запрещено использовать */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM methodrestriction
    WHERE methodrestrictionid = g2b(amethodrestrictionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=methodrestriction' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL methodrestriction_logger(acursession, amethodrestrictionid);
        UPDATE methodrestriction
        SET changestamp = NOW(),
            part = g2b(apart),
            method = g2b(amethod),
            isrestricted = aisrestricted
        WHERE methodrestrictionid = g2b(amethodrestrictionid);


        CALL methodrestriction_client_trigger(acursession, amethodrestrictionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=methodrestriction' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO methodrestriction (changestamp, methodrestrictionid
          , parentstructrowid
          , part

          , method

          , isrestricted)
            VALUES (NOW(), g2b(amethodrestrictionid), g2b(aparentstructrowid), g2b(apart), g2b(amethod), aisrestricted);


          CALL methodrestriction_client_trigger(acursession, amethodrestrictionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "methodrestriction_unlock"
--
CREATE PROCEDURE methodrestriction_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL methodrestriction_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE methodrestriction
      SET lockuserid = NULL
      WHERE methodrestrictionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE methodrestriction
      SET locksessionid = NULL
      WHERE methodrestrictionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzapp_brief"
--
CREATE PROCEDURE mtzapp_brief (acursession varchar(38),
amtzappid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF amtzappid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM mtzapp
    WHERE mtzappid = g2b(amtzappid);
    IF aec > 0 THEN
      SET abrief = mtzapp_brief_f(g2b(amtzappid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "mtzapp_client_trigger"
--
CREATE PROCEDURE mtzapp_client_trigger (acursession varchar(38),
aMTZAPPid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "mtzapp_copy"
--
CREATE PROCEDURE mtzapp_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_mtzapp CURSOR FOR
    SELECT
      mtzappid
    FROM mtzapp
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO mtzapp (mtzappid
    , instanceid
    , name

    , dbname

    , thecomment)
      SELECT
        copymap(acopyaction, b2g(mtzappid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        dbname,
        thecomment

      FROM mtzapp
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_mtzapp;
    SET fetch_done = FALSE;
    FETCH copy_cursor_mtzapp INTO aid;
    WHILE NOT fetch_done DO
      CALL parentpackage_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_mtzapp INTO aid;
    END WHILE;

    CLOSE copy_cursor_mtzapp;
  END
  $$

--
-- Создать процедуру "mtzapp_delete"
--
CREATE PROCEDURE mtzapp_delete (acursession varchar(38),
amtzappid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM mtzapp
    WHERE mtzappid = g2b(amtzappid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=mtzapp' result;
        LEAVE body;
      END IF;
      CALL mtzapp_logger(acursession, amtzappid);
      DELETE
        FROM mtzapp
      WHERE mtzappid = g2b(amtzappid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'mtzapp'
        AND ownerrowid = g2b(amtzappid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzapp_islocked"
--
CREATE PROCEDURE mtzapp_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM mtzapp
    WHERE mtzappid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "mtzapp_lock"
--
CREATE PROCEDURE mtzapp_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL mtzapp_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE mtzapp
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE mtzappid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE mtzapp
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE mtzappid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzapp_logger"
--
CREATE PROCEDURE mtzapp_logger (acursession varchar(38),
amtzappid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzapp_parent"
--
CREATE PROCEDURE mtzapp_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM mtzapp
    WHERE mtzappid = arowid;
  END
  $$

--
-- Создать процедуру "mtzapp_save"
--
CREATE PROCEDURE mtzapp_save (acursession varchar(38),
ainstanceid varchar(38),
amtzappid varchar(38)
, aname
varchar(255)/* название *//* название */
, adbname
varchar(64)/* база данных *//* база данных */
, athecomment
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM mtzapp
    WHERE mtzappid = g2b(amtzappid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=mtzapp' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL mtzapp_logger(acursession, amtzappid);
        UPDATE mtzapp
        SET changestamp = NOW(),
            name = aname,
            dbname = adbname,
            thecomment = athecomment
        WHERE mtzappid = g2b(amtzappid);


        CALL mtzapp_client_trigger(acursession, amtzappid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=mtzapp' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO mtzapp (changestamp, mtzappid
          , instanceid
          , name

          , dbname

          , thecomment)
            VALUES (NOW(), g2b(amtzappid), g2b(ainstanceid), aname, adbname, athecomment);


          CALL mtzapp_client_trigger(acursession, amtzappid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "mtzapp_unlock"
--
CREATE PROCEDURE mtzapp_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL mtzapp_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE mtzapp
      SET lockuserid = NULL
      WHERE mtzappid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE mtzapp
      SET locksessionid = NULL
      WHERE mtzappid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzextrel_brief"
--
CREATE PROCEDURE mtzextrel_brief (acursession varchar(38),
amtzextrelid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF amtzextrelid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM mtzextrel
    WHERE mtzextrelid = g2b(amtzextrelid);
    IF aec > 0 THEN
      SET abrief = mtzextrel_brief_f(g2b(amtzextrelid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "mtzextrel_client_trigger"
--
CREATE PROCEDURE mtzextrel_client_trigger (acursession varchar(38),
aMTZExtRelid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "mtzextrel_copy"
--
CREATE PROCEDURE mtzextrel_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO mtzextrel (mtzextrelid
    , instanceid
    , theplatform

    , theclassname

    , thelibraryname)
      SELECT
        copymap(acopyaction, b2g(mtzextrelid)),
        copymap(acopyaction, b2g(instanceid)),
        theplatform,
        theclassname,
        thelibraryname

      FROM mtzextrel
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "mtzextrel_delete"
--
CREATE PROCEDURE mtzextrel_delete (acursession varchar(38),
amtzextrelid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM mtzextrel
    WHERE mtzextrelid = g2b(amtzextrelid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzext.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=mtzextrel' result;
        LEAVE body;
      END IF;
      CALL mtzextrel_logger(acursession, amtzextrelid);
      DELETE
        FROM mtzextrel
      WHERE mtzextrelid = g2b(amtzextrelid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'mtzextrel'
        AND ownerrowid = g2b(amtzextrelid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzextrel_islocked"
--
CREATE PROCEDURE mtzextrel_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM mtzextrel
    WHERE mtzextrelid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "mtzextrel_lock"
--
CREATE PROCEDURE mtzextrel_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL mtzextrel_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE mtzextrel
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE mtzextrelid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE mtzextrel
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE mtzextrelid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzextrel_logger"
--
CREATE PROCEDURE mtzextrel_logger (acursession varchar(38),
amtzextrelid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzextrel_parent"
--
CREATE PROCEDURE mtzextrel_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM mtzextrel
    WHERE mtzextrelid = arowid;
  END
  $$

--
-- Создать процедуру "mtzextrel_save"
--
CREATE PROCEDURE mtzextrel_save (acursession varchar(38),
ainstanceid varchar(38),
amtzextrelid varchar(38)
, atheplatform
integer/* реализация *//* реализация */
, atheclassname
varchar(255)/* название класса *//* название класса */
, athelibraryname
varchar(255)/* название библиотеки *//* название библиотеки */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM mtzextrel
    WHERE mtzextrelid = g2b(amtzextrelid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzext.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=mtzextrel' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL mtzextrel_logger(acursession, amtzextrelid);
        UPDATE mtzextrel
        SET changestamp = NOW(),
            theplatform = atheplatform,
            theclassname = atheclassname,
            thelibraryname = athelibraryname
        WHERE mtzextrelid = g2b(amtzextrelid);


        CALL mtzextrel_client_trigger(acursession, amtzextrelid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzext.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=mtzextrel' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO mtzextrel (changestamp, mtzextrelid
          , instanceid
          , theplatform

          , theclassname

          , thelibraryname)
            VALUES (NOW(), g2b(amtzextrelid), g2b(ainstanceid), atheplatform, atheclassname, athelibraryname);


          CALL mtzextrel_client_trigger(acursession, amtzextrelid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "mtzextrel_unlock"
--
CREATE PROCEDURE mtzextrel_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL mtzextrel_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE mtzextrel
      SET lockuserid = NULL
      WHERE mtzextrelid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE mtzextrel
      SET locksessionid = NULL
      WHERE mtzextrelid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzext_copy"
--
CREATE PROCEDURE mtzext_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL mtzext_def_copy(acursession, aaction, ainstanceid);
    CALL mtzextrel_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzext_def_brief"
--
CREATE PROCEDURE mtzext_def_brief (acursession varchar(38),
amtzext_defid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF amtzext_defid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM mtzext_def
    WHERE mtzext_defid = g2b(amtzext_defid);
    IF aec > 0 THEN
      SET abrief = mtzext_def_brief_f(g2b(amtzext_defid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "mtzext_def_client_trigger"
--
CREATE PROCEDURE mtzext_def_client_trigger (acursession varchar(38),
aMTZExt_defid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "mtzext_def_copy"
--
CREATE PROCEDURE mtzext_def_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO mtzext_def (mtzext_defid
    , instanceid
    , name

    , exttype

    , thedescription)
      SELECT
        copymap(acopyaction, b2g(mtzext_defid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        exttype,
        thedescription

      FROM mtzext_def
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "mtzext_def_delete"
--
CREATE PROCEDURE mtzext_def_delete (acursession varchar(38),
amtzext_defid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM mtzext_def
    WHERE mtzext_defid = g2b(amtzext_defid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzext.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=mtzext_def' result;
        LEAVE body;
      END IF;
      CALL mtzext_def_logger(acursession, amtzext_defid);
      DELETE
        FROM mtzext_def
      WHERE mtzext_defid = g2b(amtzext_defid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'mtzext_def'
        AND ownerrowid = g2b(amtzext_defid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzext_def_islocked"
--
CREATE PROCEDURE mtzext_def_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM mtzext_def
    WHERE mtzext_defid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "mtzext_def_lock"
--
CREATE PROCEDURE mtzext_def_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL mtzext_def_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE mtzext_def
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE mtzext_defid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE mtzext_def
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE mtzext_defid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzext_def_logger"
--
CREATE PROCEDURE mtzext_def_logger (acursession varchar(38),
amtzext_defid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzext_def_parent"
--
CREATE PROCEDURE mtzext_def_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM mtzext_def
    WHERE mtzext_defid = arowid;
  END
  $$

--
-- Создать процедуру "mtzext_def_save"
--
CREATE PROCEDURE mtzext_def_save (acursession varchar(38),
ainstanceid varchar(38),
amtzext_defid varchar(38)
, aname
varchar(255)/* название *//* название */
, aexttype
integer/* тип расширения *//* тип расширения */
, athedescription
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM mtzext_def
    WHERE mtzext_defid = g2b(amtzext_defid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzext.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=mtzext_def' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL mtzext_def_logger(acursession, amtzext_defid);
        UPDATE mtzext_def
        SET changestamp = NOW(),
            name = aname,
            exttype = aexttype,
            thedescription = athedescription
        WHERE mtzext_defid = g2b(amtzext_defid);


        CALL mtzext_def_client_trigger(acursession, amtzext_defid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzext.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=mtzext_def' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM mtzext_def
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <mtzext_def>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO mtzext_def (changestamp, mtzext_defid
          , instanceid
          , name

          , exttype

          , thedescription)
            VALUES (NOW(), g2b(amtzext_defid), g2b(ainstanceid), aname, aexttype, athedescription);


          CALL mtzext_def_client_trigger(acursession, amtzext_defid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "mtzext_def_unlock"
--
CREATE PROCEDURE mtzext_def_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL mtzext_def_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE mtzext_def
      SET lockuserid = NULL
      WHERE mtzext_defid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE mtzext_def
      SET locksessionid = NULL
      WHERE mtzext_defid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "mtzfltr_copy"
--
CREATE PROCEDURE mtzfltr_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL filterfieldgroup_copy(acursession, aaction, ainstanceid);
    CALL filters_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzjrnl_copy"
--
CREATE PROCEDURE mtzjrnl_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL journalcolumn_copy(acursession, aaction, ainstanceid);
    CALL journalsrc_copy(acursession, aaction, ainstanceid);
    CALL journal_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzmetamodel_copy"
--
CREATE PROCEDURE mtzmetamodel_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL genpackage_copy(acursession, aaction, ainstanceid);
    CALL localizeinfo_copy(acursession, aaction, ainstanceid);
    CALL fieldtype_copy(acursession, aaction, ainstanceid);
    CALL sharedmethod_copy(acursession, aaction, ainstanceid);
    CALL objecttype_copy(acursession, aaction, ainstanceid);
    CALL mtzapp_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzrprt_copy"
--
CREATE PROCEDURE mtzrprt_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL rptstruct_copy(acursession, aaction, ainstanceid);
    CALL rptformula_copy(acursession, aaction, ainstanceid);
    CALL reports_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzsystem_copy"
--
CREATE PROCEDURE mtzsystem_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL the_session_copy(acursession, aaction, ainstanceid);
    CALL sysrefcache_copy(acursession, aaction, ainstanceid);
    CALL syslog_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzusers_copy"
--
CREATE PROCEDURE mtzusers_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL users_copy(acursession, aaction, ainstanceid);
    CALL groups_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "mtzwp_copy"
--
CREATE PROCEDURE mtzwp_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL armjournal_copy(acursession, aaction, ainstanceid);
    CALL entrypoints_copy(acursession, aaction, ainstanceid);
    CALL workplace_copy(acursession, aaction, ainstanceid);
    CALL armtypes_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "nextstate_brief"
--
CREATE PROCEDURE nextstate_brief (acursession varchar(38),
anextstateid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF anextstateid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM nextstate
    WHERE nextstateid = g2b(anextstateid);
    IF aec > 0 THEN
      SET abrief = nextstate_brief_f(g2b(anextstateid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "nextstate_client_trigger"
--
CREATE PROCEDURE nextstate_client_trigger (acursession varchar(38),
aNEXTSTATEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "nextstate_copy"
--
CREATE PROCEDURE nextstate_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO nextstate (nextstateid
    , parentstructrowid
    , thestate)
      SELECT
        copymap(acopyaction, b2g(nextstateid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        thestate

      FROM nextstate
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "nextstate_delete"
--
CREATE PROCEDURE nextstate_delete (acursession varchar(38),
anextstateid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM nextstate
    WHERE nextstateid = g2b(anextstateid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=nextstate' result;
        LEAVE body;
      END IF;
      CALL nextstate_logger(acursession, anextstateid);
      DELETE
        FROM nextstate
      WHERE nextstateid = g2b(anextstateid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'nextstate'
        AND ownerrowid = g2b(anextstateid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "nextstate_islocked"
--
CREATE PROCEDURE nextstate_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM nextstate
    WHERE nextstateid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "nextstate_lock"
--
CREATE PROCEDURE nextstate_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL nextstate_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE nextstate
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE nextstateid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE nextstate
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE nextstateid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "nextstate_logger"
--
CREATE PROCEDURE nextstate_logger (acursession varchar(38),
anextstateid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "nextstate_parent"
--
CREATE PROCEDURE nextstate_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM nextstate
    WHERE nextstateid = arowid;
    SET aparenttable = 'objstatus';
  END
  $$

--
-- Создать процедуру "nextstate_save"
--
CREATE PROCEDURE nextstate_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
anextstateid varchar(38)
, athestate varchar(38)/* разрешенное состояние *//* разрешенное состояние */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM nextstate
    WHERE nextstateid = g2b(anextstateid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=nextstate' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL nextstate_logger(acursession, anextstateid);
        UPDATE nextstate
        SET changestamp = NOW(),
            thestate = g2b(athestate)
        WHERE nextstateid = g2b(anextstateid);


        CALL nextstate_client_trigger(acursession, anextstateid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=nextstate' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO nextstate (changestamp, nextstateid
          , parentstructrowid
          , thestate)
            VALUES (NOW(), g2b(anextstateid), g2b(aparentstructrowid), g2b(athestate));


          CALL nextstate_client_trigger(acursession, anextstateid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "nextstate_unlock"
--
CREATE PROCEDURE nextstate_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL nextstate_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE nextstate
      SET lockuserid = NULL
      WHERE nextstateid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE nextstate
      SET locksessionid = NULL
      WHERE nextstateid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_head_brief"
--
CREATE PROCEDURE num_head_brief (acursession varchar(38),
anum_headid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF anum_headid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM num_head
    WHERE num_headid = g2b(anum_headid);
    IF aec > 0 THEN
      SET abrief = num_head_brief_f(g2b(anum_headid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "num_head_client_trigger"
--
CREATE PROCEDURE num_head_client_trigger (acursession varchar(38),
aNum_headid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "num_head_copy"
--
CREATE PROCEDURE num_head_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO num_head (num_headid
    , instanceid
    , name

    , shema)
      SELECT
        copymap(acopyaction, b2g(num_headid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        shema

      FROM num_head
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "num_head_delete"
--
CREATE PROCEDURE num_head_delete (acursession varchar(38),
anum_headid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM num_head
    WHERE num_headid = g2b(anum_headid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=num_head' result;
        LEAVE body;
      END IF;
      CALL num_head_logger(acursession, anum_headid);
      DELETE
        FROM num_head
      WHERE num_headid = g2b(anum_headid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'num_head'
        AND ownerrowid = g2b(anum_headid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "num_head_islocked"
--
CREATE PROCEDURE num_head_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM num_head
    WHERE num_headid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "num_head_lock"
--
CREATE PROCEDURE num_head_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL num_head_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE num_head
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE num_headid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE num_head
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE num_headid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_head_logger"
--
CREATE PROCEDURE num_head_logger (acursession varchar(38),
anum_headid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_head_parent"
--
CREATE PROCEDURE num_head_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM num_head
    WHERE num_headid = arowid;
  END
  $$

--
-- Создать процедуру "num_head_save"
--
CREATE PROCEDURE num_head_save (acursession varchar(38),
ainstanceid varchar(38),
anum_headid varchar(38)
, aname
varchar(80)/* название *//* название */
, ashema
integer/* схема нумерации *//* схема нумерации */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM num_head
    WHERE num_headid = g2b(anum_headid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=num_head' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL num_head_logger(acursession, anum_headid);
        UPDATE num_head
        SET changestamp = NOW(),
            name = aname,
            shema = ashema
        WHERE num_headid = g2b(anum_headid);


        CALL num_head_client_trigger(acursession, anum_headid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=num_head' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM num_head
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <num_head>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO num_head (changestamp, num_headid
          , instanceid
          , name

          , shema)
            VALUES (NOW(), g2b(anum_headid), g2b(ainstanceid), aname, ashema);


          CALL num_head_client_trigger(acursession, anum_headid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "num_head_unlock"
--
CREATE PROCEDURE num_head_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL num_head_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE num_head
      SET lockuserid = NULL
      WHERE num_headid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE num_head
      SET locksessionid = NULL
      WHERE num_headid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_values_brief"
--
CREATE PROCEDURE num_values_brief (acursession varchar(38),
anum_valuesid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF anum_valuesid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM num_values
    WHERE num_valuesid = g2b(anum_valuesid);
    IF aec > 0 THEN
      SET abrief = num_values_brief_f(g2b(anum_valuesid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "num_values_client_trigger"
--
CREATE PROCEDURE num_values_client_trigger (acursession varchar(38),
aNum_Valuesid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "num_values_copy"
--
CREATE PROCEDURE num_values_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO num_values (num_valuesid
    , parentstructrowid
    , the_value

    , ownerpartname

    , ownerrowid)
      SELECT
        copymap(acopyaction, b2g(num_valuesid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        the_value,
        ownerpartname,
        ownerrowid

      FROM num_values
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "num_values_delete"
--
CREATE PROCEDURE num_values_delete (acursession varchar(38),
anum_valuesid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM num_values
    WHERE num_valuesid = g2b(anum_valuesid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=num_values' result;
        LEAVE body;
      END IF;
      CALL num_values_logger(acursession, anum_valuesid);
      DELETE
        FROM num_values
      WHERE num_valuesid = g2b(anum_valuesid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'num_values'
        AND ownerrowid = g2b(anum_valuesid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "num_values_islocked"
--
CREATE PROCEDURE num_values_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM num_values
    WHERE num_valuesid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "num_values_lock"
--
CREATE PROCEDURE num_values_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL num_values_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE num_values
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE num_valuesid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE num_values
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE num_valuesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_values_logger"
--
CREATE PROCEDURE num_values_logger (acursession varchar(38),
anum_valuesid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_values_parent"
--
CREATE PROCEDURE num_values_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM num_values
    WHERE num_valuesid = arowid;
    SET aparenttable = 'num_zones';
  END
  $$

--
-- Создать процедуру "num_values_save"
--
CREATE PROCEDURE num_values_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
anum_valuesid varchar(38)
, athe_value
integer/* значение *//* значение */
, aownerpartname
varchar(64)/* раздел *//* раздел */
, aownerrowid binary(16)/* идентификатор строки *//* идентификатор строки */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM num_values
    WHERE num_valuesid = g2b(anum_valuesid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=num_values' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL num_values_logger(acursession, anum_valuesid);
        UPDATE num_values
        SET changestamp = NOW(),
            the_value = athe_value,
            ownerpartname = aownerpartname,
            ownerrowid = aownerrowid
        WHERE num_valuesid = g2b(anum_valuesid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM num_values
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND the_value = athe_value;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=номера' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL num_values_client_trigger(acursession, anum_valuesid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=num_values' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO num_values (changestamp, num_valuesid
          , parentstructrowid
          , the_value

          , ownerpartname

          , ownerrowid)
            VALUES (NOW(), g2b(anum_valuesid), g2b(aparentstructrowid), athe_value, aownerpartname, aownerrowid);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM num_values
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND the_value = athe_value;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=номера' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL num_values_client_trigger(acursession, anum_valuesid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "num_values_unlock"
--
CREATE PROCEDURE num_values_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL num_values_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE num_values
      SET lockuserid = NULL
      WHERE num_valuesid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE num_values
      SET locksessionid = NULL
      WHERE num_valuesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_zones_brief"
--
CREATE PROCEDURE num_zones_brief (acursession varchar(38),
anum_zonesid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF anum_zonesid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM num_zones
    WHERE num_zonesid = g2b(anum_zonesid);
    IF aec > 0 THEN
      SET abrief = num_zones_brief_f(g2b(anum_zonesid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "num_zones_client_trigger"
--
CREATE PROCEDURE num_zones_client_trigger (acursession varchar(38),
aNum_zonesid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "num_zones_copy"
--
CREATE PROCEDURE num_zones_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_num_zones CURSOR FOR
    SELECT
      num_zonesid
    FROM num_zones
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO num_zones (num_zonesid
    , instanceid
    , zonemask)
      SELECT
        copymap(acopyaction, b2g(num_zonesid)),
        copymap(acopyaction, b2g(instanceid)),
        zonemask

      FROM num_zones
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_num_zones;
    SET fetch_done = FALSE;
    FETCH copy_cursor_num_zones INTO aid;
    WHILE NOT fetch_done DO
      CALL num_values_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_num_zones INTO aid;
    END WHILE;

    CLOSE copy_cursor_num_zones;
  END
  $$

--
-- Создать процедуру "num_zones_delete"
--
CREATE PROCEDURE num_zones_delete (acursession varchar(38),
anum_zonesid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM num_zones
    WHERE num_zonesid = g2b(anum_zonesid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=num_zones' result;
        LEAVE body;
      END IF;
      CALL num_zones_logger(acursession, anum_zonesid);
      DELETE
        FROM num_zones
      WHERE num_zonesid = g2b(anum_zonesid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'num_zones'
        AND ownerrowid = g2b(anum_zonesid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "num_zones_islocked"
--
CREATE PROCEDURE num_zones_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM num_zones
    WHERE num_zonesid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "num_zones_lock"
--
CREATE PROCEDURE num_zones_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL num_zones_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE num_zones
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE num_zonesid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE num_zones
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE num_zonesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_zones_logger"
--
CREATE PROCEDURE num_zones_logger (acursession varchar(38),
anum_zonesid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "num_zones_parent"
--
CREATE PROCEDURE num_zones_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM num_zones
    WHERE num_zonesid = arowid;
  END
  $$

--
-- Создать процедуру "num_zones_save"
--
CREATE PROCEDURE num_zones_save (acursession varchar(38),
ainstanceid varchar(38),
anum_zonesid varchar(38)
, azonemask
varchar(255)/* маска зоны *//* маска зоны */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM num_zones
    WHERE num_zonesid = g2b(anum_zonesid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=num_zones' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL num_zones_logger(acursession, anum_zonesid);
        UPDATE num_zones
        SET changestamp = NOW(),
            zonemask = azonemask
        WHERE num_zonesid = g2b(anum_zonesid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM num_zones
        WHERE instanceid = g2b(ainstanceid)
        AND zonemask = azonemask;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=зоны' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL num_zones_client_trigger(acursession, anum_zonesid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'stdnumerator.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=num_zones' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO num_zones (changestamp, num_zonesid
          , instanceid
          , zonemask)
            VALUES (NOW(), g2b(anum_zonesid), g2b(ainstanceid), azonemask);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM num_zones
          WHERE instanceid = g2b(ainstanceid)
          AND zonemask = azonemask;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=зоны' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL num_zones_client_trigger(acursession, anum_zonesid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "num_zones_unlock"
--
CREATE PROCEDURE num_zones_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL num_zones_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE num_zones
      SET lockuserid = NULL
      WHERE num_zonesid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE num_zones
      SET locksessionid = NULL
      WHERE num_zonesid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objectmode_brief"
--
CREATE PROCEDURE objectmode_brief (acursession varchar(38),
aobjectmodeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aobjectmodeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM objectmode
    WHERE objectmodeid = g2b(aobjectmodeid);
    IF aec > 0 THEN
      SET abrief = objectmode_brief_f(g2b(aobjectmodeid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "objectmode_client_trigger"
--
CREATE PROCEDURE objectmode_client_trigger (acursession varchar(38),
aOBJECTMODEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "objectmode_copy"
--
CREATE PROCEDURE objectmode_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_objectmode CURSOR FOR
    SELECT
      objectmodeid
    FROM objectmode
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO objectmode (objectmodeid
    , parentstructrowid
    , name

    , defaultmode

    , thecomment)
      SELECT
        copymap(acopyaction, b2g(objectmodeid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        defaultmode,
        thecomment

      FROM objectmode
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_objectmode;
    SET fetch_done = FALSE;
    FETCH copy_cursor_objectmode INTO aid;
    WHILE NOT fetch_done DO
      CALL structrestriction_copy(acursession, acopyaction, ainstanceid, aid);
      CALL methodrestriction_copy(acursession, acopyaction, ainstanceid, aid);
      CALL fieldrestriction_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_objectmode INTO aid;
    END WHILE;

    CLOSE copy_cursor_objectmode;
  END
  $$

--
-- Создать процедуру "objectmode_delete"
--
CREATE PROCEDURE objectmode_delete (acursession varchar(38),
aobjectmodeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM objectmode
    WHERE objectmodeid = g2b(aobjectmodeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=objectmode' result;
        LEAVE body;
      END IF;
      CALL objectmode_logger(acursession, aobjectmodeid);
      DELETE
        FROM objectmode
      WHERE objectmodeid = g2b(aobjectmodeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'objectmode'
        AND ownerrowid = g2b(aobjectmodeid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "objectmode_islocked"
--
CREATE PROCEDURE objectmode_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM objectmode
    WHERE objectmodeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "objectmode_lock"
--
CREATE PROCEDURE objectmode_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL objectmode_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE objectmode
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE objectmodeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE objectmode
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE objectmodeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objectmode_logger"
--
CREATE PROCEDURE objectmode_logger (acursession varchar(38),
aobjectmodeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objectmode_parent"
--
CREATE PROCEDURE objectmode_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM objectmode
    WHERE objectmodeid = arowid;
    SET aparenttable = 'objecttype';
  END
  $$

--
-- Создать процедуру "objectmode_save"
--
CREATE PROCEDURE objectmode_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aobjectmodeid varchar(38)
, aname
varchar(5)/* название режима *//* название режима */
, adefaultmode
integer/* этот режим является основным режимом работы объекта *//* этот режим является основным режимом работы объекта */
, athecomment
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM objectmode
    WHERE objectmodeid = g2b(aobjectmodeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=objectmode' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL objectmode_logger(acursession, aobjectmodeid);
        UPDATE objectmode
        SET changestamp = NOW(),
            name = aname,
            defaultmode = adefaultmode,
            thecomment = athecomment
        WHERE objectmodeid = g2b(aobjectmodeid);


        CALL objectmode_client_trigger(acursession, aobjectmodeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=objectmode' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO objectmode (changestamp, objectmodeid
          , parentstructrowid
          , name

          , defaultmode

          , thecomment)
            VALUES (NOW(), g2b(aobjectmodeid), g2b(aparentstructrowid), aname, adefaultmode, athecomment);


          CALL objectmode_client_trigger(acursession, aobjectmodeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "objectmode_unlock"
--
CREATE PROCEDURE objectmode_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL objectmode_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE objectmode
      SET lockuserid = NULL
      WHERE objectmodeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE objectmode
      SET locksessionid = NULL
      WHERE objectmodeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objecttype_brief"
--
CREATE PROCEDURE objecttype_brief (acursession varchar(38),
aobjecttypeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aobjecttypeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM objecttype
    WHERE objecttypeid = g2b(aobjecttypeid);
    IF aec > 0 THEN
      SET abrief = objecttype_brief_f(g2b(aobjecttypeid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "objecttype_client_trigger"
--
CREATE PROCEDURE objecttype_client_trigger (acursession varchar(38),
aOBJECTTYPEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "objecttype_copy"
--
CREATE PROCEDURE objecttype_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_objecttype CURSOR FOR
    SELECT
      objecttypeid
    FROM objecttype
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO objecttype (objecttypeid
    , instanceid
    , package

    , the_comment

    , name

    , issingleinstance

    , chooseview

    , onrun

    , oncreate

    , ondelete

    , allowreftoobject

    , allowsearch

    , replicatype

    , thecomment

    , useownership

    , usearchiving

    , commitfullobject

    , objiconcls)
      SELECT
        copymap(acopyaction, b2g(objecttypeid)),
        copymap(acopyaction, b2g(instanceid)),
        package,
        the_comment,
        name,
        issingleinstance,
        chooseview,
        onrun,
        oncreate,
        ondelete,
        allowreftoobject,
        allowsearch,
        replicatype,
        thecomment,
        useownership,
        usearchiving,
        commitfullobject,
        objiconcls

      FROM objecttype
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_objecttype;
    SET fetch_done = FALSE;
    FETCH copy_cursor_objecttype INTO aid;
    WHILE NOT fetch_done DO
      CALL objstatus_copy(acursession, acopyaction, ainstanceid, aid);
      CALL objectmode_copy(acursession, acopyaction, ainstanceid, aid);
      CALL typemenu_copy(acursession, acopyaction, ainstanceid, aid);
      CALL instancevalidator_copy(acursession, acopyaction, ainstanceid, aid);
      CALL part_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_objecttype INTO aid;
    END WHILE;

    CLOSE copy_cursor_objecttype;
  END
  $$

--
-- Создать процедуру "objecttype_delete"
--
CREATE PROCEDURE objecttype_delete (acursession varchar(38),
aobjecttypeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM objecttype
    WHERE objecttypeid = g2b(aobjecttypeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=objecttype' result;
        LEAVE body;
      END IF;
      CALL objecttype_logger(acursession, aobjecttypeid);
      DELETE
        FROM objecttype
      WHERE objecttypeid = g2b(aobjecttypeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'objecttype'
        AND ownerrowid = g2b(aobjecttypeid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "objecttype_islocked"
--
CREATE PROCEDURE objecttype_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM objecttype
    WHERE objecttypeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "objecttype_lock"
--
CREATE PROCEDURE objecttype_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL objecttype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE objecttype
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE objecttypeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE objecttype
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE objecttypeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objecttype_logger"
--
CREATE PROCEDURE objecttype_logger (acursession varchar(38),
aobjecttypeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objecttype_parent"
--
CREATE PROCEDURE objecttype_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM objecttype
    WHERE objecttypeid = arowid;
  END
  $$

--
-- Создать процедуру "objecttype_save"
--
CREATE PROCEDURE objecttype_save (acursession varchar(38),
ainstanceid varchar(38),
aobjecttypeid varchar(38)
, apackage varchar(38)/* приложение *//* приложение */
, athe_comment
varchar(255)/* название *//* название */
, aname
varchar(14)/* код *//* код */
, aissingleinstance
integer/* допускается только один объект *//* допускается только один объект */
, achooseview varchar(38)/* представление для выбора *//* представление для выбора */
, aonrun varchar(38)/* при запуске *//* при запуске */
, aoncreate varchar(38)/* при создании *//* при создании */
, aondelete varchar(38)/* при удалении *//* при удалении */
, aallowreftoobject
integer/* отображать при выборе ссылки *//* отображать при выборе ссылки */
, aallowsearch
integer/* отображать при поиске *//* отображать при поиске */
, areplicatype
integer/* тип репликации *//* тип репликации */
, athecomment
text/* описание *//* описание */
, auseownership
integer/* видмость зависит от пользователя *//* видмость зависит от пользователя */
, ausearchiving
integer/* архивировать вместо удаления *//* архивировать вместо удаления */
, acommitfullobject
integer/* сохранять объект целиком *//* сохранять объект целиком */
, aobjiconcls
varchar(80)/* иконка объекта *//* иконка объекта */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM objecttype
    WHERE objecttypeid = g2b(aobjecttypeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=objecttype' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL objecttype_logger(acursession, aobjecttypeid);
        UPDATE objecttype
        SET changestamp = NOW(),
            package = g2b(apackage),
            the_comment = athe_comment,
            name = aname,
            issingleinstance = aissingleinstance,
            chooseview = g2b(achooseview),
            onrun = g2b(aonrun),
            oncreate = g2b(aoncreate),
            ondelete = g2b(aondelete),
            allowreftoobject = aallowreftoobject,
            allowsearch = aallowsearch,
            replicatype = areplicatype,
            thecomment = athecomment,
            useownership = auseownership,
            usearchiving = ausearchiving,
            commitfullobject = acommitfullobject,
            objiconcls = aobjiconcls
        WHERE objecttypeid = g2b(aobjecttypeid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM objecttype
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=тип объекта' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL objecttype_client_trigger(acursession, aobjecttypeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=objecttype' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO objecttype (changestamp, objecttypeid
          , instanceid
          , package

          , the_comment

          , name

          , issingleinstance

          , chooseview

          , onrun

          , oncreate

          , ondelete

          , allowreftoobject

          , allowsearch

          , replicatype

          , thecomment

          , useownership

          , usearchiving

          , commitfullobject

          , objiconcls)
            VALUES (NOW(), g2b(aobjecttypeid), g2b(ainstanceid), g2b(apackage), athe_comment, aname, aissingleinstance, g2b(achooseview), g2b(aonrun), g2b(aoncreate), g2b(aondelete), aallowreftoobject, aallowsearch, areplicatype, athecomment, auseownership, ausearchiving, acommitfullobject, aobjiconcls);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM objecttype
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=тип объекта' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL objecttype_client_trigger(acursession, aobjecttypeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "objecttype_unlock"
--
CREATE PROCEDURE objecttype_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL objecttype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE objecttype
      SET lockuserid = NULL
      WHERE objecttypeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE objecttype
      SET locksessionid = NULL
      WHERE objecttypeid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objstatus_brief"
--
CREATE PROCEDURE objstatus_brief (acursession varchar(38),
aobjstatusid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aobjstatusid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM objstatus
    WHERE objstatusid = g2b(aobjstatusid);
    IF aec > 0 THEN
      SET abrief = objstatus_brief_f(g2b(aobjstatusid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "objstatus_client_trigger"
--
CREATE PROCEDURE objstatus_client_trigger (acursession varchar(38),
aOBJSTATUSid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "objstatus_copy"
--
CREATE PROCEDURE objstatus_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_objstatus CURSOR FOR
    SELECT
      objstatusid
    FROM objstatus
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO objstatus (objstatusid
    , parentstructrowid
    , name

    , isstartup

    , isarchive

    , the_comment)
      SELECT
        copymap(acopyaction, b2g(objstatusid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        isstartup,
        isarchive,
        the_comment

      FROM objstatus
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_objstatus;
    SET fetch_done = FALSE;
    FETCH copy_cursor_objstatus INTO aid;
    WHILE NOT fetch_done DO
      CALL nextstate_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_objstatus INTO aid;
    END WHILE;

    CLOSE copy_cursor_objstatus;
  END
  $$

--
-- Создать процедуру "objstatus_delete"
--
CREATE PROCEDURE objstatus_delete (acursession varchar(38),
aobjstatusid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM objstatus
    WHERE objstatusid = g2b(aobjstatusid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=objstatus' result;
        LEAVE body;
      END IF;
      CALL objstatus_logger(acursession, aobjstatusid);
      DELETE
        FROM objstatus
      WHERE objstatusid = g2b(aobjstatusid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'objstatus'
        AND ownerrowid = g2b(aobjstatusid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "objstatus_islocked"
--
CREATE PROCEDURE objstatus_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM objstatus
    WHERE objstatusid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "objstatus_lock"
--
CREATE PROCEDURE objstatus_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL objstatus_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE objstatus
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE objstatusid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE objstatus
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE objstatusid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objstatus_logger"
--
CREATE PROCEDURE objstatus_logger (acursession varchar(38),
aobjstatusid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "objstatus_parent"
--
CREATE PROCEDURE objstatus_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM objstatus
    WHERE objstatusid = arowid;
    SET aparenttable = 'objecttype';
  END
  $$

--
-- Создать процедуру "objstatus_save"
--
CREATE PROCEDURE objstatus_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aobjstatusid varchar(38)
, aname
varchar(80)/* название *//* название */
, aisstartup
integer/* начальное *//* начальное */
, aisarchive
integer/* архивное *//* архивное */
, athe_comment
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM objstatus
    WHERE objstatusid = g2b(aobjstatusid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=objstatus' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL objstatus_logger(acursession, aobjstatusid);
        UPDATE objstatus
        SET changestamp = NOW(),
            name = aname,
            isstartup = aisstartup,
            isarchive = aisarchive,
            the_comment = athe_comment
        WHERE objstatusid = g2b(aobjstatusid);


        CALL objstatus_client_trigger(acursession, aobjstatusid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=objstatus' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO objstatus (changestamp, objstatusid
          , parentstructrowid
          , name

          , isstartup

          , isarchive

          , the_comment)
            VALUES (NOW(), g2b(aobjstatusid), g2b(aparentstructrowid), aname, aisstartup, aisarchive, athe_comment);


          CALL objstatus_client_trigger(acursession, aobjstatusid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "objstatus_unlock"
--
CREATE PROCEDURE objstatus_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL objstatus_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE objstatus
      SET lockuserid = NULL
      WHERE objstatusid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE objstatus
      SET locksessionid = NULL
      WHERE objstatusid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "parameters_brief"
--
CREATE PROCEDURE parameters_brief (acursession varchar(38),
aparametersid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aparametersid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM parameters
    WHERE parametersid = g2b(aparametersid);
    IF aec > 0 THEN
      SET abrief = parameters_brief_f(g2b(aparametersid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "parameters_client_trigger"
--
CREATE PROCEDURE parameters_client_trigger (acursession varchar(38),
aPARAMETERSid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "parameters_copy"
--
CREATE PROCEDURE parameters_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO parameters (parametersid
    , parentstructrowid
    , sequence

    , name

    , caption

    , typeofparm

    , datasize

    , allownull

    , outparam

    , referencetype

    , reftotype

    , reftopart)
      SELECT
        copymap(acopyaction, b2g(parametersid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        sequence,
        name,
        caption,
        typeofparm,
        datasize,
        allownull,
        outparam,
        referencetype,
        reftotype,
        reftopart

      FROM parameters
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "parameters_delete"
--
CREATE PROCEDURE parameters_delete (acursession varchar(38),
aparametersid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM parameters
    WHERE parametersid = g2b(aparametersid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=parameters' result;
        LEAVE body;
      END IF;
      CALL parameters_logger(acursession, aparametersid);
      DELETE
        FROM parameters
      WHERE parametersid = g2b(aparametersid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'parameters'
        AND ownerrowid = g2b(aparametersid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "parameters_islocked"
--
CREATE PROCEDURE parameters_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM parameters
    WHERE parametersid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "parameters_lock"
--
CREATE PROCEDURE parameters_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL parameters_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE parameters
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE parametersid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE parameters
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE parametersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "parameters_logger"
--
CREATE PROCEDURE parameters_logger (acursession varchar(38),
aparametersid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "parameters_parent"
--
CREATE PROCEDURE parameters_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM parameters
    WHERE parametersid = arowid;
    SET aparenttable = 'script';
  END
  $$

--
-- Создать процедуру "parameters_save"
--
CREATE PROCEDURE parameters_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aparametersid varchar(38)
, asequence
integer/* последовательность *//* последовательность */
, aname
varchar(80)/* имя *//* имя */
, acaption
varchar(80)/* заголовок *//* заголовок */
, atypeofparm varchar(38)/* тип данных *//* тип данных */
, adatasize
integer/* размер *//* размер */
, aallownull
integer/* можно не задавать *//* можно не задавать */
, aoutparam
integer/* возвращает значение *//* возвращает значение */
, areferencetype
integer/* тип ссылки *//* тип ссылки */
, areftotype varchar(38)/* ссылка на тип *//* ссылка на тип */
, areftopart varchar(38)/* ссылка на раздел *//* ссылка на раздел */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM parameters
    WHERE parametersid = g2b(aparametersid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=parameters' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL parameters_logger(acursession, aparametersid);
        UPDATE parameters
        SET changestamp = NOW(),
            sequence = asequence,
            name = aname,
            caption = acaption,
            typeofparm = g2b(atypeofparm),
            datasize = adatasize,
            allownull = aallownull,
            outparam = aoutparam,
            referencetype = areferencetype,
            reftotype = g2b(areftotype),
            reftopart = g2b(areftopart)
        WHERE parametersid = g2b(aparametersid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM parameters
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND sequence = asequence;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=параметры' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM parameters
        WHERE parentstructrowid = g2b(aparentstructrowid)
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=параметры' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL parameters_client_trigger(acursession, aparametersid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=parameters' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO parameters (changestamp, parametersid
          , parentstructrowid
          , sequence

          , name

          , caption

          , typeofparm

          , datasize

          , allownull

          , outparam

          , referencetype

          , reftotype

          , reftopart)
            VALUES (NOW(), g2b(aparametersid), g2b(aparentstructrowid), asequence, aname, acaption, g2b(atypeofparm), adatasize, aallownull, aoutparam, areferencetype, g2b(areftotype), g2b(areftopart));
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM parameters
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND sequence = asequence;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=параметры' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM parameters
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=параметры' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL parameters_client_trigger(acursession, aparametersid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "parameters_unlock"
--
CREATE PROCEDURE parameters_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL parameters_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE parameters
      SET lockuserid = NULL
      WHERE parametersid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE parameters
      SET locksessionid = NULL
      WHERE parametersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "parentpackage_brief"
--
CREATE PROCEDURE parentpackage_brief (acursession varchar(38),
aparentpackageid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aparentpackageid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM parentpackage
    WHERE parentpackageid = g2b(aparentpackageid);
    IF aec > 0 THEN
      SET abrief = parentpackage_brief_f(g2b(aparentpackageid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "parentpackage_client_trigger"
--
CREATE PROCEDURE parentpackage_client_trigger (acursession varchar(38),
aParentPackageid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "parentpackage_copy"
--
CREATE PROCEDURE parentpackage_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO parentpackage (parentpackageid
    , parentstructrowid
    , package)
      SELECT
        copymap(acopyaction, b2g(parentpackageid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        package

      FROM parentpackage
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "parentpackage_delete"
--
CREATE PROCEDURE parentpackage_delete (acursession varchar(38),
aparentpackageid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM parentpackage
    WHERE parentpackageid = g2b(aparentpackageid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=parentpackage' result;
        LEAVE body;
      END IF;
      CALL parentpackage_logger(acursession, aparentpackageid);
      DELETE
        FROM parentpackage
      WHERE parentpackageid = g2b(aparentpackageid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'parentpackage'
        AND ownerrowid = g2b(aparentpackageid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "parentpackage_islocked"
--
CREATE PROCEDURE parentpackage_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM parentpackage
    WHERE parentpackageid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "parentpackage_lock"
--
CREATE PROCEDURE parentpackage_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL parentpackage_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE parentpackage
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE parentpackageid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE parentpackage
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE parentpackageid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "parentpackage_logger"
--
CREATE PROCEDURE parentpackage_logger (acursession varchar(38),
aparentpackageid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "parentpackage_parent"
--
CREATE PROCEDURE parentpackage_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM parentpackage
    WHERE parentpackageid = arowid;
    SET aparenttable = 'mtzapp';
  END
  $$

--
-- Создать процедуру "parentpackage_save"
--
CREATE PROCEDURE parentpackage_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aparentpackageid varchar(38)
, apackage varchar(38)/* приложение *//* приложение */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM parentpackage
    WHERE parentpackageid = g2b(aparentpackageid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=parentpackage' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL parentpackage_logger(acursession, aparentpackageid);
        UPDATE parentpackage
        SET changestamp = NOW(),
            package = g2b(apackage)
        WHERE parentpackageid = g2b(aparentpackageid);


        CALL parentpackage_client_trigger(acursession, aparentpackageid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=parentpackage' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO parentpackage (changestamp, parentpackageid
          , parentstructrowid
          , package)
            VALUES (NOW(), g2b(aparentpackageid), g2b(aparentstructrowid), g2b(apackage));


          CALL parentpackage_client_trigger(acursession, aparentpackageid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "parentpackage_unlock"
--
CREATE PROCEDURE parentpackage_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL parentpackage_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE parentpackage
      SET lockuserid = NULL
      WHERE parentpackageid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE parentpackage
      SET locksessionid = NULL
      WHERE parentpackageid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partmenu_brief"
--
CREATE PROCEDURE partmenu_brief (acursession varchar(38),
apartmenuid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF apartmenuid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM partmenu
    WHERE partmenuid = g2b(apartmenuid);
    IF aec > 0 THEN
      SET abrief = partmenu_brief_f(g2b(apartmenuid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "partmenu_client_trigger"
--
CREATE PROCEDURE partmenu_client_trigger (acursession varchar(38),
aPARTMENUid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "partmenu_copy"
--
CREATE PROCEDURE partmenu_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_partmenu CURSOR FOR
    SELECT
      partmenuid
    FROM partmenu
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO partmenu (partmenuid
    , parentstructrowid
    , name

    , caption

    , tooltip

    , the_action

    , ismenuitem

    , istoolbarbutton

    , hotkey)
      SELECT
        copymap(acopyaction, b2g(partmenuid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        caption,
        tooltip,
        the_action,
        ismenuitem,
        istoolbarbutton,
        hotkey

      FROM partmenu
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_partmenu;
    SET fetch_done = FALSE;
    FETCH copy_cursor_partmenu INTO aid;
    WHILE NOT fetch_done DO
      CALL partparammap_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_partmenu INTO aid;
    END WHILE;

    CLOSE copy_cursor_partmenu;
  END
  $$

--
-- Создать процедуру "partmenu_delete"
--
CREATE PROCEDURE partmenu_delete (acursession varchar(38),
apartmenuid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partmenu
    WHERE partmenuid = g2b(apartmenuid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=partmenu' result;
        LEAVE body;
      END IF;
      CALL partmenu_logger(acursession, apartmenuid);
      DELETE
        FROM partmenu
      WHERE partmenuid = g2b(apartmenuid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'partmenu'
        AND ownerrowid = g2b(apartmenuid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "partmenu_islocked"
--
CREATE PROCEDURE partmenu_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM partmenu
    WHERE partmenuid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "partmenu_lock"
--
CREATE PROCEDURE partmenu_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partmenu_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE partmenu
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE partmenuid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE partmenu
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE partmenuid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partmenu_logger"
--
CREATE PROCEDURE partmenu_logger (acursession varchar(38),
apartmenuid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partmenu_parent"
--
CREATE PROCEDURE partmenu_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM partmenu
    WHERE partmenuid = arowid;
    SET aparenttable = 'part';
  END
  $$

--
-- Создать процедуру "partmenu_save"
--
CREATE PROCEDURE partmenu_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
apartmenuid varchar(38)
, aname
varchar(64)/* название *//* название */
, acaption
varchar(80)/* заголовок *//* заголовок */
, atooltip
varchar(80)/* подсказка *//* подсказка */
, athe_action varchar(38)/* метод *//* метод */
, aismenuitem
integer/* включать в меню *//* включать в меню */
, aistoolbarbutton
integer/* в тулбар *//* в тулбар */
, ahotkey
varchar(20)/* горячая клавиша *//* горячая клавиша */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partmenu
    WHERE partmenuid = g2b(apartmenuid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=partmenu' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL partmenu_logger(acursession, apartmenuid);
        UPDATE partmenu
        SET changestamp = NOW(),
            name = aname,
            caption = acaption,
            tooltip = atooltip,
            the_action = g2b(athe_action),
            ismenuitem = aismenuitem,
            istoolbarbutton = aistoolbarbutton,
            hotkey = ahotkey
        WHERE partmenuid = g2b(apartmenuid);


        CALL partmenu_client_trigger(acursession, apartmenuid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=partmenu' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO partmenu (changestamp, partmenuid
          , parentstructrowid
          , name

          , caption

          , tooltip

          , the_action

          , ismenuitem

          , istoolbarbutton

          , hotkey)
            VALUES (NOW(), g2b(apartmenuid), g2b(aparentstructrowid), aname, acaption, atooltip, g2b(athe_action), aismenuitem, aistoolbarbutton, ahotkey);


          CALL partmenu_client_trigger(acursession, apartmenuid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "partmenu_unlock"
--
CREATE PROCEDURE partmenu_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partmenu_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE partmenu
      SET lockuserid = NULL
      WHERE partmenuid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE partmenu
      SET locksessionid = NULL
      WHERE partmenuid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partparammap_brief"
--
CREATE PROCEDURE partparammap_brief (acursession varchar(38),
apartparammapid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF apartparammapid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM partparammap
    WHERE partparammapid = g2b(apartparammapid);
    IF aec > 0 THEN
      SET abrief = partparammap_brief_f(g2b(apartparammapid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "partparammap_client_trigger"
--
CREATE PROCEDURE partparammap_client_trigger (acursession varchar(38),
aPARTPARAMMAPid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "partparammap_copy"
--
CREATE PROCEDURE partparammap_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO partparammap (partparammapid
    , parentstructrowid
    , fieldname

    , paramname

    , noedit)
      SELECT
        copymap(acopyaction, b2g(partparammapid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        fieldname,
        paramname,
        noedit

      FROM partparammap
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "partparammap_delete"
--
CREATE PROCEDURE partparammap_delete (acursession varchar(38),
apartparammapid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partparammap
    WHERE partparammapid = g2b(apartparammapid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=partparammap' result;
        LEAVE body;
      END IF;
      CALL partparammap_logger(acursession, apartparammapid);
      DELETE
        FROM partparammap
      WHERE partparammapid = g2b(apartparammapid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'partparammap'
        AND ownerrowid = g2b(apartparammapid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "partparammap_islocked"
--
CREATE PROCEDURE partparammap_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM partparammap
    WHERE partparammapid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "partparammap_lock"
--
CREATE PROCEDURE partparammap_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partparammap_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE partparammap
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE partparammapid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE partparammap
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE partparammapid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partparammap_logger"
--
CREATE PROCEDURE partparammap_logger (acursession varchar(38),
apartparammapid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partparammap_parent"
--
CREATE PROCEDURE partparammap_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM partparammap
    WHERE partparammapid = arowid;
    SET aparenttable = 'partmenu';
  END
  $$

--
-- Создать процедуру "partparammap_save"
--
CREATE PROCEDURE partparammap_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
apartparammapid varchar(38)
, afieldname
varchar(255)/* поле (значение) *//* поле (значение) */
, aparamname
varchar(80)/* параметр *//* параметр */
, anoedit
integer/* редактировать параметр нельзя *//* редактировать параметр нельзя */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partparammap
    WHERE partparammapid = g2b(apartparammapid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=partparammap' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL partparammap_logger(acursession, apartparammapid);
        UPDATE partparammap
        SET changestamp = NOW(),
            fieldname = afieldname,
            paramname = aparamname,
            noedit = anoedit
        WHERE partparammapid = g2b(apartparammapid);


        CALL partparammap_client_trigger(acursession, apartparammapid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=partparammap' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO partparammap (changestamp, partparammapid
          , parentstructrowid
          , fieldname

          , paramname

          , noedit)
            VALUES (NOW(), g2b(apartparammapid), g2b(aparentstructrowid), afieldname, aparamname, anoedit);


          CALL partparammap_client_trigger(acursession, apartparammapid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "partparammap_unlock"
--
CREATE PROCEDURE partparammap_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partparammap_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE partparammap
      SET lockuserid = NULL
      WHERE partparammapid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE partparammap
      SET locksessionid = NULL
      WHERE partparammapid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partview_brief"
--
CREATE PROCEDURE partview_brief (acursession varchar(38),
apartviewid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF apartviewid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM partview
    WHERE partviewid = g2b(apartviewid);
    IF aec > 0 THEN
      SET abrief = partview_brief_f(g2b(apartviewid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "partview_client_trigger"
--
CREATE PROCEDURE partview_client_trigger (acursession varchar(38),
aPARTVIEWid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "partview_copy"
--
CREATE PROCEDURE partview_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_partview CURSOR FOR
    SELECT
      partviewid
    FROM partview
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO partview (partviewid
    , parentstructrowid
    , name

    , the_alias

    , forchoose

    , filterfield0

    , filterfield1

    , filterfield2

    , filterfield3)
      SELECT
        copymap(acopyaction, b2g(partviewid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        the_alias,
        forchoose,
        filterfield0,
        filterfield1,
        filterfield2,
        filterfield3

      FROM partview
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_partview;
    SET fetch_done = FALSE;
    FETCH copy_cursor_partview INTO aid;
    WHILE NOT fetch_done DO
      CALL viewcolumn_copy(acursession, acopyaction, ainstanceid, aid);
      CALL partview_lnk_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_partview INTO aid;
    END WHILE;

    CLOSE copy_cursor_partview;
  END
  $$

--
-- Создать процедуру "partview_delete"
--
CREATE PROCEDURE partview_delete (acursession varchar(38),
apartviewid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partview
    WHERE partviewid = g2b(apartviewid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=partview' result;
        LEAVE body;
      END IF;
      CALL partview_logger(acursession, apartviewid);
      DELETE
        FROM partview
      WHERE partviewid = g2b(apartviewid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'partview'
        AND ownerrowid = g2b(apartviewid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "partview_islocked"
--
CREATE PROCEDURE partview_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM partview
    WHERE partviewid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "partview_lnk_brief"
--
CREATE PROCEDURE partview_lnk_brief (acursession varchar(38),
apartview_lnkid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF apartview_lnkid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM partview_lnk
    WHERE partview_lnkid = g2b(apartview_lnkid);
    IF aec > 0 THEN
      SET abrief = partview_lnk_brief_f(g2b(apartview_lnkid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "partview_lnk_client_trigger"
--
CREATE PROCEDURE partview_lnk_client_trigger (acursession varchar(38),
aPARTVIEW_LNKid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "partview_lnk_copy"
--
CREATE PROCEDURE partview_lnk_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO partview_lnk (partview_lnkid
    , parentstructrowid
    , theview

    , thejoinsource

    , reftype

    , thejoindestination

    , handjoin

    , seq)
      SELECT
        copymap(acopyaction, b2g(partview_lnkid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        theview,
        thejoinsource,
        reftype,
        thejoindestination,
        handjoin,
        seq

      FROM partview_lnk
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "partview_lnk_delete"
--
CREATE PROCEDURE partview_lnk_delete (acursession varchar(38),
apartview_lnkid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partview_lnk
    WHERE partview_lnkid = g2b(apartview_lnkid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=partview_lnk' result;
        LEAVE body;
      END IF;
      CALL partview_lnk_logger(acursession, apartview_lnkid);
      DELETE
        FROM partview_lnk
      WHERE partview_lnkid = g2b(apartview_lnkid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'partview_lnk'
        AND ownerrowid = g2b(apartview_lnkid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "partview_lnk_islocked"
--
CREATE PROCEDURE partview_lnk_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM partview_lnk
    WHERE partview_lnkid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "partview_lnk_lock"
--
CREATE PROCEDURE partview_lnk_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partview_lnk_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE partview_lnk
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE partview_lnkid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE partview_lnk
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE partview_lnkid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partview_lnk_logger"
--
CREATE PROCEDURE partview_lnk_logger (acursession varchar(38),
apartview_lnkid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partview_lnk_parent"
--
CREATE PROCEDURE partview_lnk_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM partview_lnk
    WHERE partview_lnkid = arowid;
    SET aparenttable = 'partview';
  END
  $$

--
-- Создать процедуру "partview_lnk_save"
--
CREATE PROCEDURE partview_lnk_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
apartview_lnkid varchar(38)
, atheview varchar(38)/* представление *//* представление */
, athejoinsource varchar(38)/* связь: поле для join источник *//* связь: поле для join источник */
, areftype
integer/* связывать как *//* связывать как */
, athejoindestination varchar(38)/* свзяь: поле для join приемник *//* свзяь: поле для join приемник */
, ahandjoin
varchar(255)/* ручной join *//* ручной join */
, aseq
integer/* порядок *//* порядок */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partview_lnk
    WHERE partview_lnkid = g2b(apartview_lnkid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=partview_lnk' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL partview_lnk_logger(acursession, apartview_lnkid);
        UPDATE partview_lnk
        SET changestamp = NOW(),
            theview = g2b(atheview),
            thejoinsource = g2b(athejoinsource),
            reftype = areftype,
            thejoindestination = g2b(athejoindestination),
            handjoin = ahandjoin,
            seq = aseq
        WHERE partview_lnkid = g2b(apartview_lnkid);


        CALL partview_lnk_client_trigger(acursession, apartview_lnkid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=partview_lnk' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO partview_lnk (changestamp, partview_lnkid
          , parentstructrowid
          , theview

          , thejoinsource

          , reftype

          , thejoindestination

          , handjoin

          , seq)
            VALUES (NOW(), g2b(apartview_lnkid), g2b(aparentstructrowid), g2b(atheview), g2b(athejoinsource), areftype, g2b(athejoindestination), ahandjoin, aseq);


          CALL partview_lnk_client_trigger(acursession, apartview_lnkid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "partview_lnk_unlock"
--
CREATE PROCEDURE partview_lnk_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partview_lnk_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE partview_lnk
      SET lockuserid = NULL
      WHERE partview_lnkid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE partview_lnk
      SET locksessionid = NULL
      WHERE partview_lnkid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partview_lock"
--
CREATE PROCEDURE partview_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partview_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE partview
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE partviewid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE partview
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE partviewid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partview_logger"
--
CREATE PROCEDURE partview_logger (acursession varchar(38),
apartviewid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "partview_parent"
--
CREATE PROCEDURE partview_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM partview
    WHERE partviewid = arowid;
    SET aparenttable = 'part';
  END
  $$

--
-- Создать процедуру "partview_save"
--
CREATE PROCEDURE partview_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
apartviewid varchar(38)
, aname
varchar(255)/* название *//* название */
, athe_alias
varchar(64)/* псевдоним *//* псевдоним */
, aforchoose
integer/* для поиска *//* для поиска */
, afilterfield0
varchar(255)/* поле - фильтр 0 *//* поле - фильтр 0 */
, afilterfield1
varchar(255)/* поле - фильтр 1 *//* поле - фильтр 1 */
, afilterfield2
varchar(255)/* поле - фильтр 2 *//* поле - фильтр 2 */
, afilterfield3
varchar(255)/* поле - фильтр 3 *//* поле - фильтр 3 */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM partview
    WHERE partviewid = g2b(apartviewid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=partview' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL partview_logger(acursession, apartviewid);
        UPDATE partview
        SET changestamp = NOW(),
            name = aname,
            the_alias = athe_alias,
            forchoose = aforchoose,
            filterfield0 = afilterfield0,
            filterfield1 = afilterfield1,
            filterfield2 = afilterfield2,
            filterfield3 = afilterfield3
        WHERE partviewid = g2b(apartviewid);


        CALL partview_client_trigger(acursession, apartviewid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=partview' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO partview (changestamp, partviewid
          , parentstructrowid
          , name

          , the_alias

          , forchoose

          , filterfield0

          , filterfield1

          , filterfield2

          , filterfield3)
            VALUES (NOW(), g2b(apartviewid), g2b(aparentstructrowid), aname, athe_alias, aforchoose, afilterfield0, afilterfield1, afilterfield2, afilterfield3);


          CALL partview_client_trigger(acursession, apartviewid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "partview_unlock"
--
CREATE PROCEDURE partview_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL partview_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE partview
      SET lockuserid = NULL
      WHERE partviewid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE partview
      SET locksessionid = NULL
      WHERE partviewid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "part_brief"
--
CREATE PROCEDURE part_brief (acursession varchar(38),
apartid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF apartid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM part
    WHERE partid = g2b(apartid);
    IF aec > 0 THEN
      SET abrief = part_brief_f(g2b(apartid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "part_client_trigger"
--
CREATE PROCEDURE part_client_trigger (acursession varchar(38),
aPARTid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "part_copy"
--
CREATE PROCEDURE part_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_part CURSOR FOR
    SELECT
      partid
    FROM part
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO part (partid
    , parentstructrowid
    , parentrowid
    , sequence

    , parttype

    , caption

    , name

    , the_comment

    , nolog

    , manualregister

    , oncreate

    , onsave

    , onrun

    , ondelete

    , addbehaivor

    , extenderobject

    , shablonbrief

    , rulebrief

    , isjormalchange

    , usearchiving

    , integerpkey

    , particoncls)
      SELECT
        copymap(acopyaction, b2g(partid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        copymap(acopyaction, b2g(parentrowid)),
        sequence,
        parttype,
        caption,
        name,
        the_comment,
        nolog,
        manualregister,
        oncreate,
        onsave,
        onrun,
        ondelete,
        addbehaivor,
        extenderobject,
        shablonbrief,
        rulebrief,
        isjormalchange,
        usearchiving,
        integerpkey,
        particoncls

      FROM part
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_part;
    SET fetch_done = FALSE;
    FETCH copy_cursor_part INTO aid;
    WHILE NOT fetch_done DO
      CALL partmenu_copy(acursession, acopyaction, ainstanceid, aid);
      CALL partview_copy(acursession, acopyaction, ainstanceid, aid);
      CALL validator_copy(acursession, acopyaction, ainstanceid, aid);
      CALL uniqueconstraint_copy(acursession, acopyaction, ainstanceid, aid);
      CALL extenderinterface_copy(acursession, acopyaction, ainstanceid, aid);
      CALL field_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_part INTO aid;
    END WHILE;

    CLOSE copy_cursor_part;
  END
  $$

--
-- Создать процедуру "part_delete"
--
CREATE PROCEDURE part_delete (acursession varchar(38),
apartid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM part
    WHERE partid = g2b(apartid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=part' result;
        LEAVE body;
      END IF;
      CALL part_logger(acursession, apartid);
      DELETE
        FROM part
      WHERE partid = g2b(apartid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'part'
        AND ownerrowid = g2b(apartid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "part_islocked"
--
CREATE PROCEDURE part_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM part
    WHERE partid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "part_lock"
--
CREATE PROCEDURE part_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL part_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE part
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE partid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE part
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE partid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "part_logger"
--
CREATE PROCEDURE part_logger (acursession varchar(38),
apartid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "part_parent"
--
CREATE PROCEDURE part_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM part
    WHERE partid = arowid;
    SET aparenttable = 'objecttype';
  END
  $$

--
-- Создать процедуру "part_save"
--
CREATE PROCEDURE part_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
apartid varchar(38)
, aparentrowid varchar(38)
, asequence
integer/* № п/п *//* № п/п */
, aparttype
integer/* тип структры *//* тип структры */
, acaption
varchar(255)/* заголовок *//* заголовок */
, aname
varchar(20)/* название *//* название */
, athe_comment
text/* описание *//* описание */
, anolog
integer/* не записывать в журнал *//* не записывать в журнал */
, amanualregister
integer/* исключить из индексирования *//* исключить из индексирования */
, aoncreate varchar(38)/* при создании *//* при создании */
, aonsave varchar(38)/* при сохранении *//* при сохранении */
, aonrun varchar(38)/* при открытии *//* при открытии */
, aondelete varchar(38)/* при удалении *//* при удалении */
, aaddbehaivor
integer/* поведение при добавлении *//* поведение при добавлении */
, aextenderobject varchar(38)/* объект расширения *//* объект расширения */
, ashablonbrief
varchar(100)/* шаблон для краткого отображения *//* шаблон для краткого отображения */
, arulebrief
varchar(500)/* правило составления brief поля *//* правило составления brief поля */
, aisjormalchange
integer/* вести журнал изменений *//* вести журнал изменений */
, ausearchiving
integer/* архивировать вместо удаления *//* архивировать вместо удаления */
, aintegerpkey
integer/* целочисленный ключ *//* целочисленный ключ */
, aparticoncls
varchar(80)/* иконка раздела *//* иконка раздела */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM part
    WHERE partid = g2b(apartid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=part' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL part_logger(acursession, apartid);
        UPDATE part
        SET changestamp = NOW(),
            parentrowid = g2b(aparentrowid),
            sequence = asequence,
            parttype = aparttype,
            caption = acaption,
            name = aname,
            the_comment = athe_comment,
            nolog = anolog,
            manualregister = amanualregister,
            oncreate = g2b(aoncreate),
            onsave = g2b(aonsave),
            onrun = g2b(aonrun),
            ondelete = g2b(aondelete),
            addbehaivor = aaddbehaivor,
            extenderobject = g2b(aextenderobject),
            shablonbrief = ashablonbrief,
            rulebrief = arulebrief,
            isjormalchange = aisjormalchange,
            usearchiving = ausearchiving,
            integerpkey = aintegerpkey,
            particoncls = aparticoncls
        WHERE partid = g2b(apartid);
        -- if asessuserlogin<>'replicator'  then
        IF aparentrowid IS NULL THEN
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM part
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND parentrowid IS NULL
          AND sequence = asequence;
        ELSE
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM part
          WHERE parentstructrowid = g2b(aparentstructrowid)
          AND parentrowid = g2b(aparentrowid)
          AND sequence = asequence;
        END IF;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=раздел' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM part
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=раздел' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL part_client_trigger(acursession, apartid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=part' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO part (changestamp, partid
          , parentrowid
          , parentstructrowid
          , sequence

          , parttype

          , caption

          , name

          , the_comment

          , nolog

          , manualregister

          , oncreate

          , onsave

          , onrun

          , ondelete

          , addbehaivor

          , extenderobject

          , shablonbrief

          , rulebrief

          , isjormalchange

          , usearchiving

          , integerpkey

          , particoncls)
            VALUES (NOW(), g2b(apartid), g2b(aparentrowid), g2b(aparentstructrowid), asequence, aparttype, acaption, aname, athe_comment, anolog, amanualregister, g2b(aoncreate), g2b(aonsave), g2b(aonrun), g2b(aondelete), aaddbehaivor, g2b(aextenderobject), ashablonbrief, arulebrief, aisjormalchange, ausearchiving, aintegerpkey, aparticoncls);
          -- if asessuserlogin<>'replicator'  then
          IF aparentrowid IS NULL THEN
            SELECT
              COUNT(*) INTO auniquerowcount
            FROM part
            WHERE parentstructrowid = g2b(aparentstructrowid)
            AND parentrowid IS NULL
            AND sequence = asequence;
          ELSE
            SELECT
              COUNT(*) INTO auniquerowcount
            FROM part
            WHERE parentstructrowid = g2b(aparentstructrowid)
            AND parentrowid = g2b(aparentrowid)
            AND sequence = asequence;
          END IF;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=раздел' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM part
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=раздел' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL part_client_trigger(acursession, apartid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "part_unlock"
--
CREATE PROCEDURE part_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL part_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE part
      SET lockuserid = NULL
      WHERE partid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE part
      SET locksessionid = NULL
      WHERE partid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "qr_or_qr"
--
CREATE PROCEDURE qr_or_qr (aid1 varchar(38), aid2 varchar(38), aidout varchar(38), OUT acnt integer)
body:
  BEGIN
    DELETE
      FROM queryresult
    WHERE queryresultid = g2b(aidout);
    INSERT INTO queryresult (queryresultid, result)
      SELECT DISTINCT
        aidout,
        result
      FROM queryresult
      WHERE queryresultid IN (aid1, aid2);
    SELECT
      acnt = COUNT(*)
    FROM queryresult
    WHERE queryresultid = g2b(aidout);
  END
  $$

--
-- Создать процедуру "reports_brief"
--
CREATE PROCEDURE reports_brief (acursession varchar(38),
areportsid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF areportsid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM reports
    WHERE reportsid = g2b(areportsid);
    IF aec > 0 THEN
      SET abrief = reports_brief_f(g2b(areportsid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "reports_client_trigger"
--
CREATE PROCEDURE reports_client_trigger (acursession varchar(38),
aReportsid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "reports_copy"
--
CREATE PROCEDURE reports_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO reports (reportsid
    , instanceid
    , name

    , reportfile

    , reportfile_ext
    , caption

    , preparemethod

    , reporttype

    , thereportext

    , reportview

    , thecomment)
      SELECT
        copymap(acopyaction, b2g(reportsid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        reportfile,
        reportfile_ext,
        caption,
        preparemethod,
        reporttype,
        thereportext,
        reportview,
        thecomment

      FROM reports
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "reports_delete"
--
CREATE PROCEDURE reports_delete (acursession varchar(38),
areportsid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM reports
    WHERE reportsid = g2b(areportsid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=reports' result;
        LEAVE body;
      END IF;
      CALL reports_logger(acursession, areportsid);
      DELETE
        FROM reports
      WHERE reportsid = g2b(areportsid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'reports'
        AND ownerrowid = g2b(areportsid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "reports_islocked"
--
CREATE PROCEDURE reports_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM reports
    WHERE reportsid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "reports_lock"
--
CREATE PROCEDURE reports_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL reports_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE reports
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE reportsid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE reports
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE reportsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "reports_logger"
--
CREATE PROCEDURE reports_logger (acursession varchar(38),
areportsid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "reports_parent"
--
CREATE PROCEDURE reports_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM reports
    WHERE reportsid = arowid;
  END
  $$

--
-- Создать процедуру "reports_save"
--
CREATE PROCEDURE reports_save (acursession varchar(38),
ainstanceid varchar(38),
areportsid varchar(38)
, aname
varchar(255)/* название *//* название */
, areportfile varchar(255)/* файл отчета */
, areportfile_ext varchar(4) /* файл отчета */
, acaption
varchar(255)/* заголовок *//* заголовок */
, apreparemethod varchar(38)/* метод для формирования *//* метод для формирования */
, areporttype
integer/* тип отчета *//* тип отчета */
, athereportext varchar(38)/* расширение для создания отчета *//* расширение для создания отчета */
, areportview
varchar(255)/* базовый запрос *//* базовый запрос */
, athecomment
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM reports
    WHERE reportsid = g2b(areportsid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=reports' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL reports_logger(acursession, areportsid);
        UPDATE reports
        SET changestamp = NOW(),
            name = aname,
            reportfile = areportfile,
            reportfile_ext =
            areportfile_ext,
            caption = acaption,
            preparemethod = g2b(apreparemethod),
            reporttype = areporttype,
            thereportext = g2b(athereportext),
            reportview = areportview,
            thecomment = athecomment
        WHERE reportsid = g2b(areportsid);


        CALL reports_client_trigger(acursession, areportsid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=reports' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM reports
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <reports>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO reports (changestamp, reportsid
          , instanceid
          , name

          , reportfile

          , reportfile_ext
          , caption

          , preparemethod

          , reporttype

          , thereportext

          , reportview

          , thecomment)
            VALUES (NOW(), g2b(areportsid), g2b(ainstanceid), aname, areportfile, areportfile_ext, acaption, g2b(apreparemethod), areporttype, g2b(athereportext), areportview, athecomment);


          CALL reports_client_trigger(acursession, areportsid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "reports_unlock"
--
CREATE PROCEDURE reports_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL reports_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE reports
      SET lockuserid = NULL
      WHERE reportsid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE reports
      SET locksessionid = NULL
      WHERE reportsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "RowParents"
--
CREATE PROCEDURE RowParents (aQueryID varchar(38)
, aRowID varchar(38)
, aTable varchar(255)
, aCURSESSION varchar(38))
body:
  BEGIN

    DECLARE aplevel integer;
    DECLARE aparent varchar(255);
    DECLARE aprev varchar(255);
    DECLARE aec int;

    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;


    SET aparent = atable;
    SET @tmpID = g2b(aROWID);
    SET aplevel = 0;
    DELETE
      FROM RPRESULT
    WHERE RPRESULTID = g2b(aQUERYID);
    INSERT INTO RPRESULT (RPRESULTID, PARENTLEVEL, PARTNAME, ROWID)
      VALUES (g2b(aQUERYID), aPLEVEL, atable, g2b(aRowID));

  again:
    LOOP
      SET aplevel = aplevel + 1;
      SET aprev = aparent;
      SET aparent = NULL;
      SELECT
        value INTO aparent
      FROM sysoptions
      WHERE optiontype = 'parent'
      AND name = aprev;

      IF aparent IS NULL THEN

        SET @ss = CONCAT('select InstanceID into @tmpRowID from ', aprev, ' where ', aprev, 'id=?');
        PREPARE stmt FROM @ss;
        EXECUTE stmt USING @tmpid;
        DEALLOCATE PREPARE stmt;

        INSERT INTO RPRESULT (RPRESULTID, PARENTLEVEL, PARTNAME, ROWID)
          VALUES (g2b(aQUERYID), aPLEVEL, 'INSTANCE', @tmpRowID);
        LEAVE again;

      ELSE

        SET @ss = CONCAT('select ParentStructRowID  into @tmpRowID from ', aprev, ' where ', aprev, 'id=?');
        PREPARE stmt FROM @ss;
        EXECUTE stmt USING @tmpid;
        DEALLOCATE PREPARE stmt;
        SET @tmpID = @tmpROWID;
        INSERT INTO RPRESULT (RPRESULTID, PARENTLEVEL, PARTNAME, ROWID)
          VALUES (g2b(aQUERYID), aPLEVEL, aparent, @tmpRowID);

      END IF;
    END LOOP again;
  END
  $$

--
-- Создать процедуру "rptfields_brief"
--
CREATE PROCEDURE rptfields_brief (acursession varchar(38),
arptfieldsid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF arptfieldsid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM rptfields
    WHERE rptfieldsid = g2b(arptfieldsid);
    IF aec > 0 THEN
      SET abrief = rptfields_brief_f(g2b(arptfieldsid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "rptfields_client_trigger"
--
CREATE PROCEDURE rptfields_client_trigger (acursession varchar(38),
aRPTFieldsid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "rptfields_copy"
--
CREATE PROCEDURE rptfields_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO rptfields (rptfieldsid
    , parentstructrowid
    , name

    , fieldtype

    , fieldsize

    , caption)
      SELECT
        copymap(acopyaction, b2g(rptfieldsid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        fieldtype,
        fieldsize,
        caption

      FROM rptfields
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "rptfields_delete"
--
CREATE PROCEDURE rptfields_delete (acursession varchar(38),
arptfieldsid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM rptfields
    WHERE rptfieldsid = g2b(arptfieldsid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=rptfields' result;
        LEAVE body;
      END IF;
      CALL rptfields_logger(acursession, arptfieldsid);
      DELETE
        FROM rptfields
      WHERE rptfieldsid = g2b(arptfieldsid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'rptfields'
        AND ownerrowid = g2b(arptfieldsid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "rptfields_islocked"
--
CREATE PROCEDURE rptfields_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM rptfields
    WHERE rptfieldsid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "rptfields_lock"
--
CREATE PROCEDURE rptfields_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL rptfields_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE rptfields
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE rptfieldsid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE rptfields
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE rptfieldsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptfields_logger"
--
CREATE PROCEDURE rptfields_logger (acursession varchar(38),
arptfieldsid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptfields_parent"
--
CREATE PROCEDURE rptfields_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM rptfields
    WHERE rptfieldsid = arowid;
    SET aparenttable = 'rptstruct';
  END
  $$

--
-- Создать процедуру "rptfields_save"
--
CREATE PROCEDURE rptfields_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
arptfieldsid varchar(38)
, aname
varchar(64)/* название *//* название */
, afieldtype varchar(38)/* тип поля *//* тип поля */
, afieldsize
integer/* размер *//* размер */
, acaption
varchar(255)/* заголовок *//* заголовок */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM rptfields
    WHERE rptfieldsid = g2b(arptfieldsid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=rptfields' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL rptfields_logger(acursession, arptfieldsid);
        UPDATE rptfields
        SET changestamp = NOW(),
            name = aname,
            fieldtype = g2b(afieldtype),
            fieldsize = afieldsize,
            caption = acaption
        WHERE rptfieldsid = g2b(arptfieldsid);


        CALL rptfields_client_trigger(acursession, arptfieldsid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=rptfields' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO rptfields (changestamp, rptfieldsid
          , parentstructrowid
          , name

          , fieldtype

          , fieldsize

          , caption)
            VALUES (NOW(), g2b(arptfieldsid), g2b(aparentstructrowid), aname, g2b(afieldtype), afieldsize, acaption);


          CALL rptfields_client_trigger(acursession, arptfieldsid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "rptfields_unlock"
--
CREATE PROCEDURE rptfields_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL rptfields_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE rptfields
      SET lockuserid = NULL
      WHERE rptfieldsid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE rptfields
      SET locksessionid = NULL
      WHERE rptfieldsid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptformula_brief"
--
CREATE PROCEDURE rptformula_brief (acursession varchar(38),
arptformulaid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF arptformulaid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM rptformula
    WHERE rptformulaid = g2b(arptformulaid);
    IF aec > 0 THEN
      SET abrief = rptformula_brief_f(g2b(arptformulaid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "rptformula_client_trigger"
--
CREATE PROCEDURE rptformula_client_trigger (acursession varchar(38),
aRPTFormulaid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "rptformula_copy"
--
CREATE PROCEDURE rptformula_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO rptformula (rptformulaid
    , instanceid
    , name

    , code

    , platform)
      SELECT
        copymap(acopyaction, b2g(rptformulaid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        code,
        platform

      FROM rptformula
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "rptformula_delete"
--
CREATE PROCEDURE rptformula_delete (acursession varchar(38),
arptformulaid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM rptformula
    WHERE rptformulaid = g2b(arptformulaid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=rptformula' result;
        LEAVE body;
      END IF;
      CALL rptformula_logger(acursession, arptformulaid);
      DELETE
        FROM rptformula
      WHERE rptformulaid = g2b(arptformulaid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'rptformula'
        AND ownerrowid = g2b(arptformulaid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "rptformula_islocked"
--
CREATE PROCEDURE rptformula_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM rptformula
    WHERE rptformulaid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "rptformula_lock"
--
CREATE PROCEDURE rptformula_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL rptformula_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE rptformula
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE rptformulaid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE rptformula
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE rptformulaid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptformula_logger"
--
CREATE PROCEDURE rptformula_logger (acursession varchar(38),
arptformulaid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptformula_parent"
--
CREATE PROCEDURE rptformula_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM rptformula
    WHERE rptformulaid = arowid;
  END
  $$

--
-- Создать процедуру "rptformula_save"
--
CREATE PROCEDURE rptformula_save (acursession varchar(38),
ainstanceid varchar(38),
arptformulaid varchar(38)
, aname
varchar(64)/* название *//* название */
, acode
text/* выражение *//* выражение */
, aplatform varchar(38)/* платформа *//* платформа */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM rptformula
    WHERE rptformulaid = g2b(arptformulaid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=rptformula' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL rptformula_logger(acursession, arptformulaid);
        UPDATE rptformula
        SET changestamp = NOW(),
            name = aname,
            code = acode,
            platform = g2b(aplatform)
        WHERE rptformulaid = g2b(arptformulaid);


        CALL rptformula_client_trigger(acursession, arptformulaid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=rptformula' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO rptformula (changestamp, rptformulaid
          , instanceid
          , name

          , code

          , platform)
            VALUES (NOW(), g2b(arptformulaid), g2b(ainstanceid), aname, acode, g2b(aplatform));


          CALL rptformula_client_trigger(acursession, arptformulaid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "rptformula_unlock"
--
CREATE PROCEDURE rptformula_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL rptformula_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE rptformula
      SET lockuserid = NULL
      WHERE rptformulaid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE rptformula
      SET locksessionid = NULL
      WHERE rptformulaid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptstruct_brief"
--
CREATE PROCEDURE rptstruct_brief (acursession varchar(38),
arptstructid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF arptstructid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM rptstruct
    WHERE rptstructid = g2b(arptstructid);
    IF aec > 0 THEN
      SET abrief = rptstruct_brief_f(g2b(arptstructid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "rptstruct_client_trigger"
--
CREATE PROCEDURE rptstruct_client_trigger (acursession varchar(38),
aRPTStructid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "rptstruct_copy"
--
CREATE PROCEDURE rptstruct_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_rptstruct CURSOR FOR
    SELECT
      rptstructid
    FROM rptstruct
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO rptstruct (rptstructid
    , instanceid
    , parentrowid
    , name

    , caption)
      SELECT
        copymap(acopyaction, b2g(rptstructid)),
        copymap(acopyaction, b2g(instanceid)),
        copymap(acopyaction, b2g(parentrowid)),
        name,
        caption

      FROM rptstruct
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_rptstruct;
    SET fetch_done = FALSE;
    FETCH copy_cursor_rptstruct INTO aid;
    WHILE NOT fetch_done DO
      CALL rptfields_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_rptstruct INTO aid;
    END WHILE;

    CLOSE copy_cursor_rptstruct;
  END
  $$

--
-- Создать процедуру "rptstruct_delete"
--
CREATE PROCEDURE rptstruct_delete (acursession varchar(38),
arptstructid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM rptstruct
    WHERE rptstructid = g2b(arptstructid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=rptstruct' result;
        LEAVE body;
      END IF;
      CALL rptstruct_logger(acursession, arptstructid);
      DELETE
        FROM rptstruct
      WHERE rptstructid = g2b(arptstructid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'rptstruct'
        AND ownerrowid = g2b(arptstructid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "rptstruct_islocked"
--
CREATE PROCEDURE rptstruct_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM rptstruct
    WHERE rptstructid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "rptstruct_lock"
--
CREATE PROCEDURE rptstruct_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL rptstruct_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE rptstruct
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE rptstructid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE rptstruct
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE rptstructid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptstruct_logger"
--
CREATE PROCEDURE rptstruct_logger (acursession varchar(38),
arptstructid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "rptstruct_parent"
--
CREATE PROCEDURE rptstruct_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM rptstruct
    WHERE rptstructid = arowid;
  END
  $$

--
-- Создать процедуру "rptstruct_save"
--
CREATE PROCEDURE rptstruct_save (acursession varchar(38),
ainstanceid varchar(38),
arptstructid varchar(38)
, aparentrowid varchar(38)
, aname
varchar(64)/* название *//* название */
, acaption
varchar(255)/* заголовок *//* заголовок */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM rptstruct
    WHERE rptstructid = g2b(arptstructid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=rptstruct' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL rptstruct_logger(acursession, arptstructid);
        UPDATE rptstruct
        SET changestamp = NOW(),
            parentrowid = g2b(aparentrowid),
            name = aname,
            caption = acaption
        WHERE rptstructid = g2b(arptstructid);


        CALL rptstruct_client_trigger(acursession, arptstructid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzrprt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=rptstruct' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO rptstruct (changestamp, rptstructid
          , parentrowid
          , instanceid
          , name

          , caption)
            VALUES (NOW(), g2b(arptstructid), g2b(aparentrowid), g2b(ainstanceid), aname, acaption);


          CALL rptstruct_client_trigger(acursession, arptstructid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "rptstruct_unlock"
--
CREATE PROCEDURE rptstruct_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL rptstruct_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE rptstruct
      SET lockuserid = NULL
      WHERE rptstructid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE rptstruct
      SET locksessionid = NULL
      WHERE rptstructid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "script_brief"
--
CREATE PROCEDURE script_brief (acursession varchar(38),
ascriptid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ascriptid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM script
    WHERE scriptid = g2b(ascriptid);
    IF aec > 0 THEN
      SET abrief = script_brief_f(g2b(ascriptid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "script_client_trigger"
--
CREATE PROCEDURE script_client_trigger (acursession varchar(38),
aSCRIPTid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "script_copy"
--
CREATE PROCEDURE script_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_script CURSOR FOR
    SELECT
      scriptid
    FROM script
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO script (scriptid
    , parentstructrowid
    , target

    , code)
      SELECT
        copymap(acopyaction, b2g(scriptid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        code

      FROM script
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_script;
    SET fetch_done = FALSE;
    FETCH copy_cursor_script INTO aid;
    WHILE NOT fetch_done DO
      CALL parameters_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_script INTO aid;
    END WHILE;

    CLOSE copy_cursor_script;
  END
  $$

--
-- Создать процедуру "script_delete"
--
CREATE PROCEDURE script_delete (acursession varchar(38),
ascriptid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM script
    WHERE scriptid = g2b(ascriptid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=script' result;
        LEAVE body;
      END IF;
      CALL script_logger(acursession, ascriptid);
      DELETE
        FROM script
      WHERE scriptid = g2b(ascriptid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'script'
        AND ownerrowid = g2b(ascriptid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "script_islocked"
--
CREATE PROCEDURE script_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM script
    WHERE scriptid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "script_lock"
--
CREATE PROCEDURE script_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL script_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE script
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE scriptid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE script
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE scriptid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "script_logger"
--
CREATE PROCEDURE script_logger (acursession varchar(38),
ascriptid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "script_parent"
--
CREATE PROCEDURE script_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM script
    WHERE scriptid = arowid;
    SET aparenttable = 'sharedmethod';
  END
  $$

--
-- Создать процедуру "script_save"
--
CREATE PROCEDURE script_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
ascriptid varchar(38)
, atarget varchar(38)/* целевая платформа *//* целевая платформа */
, acode
text/* скрипт *//* скрипт */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM script
    WHERE scriptid = g2b(ascriptid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=script' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL script_logger(acursession, ascriptid);
        UPDATE script
        SET changestamp = NOW(),
            target = g2b(atarget),
            code = acode
        WHERE scriptid = g2b(ascriptid);


        CALL script_client_trigger(acursession, ascriptid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=script' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO script (changestamp, scriptid
          , parentstructrowid
          , target

          , code)
            VALUES (NOW(), g2b(ascriptid), g2b(aparentstructrowid), g2b(atarget), acode);


          CALL script_client_trigger(acursession, ascriptid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "script_unlock"
--
CREATE PROCEDURE script_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL script_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE script
      SET lockuserid = NULL
      WHERE scriptid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE script
      SET locksessionid = NULL
      WHERE scriptid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "SessionTouch"
--
CREATE PROCEDURE SessionTouch (aCURSESSION binary(16)/* Идентификатор сессии */

)
body:
  BEGIN

    UPDATE the_session
    SET lastaccess = NOW()
    WHERE the_sessionid = acursession
    AND closed = 0;



  END
  $$

--
-- Создать процедуру "sharedmethod_brief"
--
CREATE PROCEDURE sharedmethod_brief (acursession varchar(38),
asharedmethodid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF asharedmethodid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM sharedmethod
    WHERE sharedmethodid = g2b(asharedmethodid);
    IF aec > 0 THEN
      SET abrief = sharedmethod_brief_f(g2b(asharedmethodid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "sharedmethod_client_trigger"
--
CREATE PROCEDURE sharedmethod_client_trigger (acursession varchar(38),
aSHAREDMETHODid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "sharedmethod_copy"
--
CREATE PROCEDURE sharedmethod_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_sharedmethod CURSOR FOR
    SELECT
      sharedmethodid
    FROM sharedmethod
    WHERE instanceid = ainstanceid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO sharedmethod (sharedmethodid
    , instanceid
    , name

    , the_comment

    , returntype)
      SELECT
        copymap(acopyaction, b2g(sharedmethodid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        the_comment,
        returntype

      FROM sharedmethod
      WHERE instanceid = g2b(ainstanceid);
    OPEN copy_cursor_sharedmethod;
    SET fetch_done = FALSE;
    FETCH copy_cursor_sharedmethod INTO aid;
    WHILE NOT fetch_done DO
      CALL script_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_sharedmethod INTO aid;
    END WHILE;

    CLOSE copy_cursor_sharedmethod;
  END
  $$

--
-- Создать процедуру "sharedmethod_delete"
--
CREATE PROCEDURE sharedmethod_delete (acursession varchar(38),
asharedmethodid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM sharedmethod
    WHERE sharedmethodid = g2b(asharedmethodid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=sharedmethod' result;
        LEAVE body;
      END IF;
      CALL sharedmethod_logger(acursession, asharedmethodid);
      DELETE
        FROM sharedmethod
      WHERE sharedmethodid = g2b(asharedmethodid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'sharedmethod'
        AND ownerrowid = g2b(asharedmethodid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "sharedmethod_islocked"
--
CREATE PROCEDURE sharedmethod_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM sharedmethod
    WHERE sharedmethodid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "sharedmethod_lock"
--
CREATE PROCEDURE sharedmethod_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL sharedmethod_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE sharedmethod
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE sharedmethodid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE sharedmethod
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE sharedmethodid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "sharedmethod_logger"
--
CREATE PROCEDURE sharedmethod_logger (acursession varchar(38),
asharedmethodid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "sharedmethod_parent"
--
CREATE PROCEDURE sharedmethod_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM sharedmethod
    WHERE sharedmethodid = arowid;
  END
  $$

--
-- Создать процедуру "sharedmethod_save"
--
CREATE PROCEDURE sharedmethod_save (acursession varchar(38),
ainstanceid varchar(38),
asharedmethodid varchar(38)
, aname
varchar(255)/* название *//* название */
, athe_comment
text/* описание метода *//* описание метода */
, areturntype varchar(38)/* возвращаемый тип *//* возвращаемый тип */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM sharedmethod
    WHERE sharedmethodid = g2b(asharedmethodid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=sharedmethod' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL sharedmethod_logger(acursession, asharedmethodid);
        UPDATE sharedmethod
        SET changestamp = NOW(),
            name = aname,
            the_comment = athe_comment,
            returntype = g2b(areturntype)
        WHERE sharedmethodid = g2b(asharedmethodid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM sharedmethod
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=методы и процедуры' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL sharedmethod_client_trigger(acursession, asharedmethodid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=sharedmethod' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO sharedmethod (changestamp, sharedmethodid
          , instanceid
          , name

          , the_comment

          , returntype)
            VALUES (NOW(), g2b(asharedmethodid), g2b(ainstanceid), aname, athe_comment, g2b(areturntype));
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM sharedmethod
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=методы и процедуры' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL sharedmethod_client_trigger(acursession, asharedmethodid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "sharedmethod_unlock"
--
CREATE PROCEDURE sharedmethod_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL sharedmethod_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE sharedmethod
      SET lockuserid = NULL
      WHERE sharedmethodid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE sharedmethod
      SET locksessionid = NULL
      WHERE sharedmethodid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "stdnumerator_copy"
--
CREATE PROCEDURE stdnumerator_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL num_zones_copy(acursession, aaction, ainstanceid);
    CALL num_head_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "structrestriction_brief"
--
CREATE PROCEDURE structrestriction_brief (acursession varchar(38),
astructrestrictionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF astructrestrictionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM structrestriction
    WHERE structrestrictionid = g2b(astructrestrictionid);
    IF aec > 0 THEN
      SET abrief = structrestriction_brief_f(g2b(astructrestrictionid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "structrestriction_client_trigger"
--
CREATE PROCEDURE structrestriction_client_trigger (acursession varchar(38),
aSTRUCTRESTRICTIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "structrestriction_copy"
--
CREATE PROCEDURE structrestriction_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO structrestriction (structrestrictionid
    , parentstructrowid
    , struct

    , allowread

    , allowadd

    , allowedit

    , allowdelete)
      SELECT
        copymap(acopyaction, b2g(structrestrictionid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        struct,
        allowread,
        allowadd,
        allowedit,
        allowdelete

      FROM structrestriction
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "structrestriction_delete"
--
CREATE PROCEDURE structrestriction_delete (acursession varchar(38),
astructrestrictionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM structrestriction
    WHERE structrestrictionid = g2b(astructrestrictionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=structrestriction' result;
        LEAVE body;
      END IF;
      CALL structrestriction_logger(acursession, astructrestrictionid);
      DELETE
        FROM structrestriction
      WHERE structrestrictionid = g2b(astructrestrictionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'structrestriction'
        AND ownerrowid = g2b(astructrestrictionid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "structrestriction_islocked"
--
CREATE PROCEDURE structrestriction_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM structrestriction
    WHERE structrestrictionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "structrestriction_lock"
--
CREATE PROCEDURE structrestriction_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL structrestriction_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE structrestriction
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE structrestrictionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE structrestriction
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE structrestrictionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "structrestriction_logger"
--
CREATE PROCEDURE structrestriction_logger (acursession varchar(38),
astructrestrictionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "structrestriction_parent"
--
CREATE PROCEDURE structrestriction_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM structrestriction
    WHERE structrestrictionid = arowid;
    SET aparenttable = 'objectmode';
  END
  $$

--
-- Создать процедуру "structrestriction_save"
--
CREATE PROCEDURE structrestriction_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
astructrestrictionid varchar(38)
, astruct varchar(38)/* структура, доступ к которой ограничен *//* структура, доступ к которой ограничен */
, aallowread
integer/* разрешен просмотр *//* разрешен просмотр */
, aallowadd
integer/* разрешено добавлять *//* разрешено добавлять */
, aallowedit
integer/* разрешено изменять *//* разрешено изменять */
, aallowdelete
integer/* разрешено удалять *//* разрешено удалять */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM structrestriction
    WHERE structrestrictionid = g2b(astructrestrictionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=structrestriction' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL structrestriction_logger(acursession, astructrestrictionid);
        UPDATE structrestriction
        SET changestamp = NOW(),
            struct = g2b(astruct),
            allowread = aallowread,
            allowadd = aallowadd,
            allowedit = aallowedit,
            allowdelete = aallowdelete
        WHERE structrestrictionid = g2b(astructrestrictionid);


        CALL structrestriction_client_trigger(acursession, astructrestrictionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=structrestriction' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO structrestriction (changestamp, structrestrictionid
          , parentstructrowid
          , struct

          , allowread

          , allowadd

          , allowedit

          , allowdelete)
            VALUES (NOW(), g2b(astructrestrictionid), g2b(aparentstructrowid), g2b(astruct), aallowread, aallowadd, aallowedit, aallowdelete);


          CALL structrestriction_client_trigger(acursession, astructrestrictionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "structrestriction_unlock"
--
CREATE PROCEDURE structrestriction_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL structrestriction_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE structrestriction
      SET lockuserid = NULL
      WHERE structrestrictionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE structrestriction
      SET locksessionid = NULL
      WHERE structrestrictionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "syslog_brief"
--
CREATE PROCEDURE syslog_brief (acursession varchar(38),
asyslogid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF asyslogid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM syslog
    WHERE syslogid = g2b(asyslogid);
    IF aec > 0 THEN
      SET abrief = syslog_brief_f(g2b(asyslogid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "syslog_client_trigger"
--
CREATE PROCEDURE syslog_client_trigger (acursession varchar(38),
aSysLogid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "syslog_copy"
--
CREATE PROCEDURE syslog_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO syslog (syslogid
    , instanceid
    , thesession

    , the_resource

    , logstructid

    , verb

    , loginstanceid)
      SELECT
        copymap(acopyaction, b2g(syslogid)),
        copymap(acopyaction, b2g(instanceid)),
        thesession,
        the_resource,
        logstructid,
        verb,
        loginstanceid

      FROM syslog
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "syslog_delete"
--
CREATE PROCEDURE syslog_delete (acursession varchar(38),
asyslogid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM syslog
    WHERE syslogid = g2b(asyslogid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=syslog' result;
        LEAVE body;
      END IF;
      CALL syslog_logger(acursession, asyslogid);
      DELETE
        FROM syslog
      WHERE syslogid = g2b(asyslogid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'syslog'
        AND ownerrowid = g2b(asyslogid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "syslog_islocked"
--
CREATE PROCEDURE syslog_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM syslog
    WHERE syslogid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "syslog_lock"
--
CREATE PROCEDURE syslog_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL syslog_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE syslog
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE syslogid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE syslog
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE syslogid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "syslog_logger"
--
CREATE PROCEDURE syslog_logger (acursession varchar(38),
asyslogid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "syslog_parent"
--
CREATE PROCEDURE syslog_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM syslog
    WHERE syslogid = arowid;
  END
  $$

--
-- Создать процедуру "syslog_save"
--
CREATE PROCEDURE syslog_save (acursession varchar(38),
ainstanceid varchar(38),
asyslogid varchar(38)
, athesession varchar(38)/* сессия *//* сессия */
, athe_resource
varchar(255)/* ресурс *//* ресурс */
, alogstructid
varchar(255)/* раздел с которым происхоит действие *//* раздел с которым происхоит действие */
, averb
varchar(80)/* действие *//* действие */
, aloginstanceid binary(16)/* идентификатор документа *//* идентификатор документа */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM syslog
    WHERE syslogid = g2b(asyslogid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=syslog' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL syslog_logger(acursession, asyslogid);
        UPDATE syslog
        SET changestamp = NOW(),
            thesession = g2b(athesession),
            the_resource = athe_resource,
            logstructid = alogstructid,
            verb = averb,
            loginstanceid = aloginstanceid
        WHERE syslogid = g2b(asyslogid);


        CALL syslog_client_trigger(acursession, asyslogid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=syslog' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO syslog (changestamp, syslogid
          , instanceid
          , thesession

          , the_resource

          , logstructid

          , verb

          , loginstanceid)
            VALUES (NOW(), g2b(asyslogid), g2b(ainstanceid), g2b(athesession), athe_resource, alogstructid, averb, aloginstanceid);


          CALL syslog_client_trigger(acursession, asyslogid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "syslog_unlock"
--
CREATE PROCEDURE syslog_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL syslog_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE syslog
      SET lockuserid = NULL
      WHERE syslogid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE syslog
      SET locksessionid = NULL
      WHERE syslogid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "sysoptions_save"
--
CREATE PROCEDURE sysoptions_save (asysoptionsid varchar(38), aname varchar(255), avalue varchar(255), aoptiontype varchar(255))
BEGIN
  DECLARE aec int;
  SELECT
    COUNT(*) INTO aec
  FROM sysoptions
  WHERE sysoptionsid = g2b(asysoptionsid);
  IF aec > 0 THEN
    UPDATE sysoptions
    SET name = aname,
        value = avalue,
        optiontype = aoptiontype
    WHERE sysoptionsid = g2b(asysoptionsid);
  ELSE
    INSERT INTO sysoptions (sysoptionsid, name, value, optiontype)
      VALUES (g2b(asysoptionsid), aname, avalue, aoptiontype);
  END IF;
END
$$

--
-- Создать процедуру "sysrefcache_brief"
--
CREATE PROCEDURE sysrefcache_brief (acursession varchar(38),
asysrefcacheid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF asysrefcacheid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM sysrefcache
    WHERE sysrefcacheid = g2b(asysrefcacheid);
    IF aec > 0 THEN
      SET abrief = sysrefcache_brief_f(g2b(asysrefcacheid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "sysrefcache_client_trigger"
--
CREATE PROCEDURE sysrefcache_client_trigger (acursession varchar(38),
aSysRefCacheid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "sysrefcache_copy"
--
CREATE PROCEDURE sysrefcache_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO sysrefcache (sysrefcacheid
    , instanceid
    , cachetype

    , objectownerid

    , sessionid

    , modulename)
      SELECT
        copymap(acopyaction, b2g(sysrefcacheid)),
        copymap(acopyaction, b2g(instanceid)),
        cachetype,
        objectownerid,
        sessionid,
        modulename

      FROM sysrefcache
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "sysrefcache_delete"
--
CREATE PROCEDURE sysrefcache_delete (acursession varchar(38),
asysrefcacheid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM sysrefcache
    WHERE sysrefcacheid = g2b(asysrefcacheid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=sysrefcache' result;
        LEAVE body;
      END IF;
      CALL sysrefcache_logger(acursession, asysrefcacheid);
      DELETE
        FROM sysrefcache
      WHERE sysrefcacheid = g2b(asysrefcacheid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'sysrefcache'
        AND ownerrowid = g2b(asysrefcacheid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "sysrefcache_islocked"
--
CREATE PROCEDURE sysrefcache_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM sysrefcache
    WHERE sysrefcacheid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "sysrefcache_lock"
--
CREATE PROCEDURE sysrefcache_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL sysrefcache_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE sysrefcache
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE sysrefcacheid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE sysrefcache
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE sysrefcacheid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "sysrefcache_logger"
--
CREATE PROCEDURE sysrefcache_logger (acursession varchar(38),
asysrefcacheid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "sysrefcache_parent"
--
CREATE PROCEDURE sysrefcache_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM sysrefcache
    WHERE sysrefcacheid = arowid;
  END
  $$

--
-- Создать процедуру "sysrefcache_save"
--
CREATE PROCEDURE sysrefcache_save (acursession varchar(38),
ainstanceid varchar(38),
asysrefcacheid varchar(38)
, acachetype
integer/* тип кеширования *//* тип кеширования */
, aobjectownerid binary(16)/* идентификатор владельца *//* идентификатор владельца */
, asessionid varchar(38)/* сессия *//* сессия */
, amodulename
varchar(40)/* модуль *//* модуль */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM sysrefcache
    WHERE sysrefcacheid = g2b(asysrefcacheid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=sysrefcache' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL sysrefcache_logger(acursession, asysrefcacheid);
        UPDATE sysrefcache
        SET changestamp = NOW(),
            cachetype = acachetype,
            objectownerid = aobjectownerid,
            sessionid = g2b(asessionid),
            modulename = amodulename
        WHERE sysrefcacheid = g2b(asysrefcacheid);


        CALL sysrefcache_client_trigger(acursession, asysrefcacheid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=sysrefcache' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO sysrefcache (changestamp, sysrefcacheid
          , instanceid
          , cachetype

          , objectownerid

          , sessionid

          , modulename)
            VALUES (NOW(), g2b(asysrefcacheid), g2b(ainstanceid), acachetype, aobjectownerid, g2b(asessionid), amodulename);


          CALL sysrefcache_client_trigger(acursession, asysrefcacheid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "sysrefcache_unlock"
--
CREATE PROCEDURE sysrefcache_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL sysrefcache_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE sysrefcache
      SET lockuserid = NULL
      WHERE sysrefcacheid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE sysrefcache
      SET locksessionid = NULL
      WHERE sysrefcacheid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "the_session_brief"
--
CREATE PROCEDURE the_session_brief (acursession varchar(38),
athe_sessionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF athe_sessionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(athe_sessionid);
    IF aec > 0 THEN
      SET abrief = the_session_brief_f(g2b(athe_sessionid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "the_session_client_trigger"
--
CREATE PROCEDURE the_session_client_trigger (acursession varchar(38),
athe_Sessionid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "the_session_copy"
--
CREATE PROCEDURE the_session_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO the_session (the_sessionid
    , instanceid
    , applicationid

    , userrole

    , closedat

    , closed

    , usersid

    , lastaccess

    , startat

    , lang

    , login)
      SELECT
        copymap(acopyaction, b2g(the_sessionid)),
        copymap(acopyaction, b2g(instanceid)),
        applicationid,
        userrole,
        closedat,
        closed,
        usersid,
        lastaccess,
        startat,
        lang,
        login

      FROM the_session
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "the_session_delete"
--
CREATE PROCEDURE the_session_delete (acursession varchar(38),
athe_sessionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(athe_sessionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=the_session' result;
        LEAVE body;
      END IF;
      CALL the_session_logger(acursession, athe_sessionid);
      DELETE
        FROM the_session
      WHERE the_sessionid = g2b(athe_sessionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'the_session'
        AND ownerrowid = g2b(athe_sessionid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "the_session_islocked"
--
CREATE PROCEDURE the_session_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM the_session
    WHERE the_sessionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "the_session_lock"
--
CREATE PROCEDURE the_session_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL the_session_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE the_session
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE the_sessionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE the_session
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE the_sessionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "the_session_logger"
--
CREATE PROCEDURE the_session_logger (acursession varchar(38),
athe_sessionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "the_session_parent"
--
CREATE PROCEDURE the_session_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM the_session
    WHERE the_sessionid = arowid;
  END
  $$

--
-- Создать процедуру "the_session_save"
--
CREATE PROCEDURE the_session_save (acursession varchar(38),
ainstanceid varchar(38),
athe_sessionid varchar(38)
, aapplicationid varchar(38)/* приложение *//* приложение */
, auserrole varchar(38)/* текущая роль пользователя *//* текущая роль пользователя */
, aclosedat
datetime/* момент закрытия *//* момент закрытия */
, aclosed
integer/* закрыта *//* закрыта */
, ausersid varchar(38)/* пользователь *//* пользователь */
, alastaccess
datetime/* последнее подтверждение *//* последнее подтверждение */
, astartat
datetime/* момент открытия *//* момент открытия */
, alang
varchar(25)/* локализация *//* локализация */
, alogin
varchar(255)/* login *//* login */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(athe_sessionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=the_session' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL the_session_logger(acursession, athe_sessionid);
        UPDATE the_session
        SET changestamp = NOW(),
            applicationid = g2b(aapplicationid),
            userrole = g2b(auserrole),
            closedat = aclosedat,
            closed = aclosed,
            usersid = g2b(ausersid),
            lastaccess = alastaccess,
            startat = astartat,
            lang = alang,
            login = alogin
        WHERE the_sessionid = g2b(athe_sessionid);


        CALL the_session_client_trigger(acursession, athe_sessionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzsystem.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=the_session' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO the_session (changestamp, the_sessionid
          , instanceid
          , applicationid

          , userrole

          , closedat

          , closed

          , usersid

          , lastaccess

          , startat

          , lang

          , login)
            VALUES (NOW(), g2b(athe_sessionid), g2b(ainstanceid), g2b(aapplicationid), g2b(auserrole), aclosedat, aclosed, g2b(ausersid), alastaccess, astartat, alang, alogin);


          CALL the_session_client_trigger(acursession, athe_sessionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "the_session_unlock"
--
CREATE PROCEDURE the_session_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL the_session_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE the_session
      SET lockuserid = NULL
      WHERE the_sessionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE the_session
      SET locksessionid = NULL
      WHERE the_sessionid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "typemenu_brief"
--
CREATE PROCEDURE typemenu_brief (acursession varchar(38),
atypemenuid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atypemenuid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM typemenu
    WHERE typemenuid = g2b(atypemenuid);
    IF aec > 0 THEN
      SET abrief = typemenu_brief_f(g2b(atypemenuid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "typemenu_client_trigger"
--
CREATE PROCEDURE typemenu_client_trigger (acursession varchar(38),
aTYPEMENUid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "typemenu_copy"
--
CREATE PROCEDURE typemenu_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO typemenu (typemenuid
    , parentstructrowid
    , name

    , caption

    , tooltip

    , the_action

    , ismenuitem

    , istoolbarbutton

    , hotkey)
      SELECT
        copymap(acopyaction, b2g(typemenuid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        caption,
        tooltip,
        the_action,
        ismenuitem,
        istoolbarbutton,
        hotkey

      FROM typemenu
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "typemenu_delete"
--
CREATE PROCEDURE typemenu_delete (acursession varchar(38),
atypemenuid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM typemenu
    WHERE typemenuid = g2b(atypemenuid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=typemenu' result;
        LEAVE body;
      END IF;
      CALL typemenu_logger(acursession, atypemenuid);
      DELETE
        FROM typemenu
      WHERE typemenuid = g2b(atypemenuid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'typemenu'
        AND ownerrowid = g2b(atypemenuid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "typemenu_islocked"
--
CREATE PROCEDURE typemenu_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM typemenu
    WHERE typemenuid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "typemenu_lock"
--
CREATE PROCEDURE typemenu_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL typemenu_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE typemenu
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE typemenuid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE typemenu
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE typemenuid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "typemenu_logger"
--
CREATE PROCEDURE typemenu_logger (acursession varchar(38),
atypemenuid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "typemenu_parent"
--
CREATE PROCEDURE typemenu_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM typemenu
    WHERE typemenuid = arowid;
    SET aparenttable = 'objecttype';
  END
  $$

--
-- Создать процедуру "typemenu_save"
--
CREATE PROCEDURE typemenu_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
atypemenuid varchar(38)
, aname
varchar(64)/* название *//* название */
, acaption
varchar(80)/* заголовок *//* заголовок */
, atooltip
varchar(80)/* подсказка *//* подсказка */
, athe_action varchar(38)/* метод *//* метод */
, aismenuitem
integer/* включать в меню *//* включать в меню */
, aistoolbarbutton
integer/* включать в тулбар *//* включать в тулбар */
, ahotkey
varchar(20)/* горячая клавиша *//* горячая клавиша */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM typemenu
    WHERE typemenuid = g2b(atypemenuid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=typemenu' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL typemenu_logger(acursession, atypemenuid);
        UPDATE typemenu
        SET changestamp = NOW(),
            name = aname,
            caption = acaption,
            tooltip = atooltip,
            the_action = g2b(athe_action),
            ismenuitem = aismenuitem,
            istoolbarbutton = aistoolbarbutton,
            hotkey = ahotkey
        WHERE typemenuid = g2b(atypemenuid);


        CALL typemenu_client_trigger(acursession, atypemenuid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=typemenu' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO typemenu (changestamp, typemenuid
          , parentstructrowid
          , name

          , caption

          , tooltip

          , the_action

          , ismenuitem

          , istoolbarbutton

          , hotkey)
            VALUES (NOW(), g2b(atypemenuid), g2b(aparentstructrowid), aname, acaption, atooltip, g2b(athe_action), aismenuitem, aistoolbarbutton, ahotkey);


          CALL typemenu_client_trigger(acursession, atypemenuid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "typemenu_unlock"
--
CREATE PROCEDURE typemenu_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL typemenu_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE typemenu
      SET lockuserid = NULL
      WHERE typemenuid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE typemenu
      SET locksessionid = NULL
      WHERE typemenuid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "uniqueconstraint_brief"
--
CREATE PROCEDURE uniqueconstraint_brief (acursession varchar(38),
auniqueconstraintid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF auniqueconstraintid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM uniqueconstraint
    WHERE uniqueconstraintid = g2b(auniqueconstraintid);
    IF aec > 0 THEN
      SET abrief = uniqueconstraint_brief_f(g2b(auniqueconstraintid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "uniqueconstraint_client_trigger"
--
CREATE PROCEDURE uniqueconstraint_client_trigger (acursession varchar(38),
aUNIQUECONSTRAINTid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "uniqueconstraint_copy"
--
CREATE PROCEDURE uniqueconstraint_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    DECLARE aid binary(16);
    DECLARE fetch_done int DEFAULT FALSE;
    DECLARE copy_cursor_uniqueconstraint CURSOR FOR
    SELECT
      uniqueconstraintid
    FROM uniqueconstraint
    WHERE parentstructrowid = aparentstructrowid;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO uniqueconstraint (uniqueconstraintid
    , parentstructrowid
    , name

    , perparent

    , thecomment)
      SELECT
        copymap(acopyaction, b2g(uniqueconstraintid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        name,
        perparent,
        thecomment

      FROM uniqueconstraint
      WHERE parentstructrowid = g2b(aparentstructrowid);
    OPEN copy_cursor_uniqueconstraint;
    SET fetch_done = FALSE;
    FETCH copy_cursor_uniqueconstraint INTO aid;
    WHILE NOT fetch_done DO
      CALL constraintfield_copy(acursession, acopyaction, ainstanceid, aid);
      SET fetch_done = FALSE;
      FETCH copy_cursor_uniqueconstraint INTO aid;
    END WHILE;

    CLOSE copy_cursor_uniqueconstraint;
  END
  $$

--
-- Создать процедуру "uniqueconstraint_delete"
--
CREATE PROCEDURE uniqueconstraint_delete (acursession varchar(38),
auniqueconstraintid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM uniqueconstraint
    WHERE uniqueconstraintid = g2b(auniqueconstraintid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=uniqueconstraint' result;
        LEAVE body;
      END IF;
      CALL uniqueconstraint_logger(acursession, auniqueconstraintid);
      DELETE
        FROM uniqueconstraint
      WHERE uniqueconstraintid = g2b(auniqueconstraintid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'uniqueconstraint'
        AND ownerrowid = g2b(auniqueconstraintid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "uniqueconstraint_islocked"
--
CREATE PROCEDURE uniqueconstraint_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM uniqueconstraint
    WHERE uniqueconstraintid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "uniqueconstraint_lock"
--
CREATE PROCEDURE uniqueconstraint_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL uniqueconstraint_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE uniqueconstraint
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE uniqueconstraintid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE uniqueconstraint
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE uniqueconstraintid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "uniqueconstraint_logger"
--
CREATE PROCEDURE uniqueconstraint_logger (acursession varchar(38),
auniqueconstraintid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "uniqueconstraint_parent"
--
CREATE PROCEDURE uniqueconstraint_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM uniqueconstraint
    WHERE uniqueconstraintid = arowid;
    SET aparenttable = 'part';
  END
  $$

--
-- Создать процедуру "uniqueconstraint_save"
--
CREATE PROCEDURE uniqueconstraint_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
auniqueconstraintid varchar(38)
, aname
varchar(80)/* название *//* название */
, aperparent
integer/* по родителю *//* по родителю */
, athecomment
text/* описание *//* описание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM uniqueconstraint
    WHERE uniqueconstraintid = g2b(auniqueconstraintid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=uniqueconstraint' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL uniqueconstraint_logger(acursession, auniqueconstraintid);
        UPDATE uniqueconstraint
        SET changestamp = NOW(),
            name = aname,
            perparent = aperparent,
            thecomment = athecomment
        WHERE uniqueconstraintid = g2b(auniqueconstraintid);


        CALL uniqueconstraint_client_trigger(acursession, auniqueconstraintid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=uniqueconstraint' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO uniqueconstraint (changestamp, uniqueconstraintid
          , parentstructrowid
          , name

          , perparent

          , thecomment)
            VALUES (NOW(), g2b(auniqueconstraintid), g2b(aparentstructrowid), aname, aperparent, athecomment);


          CALL uniqueconstraint_client_trigger(acursession, auniqueconstraintid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "uniqueconstraint_unlock"
--
CREATE PROCEDURE uniqueconstraint_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL uniqueconstraint_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE uniqueconstraint
      SET lockuserid = NULL
      WHERE uniqueconstraintid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE uniqueconstraint
      SET locksessionid = NULL
      WHERE uniqueconstraintid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "users_brief"
--
CREATE PROCEDURE users_brief (acursession varchar(38),
ausersid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF ausersid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM users
    WHERE usersid = g2b(ausersid);
    IF aec > 0 THEN
      SET abrief = users_brief_f(g2b(ausersid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "users_client_trigger"
--
CREATE PROCEDURE users_client_trigger (acursession varchar(38),
aUsersid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "users_copy"
--
CREATE PROCEDURE users_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO users (usersid
    , instanceid
    , family

    , name

    , surname

    , login

    , password

    , domainame

    , email

    , phone

    , localphone)
      SELECT
        copymap(acopyaction, b2g(usersid)),
        copymap(acopyaction, b2g(instanceid)),
        family,
        name,
        surname,
        login,
        password,
        domainame,
        email,
        phone,
        localphone

      FROM users
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "users_delete"
--
CREATE PROCEDURE users_delete (acursession varchar(38),
ausersid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM users
    WHERE usersid = g2b(ausersid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzusers.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=users' result;
        LEAVE body;
      END IF;
      CALL users_logger(acursession, ausersid);
      DELETE
        FROM users
      WHERE usersid = g2b(ausersid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'users'
        AND ownerrowid = g2b(ausersid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "users_islocked"
--
CREATE PROCEDURE users_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM users
    WHERE usersid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "users_lock"
--
CREATE PROCEDURE users_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL users_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE users
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE usersid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE users
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE usersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "users_logger"
--
CREATE PROCEDURE users_logger (acursession varchar(38),
ausersid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "users_parent"
--
CREATE PROCEDURE users_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM users
    WHERE usersid = arowid;
  END
  $$

--
-- Создать процедуру "users_save"
--
CREATE PROCEDURE users_save (acursession varchar(38),
ainstanceid varchar(38),
ausersid varchar(38)
, afamily
varchar(255)/* фамилия *//* фамилия */
, aname
varchar(64)/* имя *//* имя */
, asurname
varchar(255)/* отчество *//* отчество */
, alogin
varchar(64)/* имя для входа *//* имя для входа */
, apassword varchar(80)/* пароль *//* пароль */
, adomainame
varchar(255)/* доменное имя *//* доменное имя */
, aemail varchar(255)/* e-mail *//* e-mail */
, aphone
varchar(20)/* телефон *//* телефон */
, alocalphone
varchar(20)/* местный телефон *//* местный телефон */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    DECLARE asessuserlogin varchar(40);
    DECLARE aec int;
    SELECT
      usersid INTO asessuserid
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    SELECT
      login INTO asessuserlogin
    FROM users
    WHERE usersid = g2b(asessuserid);
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM users
    WHERE usersid = g2b(ausersid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'users.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=users' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        UPDATE users
        SET changestamp = NOW(),
            family = afamily,
            name = aname,
            surname = asurname,
            login = alogin,
            domainame = adomainame,
            email = aemail,
            phone = aphone,
            localphone = alocalphone
        WHERE usersid = g2b(ausersid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM users
        WHERE instanceid = g2b(ainstanceid)
        AND login = alogin;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей. раздел=пользователи' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL users_client_trigger(acursession, ausersid);

        SELECT
          COUNT(*) INTO aec
        FROM users
        WHERE password = apassword
        AND usersid = g2b(ausersid);
        IF aec = 0 THEN
          IF apassword IS NULL THEN
            UPDATE users
            SET password = MD5(alogin)
            WHERE usersid = g2b(ausersid);
          ELSE
            UPDATE users
            SET password = MD5(apassword)
            WHERE usersid = g2b(ausersid);
          END IF;

        END IF;

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'users.add') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=users' result;
          LEAVE body;
        END IF;




        START TRANSACTION;
          INSERT INTO users (usersid
          , instanceid
          , family

          , name

          , surname

          , login

          , password

          , domainame

          , email

          , phone

          , localphone)
            VALUES (g2b(ausersid), g2b(ainstanceid), afamily, aname, asurname, alogin, MD5(apassword), adomainame, aemail, aphone, alocalphone);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM users
          WHERE instanceid = g2b(ainstanceid)
          AND login = alogin;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей. раздел=пользователи' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL users_client_trigger(acursession, ausersid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "users_unlock"
--
CREATE PROCEDURE users_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL users_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE users
      SET lockuserid = NULL
      WHERE usersid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE users
      SET locksessionid = NULL
      WHERE usersid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "validator_brief"
--
CREATE PROCEDURE validator_brief (acursession varchar(38),
avalidatorid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avalidatorid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM validator
    WHERE validatorid = g2b(avalidatorid);
    IF aec > 0 THEN
      SET abrief = validator_brief_f(g2b(avalidatorid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "validator_client_trigger"
--
CREATE PROCEDURE validator_client_trigger (acursession varchar(38),
aVALIDATORid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "validator_copy"
--
CREATE PROCEDURE validator_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO validator (validatorid
    , parentstructrowid
    , target

    , code)
      SELECT
        copymap(acopyaction, b2g(validatorid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        target,
        code

      FROM validator
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "validator_delete"
--
CREATE PROCEDURE validator_delete (acursession varchar(38),
avalidatorid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM validator
    WHERE validatorid = g2b(avalidatorid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=validator' result;
        LEAVE body;
      END IF;
      CALL validator_logger(acursession, avalidatorid);
      DELETE
        FROM validator
      WHERE validatorid = g2b(avalidatorid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'validator'
        AND ownerrowid = g2b(avalidatorid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "validator_islocked"
--
CREATE PROCEDURE validator_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM validator
    WHERE validatorid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "validator_lock"
--
CREATE PROCEDURE validator_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL validator_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE validator
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE validatorid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE validator
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE validatorid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "validator_logger"
--
CREATE PROCEDURE validator_logger (acursession varchar(38),
avalidatorid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "validator_parent"
--
CREATE PROCEDURE validator_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM validator
    WHERE validatorid = arowid;
    SET aparenttable = 'part';
  END
  $$

--
-- Создать процедуру "validator_save"
--
CREATE PROCEDURE validator_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
avalidatorid varchar(38)
, atarget varchar(38)/* целевая платформа *//* целевая платформа */
, acode
text/* скрипт *//* скрипт */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM validator
    WHERE validatorid = g2b(avalidatorid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=validator' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL validator_logger(acursession, avalidatorid);
        UPDATE validator
        SET changestamp = NOW(),
            target = g2b(atarget),
            code = acode
        WHERE validatorid = g2b(avalidatorid);


        CALL validator_client_trigger(acursession, avalidatorid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=validator' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO validator (changestamp, validatorid
          , parentstructrowid
          , target

          , code)
            VALUES (NOW(), g2b(avalidatorid), g2b(aparentstructrowid), g2b(atarget), acode);


          CALL validator_client_trigger(acursession, avalidatorid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "validator_unlock"
--
CREATE PROCEDURE validator_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL validator_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE validator
      SET lockuserid = NULL
      WHERE validatorid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE validator
      SET locksessionid = NULL
      WHERE validatorid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "vdage_copy"
--
CREATE PROCEDURE vdage_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_age_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdapl_copy"
--
CREATE PROCEDURE vdapl_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_platform_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdappr_copy"
--
CREATE PROCEDURE vdappr_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_approve_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdast_copy"
--
CREATE PROCEDURE vdast_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_adstate_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdbrw_copy"
--
CREATE PROCEDURE vdbrw_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_browser_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdcat_copy"
--
CREATE PROCEDURE vdcat_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_category_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdcn_copy"
--
CREATE PROCEDURE vdcn_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_country_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdcst_copy"
--
CREATE PROCEDURE vdcst_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_castate_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vddev_copy"
--
CREATE PROCEDURE vddev_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_device_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdfrmt_copy"
--
CREATE PROCEDURE vdfrmt_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_adformat_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdinter_copy"
--
CREATE PROCEDURE vdinter_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_interest_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdmstat_copy"
--
CREATE PROCEDURE vdmstat_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_matrialstatus_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdos_copy"
--
CREATE PROCEDURE vdos_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_os_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdpos_copy"
--
CREATE PROCEDURE vdpos_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_position_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdpt_copy"
--
CREATE PROCEDURE vdpt_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_paytype_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdrel_copy"
--
CREATE PROCEDURE vdrel_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_religion_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdrg_copy"
--
CREATE PROCEDURE vdrg_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_region_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdtt_copy"
--
CREATE PROCEDURE vdtt_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_tasktype_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "vdt_copy"
--
CREATE PROCEDURE vdt_copy (acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    SELECT
      UUID() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_town_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "viewcolumn_brief"
--
CREATE PROCEDURE viewcolumn_brief (acursession varchar(38),
aviewcolumnid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aviewcolumnid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM viewcolumn
    WHERE viewcolumnid = g2b(aviewcolumnid);
    IF aec > 0 THEN
      SET abrief = viewcolumn_brief_f(g2b(aviewcolumnid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "viewcolumn_client_trigger"
--
CREATE PROCEDURE viewcolumn_client_trigger (acursession varchar(38),
aViewColumnid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "viewcolumn_copy"
--
CREATE PROCEDURE viewcolumn_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38)
, aparentstructrowid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO viewcolumn (viewcolumnid
    , parentstructrowid
    , sequence

    , name

    , the_alias

    , frompart

    , field

    , aggregation

    , expression

    , forcombo)
      SELECT
        copymap(acopyaction, b2g(viewcolumnid)),
        copymap(acopyaction, b2g(parentstructrowid)),
        sequence,
        name,
        the_alias,
        frompart,
        field,
        aggregation,
        expression,
        forcombo

      FROM viewcolumn
      WHERE parentstructrowid = g2b(aparentstructrowid);
  END
  $$

--
-- Создать процедуру "viewcolumn_delete"
--
CREATE PROCEDURE viewcolumn_delete (acursession varchar(38),
aviewcolumnid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM viewcolumn
    WHERE viewcolumnid = g2b(aviewcolumnid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=viewcolumn' result;
        LEAVE body;
      END IF;
      CALL viewcolumn_logger(acursession, aviewcolumnid);
      DELETE
        FROM viewcolumn
      WHERE viewcolumnid = g2b(aviewcolumnid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'viewcolumn'
        AND ownerrowid = g2b(aviewcolumnid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "viewcolumn_islocked"
--
CREATE PROCEDURE viewcolumn_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM viewcolumn
    WHERE viewcolumnid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "viewcolumn_lock"
--
CREATE PROCEDURE viewcolumn_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL viewcolumn_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE viewcolumn
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE viewcolumnid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE viewcolumn
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE viewcolumnid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "viewcolumn_logger"
--
CREATE PROCEDURE viewcolumn_logger (acursession varchar(38),
aviewcolumnid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "viewcolumn_parent"
--
CREATE PROCEDURE viewcolumn_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      parentstructrowid INTO aparentid
    FROM viewcolumn
    WHERE viewcolumnid = arowid;
    SET aparenttable = 'partview';
  END
  $$

--
-- Создать процедуру "viewcolumn_save"
--
CREATE PROCEDURE viewcolumn_save (acursession varchar(38),
ainstanceid varchar(38),
aparentstructrowid varchar(38),
aviewcolumnid varchar(38)
, asequence
integer/* № *//* № */
, aname
varchar(255)/* название *//* название */
, athe_alias
varchar(64)/* псвдоним *//* псвдоним */
, afrompart varchar(38)/* раздел *//* раздел */
, afield varchar(38)/* поле *//* поле */
, aaggregation
integer/* агрегация *//* агрегация */
, aexpression
text/* формула *//* формула */
, aforcombo
integer/* для комбо *//* для комбо */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM viewcolumn
    WHERE viewcolumnid = g2b(aviewcolumnid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=viewcolumn' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL viewcolumn_logger(acursession, aviewcolumnid);
        UPDATE viewcolumn
        SET changestamp = NOW(),
            sequence = asequence,
            name = aname,
            the_alias = athe_alias,
            frompart = g2b(afrompart),
            field = g2b(afield),
            aggregation = aaggregation,
            expression = aexpression,
            forcombo = aforcombo
        WHERE viewcolumnid = g2b(aviewcolumnid);


        CALL viewcolumn_client_trigger(acursession, aviewcolumnid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzmetamodel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=viewcolumn' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO viewcolumn (changestamp, viewcolumnid
          , parentstructrowid
          , sequence

          , name

          , the_alias

          , frompart

          , field

          , aggregation

          , expression

          , forcombo)
            VALUES (NOW(), g2b(aviewcolumnid), g2b(aparentstructrowid), asequence, aname, athe_alias, g2b(afrompart), g2b(afield), aaggregation, aexpression, aforcombo);


          CALL viewcolumn_client_trigger(acursession, aviewcolumnid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "viewcolumn_unlock"
--
CREATE PROCEDURE viewcolumn_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL viewcolumn_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE viewcolumn
      SET lockuserid = NULL
      WHERE viewcolumnid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE viewcolumn
      SET locksessionid = NULL
      WHERE viewcolumnid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "workplace_brief"
--
CREATE PROCEDURE workplace_brief (acursession varchar(38),
aworkplaceid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF aworkplaceid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM workplace
    WHERE workplaceid = g2b(aworkplaceid);
    IF aec > 0 THEN
      SET abrief = workplace_brief_f(g2b(aworkplaceid), alang2);
    ELSE
      SET abrief = 'неверный идентификатор';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
  $$

--
-- Создать процедуру "workplace_client_trigger"
--
CREATE PROCEDURE workplace_client_trigger (acursession varchar(38),
aWorkPlaceid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "workplace_copy"
--
CREATE PROCEDURE workplace_copy (acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO workplace (workplaceid
    , instanceid
    , name

    , caption

    , theversion

    , theplatform

    , thecomment)
      SELECT
        copymap(acopyaction, b2g(workplaceid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        caption,
        theversion,
        theplatform,
        thecomment

      FROM workplace
      WHERE instanceid = g2b(ainstanceid);
  END
  $$

--
-- Создать процедуру "workplace_delete"
--
CREATE PROCEDURE workplace_delete (acursession varchar(38),
aworkplaceid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM workplace
    WHERE workplaceid = g2b(aworkplaceid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'удаление строк не разрешено. раздел=workplace' result;
        LEAVE body;
      END IF;
      CALL workplace_logger(acursession, aworkplaceid);
      DELETE
        FROM workplace
      WHERE workplaceid = g2b(aworkplaceid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'workplace'
        AND ownerrowid = g2b(aworkplaceid);
    END IF;
    SELECT
      'ok' result;
  END
  $$

--
-- Создать процедуру "workplace_islocked"
--
CREATE PROCEDURE workplace_islocked (acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM workplace
    WHERE workplaceid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
  $$

--
-- Создать процедуру "workplace_lock"
--
CREATE PROCEDURE workplace_lock (acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL workplace_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE workplace
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE workplaceid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE workplace
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE workplaceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "workplace_logger"
--
CREATE PROCEDURE workplace_logger (acursession varchar(38),
aworkplaceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать процедуру "workplace_parent"
--
CREATE PROCEDURE workplace_parent (acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM workplace
    WHERE workplaceid = arowid;
  END
  $$

--
-- Создать процедуру "workplace_save"
--
CREATE PROCEDURE workplace_save (acursession varchar(38),
ainstanceid varchar(38),
aworkplaceid varchar(38)
, aname
varchar(255)/* название *//* название */
, acaption
varchar(255)/* заголовок *//* заголовок */
, atheversion
varchar(30)/* версия *//* версия */
, atheplatform
integer/* платформа реализации *//* платформа реализации */
, athecomment
text/* примечание *//* примечание */
)
body:
  BEGIN
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        'сессия уже завершена.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM workplace
    WHERE workplaceid = g2b(aworkplaceid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          'изменение строк не разрешено. раздел=workplace' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL workplace_logger(acursession, aworkplaceid);
        UPDATE workplace
        SET changestamp = NOW(),
            name = aname,
            caption = acaption,
            theversion = atheversion,
            theplatform = atheplatform,
            thecomment = athecomment
        WHERE workplaceid = g2b(aworkplaceid);
        -- if asessuserlogin<>'replicator'  then
        SELECT
          COUNT(*) INTO auniquerowcount
        FROM workplace
        WHERE 1 = 1
        AND name = aname;
        IF auniquerowcount >= 2 THEN
          SELECT
            'нарущение уникальности сочетания полей.  раздел=арм правило=(уникальность для арм.название)' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        -- end if;

        CALL workplace_client_trigger(acursession, aworkplaceid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'mtzwp.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            'добавление строк не разрешено. раздел=workplace' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM workplace
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            'невозможно создать вторую строку в однострочной сессии. раздел: <workplace>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO workplace (changestamp, workplaceid
          , instanceid
          , name

          , caption

          , theversion

          , theplatform

          , thecomment)
            VALUES (NOW(), g2b(aworkplaceid), g2b(ainstanceid), aname, acaption, atheversion, atheplatform, athecomment);
          -- if asessuserlogin<>'replicator'  then
          SELECT
            COUNT(*) INTO auniquerowcount
          FROM workplace
          WHERE 1 = 1
          AND name = aname;
          IF auniquerowcount >= 2 THEN
            SELECT
              'нарущение уникальности сочетания полей.  раздел=арм правило=(уникальность для арм.название)' result;
            ROLLBACK;
            LEAVE body;
          END IF;
          -- end if;

          CALL workplace_client_trigger(acursession, aworkplaceid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
    $$

--
-- Создать процедуру "workplace_unlock"
--
CREATE PROCEDURE workplace_unlock (acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL workplace_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE workplace
      SET lockuserid = NULL
      WHERE workplaceid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE workplace
      SET locksessionid = NULL
      WHERE workplaceid = arowid;
      LEAVE body;
    END IF;
  END
  $$

--
-- Создать функцию "armjournal_brief_f"
--
CREATE FUNCTION armjournal_brief_f (aarmjournalid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aarmjournalid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM armjournal
  WHERE armjournalid = aarmjournalid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thejournal INTO atmpid
    FROM armjournal
    WHERE armjournalid = aarmjournalid;
    SELECT
      instance_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "armjournal_mref_f"
--
CREATE FUNCTION armjournal_mref_f (aarmjournal_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    armjournal_brief_f(armjournalid, alang)
  FROM armjournal
  WHERE aarmjournal_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(armjournalid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "armjrnladd_brief_f"
--
CREATE FUNCTION armjrnladd_brief_f (aarmjrnladdid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aarmjrnladdid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM armjrnladd
  WHERE armjrnladdid = aarmjrnladdid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM armjrnladd
    WHERE armjrnladdid = aarmjrnladdid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "armjrnladd_mref_f"
--
CREATE FUNCTION armjrnladd_mref_f (aarmjrnladd_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    armjrnladd_brief_f(armjrnladdid, alang)
  FROM armjrnladd
  WHERE aarmjrnladd_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(armjrnladdid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "armjrnlrep_brief_f"
--
CREATE FUNCTION armjrnlrep_brief_f (aarmjrnlrepid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aarmjrnlrepid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM armjrnlrep
  WHERE armjrnlrepid = aarmjrnlrepid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(repname, ''), ' ') INTO abrief
    FROM armjrnlrep
    WHERE armjrnlrepid = aarmjrnlrepid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "armjrnlrep_mref_f"
--
CREATE FUNCTION armjrnlrep_mref_f (aarmjrnlrep_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    armjrnlrep_brief_f(armjrnlrepid, alang)
  FROM armjrnlrep
  WHERE aarmjrnlrep_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(armjrnlrepid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "armjrnlrun_brief_f"
--
CREATE FUNCTION armjrnlrun_brief_f (aarmjrnlrunid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aarmjrnlrunid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM armjrnlrun
  WHERE armjrnlrunid = aarmjrnlrunid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM armjrnlrun
    WHERE armjrnlrunid = aarmjrnlrunid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "armjrnlrun_mref_f"
--
CREATE FUNCTION armjrnlrun_mref_f (aarmjrnlrun_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    armjrnlrun_brief_f(armjrnlrunid, alang)
  FROM armjrnlrun
  WHERE aarmjrnlrun_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(armjrnlrunid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "armtypes_brief_f"
--
CREATE FUNCTION armtypes_brief_f (aarmtypesid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aarmtypesid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM armtypes
  WHERE armtypesid = aarmtypesid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thedocumenttype INTO atmpid
    FROM armtypes
    WHERE armtypesid = aarmtypesid;
    SELECT
      objecttype_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "armtypes_mref_f"
--
CREATE FUNCTION armtypes_mref_f (aarmtypes_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    armtypes_brief_f(armtypesid, alang)
  FROM armtypes
  WHERE aarmtypes_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(armtypesid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "b2g"
--
CREATE FUNCTION b2g ($data binary(16))
RETURNS char(38) CHARSET utf8
DETERMINISTIC
BEGIN
  DECLARE $result char(38) DEFAULT NULL;
  IF $data IS NOT NULL THEN
    SET $result = CONCAT('{', HEX(SUBSTRING($data, 4, 1)), HEX(SUBSTRING($data, 3, 1)), HEX(SUBSTRING($data, 2, 1)), HEX(SUBSTRING($data, 1, 1)), '-',
    HEX(SUBSTRING($data, 6, 1)), HEX(SUBSTRING($data, 5, 1)), '-',
    HEX(SUBSTRING($data, 8, 1)), HEX(SUBSTRING($data, 7, 1)), '-',
    HEX(SUBSTRING($data, 9, 2)), '-', HEX(SUBSTRING($data, 11, 6)), '}');
    SET $result = UCASE($result);
  END IF;
  RETURN $result;
END
$$

--
-- Создать функцию "bpc_access_f"
--
CREATE FUNCTION bpc_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "bpc_export_f"
--
CREATE FUNCTION bpc_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "bpc_info_brief_f"
--
CREATE FUNCTION bpc_info_brief_f (abpc_infoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF abpc_infoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM bpc_info
  WHERE bpc_infoid = abpc_infoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM bpc_info
    WHERE bpc_infoid = abpc_infoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "bpc_info_mref_f"
--
CREATE FUNCTION bpc_info_mref_f (abpc_info_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    bpc_info_brief_f(bpc_infoid, alang)
  FROM bpc_info
  WHERE abpc_info_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(bpc_infoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "bpdi_access_f"
--
CREATE FUNCTION bpdi_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "bpdi_export_f"
--
CREATE FUNCTION bpdi_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "bpdr_access_f"
--
CREATE FUNCTION bpdr_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "bpdr_export_f"
--
CREATE FUNCTION bpdr_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "bprcfg_access_f"
--
CREATE FUNCTION bprcfg_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "bprcfg_export_f"
--
CREATE FUNCTION bprcfg_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "bpu_access_f"
--
CREATE FUNCTION bpu_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "bpu_export_f"
--
CREATE FUNCTION bpu_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "checkoperation"
--
CREATE FUNCTION checkoperation (acursession varchar(38)
, aopname varchar(255))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE isok int;
  SELECT
    1 INTO isok;
  /*select roles_operations.allowaction into isok from   roles_operations  
      join roles_def on roles_def.instanceid=roles_operations.instanceid
      join the_session on the_session.userrole=roles_def.roles_defid
      where the_session.the_sessionid=g2b(acursession) 
      and roles_operations.name=aopname;
*/
  IF isok <> 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END
$$

--
-- Создать функцию "constraintfield_brief_f"
--
CREATE FUNCTION constraintfield_brief_f (aconstraintfieldid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aconstraintfieldid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM constraintfield
  WHERE constraintfieldid = aconstraintfieldid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thefield INTO atmpid
    FROM constraintfield
    WHERE constraintfieldid = aconstraintfieldid;
    SELECT
      field_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "constraintfield_mref_f"
--
CREATE FUNCTION constraintfield_mref_f (aconstraintfield_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    constraintfield_brief_f(constraintfieldid, alang)
  FROM constraintfield
  WHERE aconstraintfield_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(constraintfieldid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "dinamicfilterscript_brief_f"
--
CREATE FUNCTION dinamicfilterscript_brief_f (adinamicfilterscriptid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF adinamicfilterscriptid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM dinamicfilterscript
  WHERE dinamicfilterscriptid = adinamicfilterscriptid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM dinamicfilterscript
    WHERE dinamicfilterscriptid = adinamicfilterscriptid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "dinamicfilterscript_mref_f"
--
CREATE FUNCTION dinamicfilterscript_mref_f (adinamicfilterscript_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    dinamicfilterscript_brief_f(dinamicfilterscriptid, alang)
  FROM dinamicfilterscript
  WHERE adinamicfilterscript_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(dinamicfilterscriptid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "entrypoints_brief_f"
--
CREATE FUNCTION entrypoints_brief_f (aentrypointsid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aentrypointsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM entrypoints
  WHERE entrypointsid = aentrypointsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM entrypoints
    WHERE entrypointsid = aentrypointsid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM entrypoints
    WHERE entrypointsid = aentrypointsid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "entrypoints_mref_f"
--
CREATE FUNCTION entrypoints_mref_f (aentrypoints_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    entrypoints_brief_f(entrypointsid, alang)
  FROM entrypoints
  WHERE aentrypoints_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(entrypointsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "enumitem_brief_f"
--
CREATE FUNCTION enumitem_brief_f (aenumitemid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aenumitemid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM enumitem
  WHERE enumitemid = aenumitemid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM enumitem
    WHERE enumitemid = aenumitemid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(namevalue, ''), ' ') INTO abrief
    FROM enumitem
    WHERE enumitemid = aenumitemid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "enumitem_mref_f"
--
CREATE FUNCTION enumitem_mref_f (aenumitem_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    enumitem_brief_f(enumitemid, alang)
  FROM enumitem
  WHERE aenumitem_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(enumitemid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "epfilterlink_brief_f"
--
CREATE FUNCTION epfilterlink_brief_f (aepfilterlinkid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aepfilterlinkid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM epfilterlink
  WHERE epfilterlinkid = aepfilterlinkid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(rowsource, ''), ' ') INTO abrief
    FROM epfilterlink
    WHERE epfilterlinkid = aepfilterlinkid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "epfilterlink_mref_f"
--
CREATE FUNCTION epfilterlink_mref_f (aepfilterlink_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    epfilterlink_brief_f(epfilterlinkid, alang)
  FROM epfilterlink
  WHERE aepfilterlink_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(epfilterlinkid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "extenderinterface_brief_f"
--
CREATE FUNCTION extenderinterface_brief_f (aextenderinterfaceid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aextenderinterfaceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM extenderinterface
  WHERE extenderinterfaceid = aextenderinterfaceid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(thename, ''), ' ') INTO abrief
    FROM extenderinterface
    WHERE extenderinterfaceid = aextenderinterfaceid;
    SELECT
      targetplatform INTO atmpid
    FROM extenderinterface
    WHERE extenderinterfaceid = aextenderinterfaceid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      CONCAT(abrief
      , '', IFNULL(theobject, ''), ' ') INTO abrief
    FROM extenderinterface
    WHERE extenderinterfaceid = aextenderinterfaceid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "extenderinterface_mref_f"
--
CREATE FUNCTION extenderinterface_mref_f (aextenderinterface_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    extenderinterface_brief_f(extenderinterfaceid, alang)
  FROM extenderinterface
  WHERE aextenderinterface_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(extenderinterfaceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldexpression_brief_f"
--
CREATE FUNCTION fieldexpression_brief_f (afieldexpressionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldexpressionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldexpression
  WHERE fieldexpressionid = afieldexpressionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM fieldexpression
    WHERE fieldexpressionid = afieldexpressionid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldexpression_mref_f"
--
CREATE FUNCTION fieldexpression_mref_f (afieldexpression_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldexpression_brief_f(fieldexpressionid, alang)
  FROM fieldexpression
  WHERE afieldexpression_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldexpressionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldmenu_brief_f"
--
CREATE FUNCTION fieldmenu_brief_f (afieldmenuid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldmenuid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldmenu
  WHERE fieldmenuid = afieldmenuid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM fieldmenu
    WHERE fieldmenuid = afieldmenuid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldmenu_mref_f"
--
CREATE FUNCTION fieldmenu_mref_f (afieldmenu_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldmenu_brief_f(fieldmenuid, alang)
  FROM fieldmenu
  WHERE afieldmenu_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldmenuid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldparammap_brief_f"
--
CREATE FUNCTION fieldparammap_brief_f (afieldparammapid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldparammapid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldparammap
  WHERE fieldparammapid = afieldparammapid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(fieldname, ''), ' ') INTO abrief
    FROM fieldparammap
    WHERE fieldparammapid = afieldparammapid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(paramname, ''), ' ') INTO abrief
    FROM fieldparammap
    WHERE fieldparammapid = afieldparammapid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldparammap_mref_f"
--
CREATE FUNCTION fieldparammap_mref_f (afieldparammap_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldparammap_brief_f(fieldparammapid, alang)
  FROM fieldparammap
  WHERE afieldparammap_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldparammapid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldrestriction_brief_f"
--
CREATE FUNCTION fieldrestriction_brief_f (afieldrestrictionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldrestrictionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldrestriction
  WHERE fieldrestrictionid = afieldrestrictionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thepart INTO atmpid
    FROM fieldrestriction
    WHERE fieldrestrictionid = afieldrestrictionid;
    SELECT
      part_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      thefield INTO atmpid
    FROM fieldrestriction
    WHERE fieldrestrictionid = afieldrestrictionid;
    SELECT
      field_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      allowread INTO aec
    FROM fieldrestriction
    WHERE fieldrestrictionid = afieldrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
    SELECT
      allowmodify INTO aec
    FROM fieldrestriction
    WHERE fieldrestrictionid = afieldrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldrestriction_mref_f"
--
CREATE FUNCTION fieldrestriction_mref_f (afieldrestriction_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldrestriction_brief_f(fieldrestrictionid, alang)
  FROM fieldrestriction
  WHERE afieldrestriction_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldrestrictionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldsrcdef_brief_f"
--
CREATE FUNCTION fieldsrcdef_brief_f (afieldsrcdefid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldsrcdefid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldsrcdef
  WHERE fieldsrcdefid = afieldsrcdefid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(datasource, ''), ' ') INTO abrief
    FROM fieldsrcdef
    WHERE fieldsrcdefid = afieldsrcdefid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldsrcdef_mref_f"
--
CREATE FUNCTION fieldsrcdef_mref_f (afieldsrcdef_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldsrcdef_brief_f(fieldsrcdefid, alang)
  FROM fieldsrcdef
  WHERE afieldsrcdef_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldsrcdefid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldtypemap_brief_f"
--
CREATE FUNCTION fieldtypemap_brief_f (afieldtypemapid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldtypemapid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldtypemap
  WHERE fieldtypemapid = afieldtypemapid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM fieldtypemap
    WHERE fieldtypemapid = afieldtypemapid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      CONCAT(abrief
      , '', IFNULL(stoagetype, ''), ' ') INTO abrief
    FROM fieldtypemap
    WHERE fieldtypemapid = afieldtypemapid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldtypemap_mref_f"
--
CREATE FUNCTION fieldtypemap_mref_f (afieldtypemap_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldtypemap_brief_f(fieldtypemapid, alang)
  FROM fieldtypemap
  WHERE afieldtypemap_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldtypemapid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldtype_brief_f"
--
CREATE FUNCTION fieldtype_brief_f (afieldtypeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldtypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldtype
  WHERE fieldtypeid = afieldtypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM fieldtype
    WHERE fieldtypeid = afieldtypeid;
    SELECT
      typestyle INTO aec
    FROM fieldtype
    WHERE fieldtypeid = afieldtypeid;
    CASE aec
      WHEN 4 THEN SELECT
            CONCAT(abrief,
            'ссылка; ') INTO abrief;
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'выражение; ') INTO abrief;
      WHEN 5 THEN SELECT
            CONCAT(abrief,
            'элемент оформления; ') INTO abrief;
      WHEN 3 THEN SELECT
            CONCAT(abrief,
            'интервал; ') INTO abrief;
      WHEN 2 THEN SELECT
            CONCAT(abrief,
            'перечисление; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'скалярный тип; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldtype_mref_f"
--
CREATE FUNCTION fieldtype_mref_f (afieldtype_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldtype_brief_f(fieldtypeid, alang)
  FROM fieldtype
  WHERE afieldtype_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldtypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fieldvalidator_brief_f"
--
CREATE FUNCTION fieldvalidator_brief_f (afieldvalidatorid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldvalidatorid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fieldvalidator
  WHERE fieldvalidatorid = afieldvalidatorid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM fieldvalidator
    WHERE fieldvalidatorid = afieldvalidatorid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fieldvalidator_mref_f"
--
CREATE FUNCTION fieldvalidator_mref_f (afieldvalidator_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fieldvalidator_brief_f(fieldvalidatorid, alang)
  FROM fieldvalidator
  WHERE afieldvalidator_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldvalidatorid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "field_brief_f"
--
CREATE FUNCTION field_brief_f (afieldid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afieldid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM field
  WHERE fieldid = afieldid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM field
    WHERE fieldid = afieldid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM field
    WHERE fieldid = afieldid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "field_mref_f"
--
CREATE FUNCTION field_mref_f (afield_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    field_brief_f(fieldid, alang)
  FROM field
  WHERE afield_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fieldid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fileterfield_brief_f"
--
CREATE FUNCTION fileterfield_brief_f (afileterfieldid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afileterfieldid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fileterfield
  WHERE fileterfieldid = afileterfieldid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM fileterfield
    WHERE fileterfieldid = afileterfieldid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM fileterfield
    WHERE fileterfieldid = afileterfieldid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fileterfield_mref_f"
--
CREATE FUNCTION fileterfield_mref_f (afileterfield_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fileterfield_brief_f(fileterfieldid, alang)
  FROM fileterfield
  WHERE afileterfield_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fileterfieldid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "filterfieldgroup_brief_f"
--
CREATE FUNCTION filterfieldgroup_brief_f (afilterfieldgroupid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afilterfieldgroupid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM filterfieldgroup
  WHERE filterfieldgroupid = afilterfieldgroupid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM filterfieldgroup
    WHERE filterfieldgroupid = afilterfieldgroupid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM filterfieldgroup
    WHERE filterfieldgroupid = afilterfieldgroupid;
    SELECT
      allowignore INTO aec
    FROM filterfieldgroup
    WHERE filterfieldgroupid = afilterfieldgroupid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "filterfieldgroup_mref_f"
--
CREATE FUNCTION filterfieldgroup_mref_f (afilterfieldgroup_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    filterfieldgroup_brief_f(filterfieldgroupid, alang)
  FROM filterfieldgroup
  WHERE afilterfieldgroup_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(filterfieldgroupid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "filters_brief_f"
--
CREATE FUNCTION filters_brief_f (afiltersid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afiltersid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM filters
  WHERE filtersid = afiltersid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM filters
    WHERE filtersid = afiltersid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "filters_mref_f"
--
CREATE FUNCTION filters_mref_f (afilters_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    filters_brief_f(filtersid, alang)
  FROM filters
  WHERE afilters_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(filtersid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "fldextenders_brief_f"
--
CREATE FUNCTION fldextenders_brief_f (afldextendersid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF afldextendersid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM fldextenders
  WHERE fldextendersid = afldextendersid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(thename, ''), ' ') INTO abrief
    FROM fldextenders
    WHERE fldextendersid = afldextendersid;
    SELECT
      targetplatform INTO atmpid
    FROM fldextenders
    WHERE fldextendersid = afldextendersid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      CONCAT(abrief
      , '', IFNULL(theobject, ''), ' ') INTO abrief
    FROM fldextenders
    WHERE fldextendersid = afldextendersid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "fldextenders_mref_f"
--
CREATE FUNCTION fldextenders_mref_f (afldextenders_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    fldextenders_brief_f(fldextendersid, alang)
  FROM fldextenders
  WHERE afldextenders_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(fldextendersid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "g2b"
--
CREATE FUNCTION g2b ($data varchar(38))
RETURNS binary(16)
DETERMINISTIC
BEGIN
  DECLARE $result binary(16) DEFAULT NULL;
  IF $data IS NOT NULL THEN
    SET $data = REPLACE($data, '-', '');
    SET $data = REPLACE($data, '{', '');
    SET $data = REPLACE($data, '}', '');
    SET $result = CONCAT(UNHEX(SUBSTRING($data, 7, 2)), UNHEX(SUBSTRING($data, 5, 2)), UNHEX(SUBSTRING($data, 3, 2)), UNHEX(SUBSTRING($data, 1, 2)),
    UNHEX(SUBSTRING($data, 11, 2)), UNHEX(SUBSTRING($data, 9, 2)), UNHEX(SUBSTRING($data, 15, 2)), UNHEX(SUBSTRING($data, 13, 2)),
    UNHEX(SUBSTRING($data, 17, 16)));
  END IF;
  RETURN $result;
END
$$

--
-- Создать функцию "gencontrols_brief_f"
--
CREATE FUNCTION gencontrols_brief_f (agencontrolsid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agencontrolsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM gencontrols
  WHERE gencontrolsid = agencontrolsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(controlprogid, ''), ' ') INTO abrief
    FROM gencontrols
    WHERE gencontrolsid = agencontrolsid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "gencontrols_mref_f"
--
CREATE FUNCTION gencontrols_mref_f (agencontrols_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    gencontrols_brief_f(gencontrolsid, alang)
  FROM gencontrols
  WHERE agencontrols_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(gencontrolsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "generator_target_brief_f"
--
CREATE FUNCTION generator_target_brief_f (agenerator_targetid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agenerator_targetid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM generator_target
  WHERE generator_targetid = agenerator_targetid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM generator_target
    WHERE generator_targetid = agenerator_targetid;
    SELECT
      targettype INTO aec
    FROM generator_target
    WHERE generator_targetid = agenerator_targetid;
    CASE aec
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'субд; ') INTO abrief;
      WHEN 3 THEN SELECT
            CONCAT(abrief,
            'документация; ') INTO abrief;
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'модель; ') INTO abrief;
      WHEN 2 THEN SELECT
            CONCAT(abrief,
            'приложение; ') INTO abrief;
      WHEN 4 THEN SELECT
            CONCAT(abrief,
            'арм; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "generator_target_mref_f"
--
CREATE FUNCTION generator_target_mref_f (agenerator_target_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    generator_target_brief_f(generator_targetid, alang)
  FROM generator_target
  WHERE agenerator_target_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(generator_targetid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "genmanualcode_brief_f"
--
CREATE FUNCTION genmanualcode_brief_f (agenmanualcodeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agenmanualcodeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM genmanualcode
  WHERE genmanualcodeid = agenmanualcodeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM genmanualcode
    WHERE genmanualcodeid = agenmanualcodeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "genmanualcode_mref_f"
--
CREATE FUNCTION genmanualcode_mref_f (agenmanualcode_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    genmanualcode_brief_f(genmanualcodeid, alang)
  FROM genmanualcode
  WHERE agenmanualcode_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(genmanualcodeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "genpackage_brief_f"
--
CREATE FUNCTION genpackage_brief_f (agenpackageid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agenpackageid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM genpackage
  WHERE genpackageid = agenpackageid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM genpackage
    WHERE genpackageid = agenpackageid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "genpackage_mref_f"
--
CREATE FUNCTION genpackage_mref_f (agenpackage_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    genpackage_brief_f(genpackageid, alang)
  FROM genpackage
  WHERE agenpackage_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(genpackageid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "genreference_brief_f"
--
CREATE FUNCTION genreference_brief_f (agenreferenceid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agenreferenceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM genreference
  WHERE genreferenceid = agenreferenceid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM genreference
    WHERE genreferenceid = agenreferenceid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "genreference_mref_f"
--
CREATE FUNCTION genreference_mref_f (agenreference_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    genreference_brief_f(genreferenceid, alang)
  FROM genreference
  WHERE agenreference_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(genreferenceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "getbrieffromxml"
--
CREATE FUNCTION getbrieffromxml (axmlsource varchar(255))
RETURNS varchar(255) CHARSET utf8
DETERMINISTIC
body:
  BEGIN
    DECLARE aoutstr varchar(255);
    DECLARE afrom int;
    DECLARE ato int;
    SET afrom = charindex('<brief>', axmlsource);
    SET ato = charindex('</brief>', axmlsource);
    IF (afrom > 0
      AND ato > 0) THEN
      SET aoutstr = SUBSTRING(axmlsource, afrom + 7, ato - afrom - 7);
    ELSE
      SET aoutstr = '';
    END IF;
    RETURN aoutstr;
  END
  $$

--
-- Создать функцию "getidfromxml"
--
CREATE FUNCTION getidfromxml (axmlsource varchar(255))
RETURNS varchar(255) CHARSET utf8
DETERMINISTIC
BEGIN
  DECLARE aoutstr varchar(255);
  DECLARE afrom int;
  DECLARE ato int;

  SET afrom = charindex('<id>', axmlsource);
  SET ato = charindex('</id>', axmlsource);
  IF (afrom > 0
    AND ato > 0) THEN
    SET aoutstr = SUBSTRING(axmlsource, afrom + 4, ato - afrom - 4);
  ELSE
    SET aoutstr = '';
  END IF;

  RETURN aoutstr;
END
$$

--
-- Создать функцию "groups_brief_f"
--
CREATE FUNCTION groups_brief_f (agroupsid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agroupsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM groups
  WHERE groupsid = agroupsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM groups
    WHERE groupsid = agroupsid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "groups_mref_f"
--
CREATE FUNCTION groups_mref_f (agroups_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    groups_brief_f(groupsid, alang)
  FROM groups
  WHERE agroups_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(groupsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "groupuser_brief_f"
--
CREATE FUNCTION groupuser_brief_f (agroupuserid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF agroupuserid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM groupuser
  WHERE groupuserid = agroupuserid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      theuser INTO atmpid
    FROM groupuser
    WHERE groupuserid = agroupuserid;
    SELECT
      users_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "groupuser_mref_f"
--
CREATE FUNCTION groupuser_mref_f (agroupuser_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    groupuser_brief_f(groupuserid, alang)
  FROM groupuser
  WHERE agroupuser_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(groupuserid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "instancevalidator_brief_f"
--
CREATE FUNCTION instancevalidator_brief_f (ainstancevalidatorid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ainstancevalidatorid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM instancevalidator
  WHERE instancevalidatorid = ainstancevalidatorid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM instancevalidator
    WHERE instancevalidatorid = ainstancevalidatorid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "instancevalidator_mref_f"
--
CREATE FUNCTION instancevalidator_mref_f (ainstancevalidator_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    instancevalidator_brief_f(instancevalidatorid, alang)
  FROM instancevalidator
  WHERE ainstancevalidator_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(instancevalidatorid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "instance_brief_f"
--
CREATE FUNCTION instance_brief_f (ainstanceid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE aec int;
  IF ainstanceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM instance
  WHERE instanceid = ainstanceid;
  IF aec = 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , IFNULL(name, '')) INTO abrief
    FROM instance
    WHERE instanceid = ainstanceid;
  ELSE
    SET abrief = '';
  END IF;
  SET abrief = LEFT(abrief, 255);
  RETURN abrief;
END
$$

--
-- Создать функцию "instance_mref_f"
--
CREATE FUNCTION instance_mref_f (ainstance_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    instance_brief_f(instanceid, alang)
  FROM instance
  WHERE ainstance_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(instanceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "iu_crole_brief_f"
--
CREATE FUNCTION iu_crole_brief_f (aiu_croleid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aiu_croleid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM iu_crole
  WHERE iu_croleid = aiu_croleid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM iu_crole
    WHERE iu_croleid = aiu_croleid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "iu_crole_mref_f"
--
CREATE FUNCTION iu_crole_mref_f (aiu_crole_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    iu_crole_brief_f(iu_croleid, alang)
  FROM iu_crole
  WHERE aiu_crole_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(iu_croleid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "iu_int_modules_brief_f"
--
CREATE FUNCTION iu_int_modules_brief_f (aiu_int_modulesid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aiu_int_modulesid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM iu_int_modules
  WHERE iu_int_modulesid = aiu_int_modulesid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM iu_int_modules
    WHERE iu_int_modulesid = aiu_int_modulesid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM iu_int_modules
    WHERE iu_int_modulesid = aiu_int_modulesid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "iu_int_modules_mref_f"
--
CREATE FUNCTION iu_int_modules_mref_f (aiu_int_modules_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    iu_int_modules_brief_f(iu_int_modulesid, alang)
  FROM iu_int_modules
  WHERE aiu_int_modules_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(iu_int_modulesid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "iu_rcfg_def_brief_f"
--
CREATE FUNCTION iu_rcfg_def_brief_f (aiu_rcfg_defid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aiu_rcfg_defid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM iu_rcfg_def
  WHERE iu_rcfg_defid = aiu_rcfg_defid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      therole INTO atmpid
    FROM iu_rcfg_def
    WHERE iu_rcfg_defid = aiu_rcfg_defid;
    SELECT
      iu_crole_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "iu_rcfg_def_mref_f"
--
CREATE FUNCTION iu_rcfg_def_mref_f (aiu_rcfg_def_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    iu_rcfg_def_brief_f(iu_rcfg_defid, alang)
  FROM iu_rcfg_def
  WHERE aiu_rcfg_def_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(iu_rcfg_defid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "iu_rcfg_docmode_brief_f"
--
CREATE FUNCTION iu_rcfg_docmode_brief_f (aiu_rcfg_docmodeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aiu_rcfg_docmodeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM iu_rcfg_docmode
  WHERE iu_rcfg_docmodeid = aiu_rcfg_docmodeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      the_document INTO atmpid
    FROM iu_rcfg_docmode
    WHERE iu_rcfg_docmodeid = aiu_rcfg_docmodeid;
    SELECT
      objecttype_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "iu_rcfg_docmode_mref_f"
--
CREATE FUNCTION iu_rcfg_docmode_mref_f (aiu_rcfg_docmode_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    iu_rcfg_docmode_brief_f(iu_rcfg_docmodeid, alang)
  FROM iu_rcfg_docmode
  WHERE aiu_rcfg_docmode_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(iu_rcfg_docmodeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "iu_rcfg_mod_brief_f"
--
CREATE FUNCTION iu_rcfg_mod_brief_f (aiu_rcfg_modid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aiu_rcfg_modid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM iu_rcfg_mod
  WHERE iu_rcfg_modid = aiu_rcfg_modid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = aiu_rcfg_modid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM iu_rcfg_mod
    WHERE iu_rcfg_modid = aiu_rcfg_modid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "iu_rcfg_mod_mref_f"
--
CREATE FUNCTION iu_rcfg_mod_mref_f (aiu_rcfg_mod_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    iu_rcfg_mod_brief_f(iu_rcfg_modid, alang)
  FROM iu_rcfg_mod
  WHERE aiu_rcfg_mod_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(iu_rcfg_modid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "iu_u_def_brief_f"
--
CREATE FUNCTION iu_u_def_brief_f (aiu_u_defid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aiu_u_defid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM iu_u_def
  WHERE iu_u_defid = aiu_u_defid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(lastname, ''), ' ') INTO abrief
    FROM iu_u_def
    WHERE iu_u_defid = aiu_u_defid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM iu_u_def
    WHERE iu_u_defid = aiu_u_defid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(surname, ''), ' ') INTO abrief
    FROM iu_u_def
    WHERE iu_u_defid = aiu_u_defid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "iu_u_def_mref_f"
--
CREATE FUNCTION iu_u_def_mref_f (aiu_u_def_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    iu_u_def_brief_f(iu_u_defid, alang)
  FROM iu_u_def
  WHERE aiu_u_def_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(iu_u_defid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "jcolumnsource_brief_f"
--
CREATE FUNCTION jcolumnsource_brief_f (ajcolumnsourceid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ajcolumnsourceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM jcolumnsource
  WHERE jcolumnsourceid = ajcolumnsourceid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(viewfield, ''), ' ') INTO abrief
    FROM jcolumnsource
    WHERE jcolumnsourceid = ajcolumnsourceid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "jcolumnsource_mref_f"
--
CREATE FUNCTION jcolumnsource_mref_f (ajcolumnsource_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    jcolumnsource_brief_f(jcolumnsourceid, alang)
  FROM jcolumnsource
  WHERE ajcolumnsource_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(jcolumnsourceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "journalcolumn_brief_f"
--
CREATE FUNCTION journalcolumn_brief_f (ajournalcolumnid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ajournalcolumnid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM journalcolumn
  WHERE journalcolumnid = ajournalcolumnid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM journalcolumn
    WHERE journalcolumnid = ajournalcolumnid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "journalcolumn_mref_f"
--
CREATE FUNCTION journalcolumn_mref_f (ajournalcolumn_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    journalcolumn_brief_f(journalcolumnid, alang)
  FROM journalcolumn
  WHERE ajournalcolumn_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(journalcolumnid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "journalsrc_brief_f"
--
CREATE FUNCTION journalsrc_brief_f (ajournalsrcid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ajournalsrcid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM journalsrc
  WHERE journalsrcid = ajournalsrcid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(partview, ''), ' ') INTO abrief
    FROM journalsrc
    WHERE journalsrcid = ajournalsrcid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "journalsrc_mref_f"
--
CREATE FUNCTION journalsrc_mref_f (ajournalsrc_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    journalsrc_brief_f(journalsrcid, alang)
  FROM journalsrc
  WHERE ajournalsrc_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(journalsrcid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "journal_brief_f"
--
CREATE FUNCTION journal_brief_f (ajournalid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ajournalid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM journal
  WHERE journalid = ajournalid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM journal
    WHERE journalid = ajournalid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "journal_mref_f"
--
CREATE FUNCTION journal_mref_f (ajournal_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    journal_brief_f(journalid, alang)
  FROM journal
  WHERE ajournal_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(journalid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "localizeinfo_brief_f"
--
CREATE FUNCTION localizeinfo_brief_f (alocalizeinfoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF alocalizeinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM localizeinfo
  WHERE localizeinfoid = alocalizeinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(langfull, ''), ' ') INTO abrief
    FROM localizeinfo
    WHERE localizeinfoid = alocalizeinfoid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(langshort, ''), ' ') INTO abrief
    FROM localizeinfo
    WHERE localizeinfoid = alocalizeinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "localizeinfo_mref_f"
--
CREATE FUNCTION localizeinfo_mref_f (alocalizeinfo_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    localizeinfo_brief_f(localizeinfoid, alang)
  FROM localizeinfo
  WHERE alocalizeinfo_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(localizeinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "methodrestriction_brief_f"
--
CREATE FUNCTION methodrestriction_brief_f (amethodrestrictionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF amethodrestrictionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM methodrestriction
  WHERE methodrestrictionid = amethodrestrictionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      method INTO atmpid
    FROM methodrestriction
    WHERE methodrestrictionid = amethodrestrictionid;
    SELECT
      sharedmethod_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      isrestricted INTO aec
    FROM methodrestriction
    WHERE methodrestrictionid = amethodrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "methodrestriction_mref_f"
--
CREATE FUNCTION methodrestriction_mref_f (amethodrestriction_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    methodrestriction_brief_f(methodrestrictionid, alang)
  FROM methodrestriction
  WHERE amethodrestriction_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(methodrestrictionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "mtzapp_brief_f"
--
CREATE FUNCTION mtzapp_brief_f (amtzappid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF amtzappid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM mtzapp
  WHERE mtzappid = amtzappid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM mtzapp
    WHERE mtzappid = amtzappid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "mtzapp_mref_f"
--
CREATE FUNCTION mtzapp_mref_f (amtzapp_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    mtzapp_brief_f(mtzappid, alang)
  FROM mtzapp
  WHERE amtzapp_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(mtzappid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "mtzextrel_brief_f"
--
CREATE FUNCTION mtzextrel_brief_f (amtzextrelid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF amtzextrelid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM mtzextrel
  WHERE mtzextrelid = amtzextrelid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      theplatform INTO aec
    FROM mtzextrel
    WHERE mtzextrelid = amtzextrelid;
    CASE aec
      WHEN 3 THEN SELECT
            CONCAT(abrief,
            'other; ') INTO abrief;
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'dotnet; ') INTO abrief;
      WHEN 2 THEN SELECT
            CONCAT(abrief,
            'java; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'vb6; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "mtzextrel_mref_f"
--
CREATE FUNCTION mtzextrel_mref_f (amtzextrel_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    mtzextrel_brief_f(mtzextrelid, alang)
  FROM mtzextrel
  WHERE amtzextrel_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(mtzextrelid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "mtzext_access_f"
--
CREATE FUNCTION mtzext_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzext_def_brief_f"
--
CREATE FUNCTION mtzext_def_brief_f (amtzext_defid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF amtzext_defid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM mtzext_def
  WHERE mtzext_defid = amtzext_defid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM mtzext_def
    WHERE mtzext_defid = amtzext_defid;
    SELECT
      exttype INTO aec
    FROM mtzext_def
    WHERE mtzext_defid = amtzext_defid;
    CASE aec
      WHEN 6 THEN SELECT
            CONCAT(abrief,
            'verifyrowext; ') INTO abrief;
      WHEN 7 THEN SELECT
            CONCAT(abrief,
            'codegenerator; ') INTO abrief;
      WHEN 5 THEN SELECT
            CONCAT(abrief,
            'defaultext; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'statusext; ') INTO abrief;
      WHEN 4 THEN SELECT
            CONCAT(abrief,
            'jrnlrunext; ') INTO abrief;
      WHEN 2 THEN SELECT
            CONCAT(abrief,
            'customext; ') INTO abrief;
      WHEN 8 THEN SELECT
            CONCAT(abrief,
            'armgenerator; ') INTO abrief;
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'onformext; ') INTO abrief;
      WHEN 3 THEN SELECT
            CONCAT(abrief,
            'jrnladdext; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "mtzext_def_mref_f"
--
CREATE FUNCTION mtzext_def_mref_f (amtzext_def_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    mtzext_def_brief_f(mtzext_defid, alang)
  FROM mtzext_def
  WHERE amtzext_def_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(mtzext_defid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "mtzext_export_f"
--
CREATE FUNCTION mtzext_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzfltr_access_f"
--
CREATE FUNCTION mtzfltr_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzfltr_export_f"
--
CREATE FUNCTION mtzfltr_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzjrnl_access_f"
--
CREATE FUNCTION mtzjrnl_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzjrnl_export_f"
--
CREATE FUNCTION mtzjrnl_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzmetamodel_access_f"
--
CREATE FUNCTION mtzmetamodel_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzmetamodel_export_f"
--
CREATE FUNCTION mtzmetamodel_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzrprt_access_f"
--
CREATE FUNCTION mtzrprt_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzrprt_export_f"
--
CREATE FUNCTION mtzrprt_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzsystem_access_f"
--
CREATE FUNCTION mtzsystem_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzsystem_export_f"
--
CREATE FUNCTION mtzsystem_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzusers_access_f"
--
CREATE FUNCTION mtzusers_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzusers_export_f"
--
CREATE FUNCTION mtzusers_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzwp_access_f"
--
CREATE FUNCTION mtzwp_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtzwp_export_f"
--
CREATE FUNCTION mtzwp_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "nextstate_brief_f"
--
CREATE FUNCTION nextstate_brief_f (anextstateid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF anextstateid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM nextstate
  WHERE nextstateid = anextstateid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thestate INTO atmpid
    FROM nextstate
    WHERE nextstateid = anextstateid;
    SELECT
      objstatus_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "nextstate_mref_f"
--
CREATE FUNCTION nextstate_mref_f (anextstate_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    nextstate_brief_f(nextstateid, alang)
  FROM nextstate
  WHERE anextstate_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(nextstateid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "num_head_brief_f"
--
CREATE FUNCTION num_head_brief_f (anum_headid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF anum_headid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM num_head
  WHERE num_headid = anum_headid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM num_head
    WHERE num_headid = anum_headid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "num_head_mref_f"
--
CREATE FUNCTION num_head_mref_f (anum_head_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    num_head_brief_f(num_headid, alang)
  FROM num_head
  WHERE anum_head_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(num_headid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "num_values_brief_f"
--
CREATE FUNCTION num_values_brief_f (anum_valuesid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF anum_valuesid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM num_values
  WHERE num_valuesid = anum_valuesid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(the_value, ''), ' ') INTO abrief
    FROM num_values
    WHERE num_valuesid = anum_valuesid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "num_values_mref_f"
--
CREATE FUNCTION num_values_mref_f (anum_values_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    num_values_brief_f(num_valuesid, alang)
  FROM num_values
  WHERE anum_values_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(num_valuesid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "num_zones_brief_f"
--
CREATE FUNCTION num_zones_brief_f (anum_zonesid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF anum_zonesid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM num_zones
  WHERE num_zonesid = anum_zonesid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(zonemask, ''), ' ') INTO abrief
    FROM num_zones
    WHERE num_zonesid = anum_zonesid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "num_zones_mref_f"
--
CREATE FUNCTION num_zones_mref_f (anum_zones_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    num_zones_brief_f(num_zonesid, alang)
  FROM num_zones
  WHERE anum_zones_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(num_zonesid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "objectmode_brief_f"
--
CREATE FUNCTION objectmode_brief_f (aobjectmodeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aobjectmodeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM objectmode
  WHERE objectmodeid = aobjectmodeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM objectmode
    WHERE objectmodeid = aobjectmodeid;
    SELECT
      defaultmode INTO aec
    FROM objectmode
    WHERE objectmodeid = aobjectmodeid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "objectmode_mref_f"
--
CREATE FUNCTION objectmode_mref_f (aobjectmode_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    objectmode_brief_f(objectmodeid, alang)
  FROM objectmode
  WHERE aobjectmode_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(objectmodeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "objecttype_brief_f"
--
CREATE FUNCTION objecttype_brief_f (aobjecttypeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aobjecttypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM objecttype
  WHERE objecttypeid = aobjecttypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      package INTO atmpid
    FROM objecttype
    WHERE objecttypeid = aobjecttypeid;
    SELECT
      mtzapp_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      CONCAT(abrief
      , '', IFNULL(the_comment, ''), ' ') INTO abrief
    FROM objecttype
    WHERE objecttypeid = aobjecttypeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "objecttype_mref_f"
--
CREATE FUNCTION objecttype_mref_f (aobjecttype_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    objecttype_brief_f(objecttypeid, alang)
  FROM objecttype
  WHERE aobjecttype_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(objecttypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "objstatus_brief_f"
--
CREATE FUNCTION objstatus_brief_f (aobjstatusid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aobjstatusid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM objstatus
  WHERE objstatusid = aobjstatusid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM objstatus
    WHERE objstatusid = aobjstatusid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "objstatus_mref_f"
--
CREATE FUNCTION objstatus_mref_f (aobjstatus_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    objstatus_brief_f(objstatusid, alang)
  FROM objstatus
  WHERE aobjstatus_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(objstatusid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "parameters_brief_f"
--
CREATE FUNCTION parameters_brief_f (aparametersid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aparametersid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM parameters
  WHERE parametersid = aparametersid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM parameters
    WHERE parametersid = aparametersid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM parameters
    WHERE parametersid = aparametersid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "parameters_mref_f"
--
CREATE FUNCTION parameters_mref_f (aparameters_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    parameters_brief_f(parametersid, alang)
  FROM parameters
  WHERE aparameters_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(parametersid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "parentpackage_brief_f"
--
CREATE FUNCTION parentpackage_brief_f (aparentpackageid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aparentpackageid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM parentpackage
  WHERE parentpackageid = aparentpackageid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      package INTO atmpid
    FROM parentpackage
    WHERE parentpackageid = aparentpackageid;
    SELECT
      mtzapp_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "parentpackage_mref_f"
--
CREATE FUNCTION parentpackage_mref_f (aparentpackage_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    parentpackage_brief_f(parentpackageid, alang)
  FROM parentpackage
  WHERE aparentpackage_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(parentpackageid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "partmenu_brief_f"
--
CREATE FUNCTION partmenu_brief_f (apartmenuid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF apartmenuid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM partmenu
  WHERE partmenuid = apartmenuid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM partmenu
    WHERE partmenuid = apartmenuid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "partmenu_mref_f"
--
CREATE FUNCTION partmenu_mref_f (apartmenu_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    partmenu_brief_f(partmenuid, alang)
  FROM partmenu
  WHERE apartmenu_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(partmenuid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "partparammap_brief_f"
--
CREATE FUNCTION partparammap_brief_f (apartparammapid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF apartparammapid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM partparammap
  WHERE partparammapid = apartparammapid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(fieldname, ''), ' ') INTO abrief
    FROM partparammap
    WHERE partparammapid = apartparammapid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(paramname, ''), ' ') INTO abrief
    FROM partparammap
    WHERE partparammapid = apartparammapid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "partparammap_mref_f"
--
CREATE FUNCTION partparammap_mref_f (apartparammap_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    partparammap_brief_f(partparammapid, alang)
  FROM partparammap
  WHERE apartparammap_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(partparammapid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "partview_brief_f"
--
CREATE FUNCTION partview_brief_f (apartviewid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF apartviewid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM partview
  WHERE partviewid = apartviewid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM partview
    WHERE partviewid = apartviewid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "partview_lnk_brief_f"
--
CREATE FUNCTION partview_lnk_brief_f (apartview_lnkid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF apartview_lnkid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM partview_lnk
  WHERE partview_lnkid = apartview_lnkid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      theview INTO atmpid
    FROM partview_lnk
    WHERE partview_lnkid = apartview_lnkid;
    SELECT
      partview_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "partview_lnk_mref_f"
--
CREATE FUNCTION partview_lnk_mref_f (apartview_lnk_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    partview_lnk_brief_f(partview_lnkid, alang)
  FROM partview_lnk
  WHERE apartview_lnk_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(partview_lnkid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "partview_mref_f"
--
CREATE FUNCTION partview_mref_f (apartview_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    partview_brief_f(partviewid, alang)
  FROM partview
  WHERE apartview_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(partviewid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "part_brief_f"
--
CREATE FUNCTION part_brief_f (apartid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF apartid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM part
  WHERE partid = apartid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM part
    WHERE partid = apartid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM part
    WHERE partid = apartid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "part_mref_f"
--
CREATE FUNCTION part_mref_f (apart_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    part_brief_f(partid, alang)
  FROM part
  WHERE apart_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(partid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "reports_brief_f"
--
CREATE FUNCTION reports_brief_f (areportsid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF areportsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM reports
  WHERE reportsid = areportsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM reports
    WHERE reportsid = areportsid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "reports_mref_f"
--
CREATE FUNCTION reports_mref_f (areports_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    reports_brief_f(reportsid, alang)
  FROM reports
  WHERE areports_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(reportsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "rptfields_brief_f"
--
CREATE FUNCTION rptfields_brief_f (arptfieldsid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF arptfieldsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM rptfields
  WHERE rptfieldsid = arptfieldsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM rptfields
    WHERE rptfieldsid = arptfieldsid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "rptfields_mref_f"
--
CREATE FUNCTION rptfields_mref_f (arptfields_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    rptfields_brief_f(rptfieldsid, alang)
  FROM rptfields
  WHERE arptfields_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(rptfieldsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "rptformula_brief_f"
--
CREATE FUNCTION rptformula_brief_f (arptformulaid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF arptformulaid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM rptformula
  WHERE rptformulaid = arptformulaid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM rptformula
    WHERE rptformulaid = arptformulaid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "rptformula_mref_f"
--
CREATE FUNCTION rptformula_mref_f (arptformula_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    rptformula_brief_f(rptformulaid, alang)
  FROM rptformula
  WHERE arptformula_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(rptformulaid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "rptstruct_brief_f"
--
CREATE FUNCTION rptstruct_brief_f (arptstructid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF arptstructid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM rptstruct
  WHERE rptstructid = arptstructid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM rptstruct
    WHERE rptstructid = arptstructid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "rptstruct_mref_f"
--
CREATE FUNCTION rptstruct_mref_f (arptstruct_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    rptstruct_brief_f(rptstructid, alang)
  FROM rptstruct
  WHERE arptstruct_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(rptstructid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "script_brief_f"
--
CREATE FUNCTION script_brief_f (ascriptid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ascriptid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM script
  WHERE scriptid = ascriptid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM script
    WHERE scriptid = ascriptid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "script_mref_f"
--
CREATE FUNCTION script_mref_f (ascript_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    script_brief_f(scriptid, alang)
  FROM script
  WHERE ascript_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(scriptid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "sharedmethod_brief_f"
--
CREATE FUNCTION sharedmethod_brief_f (asharedmethodid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF asharedmethodid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM sharedmethod
  WHERE sharedmethodid = asharedmethodid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM sharedmethod
    WHERE sharedmethodid = asharedmethodid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "sharedmethod_mref_f"
--
CREATE FUNCTION sharedmethod_mref_f (asharedmethod_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    sharedmethod_brief_f(sharedmethodid, alang)
  FROM sharedmethod
  WHERE asharedmethod_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(sharedmethodid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "stdnumerator_access_f"
--
CREATE FUNCTION stdnumerator_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "stdnumerator_export_f"
--
CREATE FUNCTION stdnumerator_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "structrestriction_brief_f"
--
CREATE FUNCTION structrestriction_brief_f (astructrestrictionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF astructrestrictionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM structrestriction
  WHERE structrestrictionid = astructrestrictionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      struct INTO atmpid
    FROM structrestriction
    WHERE structrestrictionid = astructrestrictionid;
    SELECT
      part_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      allowread INTO aec
    FROM structrestriction
    WHERE structrestrictionid = astructrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
    SELECT
      allowadd INTO aec
    FROM structrestriction
    WHERE structrestrictionid = astructrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
    SELECT
      allowedit INTO aec
    FROM structrestriction
    WHERE structrestrictionid = astructrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
    SELECT
      allowdelete INTO aec
    FROM structrestriction
    WHERE structrestrictionid = astructrestrictionid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "structrestriction_mref_f"
--
CREATE FUNCTION structrestriction_mref_f (astructrestriction_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    structrestriction_brief_f(structrestrictionid, alang)
  FROM structrestriction
  WHERE astructrestriction_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(structrestrictionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "syslog_brief_f"
--
CREATE FUNCTION syslog_brief_f (asyslogid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF asyslogid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM syslog
  WHERE syslogid = asyslogid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thesession INTO atmpid
    FROM syslog
    WHERE syslogid = asyslogid;
    SELECT
      the_session_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      CONCAT(abrief
      , '', IFNULL(logstructid, ''), ' ') INTO abrief
    FROM syslog
    WHERE syslogid = asyslogid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(verb, ''), ' ') INTO abrief
    FROM syslog
    WHERE syslogid = asyslogid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "syslog_mref_f"
--
CREATE FUNCTION syslog_mref_f (asyslog_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    syslog_brief_f(syslogid, alang)
  FROM syslog
  WHERE asyslog_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(syslogid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "sysrefcache_brief_f"
--
CREATE FUNCTION sysrefcache_brief_f (asysrefcacheid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF asysrefcacheid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM sysrefcache
  WHERE sysrefcacheid = asysrefcacheid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      sessionid INTO atmpid
    FROM sysrefcache
    WHERE sysrefcacheid = asysrefcacheid;
    SELECT
      the_session_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "sysrefcache_mref_f"
--
CREATE FUNCTION sysrefcache_mref_f (asysrefcache_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    sysrefcache_brief_f(sysrefcacheid, alang)
  FROM sysrefcache
  WHERE asysrefcache_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(sysrefcacheid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "the_session_brief_f"
--
CREATE FUNCTION the_session_brief_f (athe_sessionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF athe_sessionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM the_session
  WHERE the_sessionid = athe_sessionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      userrole INTO atmpid
    FROM the_session
    WHERE the_sessionid = athe_sessionid;
    SELECT
      groups_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      closed INTO aec
    FROM the_session
    WHERE the_sessionid = athe_sessionid;
    CASE aec
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
    SELECT
      usersid INTO atmpid
    FROM the_session
    WHERE the_sessionid = athe_sessionid;
    SELECT
      users_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "the_session_mref_f"
--
CREATE FUNCTION the_session_mref_f (athe_session_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    the_session_brief_f(the_sessionid, alang)
  FROM the_session
  WHERE athe_session_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(the_sessionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "typemenu_brief_f"
--
CREATE FUNCTION typemenu_brief_f (atypemenuid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atypemenuid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM typemenu
  WHERE typemenuid = atypemenuid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM typemenu
    WHERE typemenuid = atypemenuid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "typemenu_mref_f"
--
CREATE FUNCTION typemenu_mref_f (atypemenu_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    typemenu_brief_f(typemenuid, alang)
  FROM typemenu
  WHERE atypemenu_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(typemenuid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "uniqueconstraint_brief_f"
--
CREATE FUNCTION uniqueconstraint_brief_f (auniqueconstraintid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF auniqueconstraintid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM uniqueconstraint
  WHERE uniqueconstraintid = auniqueconstraintid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM uniqueconstraint
    WHERE uniqueconstraintid = auniqueconstraintid;
    SELECT
      perparent INTO aec
    FROM uniqueconstraint
    WHERE uniqueconstraintid = auniqueconstraintid;
    CASE aec
      WHEN -1 THEN SELECT
            CONCAT(abrief,
            'да; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'нет; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "uniqueconstraint_mref_f"
--
CREATE FUNCTION uniqueconstraint_mref_f (auniqueconstraint_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    uniqueconstraint_brief_f(uniqueconstraintid, alang)
  FROM uniqueconstraint
  WHERE auniqueconstraint_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(uniqueconstraintid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "users_brief_f"
--
CREATE FUNCTION users_brief_f (ausersid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF ausersid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM users
  WHERE usersid = ausersid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(family, ''), ' ') INTO abrief
    FROM users
    WHERE usersid = ausersid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM users
    WHERE usersid = ausersid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(surname, ''), ' ') INTO abrief
    FROM users
    WHERE usersid = ausersid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "users_mref_f"
--
CREATE FUNCTION users_mref_f (ausers_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    users_brief_f(usersid, alang)
  FROM users
  WHERE ausers_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(usersid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "validator_brief_f"
--
CREATE FUNCTION validator_brief_f (avalidatorid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avalidatorid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM validator
  WHERE validatorid = avalidatorid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      target INTO atmpid
    FROM validator
    WHERE validatorid = avalidatorid;
    SELECT
      generator_target_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "validator_mref_f"
--
CREATE FUNCTION validator_mref_f (avalidator_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    validator_brief_f(validatorid, alang)
  FROM validator
  WHERE avalidator_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(validatorid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vdage_access_f"
--
CREATE FUNCTION vdage_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdage_export_f"
--
CREATE FUNCTION vdage_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdapl_access_f"
--
CREATE FUNCTION vdapl_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdapl_export_f"
--
CREATE FUNCTION vdapl_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdappr_access_f"
--
CREATE FUNCTION vdappr_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdappr_export_f"
--
CREATE FUNCTION vdappr_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdast_access_f"
--
CREATE FUNCTION vdast_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdast_export_f"
--
CREATE FUNCTION vdast_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdbrw_access_f"
--
CREATE FUNCTION vdbrw_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdbrw_export_f"
--
CREATE FUNCTION vdbrw_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdcat_access_f"
--
CREATE FUNCTION vdcat_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdcat_export_f"
--
CREATE FUNCTION vdcat_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdcn_access_f"
--
CREATE FUNCTION vdcn_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdcn_export_f"
--
CREATE FUNCTION vdcn_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdcst_access_f"
--
CREATE FUNCTION vdcst_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdcst_export_f"
--
CREATE FUNCTION vdcst_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vddev_access_f"
--
CREATE FUNCTION vddev_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vddev_export_f"
--
CREATE FUNCTION vddev_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdfrmt_access_f"
--
CREATE FUNCTION vdfrmt_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdfrmt_export_f"
--
CREATE FUNCTION vdfrmt_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdinter_access_f"
--
CREATE FUNCTION vdinter_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdinter_export_f"
--
CREATE FUNCTION vdinter_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdmstat_access_f"
--
CREATE FUNCTION vdmstat_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdmstat_export_f"
--
CREATE FUNCTION vdmstat_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdos_access_f"
--
CREATE FUNCTION vdos_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdos_export_f"
--
CREATE FUNCTION vdos_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdpos_access_f"
--
CREATE FUNCTION vdpos_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdpos_export_f"
--
CREATE FUNCTION vdpos_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdpt_access_f"
--
CREATE FUNCTION vdpt_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdpt_export_f"
--
CREATE FUNCTION vdpt_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdrel_access_f"
--
CREATE FUNCTION vdrel_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdrel_export_f"
--
CREATE FUNCTION vdrel_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdrg_access_f"
--
CREATE FUNCTION vdrg_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdrg_export_f"
--
CREATE FUNCTION vdrg_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdtt_access_f"
--
CREATE FUNCTION vdtt_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdtt_export_f"
--
CREATE FUNCTION vdtt_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdt_access_f"
--
CREATE FUNCTION vdt_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdt_export_f"
--
CREATE FUNCTION vdt_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "viewcolumn_brief_f"
--
CREATE FUNCTION viewcolumn_brief_f (aviewcolumnid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aviewcolumnid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM viewcolumn
  WHERE viewcolumnid = aviewcolumnid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM viewcolumn
    WHERE viewcolumnid = aviewcolumnid;
    SELECT
      frompart INTO atmpid
    FROM viewcolumn
    WHERE viewcolumnid = aviewcolumnid;
    SELECT
      part_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      aggregation INTO aec
    FROM viewcolumn
    WHERE viewcolumnid = aviewcolumnid;
    CASE aec
      WHEN 3 THEN SELECT
            CONCAT(abrief,
            'sum; ') INTO abrief;
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'avg; ') INTO abrief;
      WHEN 6 THEN SELECT
            CONCAT(abrief,
            'custom; ') INTO abrief;
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'none; ') INTO abrief;
      WHEN 2 THEN SELECT
            CONCAT(abrief,
            'count; ') INTO abrief;
      WHEN 5 THEN SELECT
            CONCAT(abrief,
            'max; ') INTO abrief;
      WHEN 4 THEN SELECT
            CONCAT(abrief,
            'min; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "viewcolumn_mref_f"
--
CREATE FUNCTION viewcolumn_mref_f (aviewcolumn_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    viewcolumn_brief_f(viewcolumnid, alang)
  FROM viewcolumn
  WHERE aviewcolumn_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(viewcolumnid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vkads_access_f"
--
CREATE FUNCTION vkads_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vkads_export_f"
--
CREATE FUNCTION vkads_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkbrk_access_f"
--
CREATE FUNCTION vkbrk_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vkbrk_export_f"
--
CREATE FUNCTION vkbrk_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkcam_access_f"
--
CREATE FUNCTION vkcam_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vkcam_export_f"
--
CREATE FUNCTION vkcam_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkprj_access_f"
--
CREATE FUNCTION vkprj_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vkprj_export_f"
--
CREATE FUNCTION vkprj_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkrot_access_f"
--
CREATE FUNCTION vkrot_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vkrot_export_f"
--
CREATE FUNCTION vkrot_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vktrg_access_f"
--
CREATE FUNCTION vktrg_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vktrg_export_f"
--
CREATE FUNCTION vktrg_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vktsk_access_f"
--
CREATE FUNCTION vktsk_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vktsk_export_f"
--
CREATE FUNCTION vktsk_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkusr_access_f"
--
CREATE FUNCTION vkusr_access_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vkusr_export_f"
--
CREATE FUNCTION vkusr_export_f (acursession varchar(38)
, ainstanceid varchar(38))
RETURNS tinyint(1)
READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vk_adformat_brief_f"
--
CREATE FUNCTION vk_adformat_brief_f (avk_adformatid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adformatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adformat
  WHERE vk_adformatid = avk_adformatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_adformat
    WHERE vk_adformatid = avk_adformatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adformat_mref_f"
--
CREATE FUNCTION vk_adformat_mref_f (avk_adformat_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adformat_brief_f(vk_adformatid, alang)
  FROM vk_adformat
  WHERE avk_adformat_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adformatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adinfo_brief_f"
--
CREATE FUNCTION vk_adinfo_brief_f (avk_adinfoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adinfo
  WHERE vk_adinfoid = avk_adinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_adinfo
    WHERE vk_adinfoid = avk_adinfoid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(ads_id, ''), ' ') INTO abrief
    FROM vk_adinfo
    WHERE vk_adinfoid = avk_adinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adinfo_mref_f"
--
CREATE FUNCTION vk_adinfo_mref_f (avk_adinfo_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adinfo_brief_f(vk_adinfoid, alang)
  FROM vk_adinfo
  WHERE avk_adinfo_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adovstat_brief_f"
--
CREATE FUNCTION vk_adovstat_brief_f (avk_adovstatid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adovstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adovstat
  WHERE vk_adovstatid = avk_adovstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(spent, ''), ' ') INTO abrief
    FROM vk_adovstat
    WHERE vk_adovstatid = avk_adovstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adovstat_mref_f"
--
CREATE FUNCTION vk_adovstat_mref_f (avk_adovstat_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adovstat_brief_f(vk_adovstatid, alang)
  FROM vk_adovstat
  WHERE avk_adovstat_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adovstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsdaydemografy_brief_f"
--
CREATE FUNCTION vk_adsdaydemografy_brief_f (avk_adsdaydemografyid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsdaydemografyid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsdaydemografy
  WHERE vk_adsdaydemografyid = avk_adsdaydemografyid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(s_day, ''), ' ') INTO abrief
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = avk_adsdaydemografyid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(recordtype, ''), ' ') INTO abrief
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = avk_adsdaydemografyid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsdaydemografy_mref_f"
--
CREATE FUNCTION vk_adsdaydemografy_mref_f (avk_adsdaydemografy_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsdaydemografy_brief_f(vk_adsdaydemografyid, alang)
  FROM vk_adsdaydemografy
  WHERE avk_adsdaydemografy_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adsdaydemografyid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsovdemografy_brief_f"
--
CREATE FUNCTION vk_adsovdemografy_brief_f (avk_adsovdemografyid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsovdemografyid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsovdemografy
  WHERE vk_adsovdemografyid = avk_adsovdemografyid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(recordtype, ''), ' ') INTO abrief
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = avk_adsovdemografyid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsovdemografy_mref_f"
--
CREATE FUNCTION vk_adsovdemografy_mref_f (avk_adsovdemografy_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsovdemografy_brief_f(vk_adsovdemografyid, alang)
  FROM vk_adsovdemografy
  WHERE avk_adsovdemografy_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adsovdemografyid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsowner_brief_f"
--
CREATE FUNCTION vk_adsowner_brief_f (avk_adsownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsowner
  WHERE vk_adsownerid = avk_adsownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_adsowner
    WHERE vk_adsownerid = avk_adsownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsowner_mref_f"
--
CREATE FUNCTION vk_adsowner_mref_f (avk_adsowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsowner_brief_f(vk_adsownerid, alang)
  FROM vk_adsowner
  WHERE avk_adsowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adsownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adstate_brief_f"
--
CREATE FUNCTION vk_adstate_brief_f (avk_adstateid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adstateid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adstate
  WHERE vk_adstateid = avk_adstateid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_adstate
    WHERE vk_adstateid = avk_adstateid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adstate_mref_f"
--
CREATE FUNCTION vk_adstate_mref_f (avk_adstate_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adstate_brief_f(vk_adstateid, alang)
  FROM vk_adstate
  WHERE avk_adstate_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adstateid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adstat_brief_f"
--
CREATE FUNCTION vk_adstat_brief_f (avk_adstatid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adstat
  WHERE vk_adstatid = avk_adstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(period, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(s_day, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(s_month, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(overal, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adstat_mref_f"
--
CREATE FUNCTION vk_adstat_mref_f (avk_adstat_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adstat_brief_f(vk_adstatid, alang)
  FROM vk_adstat
  WHERE avk_adstat_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adstrg_brief_f"
--
CREATE FUNCTION vk_adstrg_brief_f (avk_adstrgid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adstrgid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adstrg
  WHERE vk_adstrgid = avk_adstrgid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      sex INTO aec
    FROM vk_adstrg
    WHERE vk_adstrgid = avk_adstrgid;
    CASE aec
      WHEN 0 THEN SELECT
            CONCAT(abrief,
            'не существенно; ') INTO abrief;
      WHEN 2 THEN SELECT
            CONCAT(abrief,
            'мужской; ') INTO abrief;
      WHEN 1 THEN SELECT
            CONCAT(abrief,
            'женский; ') INTO abrief;
      ELSE SELECT
          CONCAT(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adstrg_mref_f"
--
CREATE FUNCTION vk_adstrg_mref_f (avk_adstrg_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adstrg_brief_f(vk_adstrgid, alang)
  FROM vk_adstrg
  WHERE avk_adstrg_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adstrgid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsutm_brief_f"
--
CREATE FUNCTION vk_adsutm_brief_f (avk_adsutmid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsutmid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsutm
  WHERE vk_adsutmid = avk_adsutmid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(utm_source, ''), ' ') INTO abrief
    FROM vk_adsutm
    WHERE vk_adsutmid = avk_adsutmid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsutm_mref_f"
--
CREATE FUNCTION vk_adsutm_mref_f (avk_adsutm_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsutm_brief_f(vk_adsutmid, alang)
  FROM vk_adsutm
  WHERE avk_adsutm_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_adsutmid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_age_brief_f"
--
CREATE FUNCTION vk_age_brief_f (avk_ageid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_ageid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_age
  WHERE vk_ageid = avk_ageid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_age
    WHERE vk_ageid = avk_ageid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_age_mref_f"
--
CREATE FUNCTION vk_age_mref_f (avk_age_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_age_brief_f(vk_ageid, alang)
  FROM vk_age
  WHERE avk_age_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_ageid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_approve_brief_f"
--
CREATE FUNCTION vk_approve_brief_f (avk_approveid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_approveid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_approve
  WHERE vk_approveid = avk_approveid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_approve
    WHERE vk_approveid = avk_approveid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_approve_mref_f"
--
CREATE FUNCTION vk_approve_mref_f (avk_approve_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_approve_brief_f(vk_approveid, alang)
  FROM vk_approve
  WHERE avk_approve_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_approveid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_brkinfo_brief_f"
--
CREATE FUNCTION vk_brkinfo_brief_f (avk_brkinfoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_brkinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_brkinfo
  WHERE vk_brkinfoid = avk_brkinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_brkinfo
    WHERE vk_brkinfoid = avk_brkinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_brkinfo_mref_f"
--
CREATE FUNCTION vk_brkinfo_mref_f (avk_brkinfo_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_brkinfo_brief_f(vk_brkinfoid, alang)
  FROM vk_brkinfo
  WHERE avk_brkinfo_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_brkinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_brkowner_brief_f"
--
CREATE FUNCTION vk_brkowner_brief_f (avk_brkownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_brkownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_brkowner
  WHERE vk_brkownerid = avk_brkownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_brkowner
    WHERE vk_brkownerid = avk_brkownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_brkowner_mref_f"
--
CREATE FUNCTION vk_brkowner_mref_f (avk_brkowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_brkowner_brief_f(vk_brkownerid, alang)
  FROM vk_brkowner
  WHERE avk_brkowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_brkownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_browser_brief_f"
--
CREATE FUNCTION vk_browser_brief_f (avk_browserid integer
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_browserid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_browser
  WHERE vk_browserid = avk_browser;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_browser
    WHERE vk_browserid = avk_browser;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_browser_mref_f"
--
CREATE FUNCTION vk_browser_mref_f (avk_browser_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_browser_brief_f(vk_browserid, alang)
  FROM vk_browser
  WHERE avk_browser_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_browserid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_cab_brief_f"
--
CREATE FUNCTION vk_cab_brief_f (avk_cabid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_cabid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_cab
  WHERE vk_cabid = avk_cabid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(account_id, ''), ' ') INTO abrief
    FROM vk_cab
    WHERE vk_cabid = avk_cabid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_cab
    WHERE vk_cabid = avk_cabid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(account_type, ''), ' ') INTO abrief
    FROM vk_cab
    WHERE vk_cabid = avk_cabid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_cab_mref_f"
--
CREATE FUNCTION vk_cab_mref_f (avk_cab_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_cab_brief_f(vk_cabid, alang)
  FROM vk_cab
  WHERE avk_cab_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_cabid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camovstat_brief_f"
--
CREATE FUNCTION vk_camovstat_brief_f (avk_camovstatid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_camovstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camovstat
  WHERE vk_camovstatid = avk_camovstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(spent, ''), ' ') INTO abrief
    FROM vk_camovstat
    WHERE vk_camovstatid = avk_camovstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camovstat_mref_f"
--
CREATE FUNCTION vk_camovstat_mref_f (avk_camovstat_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camovstat_brief_f(vk_camovstatid, alang)
  FROM vk_camovstat
  WHERE avk_camovstat_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_camovstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camowner_brief_f"
--
CREATE FUNCTION vk_camowner_brief_f (avk_camownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_camownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camowner
  WHERE vk_camownerid = avk_camownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_camowner
    WHERE vk_camownerid = avk_camownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camowner_mref_f"
--
CREATE FUNCTION vk_camowner_mref_f (avk_camowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camowner_brief_f(vk_camownerid, alang)
  FROM vk_camowner
  WHERE avk_camowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_camownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camp_brief_f"
--
CREATE FUNCTION vk_camp_brief_f (avk_campid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_campid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camp
  WHERE vk_campid = avk_campid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(campagin_id, ''), ' ') INTO abrief
    FROM vk_camp
    WHERE vk_campid = avk_campid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_camp
    WHERE vk_campid = avk_campid;
    SELECT
      prj INTO atmpid
    FROM vk_camp
    WHERE vk_campid = avk_campid;
    SELECT
      vk_prj_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camp_mref_f"
--
CREATE FUNCTION vk_camp_mref_f (avk_camp_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camp_brief_f(vk_campid, alang)
  FROM vk_camp
  WHERE avk_camp_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_campid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camstat_brief_f"
--
CREATE FUNCTION vk_camstat_brief_f (avk_camstatid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_camstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camstat
  WHERE vk_camstatid = avk_camstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(overal, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(s_day, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(s_month, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(period, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camstat_mref_f"
--
CREATE FUNCTION vk_camstat_mref_f (avk_camstat_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camstat_brief_f(vk_camstatid, alang)
  FROM vk_camstat
  WHERE avk_camstat_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_camstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_castate_brief_f"
--
CREATE FUNCTION vk_castate_brief_f (avk_castateid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_castateid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_castate
  WHERE vk_castateid = avk_castateid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_castate
    WHERE vk_castateid = avk_castateid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_castate_mref_f"
--
CREATE FUNCTION vk_castate_mref_f (avk_castate_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_castate_brief_f(vk_castateid, alang)
  FROM vk_castate
  WHERE avk_castate_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_castateid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_category_brief_f"
--
CREATE FUNCTION vk_category_brief_f (avk_categoryid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_categoryid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_category
  WHERE vk_categoryid = avk_categoryid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_category
    WHERE vk_categoryid = avk_categoryid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_category_mref_f"
--
CREATE FUNCTION vk_category_mref_f (avk_category_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_category_brief_f(vk_categoryid, alang)
  FROM vk_category
  WHERE avk_category_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_categoryid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_country_brief_f"
--
CREATE FUNCTION vk_country_brief_f (avk_countryid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_countryid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_country
  WHERE vk_countryid = avk_countryid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_country
    WHERE vk_countryid = avk_countryid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_country_mref_f"
--
CREATE FUNCTION vk_country_mref_f (avk_country_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_country_brief_f(vk_countryid, alang)
  FROM vk_country
  WHERE avk_country_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_countryid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_device_brief_f"
--
CREATE FUNCTION vk_device_brief_f (avk_deviceid integer
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_deviceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_device
  WHERE vk_deviceid = avk_device;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_device
    WHERE vk_deviceid = avk_device;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_device_mref_f"
--
CREATE FUNCTION vk_device_mref_f (avk_device_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_device_brief_f(vk_deviceid, alang)
  FROM vk_device
  WHERE avk_device_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_deviceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_interest_brief_f"
--
CREATE FUNCTION vk_interest_brief_f (avk_interestid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_interestid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_interest
  WHERE vk_interestid = avk_interestid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_interest
    WHERE vk_interestid = avk_interestid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_interest_mref_f"
--
CREATE FUNCTION vk_interest_mref_f (avk_interest_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_interest_brief_f(vk_interestid, alang)
  FROM vk_interest
  WHERE avk_interest_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_interestid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_matrialstatus_brief_f"
--
CREATE FUNCTION vk_matrialstatus_brief_f (avk_matrialstatusid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_matrialstatusid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_matrialstatus
  WHERE vk_matrialstatusid = avk_matrialstatusid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = avk_matrialstatusid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_matrialstatus_mref_f"
--
CREATE FUNCTION vk_matrialstatus_mref_f (avk_matrialstatus_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_matrialstatus_brief_f(vk_matrialstatusid, alang)
  FROM vk_matrialstatus
  WHERE avk_matrialstatus_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_matrialstatusid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_os_brief_f"
--
CREATE FUNCTION vk_os_brief_f (avk_osid integer
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_osid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_os
  WHERE vk_osid = avk_os;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_os
    WHERE vk_osid = avk_os;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_os_mref_f"
--
CREATE FUNCTION vk_os_mref_f (avk_os_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_os_brief_f(vk_osid, alang)
  FROM vk_os
  WHERE avk_os_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_osid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_paytype_brief_f"
--
CREATE FUNCTION vk_paytype_brief_f (avk_paytypeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_paytypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_paytype
  WHERE vk_paytypeid = avk_paytypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_paytype
    WHERE vk_paytypeid = avk_paytypeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_paytype_mref_f"
--
CREATE FUNCTION vk_paytype_mref_f (avk_paytype_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_paytype_brief_f(vk_paytypeid, alang)
  FROM vk_paytype
  WHERE avk_paytype_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_paytypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_platform_brief_f"
--
CREATE FUNCTION vk_platform_brief_f (avk_platformid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_platformid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_platform
  WHERE vk_platformid = avk_platformid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_platform
    WHERE vk_platformid = avk_platformid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_platform_mref_f"
--
CREATE FUNCTION vk_platform_mref_f (avk_platform_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_platform_brief_f(vk_platformid, alang)
  FROM vk_platform
  WHERE avk_platform_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_platformid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_position_brief_f"
--
CREATE FUNCTION vk_position_brief_f (avk_positionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_positionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_position
  WHERE vk_positionid = avk_positionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_position
    WHERE vk_positionid = avk_positionid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_position_mref_f"
--
CREATE FUNCTION vk_position_mref_f (avk_position_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_position_brief_f(vk_positionid, alang)
  FROM vk_position
  WHERE avk_position_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_positionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_prjowner_brief_f"
--
CREATE FUNCTION vk_prjowner_brief_f (avk_prjownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_prjownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_prjowner
  WHERE vk_prjownerid = avk_prjownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_prjowner
    WHERE vk_prjownerid = avk_prjownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_prjowner_mref_f"
--
CREATE FUNCTION vk_prjowner_mref_f (avk_prjowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_prjowner_brief_f(vk_prjownerid, alang)
  FROM vk_prjowner
  WHERE avk_prjowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_prjownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_prj_brief_f"
--
CREATE FUNCTION vk_prj_brief_f (avk_prjid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_prjid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_prj
  WHERE vk_prjid = avk_prjid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_prj
    WHERE vk_prjid = avk_prjid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(info, ''), ' ') INTO abrief
    FROM vk_prj
    WHERE vk_prjid = avk_prjid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_prj_mref_f"
--
CREATE FUNCTION vk_prj_mref_f (avk_prj_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_prj_brief_f(vk_prjid, alang)
  FROM vk_prj
  WHERE avk_prj_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_prjid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_region_brief_f"
--
CREATE FUNCTION vk_region_brief_f (avk_regionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_regionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_region
  WHERE vk_regionid = avk_regionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_region
    WHERE vk_regionid = avk_regionid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_region_mref_f"
--
CREATE FUNCTION vk_region_mref_f (avk_region_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_region_brief_f(vk_regionid, alang)
  FROM vk_region
  WHERE avk_region_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_regionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_religion_brief_f"
--
CREATE FUNCTION vk_religion_brief_f (avk_religionid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_religionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_religion
  WHERE vk_religionid = avk_religionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_religion
    WHERE vk_religionid = avk_religionid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_religion_mref_f"
--
CREATE FUNCTION vk_religion_mref_f (avk_religion_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_religion_brief_f(vk_religionid, alang)
  FROM vk_religion
  WHERE avk_religion_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_religionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_rotads_brief_f"
--
CREATE FUNCTION vk_rotads_brief_f (avk_rotadsid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_rotadsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_rotads
  WHERE vk_rotadsid = avk_rotadsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      ads INTO atmpid
    FROM vk_rotads
    WHERE vk_rotadsid = avk_rotadsid;
    SELECT
      vk_adinfo_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_rotads_mref_f"
--
CREATE FUNCTION vk_rotads_mref_f (avk_rotads_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_rotads_brief_f(vk_rotadsid, alang)
  FROM vk_rotads
  WHERE avk_rotads_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_rotadsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_rotinfo_brief_f"
--
CREATE FUNCTION vk_rotinfo_brief_f (avk_rotinfoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_rotinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_rotinfo
  WHERE vk_rotinfoid = avk_rotinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_rotinfo
    WHERE vk_rotinfoid = avk_rotinfoid;
    SELECT
      campaign_id INTO atmpid
    FROM vk_rotinfo
    WHERE vk_rotinfoid = avk_rotinfoid;
    SELECT
      vk_camp_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      status INTO atmpid
    FROM vk_rotinfo
    WHERE vk_rotinfoid = avk_rotinfoid;
    SELECT
      vk_adstate_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_rotinfo_mref_f"
--
CREATE FUNCTION vk_rotinfo_mref_f (avk_rotinfo_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_rotinfo_brief_f(vk_rotinfoid, alang)
  FROM vk_rotinfo
  WHERE avk_rotinfo_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_rotinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_rotowner_brief_f"
--
CREATE FUNCTION vk_rotowner_brief_f (avk_rotownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_rotownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_rotowner
  WHERE vk_rotownerid = avk_rotownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_rotowner
    WHERE vk_rotownerid = avk_rotownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_rotowner_mref_f"
--
CREATE FUNCTION vk_rotowner_mref_f (avk_rotowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_rotowner_brief_f(vk_rotownerid, alang)
  FROM vk_rotowner
  WHERE avk_rotowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_rotownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_taskinfo_brief_f"
--
CREATE FUNCTION vk_taskinfo_brief_f (avk_taskinfoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_taskinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_taskinfo
  WHERE vk_taskinfoid = avk_taskinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      tasktype INTO atmpid
    FROM vk_taskinfo
    WHERE vk_taskinfoid = avk_taskinfoid;
    SELECT
      vk_tasktype_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_taskinfo
    WHERE vk_taskinfoid = avk_taskinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_taskinfo_mref_f"
--
CREATE FUNCTION vk_taskinfo_mref_f (avk_taskinfo_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_taskinfo_brief_f(vk_taskinfoid, alang)
  FROM vk_taskinfo
  WHERE avk_taskinfo_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_taskinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_taskmsg_brief_f"
--
CREATE FUNCTION vk_taskmsg_brief_f (avk_taskmsgid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_taskmsgid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_taskmsg
  WHERE vk_taskmsgid = avk_taskmsgid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(msgdate, ''), ' ') INTO abrief
    FROM vk_taskmsg
    WHERE vk_taskmsgid = avk_taskmsgid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(info, ''), ' ') INTO abrief
    FROM vk_taskmsg
    WHERE vk_taskmsgid = avk_taskmsgid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_taskmsg_mref_f"
--
CREATE FUNCTION vk_taskmsg_mref_f (avk_taskmsg_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_taskmsg_brief_f(vk_taskmsgid, alang)
  FROM vk_taskmsg
  WHERE avk_taskmsg_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_taskmsgid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_taskowner_brief_f"
--
CREATE FUNCTION vk_taskowner_brief_f (avk_taskownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_taskownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_taskowner
  WHERE vk_taskownerid = avk_taskownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_taskowner
    WHERE vk_taskownerid = avk_taskownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_taskowner_mref_f"
--
CREATE FUNCTION vk_taskowner_mref_f (avk_taskowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_taskowner_brief_f(vk_taskownerid, alang)
  FROM vk_taskowner
  WHERE avk_taskowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_taskownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_tasktype_brief_f"
--
CREATE FUNCTION vk_tasktype_brief_f (avk_tasktypeid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_tasktypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_tasktype
  WHERE vk_tasktypeid = avk_tasktypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_tasktype
    WHERE vk_tasktypeid = avk_tasktypeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_tasktype_mref_f"
--
CREATE FUNCTION vk_tasktype_mref_f (avk_tasktype_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_tasktype_brief_f(vk_tasktypeid, alang)
  FROM vk_tasktype
  WHERE avk_tasktype_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_tasktypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_town_brief_f"
--
CREATE FUNCTION vk_town_brief_f (avk_townid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_townid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_town
  WHERE vk_townid = avk_townid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(title, ''), ' ') INTO abrief
    FROM vk_town
    WHERE vk_townid = avk_townid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_town_mref_f"
--
CREATE FUNCTION vk_town_mref_f (avk_town_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_town_brief_f(vk_townid, alang)
  FROM vk_town
  WHERE avk_town_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_townid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_trgfiles_brief_f"
--
CREATE FUNCTION vk_trgfiles_brief_f (avk_trgfilesid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_trgfilesid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_trgfiles
  WHERE vk_trgfilesid = avk_trgfilesid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_trgfiles
    WHERE vk_trgfilesid = avk_trgfilesid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_trgfiles_mref_f"
--
CREATE FUNCTION vk_trgfiles_mref_f (avk_trgfiles_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_trgfiles_brief_f(vk_trgfilesid, alang)
  FROM vk_trgfiles
  WHERE avk_trgfiles_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_trgfilesid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_trginfo_brief_f"
--
CREATE FUNCTION vk_trginfo_brief_f (avk_trginfoid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_trginfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_trginfo
  WHERE vk_trginfoid = avk_trginfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(name, ''), ' ') INTO abrief
    FROM vk_trginfo
    WHERE vk_trginfoid = avk_trginfoid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(vkid, ''), ' ') INTO abrief
    FROM vk_trginfo
    WHERE vk_trginfoid = avk_trginfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_trginfo_mref_f"
--
CREATE FUNCTION vk_trginfo_mref_f (avk_trginfo_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_trginfo_brief_f(vk_trginfoid, alang)
  FROM vk_trginfo
  WHERE avk_trginfo_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_trginfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_trgowner_brief_f"
--
CREATE FUNCTION vk_trgowner_brief_f (avk_trgownerid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_trgownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_trgowner
  WHERE vk_trgownerid = avk_trgownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_trgowner
    WHERE vk_trgownerid = avk_trgownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = CONCAT(abrief, '', IFNULL(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_trgowner_mref_f"
--
CREATE FUNCTION vk_trgowner_mref_f (avk_trgowner_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_trgowner_brief_f(vk_trgownerid, alang)
  FROM vk_trgowner
  WHERE avk_trgowner_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_trgownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_usr_brief_f"
--
CREATE FUNCTION vk_usr_brief_f (avk_usrid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_usrid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_usr
  WHERE vk_usrid = avk_usrid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(vkid, ''), ' ') INTO abrief
    FROM vk_usr
    WHERE vk_usrid = avk_usrid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(first_name, ''), ' ') INTO abrief
    FROM vk_usr
    WHERE vk_usrid = avk_usrid;
    SELECT
      CONCAT(abrief
      , '', IFNULL(last_name, ''), ' ') INTO abrief
    FROM vk_usr
    WHERE vk_usrid = avk_usrid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_usr_mref_f"
--
CREATE FUNCTION vk_usr_mref_f (avk_usr_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_usr_brief_f(vk_usrid, alang)
  FROM vk_usr
  WHERE avk_usr_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(vk_usrid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "workplace_brief_f"
--
CREATE FUNCTION workplace_brief_f (aworkplaceid binary(16)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF aworkplaceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM workplace
  WHERE workplaceid = aworkplaceid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      CONCAT(abrief
      , '', IFNULL(caption, ''), ' ') INTO abrief
    FROM workplace
    WHERE workplaceid = aworkplaceid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "workplace_mref_f"
--
CREATE FUNCTION workplace_mref_f (aworkplace_ref varchar(255)
, alang varchar(25))
RETURNS varchar(255) CHARSET utf8
READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    workplace_brief_f(workplaceid, alang)
  FROM workplace
  WHERE aworkplace_ref LIKE CONCAT('%', REPLACE(REPLACE(b2g(workplaceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = CONCAT(amref, ',');
    END IF;
    SET amref = CONCAT(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

DELIMITER ;

--
-- Создать представление "v_autoarmjournal"
--
CREATE
VIEW v_autoarmjournal
AS
SELECT
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `armjournal`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`thejournal`) AS `armjournal_thejournal_id`,
  `instance_brief_f`(`armjournal`.`thejournal`, NULL) AS `armjournal_thejournal`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjournal`.`armjournalid`) AS `id`,
  'armjournal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armjournal`
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjournal_en_us"
--
CREATE
VIEW v_autoarmjournal_en_us
AS
SELECT
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `armjournal`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`thejournal`) AS `armjournal_thejournal_id`,
  `instance_brief_f`(`armjournal`.`thejournal`, 'en_us') AS `armjournal_thejournal`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjournal`.`armjournalid`) AS `id`,
  'armjournal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armjournal`
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjournal_ru_ru"
--
CREATE
VIEW v_autoarmjournal_ru_ru
AS
SELECT
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `armjournal`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`thejournal`) AS `armjournal_thejournal_id`,
  `instance_brief_f`(`armjournal`.`thejournal`, 'ru_ru') AS `armjournal_thejournal`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjournal`.`armjournalid`) AS `id`,
  'armjournal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armjournal`
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnladd"
--
CREATE
VIEW v_autoarmjrnladd
AS
SELECT
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `armjrnladdid`,
  `armjrnladd`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnladd`.`theextention`) AS `armjrnladd_theextention_id`,
  `instance_brief_f`(`armjrnladd`.`theextention`, NULL) AS `armjrnladd_theextention`,
  `armjrnladd`.`name` AS `armjrnladd_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `id`,
  'armjrnladd' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnladd`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnladd`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnladd_en_us"
--
CREATE
VIEW v_autoarmjrnladd_en_us
AS
SELECT
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `armjrnladdid`,
  `armjrnladd`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnladd`.`theextention`) AS `armjrnladd_theextention_id`,
  `instance_brief_f`(`armjrnladd`.`theextention`, 'en_us') AS `armjrnladd_theextention`,
  `armjrnladd`.`name` AS `armjrnladd_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `id`,
  'armjrnladd' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnladd`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnladd`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnladd_ru_ru"
--
CREATE
VIEW v_autoarmjrnladd_ru_ru
AS
SELECT
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `armjrnladdid`,
  `armjrnladd`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnladd`.`theextention`) AS `armjrnladd_theextention_id`,
  `instance_brief_f`(`armjrnladd`.`theextention`, 'ru_ru') AS `armjrnladd_theextention`,
  `armjrnladd`.`name` AS `armjrnladd_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `id`,
  'armjrnladd' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnladd`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnladd`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrep"
--
CREATE
VIEW v_autoarmjrnlrep
AS
SELECT
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `armjrnlrepid`,
  `armjrnlrep`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrep`.`thereport`) AS `armjrnlrep_thereport_id`,
  `instance_brief_f`(`armjrnlrep`.`thereport`, NULL) AS `armjrnlrep_thereport`,
  `armjrnlrep`.`repname` AS `armjrnlrep_repname`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `id`,
  'armjrnlrep' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrep`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrep`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrep_en_us"
--
CREATE
VIEW v_autoarmjrnlrep_en_us
AS
SELECT
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `armjrnlrepid`,
  `armjrnlrep`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrep`.`thereport`) AS `armjrnlrep_thereport_id`,
  `instance_brief_f`(`armjrnlrep`.`thereport`, 'en_us') AS `armjrnlrep_thereport`,
  `armjrnlrep`.`repname` AS `armjrnlrep_repname`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `id`,
  'armjrnlrep' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrep`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrep`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrep_ru_ru"
--
CREATE
VIEW v_autoarmjrnlrep_ru_ru
AS
SELECT
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `armjrnlrepid`,
  `armjrnlrep`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrep`.`thereport`) AS `armjrnlrep_thereport_id`,
  `instance_brief_f`(`armjrnlrep`.`thereport`, 'ru_ru') AS `armjrnlrep_thereport`,
  `armjrnlrep`.`repname` AS `armjrnlrep_repname`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `id`,
  'armjrnlrep' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrep`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrep`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrun"
--
CREATE
VIEW v_autoarmjrnlrun
AS
SELECT
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `armjrnlrunid`,
  `armjrnlrun`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrun`.`theextention`) AS `armjrnlrun_theextention_id`,
  `instance_brief_f`(`armjrnlrun`.`theextention`, NULL) AS `armjrnlrun_theextention`,
  `armjrnlrun`.`name` AS `armjrnlrun_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `id`,
  'armjrnlrun' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrun`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrun`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrun_en_us"
--
CREATE
VIEW v_autoarmjrnlrun_en_us
AS
SELECT
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `armjrnlrunid`,
  `armjrnlrun`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrun`.`theextention`) AS `armjrnlrun_theextention_id`,
  `instance_brief_f`(`armjrnlrun`.`theextention`, 'en_us') AS `armjrnlrun_theextention`,
  `armjrnlrun`.`name` AS `armjrnlrun_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `id`,
  'armjrnlrun' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrun`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrun`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrun_ru_ru"
--
CREATE
VIEW v_autoarmjrnlrun_ru_ru
AS
SELECT
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `armjrnlrunid`,
  `armjrnlrun`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrun`.`theextention`) AS `armjrnlrun_theextention_id`,
  `instance_brief_f`(`armjrnlrun`.`theextention`, 'ru_ru') AS `armjrnlrun_theextention`,
  `armjrnlrun`.`name` AS `armjrnlrun_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `id`,
  'armjrnlrun' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrun`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrun`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmtypes"
--
CREATE
VIEW v_autoarmtypes
AS
SELECT
  `b2g`(`armtypes`.`armtypesid`) AS `armtypesid`,
  `armtypes`.`changestamp` AS `changestamp`,
  `b2g`(`armtypes`.`thedocumenttype`) AS `armtypes_thedocumenttype_id`,
  `objecttype_brief_f`(`armtypes`.`thedocumenttype`, NULL) AS `armtypes_thedocumenttype`,
  `b2g`(`armtypes`.`instanceid`) AS `instanceid`,
  `armtypes`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armtypes`.`armtypesid`) AS `id`,
  'armtypes' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armtypes`
  JOIN `instance`
    ON ((`armtypes`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmtypes_en_us"
--
CREATE
VIEW v_autoarmtypes_en_us
AS
SELECT
  `b2g`(`armtypes`.`armtypesid`) AS `armtypesid`,
  `armtypes`.`changestamp` AS `changestamp`,
  `b2g`(`armtypes`.`thedocumenttype`) AS `armtypes_thedocumenttype_id`,
  `objecttype_brief_f`(`armtypes`.`thedocumenttype`, 'en_us') AS `armtypes_thedocumenttype`,
  `b2g`(`armtypes`.`instanceid`) AS `instanceid`,
  `armtypes`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armtypes`.`armtypesid`) AS `id`,
  'armtypes' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armtypes`
  JOIN `instance`
    ON ((`armtypes`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmtypes_ru_ru"
--
CREATE
VIEW v_autoarmtypes_ru_ru
AS
SELECT
  `b2g`(`armtypes`.`armtypesid`) AS `armtypesid`,
  `armtypes`.`changestamp` AS `changestamp`,
  `b2g`(`armtypes`.`thedocumenttype`) AS `armtypes_thedocumenttype_id`,
  `objecttype_brief_f`(`armtypes`.`thedocumenttype`, 'ru_ru') AS `armtypes_thedocumenttype`,
  `b2g`(`armtypes`.`instanceid`) AS `instanceid`,
  `armtypes`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armtypes`.`armtypesid`) AS `id`,
  'armtypes' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armtypes`
  JOIN `instance`
    ON ((`armtypes`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autobpc_info"
--
CREATE
VIEW v_autobpc_info
AS
SELECT
  `b2g`(`bpc_info`.`bpc_infoid`) AS `bpc_infoid`,
  `bpc_info`.`changestamp` AS `changestamp`,
  `bpc_info`.`name` AS `bpc_info_name`,
  `b2g`(`bpc_info`.`instanceid`) AS `instanceid`,
  `bpc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`bpc_info`.`bpc_infoid`) AS `id`,
  'bpc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`bpc_info`
  JOIN `instance`
    ON ((`bpc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autobpc_info_en_us"
--
CREATE
VIEW v_autobpc_info_en_us
AS
SELECT
  `b2g`(`bpc_info`.`bpc_infoid`) AS `bpc_infoid`,
  `bpc_info`.`changestamp` AS `changestamp`,
  `bpc_info`.`name` AS `bpc_info_name`,
  `b2g`(`bpc_info`.`instanceid`) AS `instanceid`,
  `bpc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`bpc_info`.`bpc_infoid`) AS `id`,
  'bpc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`bpc_info`
  JOIN `instance`
    ON ((`bpc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autobpc_info_ru_ru"
--
CREATE
VIEW v_autobpc_info_ru_ru
AS
SELECT
  `b2g`(`bpc_info`.`bpc_infoid`) AS `bpc_infoid`,
  `bpc_info`.`changestamp` AS `changestamp`,
  `bpc_info`.`name` AS `bpc_info_name`,
  `b2g`(`bpc_info`.`instanceid`) AS `instanceid`,
  `bpc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`bpc_info`.`bpc_infoid`) AS `id`,
  'bpc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`bpc_info`
  JOIN `instance`
    ON ((`bpc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoconstraintfield"
--
CREATE
VIEW v_autoconstraintfield
AS
SELECT
  `b2g`(`constraintfield`.`constraintfieldid`) AS `constraintfieldid`,
  `constraintfield`.`changestamp` AS `changestamp`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`constraintfield`.`thefield`) AS `constraintfield_thefield_id`,
  `field_brief_f`(`constraintfield`.`thefield`, NULL) AS `constraintfield_thefield`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`constraintfield`.`constraintfieldid`) AS `id`,
  'constraintfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`constraintfield`
  JOIN `uniqueconstraint`
    ON ((`uniqueconstraint`.`uniqueconstraintid` = `constraintfield`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoconstraintfield_en_us"
--
CREATE
VIEW v_autoconstraintfield_en_us
AS
SELECT
  `b2g`(`constraintfield`.`constraintfieldid`) AS `constraintfieldid`,
  `constraintfield`.`changestamp` AS `changestamp`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`constraintfield`.`thefield`) AS `constraintfield_thefield_id`,
  `field_brief_f`(`constraintfield`.`thefield`, 'en_us') AS `constraintfield_thefield`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`constraintfield`.`constraintfieldid`) AS `id`,
  'constraintfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`constraintfield`
  JOIN `uniqueconstraint`
    ON ((`uniqueconstraint`.`uniqueconstraintid` = `constraintfield`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoconstraintfield_ru_ru"
--
CREATE
VIEW v_autoconstraintfield_ru_ru
AS
SELECT
  `b2g`(`constraintfield`.`constraintfieldid`) AS `constraintfieldid`,
  `constraintfield`.`changestamp` AS `changestamp`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`constraintfield`.`thefield`) AS `constraintfield_thefield_id`,
  `field_brief_f`(`constraintfield`.`thefield`, 'ru_ru') AS `constraintfield_thefield`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`constraintfield`.`constraintfieldid`) AS `id`,
  'constraintfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`constraintfield`
  JOIN `uniqueconstraint`
    ON ((`uniqueconstraint`.`uniqueconstraintid` = `constraintfield`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autodinamicfilterscript"
--
CREATE
VIEW v_autodinamicfilterscript
AS
SELECT
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `dinamicfilterscriptid`,
  `dinamicfilterscript`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`dinamicfilterscript`.`target`) AS `dinamicfilterscript_target_id`,
  `generator_target_brief_f`(`dinamicfilterscript`.`target`, NULL) AS `dinamicfilterscript_target`,
  `dinamicfilterscript`.`code` AS `dinamicfilterscript_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `id`,
  'dinamicfilterscript' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`dinamicfilterscript`
  JOIN `field`
    ON ((`field`.`fieldid` = `dinamicfilterscript`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autodinamicfilterscript_en_us"
--
CREATE
VIEW v_autodinamicfilterscript_en_us
AS
SELECT
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `dinamicfilterscriptid`,
  `dinamicfilterscript`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`dinamicfilterscript`.`target`) AS `dinamicfilterscript_target_id`,
  `generator_target_brief_f`(`dinamicfilterscript`.`target`, 'en_us') AS `dinamicfilterscript_target`,
  `dinamicfilterscript`.`code` AS `dinamicfilterscript_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `id`,
  'dinamicfilterscript' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`dinamicfilterscript`
  JOIN `field`
    ON ((`field`.`fieldid` = `dinamicfilterscript`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autodinamicfilterscript_ru_ru"
--
CREATE
VIEW v_autodinamicfilterscript_ru_ru
AS
SELECT
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `dinamicfilterscriptid`,
  `dinamicfilterscript`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`dinamicfilterscript`.`target`) AS `dinamicfilterscript_target_id`,
  `generator_target_brief_f`(`dinamicfilterscript`.`target`, 'ru_ru') AS `dinamicfilterscript_target`,
  `dinamicfilterscript`.`code` AS `dinamicfilterscript_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `id`,
  'dinamicfilterscript' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`dinamicfilterscript`
  JOIN `field`
    ON ((`field`.`fieldid` = `dinamicfilterscript`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoentrypoints"
--
CREATE
VIEW v_autoentrypoints
AS
SELECT
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `entrypoints`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`document`) AS `entrypoints_document_id`,
  `instance_brief_f`(`entrypoints`.`document`, NULL) AS `entrypoints_document`,
  `b2g`(`entrypoints`.`theextention`) AS `entrypoints_theextention_id`,
  `instance_brief_f`(`entrypoints`.`theextention`, NULL) AS `entrypoints_theextention`,
  `entrypoints`.`actiontype` AS `entrypoints_actiontype_val`,
  (CASE `entrypoints`.`actiontype` WHEN 4 THEN 'запустить арм' WHEN 2 THEN 'выполнить метод' WHEN 5 THEN 'открыть отчет' WHEN 0 THEN 'ничего не делать' WHEN 1 THEN 'открыть документ' WHEN 3 THEN 'открыть журнал' ELSE '' END) AS `entrypoints_actiontype`,
  `b2g`(`entrypoints`.`objecttype`) AS `entrypoints_objecttype_id`,
  `objecttype_brief_f`(`entrypoints`.`objecttype`, NULL) AS `entrypoints_objecttype`,
  `b2g`(`entrypoints`.`report`) AS `entrypoints_report_id`,
  `instance_brief_f`(`entrypoints`.`report`, NULL) AS `entrypoints_report`,
  `entrypoints`.`astoolbaritem` AS `entrypoints_astoolbaritem_val`,
  (CASE `entrypoints`.`astoolbaritem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_astoolbaritem`,
  `b2g`(`entrypoints`.`method`) AS `entrypoints_method_id`,
  `sharedmethod_brief_f`(`entrypoints`.`method`, NULL) AS `entrypoints_method`,
  `entrypoints`.`iconfile` AS `entrypoints_iconfile`,
  `entrypoints`.`allowedit` AS `entrypoints_allowedit_val`,
  (CASE `entrypoints`.`allowedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowedit`,
  `b2g`(`entrypoints`.`thefilter`) AS `entrypoints_thefilter_id`,
  `instance_brief_f`(`entrypoints`.`thefilter`, NULL) AS `entrypoints_thefilter`,
  `entrypoints`.`allowfilter` AS `entrypoints_allowfilter_val`,
  (CASE `entrypoints`.`allowfilter` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowfilter`,
  `b2g`(`entrypoints`.`journal`) AS `entrypoints_journal_id`,
  `instance_brief_f`(`entrypoints`.`journal`, NULL) AS `entrypoints_journal`,
  `entrypoints`.`caption` AS `entrypoints_caption`,
  `entrypoints`.`name` AS `entrypoints_name`,
  `entrypoints`.`allowprint` AS `entrypoints_allowprint_val`,
  (CASE `entrypoints`.`allowprint` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowprint`,
  `entrypoints`.`thecomment` AS `entrypoints_thecomment`,
  `entrypoints`.`allowdel` AS `entrypoints_allowdel_val`,
  (CASE `entrypoints`.`allowdel` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowdel`,
  `entrypoints`.`allowadd` AS `entrypoints_allowadd_val`,
  (CASE `entrypoints`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowadd`,
  `entrypoints`.`journalfixedquery` AS `entrypoints_journalfixedquery`,
  `entrypoints`.`sequence` AS `entrypoints_sequence`,
  `b2g`(`entrypoints`.`arm`) AS `entrypoints_arm_id`,
  `instance_brief_f`(`entrypoints`.`arm`, NULL) AS `entrypoints_arm`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `id`,
  'entrypoints' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`entrypoints`
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoentrypoints_en_us"
--
CREATE
VIEW v_autoentrypoints_en_us
AS
SELECT
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `entrypoints`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`document`) AS `entrypoints_document_id`,
  `instance_brief_f`(`entrypoints`.`document`, 'en_us') AS `entrypoints_document`,
  `b2g`(`entrypoints`.`theextention`) AS `entrypoints_theextention_id`,
  `instance_brief_f`(`entrypoints`.`theextention`, 'en_us') AS `entrypoints_theextention`,
  `entrypoints`.`actiontype` AS `entrypoints_actiontype_val`,
  (CASE `entrypoints`.`actiontype` WHEN 4 THEN 'запустить арм' WHEN 2 THEN 'выполнить метод' WHEN 5 THEN 'открыть отчет' WHEN 0 THEN 'ничего не делать' WHEN 1 THEN 'открыть документ' WHEN 3 THEN 'открыть журнал' ELSE '' END) AS `entrypoints_actiontype`,
  `b2g`(`entrypoints`.`objecttype`) AS `entrypoints_objecttype_id`,
  `objecttype_brief_f`(`entrypoints`.`objecttype`, 'en_us') AS `entrypoints_objecttype`,
  `b2g`(`entrypoints`.`report`) AS `entrypoints_report_id`,
  `instance_brief_f`(`entrypoints`.`report`, 'en_us') AS `entrypoints_report`,
  `entrypoints`.`astoolbaritem` AS `entrypoints_astoolbaritem_val`,
  (CASE `entrypoints`.`astoolbaritem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_astoolbaritem`,
  `b2g`(`entrypoints`.`method`) AS `entrypoints_method_id`,
  `sharedmethod_brief_f`(`entrypoints`.`method`, 'en_us') AS `entrypoints_method`,
  `entrypoints`.`iconfile` AS `entrypoints_iconfile`,
  `entrypoints`.`allowedit` AS `entrypoints_allowedit_val`,
  (CASE `entrypoints`.`allowedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowedit`,
  `b2g`(`entrypoints`.`thefilter`) AS `entrypoints_thefilter_id`,
  `instance_brief_f`(`entrypoints`.`thefilter`, 'en_us') AS `entrypoints_thefilter`,
  `entrypoints`.`allowfilter` AS `entrypoints_allowfilter_val`,
  (CASE `entrypoints`.`allowfilter` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowfilter`,
  `b2g`(`entrypoints`.`journal`) AS `entrypoints_journal_id`,
  `instance_brief_f`(`entrypoints`.`journal`, 'en_us') AS `entrypoints_journal`,
  `entrypoints`.`caption` AS `entrypoints_caption`,
  `entrypoints`.`name` AS `entrypoints_name`,
  `entrypoints`.`allowprint` AS `entrypoints_allowprint_val`,
  (CASE `entrypoints`.`allowprint` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowprint`,
  `entrypoints`.`thecomment` AS `entrypoints_thecomment`,
  `entrypoints`.`allowdel` AS `entrypoints_allowdel_val`,
  (CASE `entrypoints`.`allowdel` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowdel`,
  `entrypoints`.`allowadd` AS `entrypoints_allowadd_val`,
  (CASE `entrypoints`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowadd`,
  `entrypoints`.`journalfixedquery` AS `entrypoints_journalfixedquery`,
  `entrypoints`.`sequence` AS `entrypoints_sequence`,
  `b2g`(`entrypoints`.`arm`) AS `entrypoints_arm_id`,
  `instance_brief_f`(`entrypoints`.`arm`, 'en_us') AS `entrypoints_arm`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `id`,
  'entrypoints' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`entrypoints`
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoentrypoints_ru_ru"
--
CREATE
VIEW v_autoentrypoints_ru_ru
AS
SELECT
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `entrypoints`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`document`) AS `entrypoints_document_id`,
  `instance_brief_f`(`entrypoints`.`document`, 'ru_ru') AS `entrypoints_document`,
  `b2g`(`entrypoints`.`theextention`) AS `entrypoints_theextention_id`,
  `instance_brief_f`(`entrypoints`.`theextention`, 'ru_ru') AS `entrypoints_theextention`,
  `entrypoints`.`actiontype` AS `entrypoints_actiontype_val`,
  (CASE `entrypoints`.`actiontype` WHEN 4 THEN 'запустить арм' WHEN 2 THEN 'выполнить метод' WHEN 5 THEN 'открыть отчет' WHEN 0 THEN 'ничего не делать' WHEN 1 THEN 'открыть документ' WHEN 3 THEN 'открыть журнал' ELSE '' END) AS `entrypoints_actiontype`,
  `b2g`(`entrypoints`.`objecttype`) AS `entrypoints_objecttype_id`,
  `objecttype_brief_f`(`entrypoints`.`objecttype`, 'ru_ru') AS `entrypoints_objecttype`,
  `b2g`(`entrypoints`.`report`) AS `entrypoints_report_id`,
  `instance_brief_f`(`entrypoints`.`report`, 'ru_ru') AS `entrypoints_report`,
  `entrypoints`.`astoolbaritem` AS `entrypoints_astoolbaritem_val`,
  (CASE `entrypoints`.`astoolbaritem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_astoolbaritem`,
  `b2g`(`entrypoints`.`method`) AS `entrypoints_method_id`,
  `sharedmethod_brief_f`(`entrypoints`.`method`, 'ru_ru') AS `entrypoints_method`,
  `entrypoints`.`iconfile` AS `entrypoints_iconfile`,
  `entrypoints`.`allowedit` AS `entrypoints_allowedit_val`,
  (CASE `entrypoints`.`allowedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowedit`,
  `b2g`(`entrypoints`.`thefilter`) AS `entrypoints_thefilter_id`,
  `instance_brief_f`(`entrypoints`.`thefilter`, 'ru_ru') AS `entrypoints_thefilter`,
  `entrypoints`.`allowfilter` AS `entrypoints_allowfilter_val`,
  (CASE `entrypoints`.`allowfilter` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowfilter`,
  `b2g`(`entrypoints`.`journal`) AS `entrypoints_journal_id`,
  `instance_brief_f`(`entrypoints`.`journal`, 'ru_ru') AS `entrypoints_journal`,
  `entrypoints`.`caption` AS `entrypoints_caption`,
  `entrypoints`.`name` AS `entrypoints_name`,
  `entrypoints`.`allowprint` AS `entrypoints_allowprint_val`,
  (CASE `entrypoints`.`allowprint` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowprint`,
  `entrypoints`.`thecomment` AS `entrypoints_thecomment`,
  `entrypoints`.`allowdel` AS `entrypoints_allowdel_val`,
  (CASE `entrypoints`.`allowdel` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowdel`,
  `entrypoints`.`allowadd` AS `entrypoints_allowadd_val`,
  (CASE `entrypoints`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `entrypoints_allowadd`,
  `entrypoints`.`journalfixedquery` AS `entrypoints_journalfixedquery`,
  `entrypoints`.`sequence` AS `entrypoints_sequence`,
  `b2g`(`entrypoints`.`arm`) AS `entrypoints_arm_id`,
  `instance_brief_f`(`entrypoints`.`arm`, 'ru_ru') AS `entrypoints_arm`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `id`,
  'entrypoints' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`entrypoints`
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoenumitem"
--
CREATE
VIEW v_autoenumitem
AS
SELECT
  `b2g`(`enumitem`.`enumitemid`) AS `enumitemid`,
  `enumitem`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `enumitem`.`name` AS `enumitem_name`,
  `enumitem`.`nameincode` AS `enumitem_nameincode`,
  `enumitem`.`namevalue` AS `enumitem_namevalue`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`enumitem`.`enumitemid`) AS `id`,
  'enumitem' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`enumitem`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `enumitem`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoenumitem_en_us"
--
CREATE
VIEW v_autoenumitem_en_us
AS
SELECT
  `b2g`(`enumitem`.`enumitemid`) AS `enumitemid`,
  `enumitem`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `enumitem`.`name` AS `enumitem_name`,
  `enumitem`.`nameincode` AS `enumitem_nameincode`,
  `enumitem`.`namevalue` AS `enumitem_namevalue`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`enumitem`.`enumitemid`) AS `id`,
  'enumitem' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`enumitem`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `enumitem`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoenumitem_ru_ru"
--
CREATE
VIEW v_autoenumitem_ru_ru
AS
SELECT
  `b2g`(`enumitem`.`enumitemid`) AS `enumitemid`,
  `enumitem`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `enumitem`.`name` AS `enumitem_name`,
  `enumitem`.`nameincode` AS `enumitem_nameincode`,
  `enumitem`.`namevalue` AS `enumitem_namevalue`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`enumitem`.`enumitemid`) AS `id`,
  'enumitem' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`enumitem`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `enumitem`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoepfilterlink"
--
CREATE
VIEW v_autoepfilterlink
AS
SELECT
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `epfilterlinkid`,
  `epfilterlink`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `epfilterlink`.`rowsource` AS `epfilterlink_rowsource`,
  `epfilterlink`.`filterfield` AS `epfilterlink_filterfield`,
  `epfilterlink`.`theexpression` AS `epfilterlink_theexpression`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `id`,
  'epfilterlink' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`epfilterlink`
  JOIN `entrypoints`
    ON ((`entrypoints`.`entrypointsid` = `epfilterlink`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoepfilterlink_en_us"
--
CREATE
VIEW v_autoepfilterlink_en_us
AS
SELECT
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `epfilterlinkid`,
  `epfilterlink`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `epfilterlink`.`rowsource` AS `epfilterlink_rowsource`,
  `epfilterlink`.`filterfield` AS `epfilterlink_filterfield`,
  `epfilterlink`.`theexpression` AS `epfilterlink_theexpression`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `id`,
  'epfilterlink' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`epfilterlink`
  JOIN `entrypoints`
    ON ((`entrypoints`.`entrypointsid` = `epfilterlink`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoepfilterlink_ru_ru"
--
CREATE
VIEW v_autoepfilterlink_ru_ru
AS
SELECT
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `epfilterlinkid`,
  `epfilterlink`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `epfilterlink`.`rowsource` AS `epfilterlink_rowsource`,
  `epfilterlink`.`filterfield` AS `epfilterlink_filterfield`,
  `epfilterlink`.`theexpression` AS `epfilterlink_theexpression`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `id`,
  'epfilterlink' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`epfilterlink`
  JOIN `entrypoints`
    ON ((`entrypoints`.`entrypointsid` = `epfilterlink`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoextenderinterface"
--
CREATE
VIEW v_autoextenderinterface
AS
SELECT
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `extenderinterfaceid`,
  `extenderinterface`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `extenderinterface`.`thename` AS `extenderinterface_thename`,
  `b2g`(`extenderinterface`.`targetplatform`) AS `extenderinterface_targetplatform_id`,
  `generator_target_brief_f`(`extenderinterface`.`targetplatform`, NULL) AS `extenderinterface_targetplatform`,
  `extenderinterface`.`theobject` AS `extenderinterface_theobject`,
  `extenderinterface`.`theconfig` AS `extenderinterface_theconfig`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `id`,
  'extenderinterface' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`extenderinterface`
  JOIN `part`
    ON ((`part`.`partid` = `extenderinterface`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoextenderinterface_en_us"
--
CREATE
VIEW v_autoextenderinterface_en_us
AS
SELECT
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `extenderinterfaceid`,
  `extenderinterface`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `extenderinterface`.`thename` AS `extenderinterface_thename`,
  `b2g`(`extenderinterface`.`targetplatform`) AS `extenderinterface_targetplatform_id`,
  `generator_target_brief_f`(`extenderinterface`.`targetplatform`, 'en_us') AS `extenderinterface_targetplatform`,
  `extenderinterface`.`theobject` AS `extenderinterface_theobject`,
  `extenderinterface`.`theconfig` AS `extenderinterface_theconfig`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `id`,
  'extenderinterface' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`extenderinterface`
  JOIN `part`
    ON ((`part`.`partid` = `extenderinterface`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoextenderinterface_ru_ru"
--
CREATE
VIEW v_autoextenderinterface_ru_ru
AS
SELECT
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `extenderinterfaceid`,
  `extenderinterface`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `extenderinterface`.`thename` AS `extenderinterface_thename`,
  `b2g`(`extenderinterface`.`targetplatform`) AS `extenderinterface_targetplatform_id`,
  `generator_target_brief_f`(`extenderinterface`.`targetplatform`, 'ru_ru') AS `extenderinterface_targetplatform`,
  `extenderinterface`.`theobject` AS `extenderinterface_theobject`,
  `extenderinterface`.`theconfig` AS `extenderinterface_theconfig`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `id`,
  'extenderinterface' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`extenderinterface`
  JOIN `part`
    ON ((`part`.`partid` = `extenderinterface`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofield"
--
CREATE
VIEW v_autofield
AS
SELECT
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `field`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `field`.`sequence` AS `field_sequence`,
  `field`.`referencetype` AS `field_referencetype_val`,
  (CASE `field`.`referencetype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `field_referencetype`,
  `field`.`themask` AS `field_themask`,
  `b2g`(`field`.`thenumerator`) AS `field_thenumerator_id`,
  `instance_brief_f`(`field`.`thenumerator`, NULL) AS `field_thenumerator`,
  `field`.`istabbrief` AS `field_istabbrief_val`,
  (CASE `field`.`istabbrief` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_istabbrief`,
  `field`.`fieldgroupbox` AS `field_fieldgroupbox`,
  `b2g`(`field`.`reftotype`) AS `field_reftotype_id`,
  `objecttype_brief_f`(`field`.`reftotype`, NULL) AS `field_reftotype`,
  `field`.`thestyle` AS `field_thestyle`,
  `field`.`shablonbrief` AS `field_shablonbrief`,
  `b2g`(`field`.`reftopart`) AS `field_reftopart_id`,
  `part_brief_f`(`field`.`reftopart`, NULL) AS `field_reftopart`,
  `field`.`thecomment` AS `field_thecomment`,
  `field`.`tabname` AS `field_tabname`,
  `b2g`(`field`.`fieldtype`) AS `field_fieldtype_id`,
  `fieldtype_brief_f`(`field`.`fieldtype`, NULL) AS `field_fieldtype`,
  `b2g`(`field`.`numberdatefield`) AS `field_numberdatefield_id`,
  `field_brief_f`(`field`.`numberdatefield`, NULL) AS `field_numberdatefield`,
  `field`.`isbrief` AS `field_isbrief_val`,
  (CASE `field`.`isbrief` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_isbrief`,
  `field`.`thenameclass` AS `field_thenameclass`,
  `field`.`internalreference` AS `field_internalreference_val`,
  (CASE `field`.`internalreference` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_internalreference`,
  `field`.`isautonumber` AS `field_isautonumber_val`,
  (CASE `field`.`isautonumber` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_isautonumber`,
  `field`.`allownull` AS `field_allownull_val`,
  (CASE `field`.`allownull` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_allownull`,
  `field`.`createrefonly` AS `field_createrefonly_val`,
  (CASE `field`.`createrefonly` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_createrefonly`,
  `field`.`zonetemplate` AS `field_zonetemplate`,
  `field`.`datasize` AS `field_datasize`,
  `field`.`caption` AS `field_caption`,
  `field`.`name` AS `field_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`field`.`fieldid`) AS `id`,
  'field' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`field`
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofield_en_us"
--
CREATE
VIEW v_autofield_en_us
AS
SELECT
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `field`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `field`.`sequence` AS `field_sequence`,
  `field`.`referencetype` AS `field_referencetype_val`,
  (CASE `field`.`referencetype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `field_referencetype`,
  `field`.`themask` AS `field_themask`,
  `b2g`(`field`.`thenumerator`) AS `field_thenumerator_id`,
  `instance_brief_f`(`field`.`thenumerator`, 'en_us') AS `field_thenumerator`,
  `field`.`istabbrief` AS `field_istabbrief_val`,
  (CASE `field`.`istabbrief` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_istabbrief`,
  `field`.`fieldgroupbox` AS `field_fieldgroupbox`,
  `b2g`(`field`.`reftotype`) AS `field_reftotype_id`,
  `objecttype_brief_f`(`field`.`reftotype`, 'en_us') AS `field_reftotype`,
  `field`.`thestyle` AS `field_thestyle`,
  `field`.`shablonbrief` AS `field_shablonbrief`,
  `b2g`(`field`.`reftopart`) AS `field_reftopart_id`,
  `part_brief_f`(`field`.`reftopart`, 'en_us') AS `field_reftopart`,
  `field`.`thecomment` AS `field_thecomment`,
  `field`.`tabname` AS `field_tabname`,
  `b2g`(`field`.`fieldtype`) AS `field_fieldtype_id`,
  `fieldtype_brief_f`(`field`.`fieldtype`, 'en_us') AS `field_fieldtype`,
  `b2g`(`field`.`numberdatefield`) AS `field_numberdatefield_id`,
  `field_brief_f`(`field`.`numberdatefield`, 'en_us') AS `field_numberdatefield`,
  `field`.`isbrief` AS `field_isbrief_val`,
  (CASE `field`.`isbrief` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_isbrief`,
  `field`.`thenameclass` AS `field_thenameclass`,
  `field`.`internalreference` AS `field_internalreference_val`,
  (CASE `field`.`internalreference` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_internalreference`,
  `field`.`isautonumber` AS `field_isautonumber_val`,
  (CASE `field`.`isautonumber` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_isautonumber`,
  `field`.`allownull` AS `field_allownull_val`,
  (CASE `field`.`allownull` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_allownull`,
  `field`.`createrefonly` AS `field_createrefonly_val`,
  (CASE `field`.`createrefonly` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_createrefonly`,
  `field`.`zonetemplate` AS `field_zonetemplate`,
  `field`.`datasize` AS `field_datasize`,
  `field`.`caption` AS `field_caption`,
  `field`.`name` AS `field_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`field`.`fieldid`) AS `id`,
  'field' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`field`
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofield_ru_ru"
--
CREATE
VIEW v_autofield_ru_ru
AS
SELECT
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `field`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `field`.`sequence` AS `field_sequence`,
  `field`.`referencetype` AS `field_referencetype_val`,
  (CASE `field`.`referencetype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `field_referencetype`,
  `field`.`themask` AS `field_themask`,
  `b2g`(`field`.`thenumerator`) AS `field_thenumerator_id`,
  `instance_brief_f`(`field`.`thenumerator`, 'ru_ru') AS `field_thenumerator`,
  `field`.`istabbrief` AS `field_istabbrief_val`,
  (CASE `field`.`istabbrief` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_istabbrief`,
  `field`.`fieldgroupbox` AS `field_fieldgroupbox`,
  `b2g`(`field`.`reftotype`) AS `field_reftotype_id`,
  `objecttype_brief_f`(`field`.`reftotype`, 'ru_ru') AS `field_reftotype`,
  `field`.`thestyle` AS `field_thestyle`,
  `field`.`shablonbrief` AS `field_shablonbrief`,
  `b2g`(`field`.`reftopart`) AS `field_reftopart_id`,
  `part_brief_f`(`field`.`reftopart`, 'ru_ru') AS `field_reftopart`,
  `field`.`thecomment` AS `field_thecomment`,
  `field`.`tabname` AS `field_tabname`,
  `b2g`(`field`.`fieldtype`) AS `field_fieldtype_id`,
  `fieldtype_brief_f`(`field`.`fieldtype`, 'ru_ru') AS `field_fieldtype`,
  `b2g`(`field`.`numberdatefield`) AS `field_numberdatefield_id`,
  `field_brief_f`(`field`.`numberdatefield`, 'ru_ru') AS `field_numberdatefield`,
  `field`.`isbrief` AS `field_isbrief_val`,
  (CASE `field`.`isbrief` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_isbrief`,
  `field`.`thenameclass` AS `field_thenameclass`,
  `field`.`internalreference` AS `field_internalreference_val`,
  (CASE `field`.`internalreference` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_internalreference`,
  `field`.`isautonumber` AS `field_isautonumber_val`,
  (CASE `field`.`isautonumber` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_isautonumber`,
  `field`.`allownull` AS `field_allownull_val`,
  (CASE `field`.`allownull` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_allownull`,
  `field`.`createrefonly` AS `field_createrefonly_val`,
  (CASE `field`.`createrefonly` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `field_createrefonly`,
  `field`.`zonetemplate` AS `field_zonetemplate`,
  `field`.`datasize` AS `field_datasize`,
  `field`.`caption` AS `field_caption`,
  `field`.`name` AS `field_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`field`.`fieldid`) AS `id`,
  'field' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`field`
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldexpression"
--
CREATE
VIEW v_autofieldexpression
AS
SELECT
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `fieldexpressionid`,
  `fieldexpression`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldexpression`.`target`) AS `fieldexpression_target_id`,
  `generator_target_brief_f`(`fieldexpression`.`target`, NULL) AS `fieldexpression_target`,
  `fieldexpression`.`code` AS `fieldexpression_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `id`,
  'fieldexpression' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldexpression`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldexpression`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldexpression_en_us"
--
CREATE
VIEW v_autofieldexpression_en_us
AS
SELECT
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `fieldexpressionid`,
  `fieldexpression`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldexpression`.`target`) AS `fieldexpression_target_id`,
  `generator_target_brief_f`(`fieldexpression`.`target`, 'en_us') AS `fieldexpression_target`,
  `fieldexpression`.`code` AS `fieldexpression_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `id`,
  'fieldexpression' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldexpression`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldexpression`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldexpression_ru_ru"
--
CREATE
VIEW v_autofieldexpression_ru_ru
AS
SELECT
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `fieldexpressionid`,
  `fieldexpression`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldexpression`.`target`) AS `fieldexpression_target_id`,
  `generator_target_brief_f`(`fieldexpression`.`target`, 'ru_ru') AS `fieldexpression_target`,
  `fieldexpression`.`code` AS `fieldexpression_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `id`,
  'fieldexpression' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldexpression`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldexpression`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldmenu"
--
CREATE
VIEW v_autofieldmenu
AS
SELECT
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `fieldmenu`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldmenu`.`hotkey` AS `fieldmenu_hotkey`,
  `fieldmenu`.`istoolbarbutton` AS `fieldmenu_istoolbarbutton_val`,
  (CASE `fieldmenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldmenu_istoolbarbutton`,
  `fieldmenu`.`tooltip` AS `fieldmenu_tooltip`,
  `fieldmenu`.`ismenuitem` AS `fieldmenu_ismenuitem_val`,
  (CASE `fieldmenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldmenu_ismenuitem`,
  `b2g`(`fieldmenu`.`actionid`) AS `fieldmenu_actionid_id`,
  `sharedmethod_brief_f`(`fieldmenu`.`actionid`, NULL) AS `fieldmenu_actionid`,
  `fieldmenu`.`caption` AS `fieldmenu_caption`,
  `fieldmenu`.`name` AS `fieldmenu_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `id`,
  'fieldmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldmenu`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldmenu_en_us"
--
CREATE
VIEW v_autofieldmenu_en_us
AS
SELECT
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `fieldmenu`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldmenu`.`hotkey` AS `fieldmenu_hotkey`,
  `fieldmenu`.`istoolbarbutton` AS `fieldmenu_istoolbarbutton_val`,
  (CASE `fieldmenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldmenu_istoolbarbutton`,
  `fieldmenu`.`tooltip` AS `fieldmenu_tooltip`,
  `fieldmenu`.`ismenuitem` AS `fieldmenu_ismenuitem_val`,
  (CASE `fieldmenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldmenu_ismenuitem`,
  `b2g`(`fieldmenu`.`actionid`) AS `fieldmenu_actionid_id`,
  `sharedmethod_brief_f`(`fieldmenu`.`actionid`, 'en_us') AS `fieldmenu_actionid`,
  `fieldmenu`.`caption` AS `fieldmenu_caption`,
  `fieldmenu`.`name` AS `fieldmenu_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `id`,
  'fieldmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldmenu`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldmenu_ru_ru"
--
CREATE
VIEW v_autofieldmenu_ru_ru
AS
SELECT
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `fieldmenu`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldmenu`.`hotkey` AS `fieldmenu_hotkey`,
  `fieldmenu`.`istoolbarbutton` AS `fieldmenu_istoolbarbutton_val`,
  (CASE `fieldmenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldmenu_istoolbarbutton`,
  `fieldmenu`.`tooltip` AS `fieldmenu_tooltip`,
  `fieldmenu`.`ismenuitem` AS `fieldmenu_ismenuitem_val`,
  (CASE `fieldmenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldmenu_ismenuitem`,
  `b2g`(`fieldmenu`.`actionid`) AS `fieldmenu_actionid_id`,
  `sharedmethod_brief_f`(`fieldmenu`.`actionid`, 'ru_ru') AS `fieldmenu_actionid`,
  `fieldmenu`.`caption` AS `fieldmenu_caption`,
  `fieldmenu`.`name` AS `fieldmenu_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `id`,
  'fieldmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldmenu`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldparammap"
--
CREATE
VIEW v_autofieldparammap
AS
SELECT
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `fieldparammapid`,
  `fieldparammap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldparammap`.`noedit` AS `fieldparammap_noedit_val`,
  (CASE `fieldparammap`.`noedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldparammap_noedit`,
  `fieldparammap`.`paramname` AS `fieldparammap_paramname`,
  `fieldparammap`.`fieldname` AS `fieldparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `id`,
  'fieldparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((((`fieldparammap`
  JOIN `fieldmenu`
    ON ((`fieldmenu`.`fieldmenuid` = `fieldparammap`.`parentstructrowid`)))
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldparammap_en_us"
--
CREATE
VIEW v_autofieldparammap_en_us
AS
SELECT
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `fieldparammapid`,
  `fieldparammap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldparammap`.`noedit` AS `fieldparammap_noedit_val`,
  (CASE `fieldparammap`.`noedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldparammap_noedit`,
  `fieldparammap`.`paramname` AS `fieldparammap_paramname`,
  `fieldparammap`.`fieldname` AS `fieldparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `id`,
  'fieldparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((((`fieldparammap`
  JOIN `fieldmenu`
    ON ((`fieldmenu`.`fieldmenuid` = `fieldparammap`.`parentstructrowid`)))
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldparammap_ru_ru"
--
CREATE
VIEW v_autofieldparammap_ru_ru
AS
SELECT
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `fieldparammapid`,
  `fieldparammap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldparammap`.`noedit` AS `fieldparammap_noedit_val`,
  (CASE `fieldparammap`.`noedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldparammap_noedit`,
  `fieldparammap`.`paramname` AS `fieldparammap_paramname`,
  `fieldparammap`.`fieldname` AS `fieldparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `id`,
  'fieldparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((((`fieldparammap`
  JOIN `fieldmenu`
    ON ((`fieldmenu`.`fieldmenuid` = `fieldparammap`.`parentstructrowid`)))
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldrestriction"
--
CREATE
VIEW v_autofieldrestriction
AS
SELECT
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `fieldrestrictionid`,
  `fieldrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldrestriction`.`thefield`) AS `fieldrestriction_thefield_id`,
  `field_brief_f`(`fieldrestriction`.`thefield`, NULL) AS `fieldrestriction_thefield`,
  `fieldrestriction`.`mandatoryfield` AS `fieldrestriction_mandatoryfield_val`,
  (CASE `fieldrestriction`.`mandatoryfield` WHEN -(1) THEN 'не существенно' WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_mandatoryfield`,
  `fieldrestriction`.`allowmodify` AS `fieldrestriction_allowmodify_val`,
  (CASE `fieldrestriction`.`allowmodify` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_allowmodify`,
  `b2g`(`fieldrestriction`.`thepart`) AS `fieldrestriction_thepart_id`,
  `part_brief_f`(`fieldrestriction`.`thepart`, NULL) AS `fieldrestriction_thepart`,
  `fieldrestriction`.`allowread` AS `fieldrestriction_allowread_val`,
  (CASE `fieldrestriction`.`allowread` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_allowread`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `id`,
  'fieldrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`fieldrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `fieldrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldrestriction_en_us"
--
CREATE
VIEW v_autofieldrestriction_en_us
AS
SELECT
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `fieldrestrictionid`,
  `fieldrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldrestriction`.`thefield`) AS `fieldrestriction_thefield_id`,
  `field_brief_f`(`fieldrestriction`.`thefield`, 'en_us') AS `fieldrestriction_thefield`,
  `fieldrestriction`.`mandatoryfield` AS `fieldrestriction_mandatoryfield_val`,
  (CASE `fieldrestriction`.`mandatoryfield` WHEN -(1) THEN 'не существенно' WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_mandatoryfield`,
  `fieldrestriction`.`allowmodify` AS `fieldrestriction_allowmodify_val`,
  (CASE `fieldrestriction`.`allowmodify` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_allowmodify`,
  `b2g`(`fieldrestriction`.`thepart`) AS `fieldrestriction_thepart_id`,
  `part_brief_f`(`fieldrestriction`.`thepart`, 'en_us') AS `fieldrestriction_thepart`,
  `fieldrestriction`.`allowread` AS `fieldrestriction_allowread_val`,
  (CASE `fieldrestriction`.`allowread` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_allowread`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `id`,
  'fieldrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`fieldrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `fieldrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldrestriction_ru_ru"
--
CREATE
VIEW v_autofieldrestriction_ru_ru
AS
SELECT
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `fieldrestrictionid`,
  `fieldrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldrestriction`.`thefield`) AS `fieldrestriction_thefield_id`,
  `field_brief_f`(`fieldrestriction`.`thefield`, 'ru_ru') AS `fieldrestriction_thefield`,
  `fieldrestriction`.`mandatoryfield` AS `fieldrestriction_mandatoryfield_val`,
  (CASE `fieldrestriction`.`mandatoryfield` WHEN -(1) THEN 'не существенно' WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_mandatoryfield`,
  `fieldrestriction`.`allowmodify` AS `fieldrestriction_allowmodify_val`,
  (CASE `fieldrestriction`.`allowmodify` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_allowmodify`,
  `b2g`(`fieldrestriction`.`thepart`) AS `fieldrestriction_thepart_id`,
  `part_brief_f`(`fieldrestriction`.`thepart`, 'ru_ru') AS `fieldrestriction_thepart`,
  `fieldrestriction`.`allowread` AS `fieldrestriction_allowread_val`,
  (CASE `fieldrestriction`.`allowread` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldrestriction_allowread`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `id`,
  'fieldrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`fieldrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `fieldrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldsrcdef"
--
CREATE
VIEW v_autofieldsrcdef
AS
SELECT
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `fieldsrcdefid`,
  `fieldsrcdef`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldsrcdef`.`idfield` AS `fieldsrcdef_idfield`,
  `fieldsrcdef`.`descriptionstring` AS `fieldsrcdef_descriptionstring`,
  `fieldsrcdef`.`briefstring` AS `fieldsrcdef_briefstring`,
  `fieldsrcdef`.`connectionstring` AS `fieldsrcdef_connectionstring`,
  `fieldsrcdef`.`sortfield` AS `fieldsrcdef_sortfield`,
  `fieldsrcdef`.`filterstring` AS `fieldsrcdef_filterstring`,
  `fieldsrcdef`.`dontshowdialog` AS `fieldsrcdef_dontshowdialog_val`,
  (CASE `fieldsrcdef`.`dontshowdialog` WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldsrcdef_dontshowdialog`,
  `fieldsrcdef`.`datasource` AS `fieldsrcdef_datasource`,
  `fieldsrcdef`.`provider` AS `fieldsrcdef_provider`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `id`,
  'fieldsrcdef' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldsrcdef`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldsrcdef`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldsrcdef_en_us"
--
CREATE
VIEW v_autofieldsrcdef_en_us
AS
SELECT
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `fieldsrcdefid`,
  `fieldsrcdef`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldsrcdef`.`idfield` AS `fieldsrcdef_idfield`,
  `fieldsrcdef`.`descriptionstring` AS `fieldsrcdef_descriptionstring`,
  `fieldsrcdef`.`briefstring` AS `fieldsrcdef_briefstring`,
  `fieldsrcdef`.`connectionstring` AS `fieldsrcdef_connectionstring`,
  `fieldsrcdef`.`sortfield` AS `fieldsrcdef_sortfield`,
  `fieldsrcdef`.`filterstring` AS `fieldsrcdef_filterstring`,
  `fieldsrcdef`.`dontshowdialog` AS `fieldsrcdef_dontshowdialog_val`,
  (CASE `fieldsrcdef`.`dontshowdialog` WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldsrcdef_dontshowdialog`,
  `fieldsrcdef`.`datasource` AS `fieldsrcdef_datasource`,
  `fieldsrcdef`.`provider` AS `fieldsrcdef_provider`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `id`,
  'fieldsrcdef' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldsrcdef`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldsrcdef`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldsrcdef_ru_ru"
--
CREATE
VIEW v_autofieldsrcdef_ru_ru
AS
SELECT
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `fieldsrcdefid`,
  `fieldsrcdef`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldsrcdef`.`idfield` AS `fieldsrcdef_idfield`,
  `fieldsrcdef`.`descriptionstring` AS `fieldsrcdef_descriptionstring`,
  `fieldsrcdef`.`briefstring` AS `fieldsrcdef_briefstring`,
  `fieldsrcdef`.`connectionstring` AS `fieldsrcdef_connectionstring`,
  `fieldsrcdef`.`sortfield` AS `fieldsrcdef_sortfield`,
  `fieldsrcdef`.`filterstring` AS `fieldsrcdef_filterstring`,
  `fieldsrcdef`.`dontshowdialog` AS `fieldsrcdef_dontshowdialog_val`,
  (CASE `fieldsrcdef`.`dontshowdialog` WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldsrcdef_dontshowdialog`,
  `fieldsrcdef`.`datasource` AS `fieldsrcdef_datasource`,
  `fieldsrcdef`.`provider` AS `fieldsrcdef_provider`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `id`,
  'fieldsrcdef' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldsrcdef`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldsrcdef`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtype"
--
CREATE
VIEW v_autofieldtype
AS
SELECT
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `fieldtype`.`changestamp` AS `changestamp`,
  `fieldtype`.`allowlikesearch` AS `fieldtype_allowlikesearch_val`,
  (CASE `fieldtype`.`allowlikesearch` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_allowlikesearch`,
  `fieldtype`.`typestyle` AS `fieldtype_typestyle_val`,
  (CASE `fieldtype`.`typestyle` WHEN 4 THEN 'ссылка' WHEN 1 THEN 'выражение' WHEN 5 THEN 'элемент оформления' WHEN 3 THEN 'интервал' WHEN 2 THEN 'перечисление' WHEN 0 THEN 'скалярный тип' ELSE '' END) AS `fieldtype_typestyle`,
  `fieldtype`.`gridsorttype` AS `fieldtype_gridsorttype_val`,
  (CASE `fieldtype`.`gridsorttype` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `fieldtype_gridsorttype`,
  `fieldtype`.`maximum` AS `fieldtype_maximum`,
  `fieldtype`.`allowsize` AS `fieldtype_allowsize_val`,
  (CASE `fieldtype`.`allowsize` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_allowsize`,
  `fieldtype`.`delayedsave` AS `fieldtype_delayedsave_val`,
  (CASE `fieldtype`.`delayedsave` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_delayedsave`,
  `fieldtype`.`minimum` AS `fieldtype_minimum`,
  `fieldtype`.`the_comment` AS `fieldtype_the_comment`,
  `fieldtype`.`name` AS `fieldtype_name`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `id`,
  'fieldtype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`fieldtype`
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtype_en_us"
--
CREATE
VIEW v_autofieldtype_en_us
AS
SELECT
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `fieldtype`.`changestamp` AS `changestamp`,
  `fieldtype`.`allowlikesearch` AS `fieldtype_allowlikesearch_val`,
  (CASE `fieldtype`.`allowlikesearch` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_allowlikesearch`,
  `fieldtype`.`typestyle` AS `fieldtype_typestyle_val`,
  (CASE `fieldtype`.`typestyle` WHEN 4 THEN 'ссылка' WHEN 1 THEN 'выражение' WHEN 5 THEN 'элемент оформления' WHEN 3 THEN 'интервал' WHEN 2 THEN 'перечисление' WHEN 0 THEN 'скалярный тип' ELSE '' END) AS `fieldtype_typestyle`,
  `fieldtype`.`gridsorttype` AS `fieldtype_gridsorttype_val`,
  (CASE `fieldtype`.`gridsorttype` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `fieldtype_gridsorttype`,
  `fieldtype`.`maximum` AS `fieldtype_maximum`,
  `fieldtype`.`allowsize` AS `fieldtype_allowsize_val`,
  (CASE `fieldtype`.`allowsize` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_allowsize`,
  `fieldtype`.`delayedsave` AS `fieldtype_delayedsave_val`,
  (CASE `fieldtype`.`delayedsave` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_delayedsave`,
  `fieldtype`.`minimum` AS `fieldtype_minimum`,
  `fieldtype`.`the_comment` AS `fieldtype_the_comment`,
  `fieldtype`.`name` AS `fieldtype_name`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `id`,
  'fieldtype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`fieldtype`
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtype_ru_ru"
--
CREATE
VIEW v_autofieldtype_ru_ru
AS
SELECT
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `fieldtype`.`changestamp` AS `changestamp`,
  `fieldtype`.`allowlikesearch` AS `fieldtype_allowlikesearch_val`,
  (CASE `fieldtype`.`allowlikesearch` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_allowlikesearch`,
  `fieldtype`.`typestyle` AS `fieldtype_typestyle_val`,
  (CASE `fieldtype`.`typestyle` WHEN 4 THEN 'ссылка' WHEN 1 THEN 'выражение' WHEN 5 THEN 'элемент оформления' WHEN 3 THEN 'интервал' WHEN 2 THEN 'перечисление' WHEN 0 THEN 'скалярный тип' ELSE '' END) AS `fieldtype_typestyle`,
  `fieldtype`.`gridsorttype` AS `fieldtype_gridsorttype_val`,
  (CASE `fieldtype`.`gridsorttype` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `fieldtype_gridsorttype`,
  `fieldtype`.`maximum` AS `fieldtype_maximum`,
  `fieldtype`.`allowsize` AS `fieldtype_allowsize_val`,
  (CASE `fieldtype`.`allowsize` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_allowsize`,
  `fieldtype`.`delayedsave` AS `fieldtype_delayedsave_val`,
  (CASE `fieldtype`.`delayedsave` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fieldtype_delayedsave`,
  `fieldtype`.`minimum` AS `fieldtype_minimum`,
  `fieldtype`.`the_comment` AS `fieldtype_the_comment`,
  `fieldtype`.`name` AS `fieldtype_name`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `id`,
  'fieldtype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`fieldtype`
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtypemap"
--
CREATE
VIEW v_autofieldtypemap
AS
SELECT
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `fieldtypemapid`,
  `fieldtypemap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `b2g`(`fieldtypemap`.`target`) AS `fieldtypemap_target_id`,
  `generator_target_brief_f`(`fieldtypemap`.`target`, NULL) AS `fieldtypemap_target`,
  `fieldtypemap`.`stoagetype` AS `fieldtypemap_stoagetype`,
  `fieldtypemap`.`fixedsize` AS `fieldtypemap_fixedsize`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `id`,
  'fieldtypemap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fieldtypemap`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `fieldtypemap`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtypemap_en_us"
--
CREATE
VIEW v_autofieldtypemap_en_us
AS
SELECT
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `fieldtypemapid`,
  `fieldtypemap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `b2g`(`fieldtypemap`.`target`) AS `fieldtypemap_target_id`,
  `generator_target_brief_f`(`fieldtypemap`.`target`, 'en_us') AS `fieldtypemap_target`,
  `fieldtypemap`.`stoagetype` AS `fieldtypemap_stoagetype`,
  `fieldtypemap`.`fixedsize` AS `fieldtypemap_fixedsize`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `id`,
  'fieldtypemap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fieldtypemap`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `fieldtypemap`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtypemap_ru_ru"
--
CREATE
VIEW v_autofieldtypemap_ru_ru
AS
SELECT
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `fieldtypemapid`,
  `fieldtypemap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `b2g`(`fieldtypemap`.`target`) AS `fieldtypemap_target_id`,
  `generator_target_brief_f`(`fieldtypemap`.`target`, 'ru_ru') AS `fieldtypemap_target`,
  `fieldtypemap`.`stoagetype` AS `fieldtypemap_stoagetype`,
  `fieldtypemap`.`fixedsize` AS `fieldtypemap_fixedsize`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `id`,
  'fieldtypemap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fieldtypemap`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `fieldtypemap`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldvalidator"
--
CREATE
VIEW v_autofieldvalidator
AS
SELECT
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `fieldvalidatorid`,
  `fieldvalidator`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldvalidator`.`target`) AS `fieldvalidator_target_id`,
  `generator_target_brief_f`(`fieldvalidator`.`target`, NULL) AS `fieldvalidator_target`,
  `fieldvalidator`.`code` AS `fieldvalidator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `id`,
  'fieldvalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldvalidator`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldvalidator`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldvalidator_en_us"
--
CREATE
VIEW v_autofieldvalidator_en_us
AS
SELECT
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `fieldvalidatorid`,
  `fieldvalidator`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldvalidator`.`target`) AS `fieldvalidator_target_id`,
  `generator_target_brief_f`(`fieldvalidator`.`target`, 'en_us') AS `fieldvalidator_target`,
  `fieldvalidator`.`code` AS `fieldvalidator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `id`,
  'fieldvalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldvalidator`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldvalidator`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldvalidator_ru_ru"
--
CREATE
VIEW v_autofieldvalidator_ru_ru
AS
SELECT
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `fieldvalidatorid`,
  `fieldvalidator`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fieldvalidator`.`target`) AS `fieldvalidator_target_id`,
  `generator_target_brief_f`(`fieldvalidator`.`target`, 'ru_ru') AS `fieldvalidator_target`,
  `fieldvalidator`.`code` AS `fieldvalidator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `id`,
  'fieldvalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldvalidator`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldvalidator`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofileterfield"
--
CREATE
VIEW v_autofileterfield
AS
SELECT
  `b2g`(`fileterfield`.`fileterfieldid`) AS `fileterfieldid`,
  `fileterfield`.`changestamp` AS `changestamp`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `fileterfield`.`reftype` AS `fileterfield_reftype_val`,
  (CASE `fileterfield`.`reftype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `fileterfield_reftype`,
  `b2g`(`fileterfield`.`reftopart`) AS `fileterfield_reftopart_id`,
  `part_brief_f`(`fileterfield`.`reftopart`, NULL) AS `fileterfield_reftopart`,
  `fileterfield`.`name` AS `fileterfield_name`,
  `b2g`(`fileterfield`.`reftotype`) AS `fileterfield_reftotype_id`,
  `objecttype_brief_f`(`fileterfield`.`reftotype`, NULL) AS `fileterfield_reftotype`,
  `fileterfield`.`caption` AS `fileterfield_caption`,
  `b2g`(`fileterfield`.`fieldtype`) AS `fileterfield_fieldtype_id`,
  `fieldtype_brief_f`(`fileterfield`.`fieldtype`, NULL) AS `fileterfield_fieldtype`,
  `fileterfield`.`sequence` AS `fileterfield_sequence`,
  `fileterfield`.`fieldsize` AS `fileterfield_fieldsize`,
  `fileterfield`.`valuearray` AS `fileterfield_valuearray_val`,
  (CASE `fileterfield`.`valuearray` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fileterfield_valuearray`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fileterfield`.`fileterfieldid`) AS `id`,
  'fileterfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fileterfield`
  JOIN `filterfieldgroup`
    ON ((`filterfieldgroup`.`filterfieldgroupid` = `fileterfield`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofileterfield_en_us"
--
CREATE
VIEW v_autofileterfield_en_us
AS
SELECT
  `b2g`(`fileterfield`.`fileterfieldid`) AS `fileterfieldid`,
  `fileterfield`.`changestamp` AS `changestamp`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `fileterfield`.`reftype` AS `fileterfield_reftype_val`,
  (CASE `fileterfield`.`reftype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `fileterfield_reftype`,
  `b2g`(`fileterfield`.`reftopart`) AS `fileterfield_reftopart_id`,
  `part_brief_f`(`fileterfield`.`reftopart`, 'en_us') AS `fileterfield_reftopart`,
  `fileterfield`.`name` AS `fileterfield_name`,
  `b2g`(`fileterfield`.`reftotype`) AS `fileterfield_reftotype_id`,
  `objecttype_brief_f`(`fileterfield`.`reftotype`, 'en_us') AS `fileterfield_reftotype`,
  `fileterfield`.`caption` AS `fileterfield_caption`,
  `b2g`(`fileterfield`.`fieldtype`) AS `fileterfield_fieldtype_id`,
  `fieldtype_brief_f`(`fileterfield`.`fieldtype`, 'en_us') AS `fileterfield_fieldtype`,
  `fileterfield`.`sequence` AS `fileterfield_sequence`,
  `fileterfield`.`fieldsize` AS `fileterfield_fieldsize`,
  `fileterfield`.`valuearray` AS `fileterfield_valuearray_val`,
  (CASE `fileterfield`.`valuearray` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fileterfield_valuearray`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fileterfield`.`fileterfieldid`) AS `id`,
  'fileterfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fileterfield`
  JOIN `filterfieldgroup`
    ON ((`filterfieldgroup`.`filterfieldgroupid` = `fileterfield`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofileterfield_ru_ru"
--
CREATE
VIEW v_autofileterfield_ru_ru
AS
SELECT
  `b2g`(`fileterfield`.`fileterfieldid`) AS `fileterfieldid`,
  `fileterfield`.`changestamp` AS `changestamp`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `fileterfield`.`reftype` AS `fileterfield_reftype_val`,
  (CASE `fileterfield`.`reftype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `fileterfield_reftype`,
  `b2g`(`fileterfield`.`reftopart`) AS `fileterfield_reftopart_id`,
  `part_brief_f`(`fileterfield`.`reftopart`, 'ru_ru') AS `fileterfield_reftopart`,
  `fileterfield`.`name` AS `fileterfield_name`,
  `b2g`(`fileterfield`.`reftotype`) AS `fileterfield_reftotype_id`,
  `objecttype_brief_f`(`fileterfield`.`reftotype`, 'ru_ru') AS `fileterfield_reftotype`,
  `fileterfield`.`caption` AS `fileterfield_caption`,
  `b2g`(`fileterfield`.`fieldtype`) AS `fileterfield_fieldtype_id`,
  `fieldtype_brief_f`(`fileterfield`.`fieldtype`, 'ru_ru') AS `fileterfield_fieldtype`,
  `fileterfield`.`sequence` AS `fileterfield_sequence`,
  `fileterfield`.`fieldsize` AS `fileterfield_fieldsize`,
  `fileterfield`.`valuearray` AS `fileterfield_valuearray_val`,
  (CASE `fileterfield`.`valuearray` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `fileterfield_valuearray`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fileterfield`.`fileterfieldid`) AS `id`,
  'fileterfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fileterfield`
  JOIN `filterfieldgroup`
    ON ((`filterfieldgroup`.`filterfieldgroupid` = `fileterfield`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilterfieldgroup"
--
CREATE
VIEW v_autofilterfieldgroup
AS
SELECT
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `filterfieldgroup`.`changestamp` AS `changestamp`,
  `filterfieldgroup`.`sequence` AS `filterfieldgroup_sequence`,
  `filterfieldgroup`.`name` AS `filterfieldgroup_name`,
  `filterfieldgroup`.`allowignore` AS `filterfieldgroup_allowignore_val`,
  (CASE `filterfieldgroup`.`allowignore` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `filterfieldgroup_allowignore`,
  `filterfieldgroup`.`caption` AS `filterfieldgroup_caption`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `id`,
  'filterfieldgroup' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filterfieldgroup`
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilterfieldgroup_en_us"
--
CREATE
VIEW v_autofilterfieldgroup_en_us
AS
SELECT
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `filterfieldgroup`.`changestamp` AS `changestamp`,
  `filterfieldgroup`.`sequence` AS `filterfieldgroup_sequence`,
  `filterfieldgroup`.`name` AS `filterfieldgroup_name`,
  `filterfieldgroup`.`allowignore` AS `filterfieldgroup_allowignore_val`,
  (CASE `filterfieldgroup`.`allowignore` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `filterfieldgroup_allowignore`,
  `filterfieldgroup`.`caption` AS `filterfieldgroup_caption`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `id`,
  'filterfieldgroup' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filterfieldgroup`
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilterfieldgroup_ru_ru"
--
CREATE
VIEW v_autofilterfieldgroup_ru_ru
AS
SELECT
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `filterfieldgroup`.`changestamp` AS `changestamp`,
  `filterfieldgroup`.`sequence` AS `filterfieldgroup_sequence`,
  `filterfieldgroup`.`name` AS `filterfieldgroup_name`,
  `filterfieldgroup`.`allowignore` AS `filterfieldgroup_allowignore_val`,
  (CASE `filterfieldgroup`.`allowignore` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `filterfieldgroup_allowignore`,
  `filterfieldgroup`.`caption` AS `filterfieldgroup_caption`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `id`,
  'filterfieldgroup' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filterfieldgroup`
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilters"
--
CREATE
VIEW v_autofilters
AS
SELECT
  `b2g`(`filters`.`filtersid`) AS `filtersid`,
  `filters`.`changestamp` AS `changestamp`,
  `filters`.`thecaption` AS `filters_thecaption`,
  `filters`.`thecomment` AS `filters_thecomment`,
  `filters`.`name` AS `filters_name`,
  `b2g`(`filters`.`instanceid`) AS `instanceid`,
  `filters`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filters`.`filtersid`) AS `id`,
  'filters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filters`
  JOIN `instance`
    ON ((`filters`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilters_en_us"
--
CREATE
VIEW v_autofilters_en_us
AS
SELECT
  `b2g`(`filters`.`filtersid`) AS `filtersid`,
  `filters`.`changestamp` AS `changestamp`,
  `filters`.`thecaption` AS `filters_thecaption`,
  `filters`.`thecomment` AS `filters_thecomment`,
  `filters`.`name` AS `filters_name`,
  `b2g`(`filters`.`instanceid`) AS `instanceid`,
  `filters`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filters`.`filtersid`) AS `id`,
  'filters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filters`
  JOIN `instance`
    ON ((`filters`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilters_ru_ru"
--
CREATE
VIEW v_autofilters_ru_ru
AS
SELECT
  `b2g`(`filters`.`filtersid`) AS `filtersid`,
  `filters`.`changestamp` AS `changestamp`,
  `filters`.`thecaption` AS `filters_thecaption`,
  `filters`.`thecomment` AS `filters_thecomment`,
  `filters`.`name` AS `filters_name`,
  `b2g`(`filters`.`instanceid`) AS `instanceid`,
  `filters`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filters`.`filtersid`) AS `id`,
  'filters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filters`
  JOIN `instance`
    ON ((`filters`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofldextenders"
--
CREATE
VIEW v_autofldextenders
AS
SELECT
  `b2g`(`fldextenders`.`fldextendersid`) AS `fldextendersid`,
  `fldextenders`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fldextenders`.`thename` AS `fldextenders_thename`,
  `fldextenders`.`theobject` AS `fldextenders_theobject`,
  `fldextenders`.`theconfig` AS `fldextenders_theconfig`,
  `b2g`(`fldextenders`.`targetplatform`) AS `fldextenders_targetplatform_id`,
  `generator_target_brief_f`(`fldextenders`.`targetplatform`, NULL) AS `fldextenders_targetplatform`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fldextenders`.`fldextendersid`) AS `id`,
  'fldextenders' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fldextenders`
  JOIN `field`
    ON ((`field`.`fieldid` = `fldextenders`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofldextenders_en_us"
--
CREATE
VIEW v_autofldextenders_en_us
AS
SELECT
  `b2g`(`fldextenders`.`fldextendersid`) AS `fldextendersid`,
  `fldextenders`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fldextenders`.`thename` AS `fldextenders_thename`,
  `fldextenders`.`theobject` AS `fldextenders_theobject`,
  `fldextenders`.`theconfig` AS `fldextenders_theconfig`,
  `b2g`(`fldextenders`.`targetplatform`) AS `fldextenders_targetplatform_id`,
  `generator_target_brief_f`(`fldextenders`.`targetplatform`, 'en_us') AS `fldextenders_targetplatform`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fldextenders`.`fldextendersid`) AS `id`,
  'fldextenders' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fldextenders`
  JOIN `field`
    ON ((`field`.`fieldid` = `fldextenders`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofldextenders_ru_ru"
--
CREATE
VIEW v_autofldextenders_ru_ru
AS
SELECT
  `b2g`(`fldextenders`.`fldextendersid`) AS `fldextendersid`,
  `fldextenders`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fldextenders`.`thename` AS `fldextenders_thename`,
  `fldextenders`.`theobject` AS `fldextenders_theobject`,
  `fldextenders`.`theconfig` AS `fldextenders_theconfig`,
  `b2g`(`fldextenders`.`targetplatform`) AS `fldextenders_targetplatform_id`,
  `generator_target_brief_f`(`fldextenders`.`targetplatform`, 'ru_ru') AS `fldextenders_targetplatform`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fldextenders`.`fldextendersid`) AS `id`,
  'fldextenders' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fldextenders`
  JOIN `field`
    ON ((`field`.`fieldid` = `fldextenders`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogencontrols"
--
CREATE
VIEW v_autogencontrols
AS
SELECT
  `b2g`(`gencontrols`.`gencontrolsid`) AS `gencontrolsid`,
  `gencontrols`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `gencontrols`.`versionmajor` AS `gencontrols_versionmajor`,
  `gencontrols`.`controlclassid` AS `gencontrols_controlclassid`,
  `gencontrols`.`versionminor` AS `gencontrols_versionminor`,
  `gencontrols`.`controlprogid` AS `gencontrols_controlprogid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`gencontrols`.`gencontrolsid`) AS `id`,
  'gencontrols' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`gencontrols`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `gencontrols`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogencontrols_en_us"
--
CREATE
VIEW v_autogencontrols_en_us
AS
SELECT
  `b2g`(`gencontrols`.`gencontrolsid`) AS `gencontrolsid`,
  `gencontrols`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `gencontrols`.`versionmajor` AS `gencontrols_versionmajor`,
  `gencontrols`.`controlclassid` AS `gencontrols_controlclassid`,
  `gencontrols`.`versionminor` AS `gencontrols_versionminor`,
  `gencontrols`.`controlprogid` AS `gencontrols_controlprogid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`gencontrols`.`gencontrolsid`) AS `id`,
  'gencontrols' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`gencontrols`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `gencontrols`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogencontrols_ru_ru"
--
CREATE
VIEW v_autogencontrols_ru_ru
AS
SELECT
  `b2g`(`gencontrols`.`gencontrolsid`) AS `gencontrolsid`,
  `gencontrols`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `gencontrols`.`versionmajor` AS `gencontrols_versionmajor`,
  `gencontrols`.`controlclassid` AS `gencontrols_controlclassid`,
  `gencontrols`.`versionminor` AS `gencontrols_versionminor`,
  `gencontrols`.`controlprogid` AS `gencontrols_controlprogid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`gencontrols`.`gencontrolsid`) AS `id`,
  'gencontrols' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`gencontrols`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `gencontrols`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenerator_target"
--
CREATE
VIEW v_autogenerator_target
AS
SELECT
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `generator_target`.`changestamp` AS `changestamp`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `generator_target`.`targettype` AS `generator_target_targettype_val`,
  (CASE `generator_target`.`targettype` WHEN 0 THEN 'субд' WHEN 3 THEN 'документация' WHEN 1 THEN 'модель' WHEN 2 THEN 'приложение' WHEN 4 THEN 'арм' ELSE '' END) AS `generator_target_targettype`,
  `generator_target`.`thedevelopmentenv` AS `generator_target_thedevelopmentenv_val`,
  (CASE `generator_target`.`thedevelopmentenv` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `generator_target_thedevelopmentenv`,
  `generator_target`.`queuename` AS `generator_target_queuename`,
  `generator_target`.`generatorstyle` AS `generator_target_generatorstyle_val`,
  (CASE `generator_target`.`generatorstyle` WHEN 0 THEN 'один тип' WHEN 1 THEN 'все типы сразу' ELSE '' END) AS `generator_target_generatorstyle`,
  `generator_target`.`name` AS `generator_target_name`,
  `generator_target`.`generatorprogid` AS `generator_target_generatorprogid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`generator_target`.`generator_targetid`) AS `id`,
  'generator_target' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`generator_target`
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenerator_target_en_us"
--
CREATE
VIEW v_autogenerator_target_en_us
AS
SELECT
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `generator_target`.`changestamp` AS `changestamp`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `generator_target`.`targettype` AS `generator_target_targettype_val`,
  (CASE `generator_target`.`targettype` WHEN 0 THEN 'субд' WHEN 3 THEN 'документация' WHEN 1 THEN 'модель' WHEN 2 THEN 'приложение' WHEN 4 THEN 'арм' ELSE '' END) AS `generator_target_targettype`,
  `generator_target`.`thedevelopmentenv` AS `generator_target_thedevelopmentenv_val`,
  (CASE `generator_target`.`thedevelopmentenv` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `generator_target_thedevelopmentenv`,
  `generator_target`.`queuename` AS `generator_target_queuename`,
  `generator_target`.`generatorstyle` AS `generator_target_generatorstyle_val`,
  (CASE `generator_target`.`generatorstyle` WHEN 0 THEN 'один тип' WHEN 1 THEN 'все типы сразу' ELSE '' END) AS `generator_target_generatorstyle`,
  `generator_target`.`name` AS `generator_target_name`,
  `generator_target`.`generatorprogid` AS `generator_target_generatorprogid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`generator_target`.`generator_targetid`) AS `id`,
  'generator_target' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`generator_target`
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenerator_target_ru_ru"
--
CREATE
VIEW v_autogenerator_target_ru_ru
AS
SELECT
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `generator_target`.`changestamp` AS `changestamp`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `generator_target`.`targettype` AS `generator_target_targettype_val`,
  (CASE `generator_target`.`targettype` WHEN 0 THEN 'субд' WHEN 3 THEN 'документация' WHEN 1 THEN 'модель' WHEN 2 THEN 'приложение' WHEN 4 THEN 'арм' ELSE '' END) AS `generator_target_targettype`,
  `generator_target`.`thedevelopmentenv` AS `generator_target_thedevelopmentenv_val`,
  (CASE `generator_target`.`thedevelopmentenv` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `generator_target_thedevelopmentenv`,
  `generator_target`.`queuename` AS `generator_target_queuename`,
  `generator_target`.`generatorstyle` AS `generator_target_generatorstyle_val`,
  (CASE `generator_target`.`generatorstyle` WHEN 0 THEN 'один тип' WHEN 1 THEN 'все типы сразу' ELSE '' END) AS `generator_target_generatorstyle`,
  `generator_target`.`name` AS `generator_target_name`,
  `generator_target`.`generatorprogid` AS `generator_target_generatorprogid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`generator_target`.`generator_targetid`) AS `id`,
  'generator_target' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`generator_target`
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenmanualcode"
--
CREATE
VIEW v_autogenmanualcode
AS
SELECT
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `genmanualcodeid`,
  `genmanualcode`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genmanualcode`.`name` AS `genmanualcode_name`,
  `genmanualcode`.`code` AS `genmanualcode_code`,
  `genmanualcode`.`the_alias` AS `genmanualcode_the_alias`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `id`,
  'genmanualcode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genmanualcode`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genmanualcode`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenmanualcode_en_us"
--
CREATE
VIEW v_autogenmanualcode_en_us
AS
SELECT
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `genmanualcodeid`,
  `genmanualcode`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genmanualcode`.`name` AS `genmanualcode_name`,
  `genmanualcode`.`code` AS `genmanualcode_code`,
  `genmanualcode`.`the_alias` AS `genmanualcode_the_alias`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `id`,
  'genmanualcode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genmanualcode`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genmanualcode`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenmanualcode_ru_ru"
--
CREATE
VIEW v_autogenmanualcode_ru_ru
AS
SELECT
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `genmanualcodeid`,
  `genmanualcode`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genmanualcode`.`name` AS `genmanualcode_name`,
  `genmanualcode`.`code` AS `genmanualcode_code`,
  `genmanualcode`.`the_alias` AS `genmanualcode_the_alias`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `id`,
  'genmanualcode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genmanualcode`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genmanualcode`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenpackage"
--
CREATE
VIEW v_autogenpackage
AS
SELECT
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genpackage`.`changestamp` AS `changestamp`,
  `genpackage`.`name` AS `genpackage_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genpackage`.`genpackageid`) AS `id`,
  'genpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`genpackage`
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenpackage_en_us"
--
CREATE
VIEW v_autogenpackage_en_us
AS
SELECT
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genpackage`.`changestamp` AS `changestamp`,
  `genpackage`.`name` AS `genpackage_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genpackage`.`genpackageid`) AS `id`,
  'genpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`genpackage`
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenpackage_ru_ru"
--
CREATE
VIEW v_autogenpackage_ru_ru
AS
SELECT
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genpackage`.`changestamp` AS `changestamp`,
  `genpackage`.`name` AS `genpackage_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genpackage`.`genpackageid`) AS `id`,
  'genpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`genpackage`
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenreference"
--
CREATE
VIEW v_autogenreference
AS
SELECT
  `b2g`(`genreference`.`genreferenceid`) AS `genreferenceid`,
  `genreference`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genreference`.`versionminor` AS `genreference_versionminor`,
  `genreference`.`name` AS `genreference_name`,
  `genreference`.`versionmajor` AS `genreference_versionmajor`,
  `genreference`.`refclassid` AS `genreference_refclassid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genreference`.`genreferenceid`) AS `id`,
  'genreference' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genreference`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genreference`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenreference_en_us"
--
CREATE
VIEW v_autogenreference_en_us
AS
SELECT
  `b2g`(`genreference`.`genreferenceid`) AS `genreferenceid`,
  `genreference`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genreference`.`versionminor` AS `genreference_versionminor`,
  `genreference`.`name` AS `genreference_name`,
  `genreference`.`versionmajor` AS `genreference_versionmajor`,
  `genreference`.`refclassid` AS `genreference_refclassid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genreference`.`genreferenceid`) AS `id`,
  'genreference' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genreference`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genreference`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenreference_ru_ru"
--
CREATE
VIEW v_autogenreference_ru_ru
AS
SELECT
  `b2g`(`genreference`.`genreferenceid`) AS `genreferenceid`,
  `genreference`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genreference`.`versionminor` AS `genreference_versionminor`,
  `genreference`.`name` AS `genreference_name`,
  `genreference`.`versionmajor` AS `genreference_versionmajor`,
  `genreference`.`refclassid` AS `genreference_refclassid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genreference`.`genreferenceid`) AS `id`,
  'genreference' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genreference`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genreference`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroups"
--
CREATE
VIEW v_autogroups
AS
SELECT
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `groups`.`changestamp` AS `changestamp`,
  `groups`.`adgroup` AS `groups_adgroup`,
  `groups`.`name` AS `groups_name`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groups`.`groupsid`) AS `id`,
  'groups' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`groups`
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroups_en_us"
--
CREATE
VIEW v_autogroups_en_us
AS
SELECT
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `groups`.`changestamp` AS `changestamp`,
  `groups`.`adgroup` AS `groups_adgroup`,
  `groups`.`name` AS `groups_name`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groups`.`groupsid`) AS `id`,
  'groups' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`groups`
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroups_ru_ru"
--
CREATE
VIEW v_autogroups_ru_ru
AS
SELECT
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `groups`.`changestamp` AS `changestamp`,
  `groups`.`adgroup` AS `groups_adgroup`,
  `groups`.`name` AS `groups_name`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groups`.`groupsid`) AS `id`,
  'groups' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`groups`
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroupuser"
--
CREATE
VIEW v_autogroupuser
AS
SELECT
  `b2g`(`groupuser`.`groupuserid`) AS `groupuserid`,
  `groupuser`.`changestamp` AS `changestamp`,
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `b2g`(`groupuser`.`theuser`) AS `groupuser_theuser_id`,
  `users_brief_f`(`groupuser`.`theuser`, NULL) AS `groupuser_theuser`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groupuser`.`groupuserid`) AS `id`,
  'groupuser' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`groupuser`
  JOIN `groups`
    ON ((`groups`.`groupsid` = `groupuser`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroupuser_en_us"
--
CREATE
VIEW v_autogroupuser_en_us
AS
SELECT
  `b2g`(`groupuser`.`groupuserid`) AS `groupuserid`,
  `groupuser`.`changestamp` AS `changestamp`,
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `b2g`(`groupuser`.`theuser`) AS `groupuser_theuser_id`,
  `users_brief_f`(`groupuser`.`theuser`, 'en_us') AS `groupuser_theuser`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groupuser`.`groupuserid`) AS `id`,
  'groupuser' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`groupuser`
  JOIN `groups`
    ON ((`groups`.`groupsid` = `groupuser`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroupuser_ru_ru"
--
CREATE
VIEW v_autogroupuser_ru_ru
AS
SELECT
  `b2g`(`groupuser`.`groupuserid`) AS `groupuserid`,
  `groupuser`.`changestamp` AS `changestamp`,
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `b2g`(`groupuser`.`theuser`) AS `groupuser_theuser_id`,
  `users_brief_f`(`groupuser`.`theuser`, 'ru_ru') AS `groupuser_theuser`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groupuser`.`groupuserid`) AS `id`,
  'groupuser' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`groupuser`
  JOIN `groups`
    ON ((`groups`.`groupsid` = `groupuser`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoinstancevalidator"
--
CREATE
VIEW v_autoinstancevalidator
AS
SELECT
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `instancevalidatorid`,
  `instancevalidator`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `instancevalidator`.`code` AS `instancevalidator_code`,
  `b2g`(`instancevalidator`.`target`) AS `instancevalidator_target_id`,
  `generator_target_brief_f`(`instancevalidator`.`target`, NULL) AS `instancevalidator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `id`,
  'instancevalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`instancevalidator`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `instancevalidator`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoinstancevalidator_en_us"
--
CREATE
VIEW v_autoinstancevalidator_en_us
AS
SELECT
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `instancevalidatorid`,
  `instancevalidator`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `instancevalidator`.`code` AS `instancevalidator_code`,
  `b2g`(`instancevalidator`.`target`) AS `instancevalidator_target_id`,
  `generator_target_brief_f`(`instancevalidator`.`target`, 'en_us') AS `instancevalidator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `id`,
  'instancevalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`instancevalidator`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `instancevalidator`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoinstancevalidator_ru_ru"
--
CREATE
VIEW v_autoinstancevalidator_ru_ru
AS
SELECT
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `instancevalidatorid`,
  `instancevalidator`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `instancevalidator`.`code` AS `instancevalidator_code`,
  `b2g`(`instancevalidator`.`target`) AS `instancevalidator_target_id`,
  `generator_target_brief_f`(`instancevalidator`.`target`, 'ru_ru') AS `instancevalidator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `id`,
  'instancevalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`instancevalidator`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `instancevalidator`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_crole"
--
CREATE
VIEW v_autoiu_crole
AS
SELECT
  `b2g`(`iu_crole`.`iu_croleid`) AS `iu_croleid`,
  `iu_crole`.`changestamp` AS `changestamp`,
  `iu_crole`.`name` AS `iu_crole_name`,
  `iu_crole`.`allowsetuser` AS `iu_crole_allowsetuser_val`,
  (CASE `iu_crole`.`allowsetuser` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_crole_allowsetuser`,
  `b2g`(`iu_crole`.`instanceid`) AS `instanceid`,
  `iu_crole`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_crole`.`iu_croleid`) AS `id`,
  'iu_crole' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_crole`
  JOIN `instance`
    ON ((`iu_crole`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_crole_en_us"
--
CREATE
VIEW v_autoiu_crole_en_us
AS
SELECT
  `b2g`(`iu_crole`.`iu_croleid`) AS `iu_croleid`,
  `iu_crole`.`changestamp` AS `changestamp`,
  `iu_crole`.`name` AS `iu_crole_name`,
  `iu_crole`.`allowsetuser` AS `iu_crole_allowsetuser_val`,
  (CASE `iu_crole`.`allowsetuser` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_crole_allowsetuser`,
  `b2g`(`iu_crole`.`instanceid`) AS `instanceid`,
  `iu_crole`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_crole`.`iu_croleid`) AS `id`,
  'iu_crole' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_crole`
  JOIN `instance`
    ON ((`iu_crole`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_crole_ru_ru"
--
CREATE
VIEW v_autoiu_crole_ru_ru
AS
SELECT
  `b2g`(`iu_crole`.`iu_croleid`) AS `iu_croleid`,
  `iu_crole`.`changestamp` AS `changestamp`,
  `iu_crole`.`name` AS `iu_crole_name`,
  `iu_crole`.`allowsetuser` AS `iu_crole_allowsetuser_val`,
  (CASE `iu_crole`.`allowsetuser` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_crole_allowsetuser`,
  `b2g`(`iu_crole`.`instanceid`) AS `instanceid`,
  `iu_crole`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_crole`.`iu_croleid`) AS `id`,
  'iu_crole' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_crole`
  JOIN `instance`
    ON ((`iu_crole`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_int_modules"
--
CREATE
VIEW v_autoiu_int_modules
AS
SELECT
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `iu_int_modulesid`,
  `iu_int_modules`.`changestamp` AS `changestamp`,
  `iu_int_modules`.`colegsobject` AS `iu_int_modules_colegsobject_val`,
  (CASE `iu_int_modules`.`colegsobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_colegsobject`,
  `iu_int_modules`.`sequence` AS `iu_int_modules_sequence`,
  `iu_int_modules`.`allobjects` AS `iu_int_modules_allobjects_val`,
  (CASE `iu_int_modules`.`allobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_allobjects`,
  `iu_int_modules`.`name` AS `iu_int_modules_name`,
  `iu_int_modules`.`controldocmode` AS `iu_int_modules_controldocmode`,
  `iu_int_modules`.`mydocmode` AS `iu_int_modules_mydocmode`,
  `iu_int_modules`.`caption` AS `iu_int_modules_caption`,
  `iu_int_modules`.`substructobjects` AS `iu_int_modules_substructobjects_val`,
  (CASE `iu_int_modules`.`substructobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_substructobjects`,
  `iu_int_modules`.`groupname` AS `iu_int_modules_groupname`,
  `iu_int_modules`.`otherdocmode` AS `iu_int_modules_otherdocmode`,
  `iu_int_modules`.`theicon` AS `iu_int_modules_theicon`,
  `iu_int_modules`.`visiblecontrol` AS `iu_int_modules_visiblecontrol_val`,
  (CASE `iu_int_modules`.`visiblecontrol` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_visiblecontrol`,
  `b2g`(`iu_int_modules`.`instanceid`) AS `instanceid`,
  `iu_int_modules`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `id`,
  'iu_int_modules' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_int_modules`
  JOIN `instance`
    ON ((`iu_int_modules`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_int_modules_en_us"
--
CREATE
VIEW v_autoiu_int_modules_en_us
AS
SELECT
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `iu_int_modulesid`,
  `iu_int_modules`.`changestamp` AS `changestamp`,
  `iu_int_modules`.`colegsobject` AS `iu_int_modules_colegsobject_val`,
  (CASE `iu_int_modules`.`colegsobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_colegsobject`,
  `iu_int_modules`.`sequence` AS `iu_int_modules_sequence`,
  `iu_int_modules`.`allobjects` AS `iu_int_modules_allobjects_val`,
  (CASE `iu_int_modules`.`allobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_allobjects`,
  `iu_int_modules`.`name` AS `iu_int_modules_name`,
  `iu_int_modules`.`controldocmode` AS `iu_int_modules_controldocmode`,
  `iu_int_modules`.`mydocmode` AS `iu_int_modules_mydocmode`,
  `iu_int_modules`.`caption` AS `iu_int_modules_caption`,
  `iu_int_modules`.`substructobjects` AS `iu_int_modules_substructobjects_val`,
  (CASE `iu_int_modules`.`substructobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_substructobjects`,
  `iu_int_modules`.`groupname` AS `iu_int_modules_groupname`,
  `iu_int_modules`.`otherdocmode` AS `iu_int_modules_otherdocmode`,
  `iu_int_modules`.`theicon` AS `iu_int_modules_theicon`,
  `iu_int_modules`.`visiblecontrol` AS `iu_int_modules_visiblecontrol_val`,
  (CASE `iu_int_modules`.`visiblecontrol` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_visiblecontrol`,
  `b2g`(`iu_int_modules`.`instanceid`) AS `instanceid`,
  `iu_int_modules`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `id`,
  'iu_int_modules' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_int_modules`
  JOIN `instance`
    ON ((`iu_int_modules`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_int_modules_ru_ru"
--
CREATE
VIEW v_autoiu_int_modules_ru_ru
AS
SELECT
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `iu_int_modulesid`,
  `iu_int_modules`.`changestamp` AS `changestamp`,
  `iu_int_modules`.`colegsobject` AS `iu_int_modules_colegsobject_val`,
  (CASE `iu_int_modules`.`colegsobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_colegsobject`,
  `iu_int_modules`.`sequence` AS `iu_int_modules_sequence`,
  `iu_int_modules`.`allobjects` AS `iu_int_modules_allobjects_val`,
  (CASE `iu_int_modules`.`allobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_allobjects`,
  `iu_int_modules`.`name` AS `iu_int_modules_name`,
  `iu_int_modules`.`controldocmode` AS `iu_int_modules_controldocmode`,
  `iu_int_modules`.`mydocmode` AS `iu_int_modules_mydocmode`,
  `iu_int_modules`.`caption` AS `iu_int_modules_caption`,
  `iu_int_modules`.`substructobjects` AS `iu_int_modules_substructobjects_val`,
  (CASE `iu_int_modules`.`substructobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_substructobjects`,
  `iu_int_modules`.`groupname` AS `iu_int_modules_groupname`,
  `iu_int_modules`.`otherdocmode` AS `iu_int_modules_otherdocmode`,
  `iu_int_modules`.`theicon` AS `iu_int_modules_theicon`,
  `iu_int_modules`.`visiblecontrol` AS `iu_int_modules_visiblecontrol_val`,
  (CASE `iu_int_modules`.`visiblecontrol` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_int_modules_visiblecontrol`,
  `b2g`(`iu_int_modules`.`instanceid`) AS `instanceid`,
  `iu_int_modules`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `id`,
  'iu_int_modules' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_int_modules`
  JOIN `instance`
    ON ((`iu_int_modules`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_def"
--
CREATE
VIEW v_autoiu_rcfg_def
AS
SELECT
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `iu_rcfg_defid`,
  `iu_rcfg_def`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_def`.`therole`) AS `iu_rcfg_def_therole_id`,
  `iu_crole_brief_f`(`iu_rcfg_def`.`therole`, NULL) AS `iu_rcfg_def_therole`,
  `b2g`(`iu_rcfg_def`.`instanceid`) AS `instanceid`,
  `iu_rcfg_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `id`,
  'iu_rcfg_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_def`
  JOIN `instance`
    ON ((`iu_rcfg_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_def_en_us"
--
CREATE
VIEW v_autoiu_rcfg_def_en_us
AS
SELECT
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `iu_rcfg_defid`,
  `iu_rcfg_def`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_def`.`therole`) AS `iu_rcfg_def_therole_id`,
  `iu_crole_brief_f`(`iu_rcfg_def`.`therole`, 'en_us') AS `iu_rcfg_def_therole`,
  `b2g`(`iu_rcfg_def`.`instanceid`) AS `instanceid`,
  `iu_rcfg_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `id`,
  'iu_rcfg_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_def`
  JOIN `instance`
    ON ((`iu_rcfg_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_def_ru_ru"
--
CREATE
VIEW v_autoiu_rcfg_def_ru_ru
AS
SELECT
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `iu_rcfg_defid`,
  `iu_rcfg_def`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_def`.`therole`) AS `iu_rcfg_def_therole_id`,
  `iu_crole_brief_f`(`iu_rcfg_def`.`therole`, 'ru_ru') AS `iu_rcfg_def_therole`,
  `b2g`(`iu_rcfg_def`.`instanceid`) AS `instanceid`,
  `iu_rcfg_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `id`,
  'iu_rcfg_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_def`
  JOIN `instance`
    ON ((`iu_rcfg_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_docmode"
--
CREATE
VIEW v_autoiu_rcfg_docmode
AS
SELECT
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `iu_rcfg_docmodeid`,
  `iu_rcfg_docmode`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_docmode`.`the_document`) AS `iu_rcfg_docmode_the_document_id`,
  `objecttype_brief_f`(`iu_rcfg_docmode`.`the_document`, NULL) AS `iu_rcfg_docmode_the_document`,
  `iu_rcfg_docmode`.`editmode` AS `iu_rcfg_docmode_editmode`,
  `iu_rcfg_docmode`.`addmode` AS `iu_rcfg_docmode_addmode`,
  `iu_rcfg_docmode`.`allowdelete` AS `iu_rcfg_docmode_allowdelete_val`,
  (CASE `iu_rcfg_docmode`.`allowdelete` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_docmode_allowdelete`,
  `iu_rcfg_docmode`.`allowadd` AS `iu_rcfg_docmode_allowadd_val`,
  (CASE `iu_rcfg_docmode`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_docmode_allowadd`,
  `b2g`(`iu_rcfg_docmode`.`instanceid`) AS `instanceid`,
  `iu_rcfg_docmode`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `id`,
  'iu_rcfg_docmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_docmode`
  JOIN `instance`
    ON ((`iu_rcfg_docmode`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_docmode_en_us"
--
CREATE
VIEW v_autoiu_rcfg_docmode_en_us
AS
SELECT
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `iu_rcfg_docmodeid`,
  `iu_rcfg_docmode`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_docmode`.`the_document`) AS `iu_rcfg_docmode_the_document_id`,
  `objecttype_brief_f`(`iu_rcfg_docmode`.`the_document`, 'en_us') AS `iu_rcfg_docmode_the_document`,
  `iu_rcfg_docmode`.`editmode` AS `iu_rcfg_docmode_editmode`,
  `iu_rcfg_docmode`.`addmode` AS `iu_rcfg_docmode_addmode`,
  `iu_rcfg_docmode`.`allowdelete` AS `iu_rcfg_docmode_allowdelete_val`,
  (CASE `iu_rcfg_docmode`.`allowdelete` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_docmode_allowdelete`,
  `iu_rcfg_docmode`.`allowadd` AS `iu_rcfg_docmode_allowadd_val`,
  (CASE `iu_rcfg_docmode`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_docmode_allowadd`,
  `b2g`(`iu_rcfg_docmode`.`instanceid`) AS `instanceid`,
  `iu_rcfg_docmode`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `id`,
  'iu_rcfg_docmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_docmode`
  JOIN `instance`
    ON ((`iu_rcfg_docmode`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_docmode_ru_ru"
--
CREATE
VIEW v_autoiu_rcfg_docmode_ru_ru
AS
SELECT
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `iu_rcfg_docmodeid`,
  `iu_rcfg_docmode`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_docmode`.`the_document`) AS `iu_rcfg_docmode_the_document_id`,
  `objecttype_brief_f`(`iu_rcfg_docmode`.`the_document`, 'ru_ru') AS `iu_rcfg_docmode_the_document`,
  `iu_rcfg_docmode`.`editmode` AS `iu_rcfg_docmode_editmode`,
  `iu_rcfg_docmode`.`addmode` AS `iu_rcfg_docmode_addmode`,
  `iu_rcfg_docmode`.`allowdelete` AS `iu_rcfg_docmode_allowdelete_val`,
  (CASE `iu_rcfg_docmode`.`allowdelete` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_docmode_allowdelete`,
  `iu_rcfg_docmode`.`allowadd` AS `iu_rcfg_docmode_allowadd_val`,
  (CASE `iu_rcfg_docmode`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_docmode_allowadd`,
  `b2g`(`iu_rcfg_docmode`.`instanceid`) AS `instanceid`,
  `iu_rcfg_docmode`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `id`,
  'iu_rcfg_docmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_docmode`
  JOIN `instance`
    ON ((`iu_rcfg_docmode`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_mod"
--
CREATE
VIEW v_autoiu_rcfg_mod
AS
SELECT
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `iu_rcfg_modid`,
  `iu_rcfg_mod`.`changestamp` AS `changestamp`,
  `iu_rcfg_mod`.`substructobjects` AS `iu_rcfg_mod_substructobjects_val`,
  (CASE `iu_rcfg_mod`.`substructobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_substructobjects`,
  `iu_rcfg_mod`.`theicon` AS `iu_rcfg_mod_theicon`,
  `iu_rcfg_mod`.`caption` AS `iu_rcfg_mod_caption`,
  `iu_rcfg_mod`.`groupname` AS `iu_rcfg_mod_groupname`,
  `iu_rcfg_mod`.`allobjects` AS `iu_rcfg_mod_allobjects_val`,
  (CASE `iu_rcfg_mod`.`allobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_allobjects`,
  `iu_rcfg_mod`.`name` AS `iu_rcfg_mod_name`,
  `iu_rcfg_mod`.`colegsobject` AS `iu_rcfg_mod_colegsobject_val`,
  (CASE `iu_rcfg_mod`.`colegsobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_colegsobject`,
  `iu_rcfg_mod`.`otherdocmode` AS `iu_rcfg_mod_otherdocmode`,
  `iu_rcfg_mod`.`controldocmode` AS `iu_rcfg_mod_controldocmode`,
  `iu_rcfg_mod`.`mydocmode` AS `iu_rcfg_mod_mydocmode`,
  `iu_rcfg_mod`.`moduleaccessible` AS `iu_rcfg_mod_moduleaccessible_val`,
  (CASE `iu_rcfg_mod`.`moduleaccessible` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_moduleaccessible`,
  `iu_rcfg_mod`.`sequence` AS `iu_rcfg_mod_sequence`,
  `iu_rcfg_mod`.`visiblecontrol` AS `iu_rcfg_mod_visiblecontrol_val`,
  (CASE `iu_rcfg_mod`.`visiblecontrol` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_visiblecontrol`,
  `b2g`(`iu_rcfg_mod`.`instanceid`) AS `instanceid`,
  `iu_rcfg_mod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `id`,
  'iu_rcfg_mod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_mod`
  JOIN `instance`
    ON ((`iu_rcfg_mod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_mod_en_us"
--
CREATE
VIEW v_autoiu_rcfg_mod_en_us
AS
SELECT
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `iu_rcfg_modid`,
  `iu_rcfg_mod`.`changestamp` AS `changestamp`,
  `iu_rcfg_mod`.`substructobjects` AS `iu_rcfg_mod_substructobjects_val`,
  (CASE `iu_rcfg_mod`.`substructobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_substructobjects`,
  `iu_rcfg_mod`.`theicon` AS `iu_rcfg_mod_theicon`,
  `iu_rcfg_mod`.`caption` AS `iu_rcfg_mod_caption`,
  `iu_rcfg_mod`.`groupname` AS `iu_rcfg_mod_groupname`,
  `iu_rcfg_mod`.`allobjects` AS `iu_rcfg_mod_allobjects_val`,
  (CASE `iu_rcfg_mod`.`allobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_allobjects`,
  `iu_rcfg_mod`.`name` AS `iu_rcfg_mod_name`,
  `iu_rcfg_mod`.`colegsobject` AS `iu_rcfg_mod_colegsobject_val`,
  (CASE `iu_rcfg_mod`.`colegsobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_colegsobject`,
  `iu_rcfg_mod`.`otherdocmode` AS `iu_rcfg_mod_otherdocmode`,
  `iu_rcfg_mod`.`controldocmode` AS `iu_rcfg_mod_controldocmode`,
  `iu_rcfg_mod`.`mydocmode` AS `iu_rcfg_mod_mydocmode`,
  `iu_rcfg_mod`.`moduleaccessible` AS `iu_rcfg_mod_moduleaccessible_val`,
  (CASE `iu_rcfg_mod`.`moduleaccessible` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_moduleaccessible`,
  `iu_rcfg_mod`.`sequence` AS `iu_rcfg_mod_sequence`,
  `iu_rcfg_mod`.`visiblecontrol` AS `iu_rcfg_mod_visiblecontrol_val`,
  (CASE `iu_rcfg_mod`.`visiblecontrol` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_visiblecontrol`,
  `b2g`(`iu_rcfg_mod`.`instanceid`) AS `instanceid`,
  `iu_rcfg_mod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `id`,
  'iu_rcfg_mod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_mod`
  JOIN `instance`
    ON ((`iu_rcfg_mod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_mod_ru_ru"
--
CREATE
VIEW v_autoiu_rcfg_mod_ru_ru
AS
SELECT
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `iu_rcfg_modid`,
  `iu_rcfg_mod`.`changestamp` AS `changestamp`,
  `iu_rcfg_mod`.`substructobjects` AS `iu_rcfg_mod_substructobjects_val`,
  (CASE `iu_rcfg_mod`.`substructobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_substructobjects`,
  `iu_rcfg_mod`.`theicon` AS `iu_rcfg_mod_theicon`,
  `iu_rcfg_mod`.`caption` AS `iu_rcfg_mod_caption`,
  `iu_rcfg_mod`.`groupname` AS `iu_rcfg_mod_groupname`,
  `iu_rcfg_mod`.`allobjects` AS `iu_rcfg_mod_allobjects_val`,
  (CASE `iu_rcfg_mod`.`allobjects` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_allobjects`,
  `iu_rcfg_mod`.`name` AS `iu_rcfg_mod_name`,
  `iu_rcfg_mod`.`colegsobject` AS `iu_rcfg_mod_colegsobject_val`,
  (CASE `iu_rcfg_mod`.`colegsobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_colegsobject`,
  `iu_rcfg_mod`.`otherdocmode` AS `iu_rcfg_mod_otherdocmode`,
  `iu_rcfg_mod`.`controldocmode` AS `iu_rcfg_mod_controldocmode`,
  `iu_rcfg_mod`.`mydocmode` AS `iu_rcfg_mod_mydocmode`,
  `iu_rcfg_mod`.`moduleaccessible` AS `iu_rcfg_mod_moduleaccessible_val`,
  (CASE `iu_rcfg_mod`.`moduleaccessible` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_moduleaccessible`,
  `iu_rcfg_mod`.`sequence` AS `iu_rcfg_mod_sequence`,
  `iu_rcfg_mod`.`visiblecontrol` AS `iu_rcfg_mod_visiblecontrol_val`,
  (CASE `iu_rcfg_mod`.`visiblecontrol` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_rcfg_mod_visiblecontrol`,
  `b2g`(`iu_rcfg_mod`.`instanceid`) AS `instanceid`,
  `iu_rcfg_mod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `id`,
  'iu_rcfg_mod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_mod`
  JOIN `instance`
    ON ((`iu_rcfg_mod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_u_def"
--
CREATE
VIEW v_autoiu_u_def
AS
SELECT
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `iu_u_defid`,
  `iu_u_def`.`changestamp` AS `changestamp`,
  `iu_u_def`.`email` AS `iu_u_def_email`,
  `iu_u_def`.`login` AS `iu_u_def_login`,
  `iu_u_def`.`surname` AS `iu_u_def_surname`,
  `iu_u_def`.`name` AS `iu_u_def_name`,
  `b2g`(`iu_u_def`.`currole`) AS `iu_u_def_currole_id`,
  `iu_crole_brief_f`(`iu_u_def`.`currole`, NULL) AS `iu_u_def_currole`,
  `b2g`(`iu_u_def`.`theclient`) AS `iu_u_def_theclient_id`,
  `bpc_info_brief_f`(`iu_u_def`.`theclient`, NULL) AS `iu_u_def_theclient`,
  `iu_u_def`.`thephone` AS `iu_u_def_thephone`,
  `iu_u_def`.`freelancer` AS `iu_u_def_freelancer_val`,
  (CASE `iu_u_def`.`freelancer` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_u_def_freelancer`,
  `iu_u_def`.`sendtomail` AS `iu_u_def_sendtomail_val`,
  (CASE `iu_u_def`.`sendtomail` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_u_def_sendtomail`,
  `iu_u_def`.`lastname` AS `iu_u_def_lastname`,
  `b2g`(`iu_u_def`.`instanceid`) AS `instanceid`,
  `iu_u_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `id`,
  'iu_u_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_u_def`
  JOIN `instance`
    ON ((`iu_u_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_u_def_en_us"
--
CREATE
VIEW v_autoiu_u_def_en_us
AS
SELECT
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `iu_u_defid`,
  `iu_u_def`.`changestamp` AS `changestamp`,
  `iu_u_def`.`email` AS `iu_u_def_email`,
  `iu_u_def`.`login` AS `iu_u_def_login`,
  `iu_u_def`.`surname` AS `iu_u_def_surname`,
  `iu_u_def`.`name` AS `iu_u_def_name`,
  `b2g`(`iu_u_def`.`currole`) AS `iu_u_def_currole_id`,
  `iu_crole_brief_f`(`iu_u_def`.`currole`, 'en_us') AS `iu_u_def_currole`,
  `b2g`(`iu_u_def`.`theclient`) AS `iu_u_def_theclient_id`,
  `bpc_info_brief_f`(`iu_u_def`.`theclient`, 'en_us') AS `iu_u_def_theclient`,
  `iu_u_def`.`thephone` AS `iu_u_def_thephone`,
  `iu_u_def`.`freelancer` AS `iu_u_def_freelancer_val`,
  (CASE `iu_u_def`.`freelancer` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_u_def_freelancer`,
  `iu_u_def`.`sendtomail` AS `iu_u_def_sendtomail_val`,
  (CASE `iu_u_def`.`sendtomail` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_u_def_sendtomail`,
  `iu_u_def`.`lastname` AS `iu_u_def_lastname`,
  `b2g`(`iu_u_def`.`instanceid`) AS `instanceid`,
  `iu_u_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `id`,
  'iu_u_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_u_def`
  JOIN `instance`
    ON ((`iu_u_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_u_def_ru_ru"
--
CREATE
VIEW v_autoiu_u_def_ru_ru
AS
SELECT
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `iu_u_defid`,
  `iu_u_def`.`changestamp` AS `changestamp`,
  `iu_u_def`.`email` AS `iu_u_def_email`,
  `iu_u_def`.`login` AS `iu_u_def_login`,
  `iu_u_def`.`surname` AS `iu_u_def_surname`,
  `iu_u_def`.`name` AS `iu_u_def_name`,
  `b2g`(`iu_u_def`.`currole`) AS `iu_u_def_currole_id`,
  `iu_crole_brief_f`(`iu_u_def`.`currole`, 'ru_ru') AS `iu_u_def_currole`,
  `b2g`(`iu_u_def`.`theclient`) AS `iu_u_def_theclient_id`,
  `bpc_info_brief_f`(`iu_u_def`.`theclient`, 'ru_ru') AS `iu_u_def_theclient`,
  `iu_u_def`.`thephone` AS `iu_u_def_thephone`,
  `iu_u_def`.`freelancer` AS `iu_u_def_freelancer_val`,
  (CASE `iu_u_def`.`freelancer` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_u_def_freelancer`,
  `iu_u_def`.`sendtomail` AS `iu_u_def_sendtomail_val`,
  (CASE `iu_u_def`.`sendtomail` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `iu_u_def_sendtomail`,
  `iu_u_def`.`lastname` AS `iu_u_def_lastname`,
  `b2g`(`iu_u_def`.`instanceid`) AS `instanceid`,
  `iu_u_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `id`,
  'iu_u_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_u_def`
  JOIN `instance`
    ON ((`iu_u_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojcolumnsource"
--
CREATE
VIEW v_autojcolumnsource
AS
SELECT
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `jcolumnsourceid`,
  `jcolumnsource`.`changestamp` AS `changestamp`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `b2g`(`jcolumnsource`.`srcpartview`) AS `jcolumnsource_srcpartview_id`,
  `journalsrc_brief_f`(`jcolumnsource`.`srcpartview`, NULL) AS `jcolumnsource_srcpartview`,
  `jcolumnsource`.`viewfield` AS `jcolumnsource_viewfield`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `id`,
  'jcolumnsource' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`jcolumnsource`
  JOIN `journalcolumn`
    ON ((`journalcolumn`.`journalcolumnid` = `jcolumnsource`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojcolumnsource_en_us"
--
CREATE
VIEW v_autojcolumnsource_en_us
AS
SELECT
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `jcolumnsourceid`,
  `jcolumnsource`.`changestamp` AS `changestamp`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `b2g`(`jcolumnsource`.`srcpartview`) AS `jcolumnsource_srcpartview_id`,
  `journalsrc_brief_f`(`jcolumnsource`.`srcpartview`, 'en_us') AS `jcolumnsource_srcpartview`,
  `jcolumnsource`.`viewfield` AS `jcolumnsource_viewfield`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `id`,
  'jcolumnsource' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`jcolumnsource`
  JOIN `journalcolumn`
    ON ((`journalcolumn`.`journalcolumnid` = `jcolumnsource`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojcolumnsource_ru_ru"
--
CREATE
VIEW v_autojcolumnsource_ru_ru
AS
SELECT
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `jcolumnsourceid`,
  `jcolumnsource`.`changestamp` AS `changestamp`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `b2g`(`jcolumnsource`.`srcpartview`) AS `jcolumnsource_srcpartview_id`,
  `journalsrc_brief_f`(`jcolumnsource`.`srcpartview`, 'ru_ru') AS `jcolumnsource_srcpartview`,
  `jcolumnsource`.`viewfield` AS `jcolumnsource_viewfield`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `id`,
  'jcolumnsource' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`jcolumnsource`
  JOIN `journalcolumn`
    ON ((`journalcolumn`.`journalcolumnid` = `jcolumnsource`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournal"
--
CREATE
VIEW v_autojournal
AS
SELECT
  `b2g`(`journal`.`journalid`) AS `journalid`,
  `journal`.`changestamp` AS `changestamp`,
  `journal`.`thecomment` AS `journal_thecomment`,
  `journal`.`name` AS `journal_name`,
  `journal`.`the_alias` AS `journal_the_alias`,
  `journal`.`usefavorites` AS `journal_usefavorites_val`,
  (CASE `journal`.`usefavorites` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `journal_usefavorites`,
  `journal`.`jrnliconcls` AS `journal_jrnliconcls`,
  `b2g`(`journal`.`instanceid`) AS `instanceid`,
  `journal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journal`.`journalid`) AS `id`,
  'journal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journal`
  JOIN `instance`
    ON ((`journal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournal_en_us"
--
CREATE
VIEW v_autojournal_en_us
AS
SELECT
  `b2g`(`journal`.`journalid`) AS `journalid`,
  `journal`.`changestamp` AS `changestamp`,
  `journal`.`thecomment` AS `journal_thecomment`,
  `journal`.`name` AS `journal_name`,
  `journal`.`the_alias` AS `journal_the_alias`,
  `journal`.`usefavorites` AS `journal_usefavorites_val`,
  (CASE `journal`.`usefavorites` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `journal_usefavorites`,
  `journal`.`jrnliconcls` AS `journal_jrnliconcls`,
  `b2g`(`journal`.`instanceid`) AS `instanceid`,
  `journal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journal`.`journalid`) AS `id`,
  'journal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journal`
  JOIN `instance`
    ON ((`journal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournal_ru_ru"
--
CREATE
VIEW v_autojournal_ru_ru
AS
SELECT
  `b2g`(`journal`.`journalid`) AS `journalid`,
  `journal`.`changestamp` AS `changestamp`,
  `journal`.`thecomment` AS `journal_thecomment`,
  `journal`.`name` AS `journal_name`,
  `journal`.`the_alias` AS `journal_the_alias`,
  `journal`.`usefavorites` AS `journal_usefavorites_val`,
  (CASE `journal`.`usefavorites` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `journal_usefavorites`,
  `journal`.`jrnliconcls` AS `journal_jrnliconcls`,
  `b2g`(`journal`.`instanceid`) AS `instanceid`,
  `journal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journal`.`journalid`) AS `id`,
  'journal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journal`
  JOIN `instance`
    ON ((`journal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalcolumn"
--
CREATE
VIEW v_autojournalcolumn
AS
SELECT
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `journalcolumn`.`changestamp` AS `changestamp`,
  `journalcolumn`.`colsort` AS `journalcolumn_colsort_val`,
  (CASE `journalcolumn`.`colsort` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `journalcolumn_colsort`,
  `journalcolumn`.`sequence` AS `journalcolumn_sequence`,
  `journalcolumn`.`groupaggregation` AS `journalcolumn_groupaggregation_val`,
  (CASE `journalcolumn`.`groupaggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `journalcolumn_groupaggregation`,
  `journalcolumn`.`columnalignment` AS `journalcolumn_columnalignment_val`,
  (CASE `journalcolumn`.`columnalignment` WHEN 6 THEN 'right top' WHEN 7 THEN 'right center' WHEN 8 THEN 'right bottom' WHEN 3 THEN 'center top' WHEN 0 THEN 'left top' WHEN 4 THEN 'center center' WHEN 1 THEN 'left center' WHEN 5 THEN 'center bottom' WHEN 2 THEN 'left bottom' ELSE '' END) AS `journalcolumn_columnalignment`,
  `journalcolumn`.`name` AS `journalcolumn_name`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `id`,
  'journalcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalcolumn`
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalcolumn_en_us"
--
CREATE
VIEW v_autojournalcolumn_en_us
AS
SELECT
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `journalcolumn`.`changestamp` AS `changestamp`,
  `journalcolumn`.`colsort` AS `journalcolumn_colsort_val`,
  (CASE `journalcolumn`.`colsort` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `journalcolumn_colsort`,
  `journalcolumn`.`sequence` AS `journalcolumn_sequence`,
  `journalcolumn`.`groupaggregation` AS `journalcolumn_groupaggregation_val`,
  (CASE `journalcolumn`.`groupaggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `journalcolumn_groupaggregation`,
  `journalcolumn`.`columnalignment` AS `journalcolumn_columnalignment_val`,
  (CASE `journalcolumn`.`columnalignment` WHEN 6 THEN 'right top' WHEN 7 THEN 'right center' WHEN 8 THEN 'right bottom' WHEN 3 THEN 'center top' WHEN 0 THEN 'left top' WHEN 4 THEN 'center center' WHEN 1 THEN 'left center' WHEN 5 THEN 'center bottom' WHEN 2 THEN 'left bottom' ELSE '' END) AS `journalcolumn_columnalignment`,
  `journalcolumn`.`name` AS `journalcolumn_name`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `id`,
  'journalcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalcolumn`
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalcolumn_ru_ru"
--
CREATE
VIEW v_autojournalcolumn_ru_ru
AS
SELECT
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `journalcolumn`.`changestamp` AS `changestamp`,
  `journalcolumn`.`colsort` AS `journalcolumn_colsort_val`,
  (CASE `journalcolumn`.`colsort` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `journalcolumn_colsort`,
  `journalcolumn`.`sequence` AS `journalcolumn_sequence`,
  `journalcolumn`.`groupaggregation` AS `journalcolumn_groupaggregation_val`,
  (CASE `journalcolumn`.`groupaggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `journalcolumn_groupaggregation`,
  `journalcolumn`.`columnalignment` AS `journalcolumn_columnalignment_val`,
  (CASE `journalcolumn`.`columnalignment` WHEN 6 THEN 'right top' WHEN 7 THEN 'right center' WHEN 8 THEN 'right bottom' WHEN 3 THEN 'center top' WHEN 0 THEN 'left top' WHEN 4 THEN 'center center' WHEN 1 THEN 'left center' WHEN 5 THEN 'center bottom' WHEN 2 THEN 'left bottom' ELSE '' END) AS `journalcolumn_columnalignment`,
  `journalcolumn`.`name` AS `journalcolumn_name`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `id`,
  'journalcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalcolumn`
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalsrc"
--
CREATE
VIEW v_autojournalsrc
AS
SELECT
  `b2g`(`journalsrc`.`journalsrcid`) AS `journalsrcid`,
  `journalsrc`.`changestamp` AS `changestamp`,
  `journalsrc`.`onrun` AS `journalsrc_onrun_val`,
  (CASE `journalsrc`.`onrun` WHEN 2 THEN 'открыть документ' WHEN 0 THEN 'ничего не делать' WHEN 1 THEN 'открыть строку' ELSE '' END) AS `journalsrc_onrun`,
  `journalsrc`.`viewalias` AS `journalsrc_viewalias`,
  `journalsrc`.`openmode` AS `journalsrc_openmode`,
  `journalsrc`.`partview` AS `journalsrc_partview`,
  `b2g`(`journalsrc`.`instanceid`) AS `instanceid`,
  `journalsrc`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalsrc`.`journalsrcid`) AS `id`,
  'journalsrc' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalsrc`
  JOIN `instance`
    ON ((`journalsrc`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalsrc_en_us"
--
CREATE
VIEW v_autojournalsrc_en_us
AS
SELECT
  `b2g`(`journalsrc`.`journalsrcid`) AS `journalsrcid`,
  `journalsrc`.`changestamp` AS `changestamp`,
  `journalsrc`.`onrun` AS `journalsrc_onrun_val`,
  (CASE `journalsrc`.`onrun` WHEN 2 THEN 'открыть документ' WHEN 0 THEN 'ничего не делать' WHEN 1 THEN 'открыть строку' ELSE '' END) AS `journalsrc_onrun`,
  `journalsrc`.`viewalias` AS `journalsrc_viewalias`,
  `journalsrc`.`openmode` AS `journalsrc_openmode`,
  `journalsrc`.`partview` AS `journalsrc_partview`,
  `b2g`(`journalsrc`.`instanceid`) AS `instanceid`,
  `journalsrc`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalsrc`.`journalsrcid`) AS `id`,
  'journalsrc' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalsrc`
  JOIN `instance`
    ON ((`journalsrc`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalsrc_ru_ru"
--
CREATE
VIEW v_autojournalsrc_ru_ru
AS
SELECT
  `b2g`(`journalsrc`.`journalsrcid`) AS `journalsrcid`,
  `journalsrc`.`changestamp` AS `changestamp`,
  `journalsrc`.`onrun` AS `journalsrc_onrun_val`,
  (CASE `journalsrc`.`onrun` WHEN 2 THEN 'открыть документ' WHEN 0 THEN 'ничего не делать' WHEN 1 THEN 'открыть строку' ELSE '' END) AS `journalsrc_onrun`,
  `journalsrc`.`viewalias` AS `journalsrc_viewalias`,
  `journalsrc`.`openmode` AS `journalsrc_openmode`,
  `journalsrc`.`partview` AS `journalsrc_partview`,
  `b2g`(`journalsrc`.`instanceid`) AS `instanceid`,
  `journalsrc`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalsrc`.`journalsrcid`) AS `id`,
  'journalsrc' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalsrc`
  JOIN `instance`
    ON ((`journalsrc`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autolocalizeinfo"
--
CREATE
VIEW v_autolocalizeinfo
AS
SELECT
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `localizeinfoid`,
  `localizeinfo`.`changestamp` AS `changestamp`,
  `localizeinfo`.`langfull` AS `localizeinfo_langfull`,
  `localizeinfo`.`langshort` AS `localizeinfo_langshort`,
  `b2g`(`localizeinfo`.`instanceid`) AS `instanceid`,
  `localizeinfo`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `id`,
  'localizeinfo' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`localizeinfo`
  JOIN `instance`
    ON ((`localizeinfo`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autolocalizeinfo_en_us"
--
CREATE
VIEW v_autolocalizeinfo_en_us
AS
SELECT
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `localizeinfoid`,
  `localizeinfo`.`changestamp` AS `changestamp`,
  `localizeinfo`.`langfull` AS `localizeinfo_langfull`,
  `localizeinfo`.`langshort` AS `localizeinfo_langshort`,
  `b2g`(`localizeinfo`.`instanceid`) AS `instanceid`,
  `localizeinfo`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `id`,
  'localizeinfo' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`localizeinfo`
  JOIN `instance`
    ON ((`localizeinfo`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autolocalizeinfo_ru_ru"
--
CREATE
VIEW v_autolocalizeinfo_ru_ru
AS
SELECT
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `localizeinfoid`,
  `localizeinfo`.`changestamp` AS `changestamp`,
  `localizeinfo`.`langfull` AS `localizeinfo_langfull`,
  `localizeinfo`.`langshort` AS `localizeinfo_langshort`,
  `b2g`(`localizeinfo`.`instanceid`) AS `instanceid`,
  `localizeinfo`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `id`,
  'localizeinfo' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`localizeinfo`
  JOIN `instance`
    ON ((`localizeinfo`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automethodrestriction"
--
CREATE
VIEW v_automethodrestriction
AS
SELECT
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `methodrestrictionid`,
  `methodrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`methodrestriction`.`part`) AS `methodrestriction_part_id`,
  `part_brief_f`(`methodrestriction`.`part`, NULL) AS `methodrestriction_part`,
  `b2g`(`methodrestriction`.`method`) AS `methodrestriction_method_id`,
  `sharedmethod_brief_f`(`methodrestriction`.`method`, NULL) AS `methodrestriction_method`,
  `methodrestriction`.`isrestricted` AS `methodrestriction_isrestricted_val`,
  (CASE `methodrestriction`.`isrestricted` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `methodrestriction_isrestricted`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `id`,
  'methodrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`methodrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `methodrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automethodrestriction_en_us"
--
CREATE
VIEW v_automethodrestriction_en_us
AS
SELECT
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `methodrestrictionid`,
  `methodrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`methodrestriction`.`part`) AS `methodrestriction_part_id`,
  `part_brief_f`(`methodrestriction`.`part`, 'en_us') AS `methodrestriction_part`,
  `b2g`(`methodrestriction`.`method`) AS `methodrestriction_method_id`,
  `sharedmethod_brief_f`(`methodrestriction`.`method`, 'en_us') AS `methodrestriction_method`,
  `methodrestriction`.`isrestricted` AS `methodrestriction_isrestricted_val`,
  (CASE `methodrestriction`.`isrestricted` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `methodrestriction_isrestricted`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `id`,
  'methodrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`methodrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `methodrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automethodrestriction_ru_ru"
--
CREATE
VIEW v_automethodrestriction_ru_ru
AS
SELECT
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `methodrestrictionid`,
  `methodrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`methodrestriction`.`part`) AS `methodrestriction_part_id`,
  `part_brief_f`(`methodrestriction`.`part`, 'ru_ru') AS `methodrestriction_part`,
  `b2g`(`methodrestriction`.`method`) AS `methodrestriction_method_id`,
  `sharedmethod_brief_f`(`methodrestriction`.`method`, 'ru_ru') AS `methodrestriction_method`,
  `methodrestriction`.`isrestricted` AS `methodrestriction_isrestricted_val`,
  (CASE `methodrestriction`.`isrestricted` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `methodrestriction_isrestricted`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `id`,
  'methodrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`methodrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `methodrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzapp"
--
CREATE
VIEW v_automtzapp
AS
SELECT
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `mtzapp`.`changestamp` AS `changestamp`,
  `mtzapp`.`name` AS `mtzapp_name`,
  `mtzapp`.`thecomment` AS `mtzapp_thecomment`,
  `mtzapp`.`dbname` AS `mtzapp_dbname`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzapp`.`mtzappid`) AS `id`,
  'mtzapp' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzapp`
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzapp_en_us"
--
CREATE
VIEW v_automtzapp_en_us
AS
SELECT
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `mtzapp`.`changestamp` AS `changestamp`,
  `mtzapp`.`name` AS `mtzapp_name`,
  `mtzapp`.`thecomment` AS `mtzapp_thecomment`,
  `mtzapp`.`dbname` AS `mtzapp_dbname`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzapp`.`mtzappid`) AS `id`,
  'mtzapp' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzapp`
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzapp_ru_ru"
--
CREATE
VIEW v_automtzapp_ru_ru
AS
SELECT
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `mtzapp`.`changestamp` AS `changestamp`,
  `mtzapp`.`name` AS `mtzapp_name`,
  `mtzapp`.`thecomment` AS `mtzapp_thecomment`,
  `mtzapp`.`dbname` AS `mtzapp_dbname`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzapp`.`mtzappid`) AS `id`,
  'mtzapp' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzapp`
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzext_def"
--
CREATE
VIEW v_automtzext_def
AS
SELECT
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `mtzext_defid`,
  `mtzext_def`.`changestamp` AS `changestamp`,
  `mtzext_def`.`name` AS `mtzext_def_name`,
  `mtzext_def`.`thedescription` AS `mtzext_def_thedescription`,
  `mtzext_def`.`exttype` AS `mtzext_def_exttype_val`,
  (CASE `mtzext_def`.`exttype` WHEN 6 THEN 'verifyrowext' WHEN 7 THEN 'codegenerator' WHEN 5 THEN 'defaultext' WHEN 0 THEN 'statusext' WHEN 4 THEN 'jrnlrunext' WHEN 2 THEN 'customext' WHEN 8 THEN 'armgenerator' WHEN 1 THEN 'onformext' WHEN 3 THEN 'jrnladdext' ELSE '' END) AS `mtzext_def_exttype`,
  `b2g`(`mtzext_def`.`instanceid`) AS `instanceid`,
  `mtzext_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `id`,
  'mtzext_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzext_def`
  JOIN `instance`
    ON ((`mtzext_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzext_def_en_us"
--
CREATE
VIEW v_automtzext_def_en_us
AS
SELECT
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `mtzext_defid`,
  `mtzext_def`.`changestamp` AS `changestamp`,
  `mtzext_def`.`name` AS `mtzext_def_name`,
  `mtzext_def`.`thedescription` AS `mtzext_def_thedescription`,
  `mtzext_def`.`exttype` AS `mtzext_def_exttype_val`,
  (CASE `mtzext_def`.`exttype` WHEN 6 THEN 'verifyrowext' WHEN 7 THEN 'codegenerator' WHEN 5 THEN 'defaultext' WHEN 0 THEN 'statusext' WHEN 4 THEN 'jrnlrunext' WHEN 2 THEN 'customext' WHEN 8 THEN 'armgenerator' WHEN 1 THEN 'onformext' WHEN 3 THEN 'jrnladdext' ELSE '' END) AS `mtzext_def_exttype`,
  `b2g`(`mtzext_def`.`instanceid`) AS `instanceid`,
  `mtzext_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `id`,
  'mtzext_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzext_def`
  JOIN `instance`
    ON ((`mtzext_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzext_def_ru_ru"
--
CREATE
VIEW v_automtzext_def_ru_ru
AS
SELECT
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `mtzext_defid`,
  `mtzext_def`.`changestamp` AS `changestamp`,
  `mtzext_def`.`name` AS `mtzext_def_name`,
  `mtzext_def`.`thedescription` AS `mtzext_def_thedescription`,
  `mtzext_def`.`exttype` AS `mtzext_def_exttype_val`,
  (CASE `mtzext_def`.`exttype` WHEN 6 THEN 'verifyrowext' WHEN 7 THEN 'codegenerator' WHEN 5 THEN 'defaultext' WHEN 0 THEN 'statusext' WHEN 4 THEN 'jrnlrunext' WHEN 2 THEN 'customext' WHEN 8 THEN 'armgenerator' WHEN 1 THEN 'onformext' WHEN 3 THEN 'jrnladdext' ELSE '' END) AS `mtzext_def_exttype`,
  `b2g`(`mtzext_def`.`instanceid`) AS `instanceid`,
  `mtzext_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `id`,
  'mtzext_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzext_def`
  JOIN `instance`
    ON ((`mtzext_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzextrel"
--
CREATE
VIEW v_automtzextrel
AS
SELECT
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `mtzextrelid`,
  `mtzextrel`.`changestamp` AS `changestamp`,
  `mtzextrel`.`thelibraryname` AS `mtzextrel_thelibraryname`,
  `mtzextrel`.`theclassname` AS `mtzextrel_theclassname`,
  `mtzextrel`.`theplatform` AS `mtzextrel_theplatform_val`,
  (CASE `mtzextrel`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `mtzextrel_theplatform`,
  `b2g`(`mtzextrel`.`instanceid`) AS `instanceid`,
  `mtzextrel`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `id`,
  'mtzextrel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzextrel`
  JOIN `instance`
    ON ((`mtzextrel`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzextrel_en_us"
--
CREATE
VIEW v_automtzextrel_en_us
AS
SELECT
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `mtzextrelid`,
  `mtzextrel`.`changestamp` AS `changestamp`,
  `mtzextrel`.`thelibraryname` AS `mtzextrel_thelibraryname`,
  `mtzextrel`.`theclassname` AS `mtzextrel_theclassname`,
  `mtzextrel`.`theplatform` AS `mtzextrel_theplatform_val`,
  (CASE `mtzextrel`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `mtzextrel_theplatform`,
  `b2g`(`mtzextrel`.`instanceid`) AS `instanceid`,
  `mtzextrel`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `id`,
  'mtzextrel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzextrel`
  JOIN `instance`
    ON ((`mtzextrel`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzextrel_ru_ru"
--
CREATE
VIEW v_automtzextrel_ru_ru
AS
SELECT
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `mtzextrelid`,
  `mtzextrel`.`changestamp` AS `changestamp`,
  `mtzextrel`.`thelibraryname` AS `mtzextrel_thelibraryname`,
  `mtzextrel`.`theclassname` AS `mtzextrel_theclassname`,
  `mtzextrel`.`theplatform` AS `mtzextrel_theplatform_val`,
  (CASE `mtzextrel`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `mtzextrel_theplatform`,
  `b2g`(`mtzextrel`.`instanceid`) AS `instanceid`,
  `mtzextrel`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `id`,
  'mtzextrel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzextrel`
  JOIN `instance`
    ON ((`mtzextrel`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_head"
--
CREATE
VIEW v_autonum_head
AS
SELECT
  `b2g`(`num_head`.`num_headid`) AS `num_headid`,
  `num_head`.`changestamp` AS `changestamp`,
  `num_head`.`shema` AS `num_head_shema_val`,
  (CASE `num_head`.`shema` WHEN 2 THEN 'по кварталу' WHEN 3 THEN 'по месяцу' WHEN 0 THEN 'единая зона' WHEN 4 THEN 'по дню' WHEN 1 THEN 'по году' WHEN 10 THEN 'произвольные зоны' ELSE '' END) AS `num_head_shema`,
  `num_head`.`name` AS `num_head_name`,
  `b2g`(`num_head`.`instanceid`) AS `instanceid`,
  `num_head`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_head`.`num_headid`) AS `id`,
  'num_head' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_head`
  JOIN `instance`
    ON ((`num_head`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_head_en_us"
--
CREATE
VIEW v_autonum_head_en_us
AS
SELECT
  `b2g`(`num_head`.`num_headid`) AS `num_headid`,
  `num_head`.`changestamp` AS `changestamp`,
  `num_head`.`shema` AS `num_head_shema_val`,
  (CASE `num_head`.`shema` WHEN 2 THEN 'по кварталу' WHEN 3 THEN 'по месяцу' WHEN 0 THEN 'единая зона' WHEN 4 THEN 'по дню' WHEN 1 THEN 'по году' WHEN 10 THEN 'произвольные зоны' ELSE '' END) AS `num_head_shema`,
  `num_head`.`name` AS `num_head_name`,
  `b2g`(`num_head`.`instanceid`) AS `instanceid`,
  `num_head`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_head`.`num_headid`) AS `id`,
  'num_head' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_head`
  JOIN `instance`
    ON ((`num_head`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_head_ru_ru"
--
CREATE
VIEW v_autonum_head_ru_ru
AS
SELECT
  `b2g`(`num_head`.`num_headid`) AS `num_headid`,
  `num_head`.`changestamp` AS `changestamp`,
  `num_head`.`shema` AS `num_head_shema_val`,
  (CASE `num_head`.`shema` WHEN 2 THEN 'по кварталу' WHEN 3 THEN 'по месяцу' WHEN 0 THEN 'единая зона' WHEN 4 THEN 'по дню' WHEN 1 THEN 'по году' WHEN 10 THEN 'произвольные зоны' ELSE '' END) AS `num_head_shema`,
  `num_head`.`name` AS `num_head_name`,
  `b2g`(`num_head`.`instanceid`) AS `instanceid`,
  `num_head`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_head`.`num_headid`) AS `id`,
  'num_head' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_head`
  JOIN `instance`
    ON ((`num_head`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_values"
--
CREATE
VIEW v_autonum_values
AS
SELECT
  `b2g`(`num_values`.`num_valuesid`) AS `num_valuesid`,
  `num_values`.`changestamp` AS `changestamp`,
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_values`.`ownerrowid` AS `num_values_ownerrowid`,
  `num_values`.`ownerpartname` AS `num_values_ownerpartname`,
  `num_values`.`the_value` AS `num_values_the_value`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_values`.`num_valuesid`) AS `id`,
  'num_values' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`num_values`
  JOIN `num_zones`
    ON ((`num_zones`.`num_zonesid` = `num_values`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_values_en_us"
--
CREATE
VIEW v_autonum_values_en_us
AS
SELECT
  `b2g`(`num_values`.`num_valuesid`) AS `num_valuesid`,
  `num_values`.`changestamp` AS `changestamp`,
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_values`.`ownerrowid` AS `num_values_ownerrowid`,
  `num_values`.`ownerpartname` AS `num_values_ownerpartname`,
  `num_values`.`the_value` AS `num_values_the_value`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_values`.`num_valuesid`) AS `id`,
  'num_values' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`num_values`
  JOIN `num_zones`
    ON ((`num_zones`.`num_zonesid` = `num_values`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_values_ru_ru"
--
CREATE
VIEW v_autonum_values_ru_ru
AS
SELECT
  `b2g`(`num_values`.`num_valuesid`) AS `num_valuesid`,
  `num_values`.`changestamp` AS `changestamp`,
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_values`.`ownerrowid` AS `num_values_ownerrowid`,
  `num_values`.`ownerpartname` AS `num_values_ownerpartname`,
  `num_values`.`the_value` AS `num_values_the_value`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_values`.`num_valuesid`) AS `id`,
  'num_values' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`num_values`
  JOIN `num_zones`
    ON ((`num_zones`.`num_zonesid` = `num_values`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_zones"
--
CREATE
VIEW v_autonum_zones
AS
SELECT
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_zones`.`changestamp` AS `changestamp`,
  `num_zones`.`zonemask` AS `num_zones_zonemask`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_zones`.`num_zonesid`) AS `id`,
  'num_zones' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_zones`
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_zones_en_us"
--
CREATE
VIEW v_autonum_zones_en_us
AS
SELECT
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_zones`.`changestamp` AS `changestamp`,
  `num_zones`.`zonemask` AS `num_zones_zonemask`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_zones`.`num_zonesid`) AS `id`,
  'num_zones' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_zones`
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_zones_ru_ru"
--
CREATE
VIEW v_autonum_zones_ru_ru
AS
SELECT
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_zones`.`changestamp` AS `changestamp`,
  `num_zones`.`zonemask` AS `num_zones_zonemask`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_zones`.`num_zonesid`) AS `id`,
  'num_zones' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_zones`
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjectmode"
--
CREATE
VIEW v_autoobjectmode
AS
SELECT
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `objectmode`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objectmode`.`name` AS `objectmode_name`,
  `objectmode`.`defaultmode` AS `objectmode_defaultmode_val`,
  (CASE `objectmode`.`defaultmode` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objectmode_defaultmode`,
  `objectmode`.`thecomment` AS `objectmode_thecomment`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objectmode`.`objectmodeid`) AS `id`,
  'objectmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objectmode`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjectmode_en_us"
--
CREATE
VIEW v_autoobjectmode_en_us
AS
SELECT
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `objectmode`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objectmode`.`name` AS `objectmode_name`,
  `objectmode`.`defaultmode` AS `objectmode_defaultmode_val`,
  (CASE `objectmode`.`defaultmode` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objectmode_defaultmode`,
  `objectmode`.`thecomment` AS `objectmode_thecomment`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objectmode`.`objectmodeid`) AS `id`,
  'objectmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objectmode`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjectmode_ru_ru"
--
CREATE
VIEW v_autoobjectmode_ru_ru
AS
SELECT
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `objectmode`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objectmode`.`name` AS `objectmode_name`,
  `objectmode`.`defaultmode` AS `objectmode_defaultmode_val`,
  (CASE `objectmode`.`defaultmode` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objectmode_defaultmode`,
  `objectmode`.`thecomment` AS `objectmode_thecomment`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objectmode`.`objectmodeid`) AS `id`,
  'objectmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objectmode`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjecttype"
--
CREATE
VIEW v_autoobjecttype
AS
SELECT
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objecttype`.`changestamp` AS `changestamp`,
  `objecttype`.`allowreftoobject` AS `objecttype_allowreftoobject_val`,
  (CASE `objecttype`.`allowreftoobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_allowreftoobject`,
  `b2g`(`objecttype`.`package`) AS `objecttype_package_id`,
  `mtzapp_brief_f`(`objecttype`.`package`, NULL) AS `objecttype_package`,
  `objecttype`.`name` AS `objecttype_name`,
  `b2g`(`objecttype`.`ondelete`) AS `objecttype_ondelete_id`,
  `typemenu_brief_f`(`objecttype`.`ondelete`, NULL) AS `objecttype_ondelete`,
  `b2g`(`objecttype`.`chooseview`) AS `objecttype_chooseview_id`,
  `partview_brief_f`(`objecttype`.`chooseview`, NULL) AS `objecttype_chooseview`,
  `objecttype`.`commitfullobject` AS `objecttype_commitfullobject_val`,
  (CASE `objecttype`.`commitfullobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_commitfullobject`,
  `objecttype`.`issingleinstance` AS `objecttype_issingleinstance_val`,
  (CASE `objecttype`.`issingleinstance` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_issingleinstance`,
  `objecttype`.`objiconcls` AS `objecttype_objiconcls`,
  `objecttype`.`the_comment` AS `objecttype_the_comment`,
  `objecttype`.`replicatype` AS `objecttype_replicatype_val`,
  (CASE `objecttype`.`replicatype` WHEN 1 THEN 'построчно' WHEN 0 THEN 'весь документ' WHEN 2 THEN 'локальный' ELSE '' END) AS `objecttype_replicatype`,
  `b2g`(`objecttype`.`oncreate`) AS `objecttype_oncreate_id`,
  `typemenu_brief_f`(`objecttype`.`oncreate`, NULL) AS `objecttype_oncreate`,
  `objecttype`.`allowsearch` AS `objecttype_allowsearch_val`,
  (CASE `objecttype`.`allowsearch` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_allowsearch`,
  `objecttype`.`useownership` AS `objecttype_useownership_val`,
  (CASE `objecttype`.`useownership` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_useownership`,
  `b2g`(`objecttype`.`onrun`) AS `objecttype_onrun_id`,
  `typemenu_brief_f`(`objecttype`.`onrun`, NULL) AS `objecttype_onrun`,
  `objecttype`.`thecomment` AS `objecttype_thecomment`,
  `objecttype`.`usearchiving` AS `objecttype_usearchiving_val`,
  (CASE `objecttype`.`usearchiving` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_usearchiving`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objecttype`.`objecttypeid`) AS `id`,
  'objecttype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`objecttype`
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjecttype_en_us"
--
CREATE
VIEW v_autoobjecttype_en_us
AS
SELECT
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objecttype`.`changestamp` AS `changestamp`,
  `objecttype`.`allowreftoobject` AS `objecttype_allowreftoobject_val`,
  (CASE `objecttype`.`allowreftoobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_allowreftoobject`,
  `b2g`(`objecttype`.`package`) AS `objecttype_package_id`,
  `mtzapp_brief_f`(`objecttype`.`package`, 'en_us') AS `objecttype_package`,
  `objecttype`.`name` AS `objecttype_name`,
  `b2g`(`objecttype`.`ondelete`) AS `objecttype_ondelete_id`,
  `typemenu_brief_f`(`objecttype`.`ondelete`, 'en_us') AS `objecttype_ondelete`,
  `b2g`(`objecttype`.`chooseview`) AS `objecttype_chooseview_id`,
  `partview_brief_f`(`objecttype`.`chooseview`, 'en_us') AS `objecttype_chooseview`,
  `objecttype`.`commitfullobject` AS `objecttype_commitfullobject_val`,
  (CASE `objecttype`.`commitfullobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_commitfullobject`,
  `objecttype`.`issingleinstance` AS `objecttype_issingleinstance_val`,
  (CASE `objecttype`.`issingleinstance` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_issingleinstance`,
  `objecttype`.`objiconcls` AS `objecttype_objiconcls`,
  `objecttype`.`the_comment` AS `objecttype_the_comment`,
  `objecttype`.`replicatype` AS `objecttype_replicatype_val`,
  (CASE `objecttype`.`replicatype` WHEN 1 THEN 'построчно' WHEN 0 THEN 'весь документ' WHEN 2 THEN 'локальный' ELSE '' END) AS `objecttype_replicatype`,
  `b2g`(`objecttype`.`oncreate`) AS `objecttype_oncreate_id`,
  `typemenu_brief_f`(`objecttype`.`oncreate`, 'en_us') AS `objecttype_oncreate`,
  `objecttype`.`allowsearch` AS `objecttype_allowsearch_val`,
  (CASE `objecttype`.`allowsearch` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_allowsearch`,
  `objecttype`.`useownership` AS `objecttype_useownership_val`,
  (CASE `objecttype`.`useownership` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_useownership`,
  `b2g`(`objecttype`.`onrun`) AS `objecttype_onrun_id`,
  `typemenu_brief_f`(`objecttype`.`onrun`, 'en_us') AS `objecttype_onrun`,
  `objecttype`.`thecomment` AS `objecttype_thecomment`,
  `objecttype`.`usearchiving` AS `objecttype_usearchiving_val`,
  (CASE `objecttype`.`usearchiving` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_usearchiving`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objecttype`.`objecttypeid`) AS `id`,
  'objecttype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`objecttype`
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjecttype_ru_ru"
--
CREATE
VIEW v_autoobjecttype_ru_ru
AS
SELECT
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objecttype`.`changestamp` AS `changestamp`,
  `objecttype`.`allowreftoobject` AS `objecttype_allowreftoobject_val`,
  (CASE `objecttype`.`allowreftoobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_allowreftoobject`,
  `b2g`(`objecttype`.`package`) AS `objecttype_package_id`,
  `mtzapp_brief_f`(`objecttype`.`package`, 'ru_ru') AS `objecttype_package`,
  `objecttype`.`name` AS `objecttype_name`,
  `b2g`(`objecttype`.`ondelete`) AS `objecttype_ondelete_id`,
  `typemenu_brief_f`(`objecttype`.`ondelete`, 'ru_ru') AS `objecttype_ondelete`,
  `b2g`(`objecttype`.`chooseview`) AS `objecttype_chooseview_id`,
  `partview_brief_f`(`objecttype`.`chooseview`, 'ru_ru') AS `objecttype_chooseview`,
  `objecttype`.`commitfullobject` AS `objecttype_commitfullobject_val`,
  (CASE `objecttype`.`commitfullobject` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_commitfullobject`,
  `objecttype`.`issingleinstance` AS `objecttype_issingleinstance_val`,
  (CASE `objecttype`.`issingleinstance` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_issingleinstance`,
  `objecttype`.`objiconcls` AS `objecttype_objiconcls`,
  `objecttype`.`the_comment` AS `objecttype_the_comment`,
  `objecttype`.`replicatype` AS `objecttype_replicatype_val`,
  (CASE `objecttype`.`replicatype` WHEN 1 THEN 'построчно' WHEN 0 THEN 'весь документ' WHEN 2 THEN 'локальный' ELSE '' END) AS `objecttype_replicatype`,
  `b2g`(`objecttype`.`oncreate`) AS `objecttype_oncreate_id`,
  `typemenu_brief_f`(`objecttype`.`oncreate`, 'ru_ru') AS `objecttype_oncreate`,
  `objecttype`.`allowsearch` AS `objecttype_allowsearch_val`,
  (CASE `objecttype`.`allowsearch` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_allowsearch`,
  `objecttype`.`useownership` AS `objecttype_useownership_val`,
  (CASE `objecttype`.`useownership` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_useownership`,
  `b2g`(`objecttype`.`onrun`) AS `objecttype_onrun_id`,
  `typemenu_brief_f`(`objecttype`.`onrun`, 'ru_ru') AS `objecttype_onrun`,
  `objecttype`.`thecomment` AS `objecttype_thecomment`,
  `objecttype`.`usearchiving` AS `objecttype_usearchiving_val`,
  (CASE `objecttype`.`usearchiving` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objecttype_usearchiving`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objecttype`.`objecttypeid`) AS `id`,
  'objecttype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`objecttype`
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjstatus"
--
CREATE
VIEW v_autoobjstatus
AS
SELECT
  `b2g`(`objstatus`.`objstatusid`) AS `objstatusid`,
  `objstatus`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objstatus`.`isarchive` AS `objstatus_isarchive_val`,
  (CASE `objstatus`.`isarchive` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objstatus_isarchive`,
  `objstatus`.`isstartup` AS `objstatus_isstartup_val`,
  (CASE `objstatus`.`isstartup` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objstatus_isstartup`,
  `objstatus`.`the_comment` AS `objstatus_the_comment`,
  `objstatus`.`name` AS `objstatus_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objstatus`.`objstatusid`) AS `id`,
  'objstatus' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objstatus`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objstatus`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjstatus_en_us"
--
CREATE
VIEW v_autoobjstatus_en_us
AS
SELECT
  `b2g`(`objstatus`.`objstatusid`) AS `objstatusid`,
  `objstatus`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objstatus`.`isarchive` AS `objstatus_isarchive_val`,
  (CASE `objstatus`.`isarchive` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objstatus_isarchive`,
  `objstatus`.`isstartup` AS `objstatus_isstartup_val`,
  (CASE `objstatus`.`isstartup` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objstatus_isstartup`,
  `objstatus`.`the_comment` AS `objstatus_the_comment`,
  `objstatus`.`name` AS `objstatus_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objstatus`.`objstatusid`) AS `id`,
  'objstatus' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objstatus`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objstatus`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjstatus_ru_ru"
--
CREATE
VIEW v_autoobjstatus_ru_ru
AS
SELECT
  `b2g`(`objstatus`.`objstatusid`) AS `objstatusid`,
  `objstatus`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objstatus`.`isarchive` AS `objstatus_isarchive_val`,
  (CASE `objstatus`.`isarchive` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objstatus_isarchive`,
  `objstatus`.`isstartup` AS `objstatus_isstartup_val`,
  (CASE `objstatus`.`isstartup` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `objstatus_isstartup`,
  `objstatus`.`the_comment` AS `objstatus_the_comment`,
  `objstatus`.`name` AS `objstatus_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objstatus`.`objstatusid`) AS `id`,
  'objstatus' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objstatus`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objstatus`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparameters"
--
CREATE
VIEW v_autoparameters
AS
SELECT
  `b2g`(`parameters`.`parametersid`) AS `parametersid`,
  `parameters`.`changestamp` AS `changestamp`,
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `b2g`(`parameters`.`typeofparm`) AS `parameters_typeofparm_id`,
  `fieldtype_brief_f`(`parameters`.`typeofparm`, NULL) AS `parameters_typeofparm`,
  `parameters`.`outparam` AS `parameters_outparam_val`,
  (CASE `parameters`.`outparam` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `parameters_outparam`,
  `b2g`(`parameters`.`reftopart`) AS `parameters_reftopart_id`,
  `part_brief_f`(`parameters`.`reftopart`, NULL) AS `parameters_reftopart`,
  `parameters`.`caption` AS `parameters_caption`,
  `parameters`.`sequence` AS `parameters_sequence`,
  `parameters`.`referencetype` AS `parameters_referencetype_val`,
  (CASE `parameters`.`referencetype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `parameters_referencetype`,
  `b2g`(`parameters`.`reftotype`) AS `parameters_reftotype_id`,
  `objecttype_brief_f`(`parameters`.`reftotype`, NULL) AS `parameters_reftotype`,
  `parameters`.`allownull` AS `parameters_allownull_val`,
  (CASE `parameters`.`allownull` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `parameters_allownull`,
  `parameters`.`datasize` AS `parameters_datasize`,
  `parameters`.`name` AS `parameters_name`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parameters`.`parametersid`) AS `id`,
  'parameters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`parameters`
  JOIN `script`
    ON ((`script`.`scriptid` = `parameters`.`parentstructrowid`)))
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparameters_en_us"
--
CREATE
VIEW v_autoparameters_en_us
AS
SELECT
  `b2g`(`parameters`.`parametersid`) AS `parametersid`,
  `parameters`.`changestamp` AS `changestamp`,
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `b2g`(`parameters`.`typeofparm`) AS `parameters_typeofparm_id`,
  `fieldtype_brief_f`(`parameters`.`typeofparm`, 'en_us') AS `parameters_typeofparm`,
  `parameters`.`outparam` AS `parameters_outparam_val`,
  (CASE `parameters`.`outparam` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `parameters_outparam`,
  `b2g`(`parameters`.`reftopart`) AS `parameters_reftopart_id`,
  `part_brief_f`(`parameters`.`reftopart`, 'en_us') AS `parameters_reftopart`,
  `parameters`.`caption` AS `parameters_caption`,
  `parameters`.`sequence` AS `parameters_sequence`,
  `parameters`.`referencetype` AS `parameters_referencetype_val`,
  (CASE `parameters`.`referencetype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `parameters_referencetype`,
  `b2g`(`parameters`.`reftotype`) AS `parameters_reftotype_id`,
  `objecttype_brief_f`(`parameters`.`reftotype`, 'en_us') AS `parameters_reftotype`,
  `parameters`.`allownull` AS `parameters_allownull_val`,
  (CASE `parameters`.`allownull` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `parameters_allownull`,
  `parameters`.`datasize` AS `parameters_datasize`,
  `parameters`.`name` AS `parameters_name`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parameters`.`parametersid`) AS `id`,
  'parameters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`parameters`
  JOIN `script`
    ON ((`script`.`scriptid` = `parameters`.`parentstructrowid`)))
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparameters_ru_ru"
--
CREATE
VIEW v_autoparameters_ru_ru
AS
SELECT
  `b2g`(`parameters`.`parametersid`) AS `parametersid`,
  `parameters`.`changestamp` AS `changestamp`,
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `b2g`(`parameters`.`typeofparm`) AS `parameters_typeofparm_id`,
  `fieldtype_brief_f`(`parameters`.`typeofparm`, 'ru_ru') AS `parameters_typeofparm`,
  `parameters`.`outparam` AS `parameters_outparam_val`,
  (CASE `parameters`.`outparam` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `parameters_outparam`,
  `b2g`(`parameters`.`reftopart`) AS `parameters_reftopart_id`,
  `part_brief_f`(`parameters`.`reftopart`, 'ru_ru') AS `parameters_reftopart`,
  `parameters`.`caption` AS `parameters_caption`,
  `parameters`.`sequence` AS `parameters_sequence`,
  `parameters`.`referencetype` AS `parameters_referencetype_val`,
  (CASE `parameters`.`referencetype` WHEN 3 THEN 'на источник данных' WHEN 0 THEN 'скалярное поле ( не ссылка)' WHEN 2 THEN 'на строку раздела' WHEN 1 THEN 'на объект ' ELSE '' END) AS `parameters_referencetype`,
  `b2g`(`parameters`.`reftotype`) AS `parameters_reftotype_id`,
  `objecttype_brief_f`(`parameters`.`reftotype`, 'ru_ru') AS `parameters_reftotype`,
  `parameters`.`allownull` AS `parameters_allownull_val`,
  (CASE `parameters`.`allownull` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `parameters_allownull`,
  `parameters`.`datasize` AS `parameters_datasize`,
  `parameters`.`name` AS `parameters_name`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parameters`.`parametersid`) AS `id`,
  'parameters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`parameters`
  JOIN `script`
    ON ((`script`.`scriptid` = `parameters`.`parentstructrowid`)))
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparentpackage"
--
CREATE
VIEW v_autoparentpackage
AS
SELECT
  `b2g`(`parentpackage`.`parentpackageid`) AS `parentpackageid`,
  `parentpackage`.`changestamp` AS `changestamp`,
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `b2g`(`parentpackage`.`package`) AS `parentpackage_package_id`,
  `mtzapp_brief_f`(`parentpackage`.`package`, NULL) AS `parentpackage_package`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parentpackage`.`parentpackageid`) AS `id`,
  'parentpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`parentpackage`
  JOIN `mtzapp`
    ON ((`mtzapp`.`mtzappid` = `parentpackage`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparentpackage_en_us"
--
CREATE
VIEW v_autoparentpackage_en_us
AS
SELECT
  `b2g`(`parentpackage`.`parentpackageid`) AS `parentpackageid`,
  `parentpackage`.`changestamp` AS `changestamp`,
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `b2g`(`parentpackage`.`package`) AS `parentpackage_package_id`,
  `mtzapp_brief_f`(`parentpackage`.`package`, 'en_us') AS `parentpackage_package`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parentpackage`.`parentpackageid`) AS `id`,
  'parentpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`parentpackage`
  JOIN `mtzapp`
    ON ((`mtzapp`.`mtzappid` = `parentpackage`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparentpackage_ru_ru"
--
CREATE
VIEW v_autoparentpackage_ru_ru
AS
SELECT
  `b2g`(`parentpackage`.`parentpackageid`) AS `parentpackageid`,
  `parentpackage`.`changestamp` AS `changestamp`,
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `b2g`(`parentpackage`.`package`) AS `parentpackage_package_id`,
  `mtzapp_brief_f`(`parentpackage`.`package`, 'ru_ru') AS `parentpackage_package`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parentpackage`.`parentpackageid`) AS `id`,
  'parentpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`parentpackage`
  JOIN `mtzapp`
    ON ((`mtzapp`.`mtzappid` = `parentpackage`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopart"
--
CREATE
VIEW v_autopart
AS
SELECT
  `b2g`(`part`.`partid`) AS `partid`,
  `part`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `part`.`particoncls` AS `part_particoncls`,
  `part`.`parttype` AS `part_parttype_val`,
  (CASE `part`.`parttype` WHEN 1 THEN 'коллекция' WHEN 2 THEN 'дерево' WHEN 0 THEN 'строка' WHEN 4 THEN 'расширение с данными' WHEN 3 THEN 'расширение' ELSE '' END) AS `part_parttype`,
  `part`.`integerpkey` AS `part_integerpkey_val`,
  (CASE `part`.`integerpkey` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_integerpkey`,
  `part`.`addbehaivor` AS `part_addbehaivor_val`,
  (CASE `part`.`addbehaivor` WHEN 0 THEN 'addform' WHEN 2 THEN 'runaction' WHEN 1 THEN 'refreshonly' ELSE '' END) AS `part_addbehaivor`,
  `part`.`manualregister` AS `part_manualregister_val`,
  (CASE `part`.`manualregister` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_manualregister`,
  `b2g`(`part`.`onsave`) AS `part_onsave_id`,
  `partmenu_brief_f`(`part`.`onsave`, NULL) AS `part_onsave`,
  `part`.`sequence` AS `part_sequence`,
  `b2g`(`part`.`oncreate`) AS `part_oncreate_id`,
  `partmenu_brief_f`(`part`.`oncreate`, NULL) AS `part_oncreate`,
  `part`.`name` AS `part_name`,
  `part`.`the_comment` AS `part_the_comment`,
  `part`.`shablonbrief` AS `part_shablonbrief`,
  `b2g`(`part`.`ondelete`) AS `part_ondelete_id`,
  `partmenu_brief_f`(`part`.`ondelete`, NULL) AS `part_ondelete`,
  `part`.`rulebrief` AS `part_rulebrief`,
  `part`.`caption` AS `part_caption`,
  `part`.`isjormalchange` AS `part_isjormalchange_val`,
  (CASE `part`.`isjormalchange` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_isjormalchange`,
  `b2g`(`part`.`extenderobject`) AS `part_extenderobject_id`,
  `instance_brief_f`(`part`.`extenderobject`, NULL) AS `part_extenderobject`,
  `b2g`(`part`.`onrun`) AS `part_onrun_id`,
  `partmenu_brief_f`(`part`.`onrun`, NULL) AS `part_onrun`,
  `part`.`nolog` AS `part_nolog_val`,
  (CASE `part`.`nolog` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_nolog`,
  `part`.`usearchiving` AS `part_usearchiving_val`,
  (CASE `part`.`usearchiving` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_usearchiving`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`part`.`partid`) AS `id`,
  'part' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`part`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopart_en_us"
--
CREATE
VIEW v_autopart_en_us
AS
SELECT
  `b2g`(`part`.`partid`) AS `partid`,
  `part`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `part`.`particoncls` AS `part_particoncls`,
  `part`.`parttype` AS `part_parttype_val`,
  (CASE `part`.`parttype` WHEN 1 THEN 'коллекция' WHEN 2 THEN 'дерево' WHEN 0 THEN 'строка' WHEN 4 THEN 'расширение с данными' WHEN 3 THEN 'расширение' ELSE '' END) AS `part_parttype`,
  `part`.`integerpkey` AS `part_integerpkey_val`,
  (CASE `part`.`integerpkey` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_integerpkey`,
  `part`.`addbehaivor` AS `part_addbehaivor_val`,
  (CASE `part`.`addbehaivor` WHEN 0 THEN 'addform' WHEN 2 THEN 'runaction' WHEN 1 THEN 'refreshonly' ELSE '' END) AS `part_addbehaivor`,
  `part`.`manualregister` AS `part_manualregister_val`,
  (CASE `part`.`manualregister` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_manualregister`,
  `b2g`(`part`.`onsave`) AS `part_onsave_id`,
  `partmenu_brief_f`(`part`.`onsave`, 'en_us') AS `part_onsave`,
  `part`.`sequence` AS `part_sequence`,
  `b2g`(`part`.`oncreate`) AS `part_oncreate_id`,
  `partmenu_brief_f`(`part`.`oncreate`, 'en_us') AS `part_oncreate`,
  `part`.`name` AS `part_name`,
  `part`.`the_comment` AS `part_the_comment`,
  `part`.`shablonbrief` AS `part_shablonbrief`,
  `b2g`(`part`.`ondelete`) AS `part_ondelete_id`,
  `partmenu_brief_f`(`part`.`ondelete`, 'en_us') AS `part_ondelete`,
  `part`.`rulebrief` AS `part_rulebrief`,
  `part`.`caption` AS `part_caption`,
  `part`.`isjormalchange` AS `part_isjormalchange_val`,
  (CASE `part`.`isjormalchange` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_isjormalchange`,
  `b2g`(`part`.`extenderobject`) AS `part_extenderobject_id`,
  `instance_brief_f`(`part`.`extenderobject`, 'en_us') AS `part_extenderobject`,
  `b2g`(`part`.`onrun`) AS `part_onrun_id`,
  `partmenu_brief_f`(`part`.`onrun`, 'en_us') AS `part_onrun`,
  `part`.`nolog` AS `part_nolog_val`,
  (CASE `part`.`nolog` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_nolog`,
  `part`.`usearchiving` AS `part_usearchiving_val`,
  (CASE `part`.`usearchiving` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_usearchiving`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`part`.`partid`) AS `id`,
  'part' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`part`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopart_ru_ru"
--
CREATE
VIEW v_autopart_ru_ru
AS
SELECT
  `b2g`(`part`.`partid`) AS `partid`,
  `part`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `part`.`particoncls` AS `part_particoncls`,
  `part`.`parttype` AS `part_parttype_val`,
  (CASE `part`.`parttype` WHEN 1 THEN 'коллекция' WHEN 2 THEN 'дерево' WHEN 0 THEN 'строка' WHEN 4 THEN 'расширение с данными' WHEN 3 THEN 'расширение' ELSE '' END) AS `part_parttype`,
  `part`.`integerpkey` AS `part_integerpkey_val`,
  (CASE `part`.`integerpkey` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_integerpkey`,
  `part`.`addbehaivor` AS `part_addbehaivor_val`,
  (CASE `part`.`addbehaivor` WHEN 0 THEN 'addform' WHEN 2 THEN 'runaction' WHEN 1 THEN 'refreshonly' ELSE '' END) AS `part_addbehaivor`,
  `part`.`manualregister` AS `part_manualregister_val`,
  (CASE `part`.`manualregister` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_manualregister`,
  `b2g`(`part`.`onsave`) AS `part_onsave_id`,
  `partmenu_brief_f`(`part`.`onsave`, 'ru_ru') AS `part_onsave`,
  `part`.`sequence` AS `part_sequence`,
  `b2g`(`part`.`oncreate`) AS `part_oncreate_id`,
  `partmenu_brief_f`(`part`.`oncreate`, 'ru_ru') AS `part_oncreate`,
  `part`.`name` AS `part_name`,
  `part`.`the_comment` AS `part_the_comment`,
  `part`.`shablonbrief` AS `part_shablonbrief`,
  `b2g`(`part`.`ondelete`) AS `part_ondelete_id`,
  `partmenu_brief_f`(`part`.`ondelete`, 'ru_ru') AS `part_ondelete`,
  `part`.`rulebrief` AS `part_rulebrief`,
  `part`.`caption` AS `part_caption`,
  `part`.`isjormalchange` AS `part_isjormalchange_val`,
  (CASE `part`.`isjormalchange` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_isjormalchange`,
  `b2g`(`part`.`extenderobject`) AS `part_extenderobject_id`,
  `instance_brief_f`(`part`.`extenderobject`, 'ru_ru') AS `part_extenderobject`,
  `b2g`(`part`.`onrun`) AS `part_onrun_id`,
  `partmenu_brief_f`(`part`.`onrun`, 'ru_ru') AS `part_onrun`,
  `part`.`nolog` AS `part_nolog_val`,
  (CASE `part`.`nolog` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_nolog`,
  `part`.`usearchiving` AS `part_usearchiving_val`,
  (CASE `part`.`usearchiving` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `part_usearchiving`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`part`.`partid`) AS `id`,
  'part' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`part`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartmenu"
--
CREATE
VIEW v_autopartmenu
AS
SELECT
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `partmenu`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partmenu`.`istoolbarbutton` AS `partmenu_istoolbarbutton_val`,
  (CASE `partmenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partmenu_istoolbarbutton`,
  `partmenu`.`tooltip` AS `partmenu_tooltip`,
  `partmenu`.`ismenuitem` AS `partmenu_ismenuitem_val`,
  (CASE `partmenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partmenu_ismenuitem`,
  `b2g`(`partmenu`.`the_action`) AS `partmenu_the_action_id`,
  `sharedmethod_brief_f`(`partmenu`.`the_action`, NULL) AS `partmenu_the_action`,
  `partmenu`.`hotkey` AS `partmenu_hotkey`,
  `partmenu`.`name` AS `partmenu_name`,
  `partmenu`.`caption` AS `partmenu_caption`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partmenu`.`partmenuid`) AS `id`,
  'partmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partmenu`
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartmenu_en_us"
--
CREATE
VIEW v_autopartmenu_en_us
AS
SELECT
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `partmenu`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partmenu`.`istoolbarbutton` AS `partmenu_istoolbarbutton_val`,
  (CASE `partmenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partmenu_istoolbarbutton`,
  `partmenu`.`tooltip` AS `partmenu_tooltip`,
  `partmenu`.`ismenuitem` AS `partmenu_ismenuitem_val`,
  (CASE `partmenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partmenu_ismenuitem`,
  `b2g`(`partmenu`.`the_action`) AS `partmenu_the_action_id`,
  `sharedmethod_brief_f`(`partmenu`.`the_action`, 'en_us') AS `partmenu_the_action`,
  `partmenu`.`hotkey` AS `partmenu_hotkey`,
  `partmenu`.`name` AS `partmenu_name`,
  `partmenu`.`caption` AS `partmenu_caption`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partmenu`.`partmenuid`) AS `id`,
  'partmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partmenu`
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartmenu_ru_ru"
--
CREATE
VIEW v_autopartmenu_ru_ru
AS
SELECT
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `partmenu`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partmenu`.`istoolbarbutton` AS `partmenu_istoolbarbutton_val`,
  (CASE `partmenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partmenu_istoolbarbutton`,
  `partmenu`.`tooltip` AS `partmenu_tooltip`,
  `partmenu`.`ismenuitem` AS `partmenu_ismenuitem_val`,
  (CASE `partmenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partmenu_ismenuitem`,
  `b2g`(`partmenu`.`the_action`) AS `partmenu_the_action_id`,
  `sharedmethod_brief_f`(`partmenu`.`the_action`, 'ru_ru') AS `partmenu_the_action`,
  `partmenu`.`hotkey` AS `partmenu_hotkey`,
  `partmenu`.`name` AS `partmenu_name`,
  `partmenu`.`caption` AS `partmenu_caption`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partmenu`.`partmenuid`) AS `id`,
  'partmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partmenu`
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartparammap"
--
CREATE
VIEW v_autopartparammap
AS
SELECT
  `b2g`(`partparammap`.`partparammapid`) AS `partparammapid`,
  `partparammap`.`changestamp` AS `changestamp`,
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partparammap`.`paramname` AS `partparammap_paramname`,
  `partparammap`.`noedit` AS `partparammap_noedit_val`,
  (CASE `partparammap`.`noedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partparammap_noedit`,
  `partparammap`.`fieldname` AS `partparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partparammap`.`partparammapid`) AS `id`,
  'partparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partparammap`
  JOIN `partmenu`
    ON ((`partmenu`.`partmenuid` = `partparammap`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartparammap_en_us"
--
CREATE
VIEW v_autopartparammap_en_us
AS
SELECT
  `b2g`(`partparammap`.`partparammapid`) AS `partparammapid`,
  `partparammap`.`changestamp` AS `changestamp`,
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partparammap`.`paramname` AS `partparammap_paramname`,
  `partparammap`.`noedit` AS `partparammap_noedit_val`,
  (CASE `partparammap`.`noedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partparammap_noedit`,
  `partparammap`.`fieldname` AS `partparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partparammap`.`partparammapid`) AS `id`,
  'partparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partparammap`
  JOIN `partmenu`
    ON ((`partmenu`.`partmenuid` = `partparammap`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartparammap_ru_ru"
--
CREATE
VIEW v_autopartparammap_ru_ru
AS
SELECT
  `b2g`(`partparammap`.`partparammapid`) AS `partparammapid`,
  `partparammap`.`changestamp` AS `changestamp`,
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partparammap`.`paramname` AS `partparammap_paramname`,
  `partparammap`.`noedit` AS `partparammap_noedit_val`,
  (CASE `partparammap`.`noedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partparammap_noedit`,
  `partparammap`.`fieldname` AS `partparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partparammap`.`partparammapid`) AS `id`,
  'partparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partparammap`
  JOIN `partmenu`
    ON ((`partmenu`.`partmenuid` = `partparammap`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview"
--
CREATE
VIEW v_autopartview
AS
SELECT
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `partview`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview`.`filterfield0` AS `partview_filterfield0`,
  `partview`.`filterfield2` AS `partview_filterfield2`,
  `partview`.`name` AS `partview_name`,
  `partview`.`the_alias` AS `partview_the_alias`,
  `partview`.`forchoose` AS `partview_forchoose_val`,
  (CASE `partview`.`forchoose` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partview_forchoose`,
  `partview`.`filterfield1` AS `partview_filterfield1`,
  `partview`.`filterfield3` AS `partview_filterfield3`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview`.`partviewid`) AS `id`,
  'partview' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partview`
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_en_us"
--
CREATE
VIEW v_autopartview_en_us
AS
SELECT
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `partview`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview`.`filterfield0` AS `partview_filterfield0`,
  `partview`.`filterfield2` AS `partview_filterfield2`,
  `partview`.`name` AS `partview_name`,
  `partview`.`the_alias` AS `partview_the_alias`,
  `partview`.`forchoose` AS `partview_forchoose_val`,
  (CASE `partview`.`forchoose` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partview_forchoose`,
  `partview`.`filterfield1` AS `partview_filterfield1`,
  `partview`.`filterfield3` AS `partview_filterfield3`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview`.`partviewid`) AS `id`,
  'partview' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partview`
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_lnk"
--
CREATE
VIEW v_autopartview_lnk
AS
SELECT
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `partview_lnkid`,
  `partview_lnk`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`partview_lnk`.`thejoindestination`) AS `partview_lnk_thejoindestination_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoindestination`, NULL) AS `partview_lnk_thejoindestination`,
  `partview_lnk`.`reftype` AS `partview_lnk_reftype_val`,
  (CASE `partview_lnk`.`reftype` WHEN 0 THEN 'нет' WHEN 4 THEN 'связка parentstructrowid  (в передлах объекта)' WHEN 3 THEN 'связка instanceid (в передлах объекта)' WHEN 1 THEN 'ссылка на объект' WHEN 2 THEN 'ссылка на строку' ELSE '' END) AS `partview_lnk_reftype`,
  `partview_lnk`.`handjoin` AS `partview_lnk_handjoin`,
  `b2g`(`partview_lnk`.`theview`) AS `partview_lnk_theview_id`,
  `partview_brief_f`(`partview_lnk`.`theview`, NULL) AS `partview_lnk_theview`,
  `b2g`(`partview_lnk`.`thejoinsource`) AS `partview_lnk_thejoinsource_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoinsource`, NULL) AS `partview_lnk_thejoinsource`,
  `partview_lnk`.`seq` AS `partview_lnk_seq`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `id`,
  'partview_lnk' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partview_lnk`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `partview_lnk`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_lnk_en_us"
--
CREATE
VIEW v_autopartview_lnk_en_us
AS
SELECT
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `partview_lnkid`,
  `partview_lnk`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`partview_lnk`.`thejoindestination`) AS `partview_lnk_thejoindestination_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoindestination`, 'en_us') AS `partview_lnk_thejoindestination`,
  `partview_lnk`.`reftype` AS `partview_lnk_reftype_val`,
  (CASE `partview_lnk`.`reftype` WHEN 0 THEN 'нет' WHEN 4 THEN 'связка parentstructrowid  (в передлах объекта)' WHEN 3 THEN 'связка instanceid (в передлах объекта)' WHEN 1 THEN 'ссылка на объект' WHEN 2 THEN 'ссылка на строку' ELSE '' END) AS `partview_lnk_reftype`,
  `partview_lnk`.`handjoin` AS `partview_lnk_handjoin`,
  `b2g`(`partview_lnk`.`theview`) AS `partview_lnk_theview_id`,
  `partview_brief_f`(`partview_lnk`.`theview`, 'en_us') AS `partview_lnk_theview`,
  `b2g`(`partview_lnk`.`thejoinsource`) AS `partview_lnk_thejoinsource_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoinsource`, 'en_us') AS `partview_lnk_thejoinsource`,
  `partview_lnk`.`seq` AS `partview_lnk_seq`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `id`,
  'partview_lnk' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partview_lnk`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `partview_lnk`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_lnk_ru_ru"
--
CREATE
VIEW v_autopartview_lnk_ru_ru
AS
SELECT
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `partview_lnkid`,
  `partview_lnk`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`partview_lnk`.`thejoindestination`) AS `partview_lnk_thejoindestination_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoindestination`, 'ru_ru') AS `partview_lnk_thejoindestination`,
  `partview_lnk`.`reftype` AS `partview_lnk_reftype_val`,
  (CASE `partview_lnk`.`reftype` WHEN 0 THEN 'нет' WHEN 4 THEN 'связка parentstructrowid  (в передлах объекта)' WHEN 3 THEN 'связка instanceid (в передлах объекта)' WHEN 1 THEN 'ссылка на объект' WHEN 2 THEN 'ссылка на строку' ELSE '' END) AS `partview_lnk_reftype`,
  `partview_lnk`.`handjoin` AS `partview_lnk_handjoin`,
  `b2g`(`partview_lnk`.`theview`) AS `partview_lnk_theview_id`,
  `partview_brief_f`(`partview_lnk`.`theview`, 'ru_ru') AS `partview_lnk_theview`,
  `b2g`(`partview_lnk`.`thejoinsource`) AS `partview_lnk_thejoinsource_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoinsource`, 'ru_ru') AS `partview_lnk_thejoinsource`,
  `partview_lnk`.`seq` AS `partview_lnk_seq`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `id`,
  'partview_lnk' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partview_lnk`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `partview_lnk`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_ru_ru"
--
CREATE
VIEW v_autopartview_ru_ru
AS
SELECT
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `partview`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview`.`filterfield0` AS `partview_filterfield0`,
  `partview`.`filterfield2` AS `partview_filterfield2`,
  `partview`.`name` AS `partview_name`,
  `partview`.`the_alias` AS `partview_the_alias`,
  `partview`.`forchoose` AS `partview_forchoose_val`,
  (CASE `partview`.`forchoose` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `partview_forchoose`,
  `partview`.`filterfield1` AS `partview_filterfield1`,
  `partview`.`filterfield3` AS `partview_filterfield3`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview`.`partviewid`) AS `id`,
  'partview' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partview`
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoreports"
--
CREATE
VIEW v_autoreports
AS
SELECT
  `b2g`(`reports`.`reportsid`) AS `reportsid`,
  `reports`.`changestamp` AS `changestamp`,
  `b2g`(`reports`.`preparemethod`) AS `reports_preparemethod_id`,
  `sharedmethod_brief_f`(`reports`.`preparemethod`, NULL) AS `reports_preparemethod`,
  `reports`.`reporttype` AS `reports_reporttype_val`,
  (CASE `reports`.`reporttype` WHEN 4 THEN 'экспорт по excel шаблону' WHEN 0 THEN 'таблица' WHEN 3 THEN 'экспорт по word шаблону' WHEN 1 THEN 'двумерная матрица' WHEN 2 THEN 'только расчет' ELSE '' END) AS `reports_reporttype`,
  `reports`.`thecomment` AS `reports_thecomment`,
  `reports`.`name` AS `reports_name`,
  `reports`.`reportview` AS `reports_reportview`,
  `reports`.`caption` AS `reports_caption`,
  `reports`.`reportfile` AS `reports_reportfile`,
  `b2g`(`reports`.`thereportext`) AS `reports_thereportext_id`,
  `instance_brief_f`(`reports`.`thereportext`, NULL) AS `reports_thereportext`,
  `b2g`(`reports`.`instanceid`) AS `instanceid`,
  `reports`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`reports`.`reportsid`) AS `id`,
  'reports' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`reports`
  JOIN `instance`
    ON ((`reports`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoreports_en_us"
--
CREATE
VIEW v_autoreports_en_us
AS
SELECT
  `b2g`(`reports`.`reportsid`) AS `reportsid`,
  `reports`.`changestamp` AS `changestamp`,
  `b2g`(`reports`.`preparemethod`) AS `reports_preparemethod_id`,
  `sharedmethod_brief_f`(`reports`.`preparemethod`, 'en_us') AS `reports_preparemethod`,
  `reports`.`reporttype` AS `reports_reporttype_val`,
  (CASE `reports`.`reporttype` WHEN 4 THEN 'экспорт по excel шаблону' WHEN 0 THEN 'таблица' WHEN 3 THEN 'экспорт по word шаблону' WHEN 1 THEN 'двумерная матрица' WHEN 2 THEN 'только расчет' ELSE '' END) AS `reports_reporttype`,
  `reports`.`thecomment` AS `reports_thecomment`,
  `reports`.`name` AS `reports_name`,
  `reports`.`reportview` AS `reports_reportview`,
  `reports`.`caption` AS `reports_caption`,
  `reports`.`reportfile` AS `reports_reportfile`,
  `b2g`(`reports`.`thereportext`) AS `reports_thereportext_id`,
  `instance_brief_f`(`reports`.`thereportext`, 'en_us') AS `reports_thereportext`,
  `b2g`(`reports`.`instanceid`) AS `instanceid`,
  `reports`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`reports`.`reportsid`) AS `id`,
  'reports' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`reports`
  JOIN `instance`
    ON ((`reports`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoreports_ru_ru"
--
CREATE
VIEW v_autoreports_ru_ru
AS
SELECT
  `b2g`(`reports`.`reportsid`) AS `reportsid`,
  `reports`.`changestamp` AS `changestamp`,
  `b2g`(`reports`.`preparemethod`) AS `reports_preparemethod_id`,
  `sharedmethod_brief_f`(`reports`.`preparemethod`, 'ru_ru') AS `reports_preparemethod`,
  `reports`.`reporttype` AS `reports_reporttype_val`,
  (CASE `reports`.`reporttype` WHEN 4 THEN 'экспорт по excel шаблону' WHEN 0 THEN 'таблица' WHEN 3 THEN 'экспорт по word шаблону' WHEN 1 THEN 'двумерная матрица' WHEN 2 THEN 'только расчет' ELSE '' END) AS `reports_reporttype`,
  `reports`.`thecomment` AS `reports_thecomment`,
  `reports`.`name` AS `reports_name`,
  `reports`.`reportview` AS `reports_reportview`,
  `reports`.`caption` AS `reports_caption`,
  `reports`.`reportfile` AS `reports_reportfile`,
  `b2g`(`reports`.`thereportext`) AS `reports_thereportext_id`,
  `instance_brief_f`(`reports`.`thereportext`, 'ru_ru') AS `reports_thereportext`,
  `b2g`(`reports`.`instanceid`) AS `instanceid`,
  `reports`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`reports`.`reportsid`) AS `id`,
  'reports' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`reports`
  JOIN `instance`
    ON ((`reports`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptfields"
--
CREATE
VIEW v_autorptfields
AS
SELECT
  `b2g`(`rptfields`.`rptfieldsid`) AS `rptfieldsid`,
  `rptfields`.`changestamp` AS `changestamp`,
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptfields`.`name` AS `rptfields_name`,
  `rptfields`.`fieldsize` AS `rptfields_fieldsize`,
  `rptfields`.`caption` AS `rptfields_caption`,
  `b2g`(`rptfields`.`fieldtype`) AS `rptfields_fieldtype_id`,
  `fieldtype_brief_f`(`rptfields`.`fieldtype`, NULL) AS `rptfields_fieldtype`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptfields`.`rptfieldsid`) AS `id`,
  'rptfields' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`rptfields`
  JOIN `rptstruct`
    ON ((`rptstruct`.`rptstructid` = `rptfields`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptfields_en_us"
--
CREATE
VIEW v_autorptfields_en_us
AS
SELECT
  `b2g`(`rptfields`.`rptfieldsid`) AS `rptfieldsid`,
  `rptfields`.`changestamp` AS `changestamp`,
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptfields`.`name` AS `rptfields_name`,
  `rptfields`.`fieldsize` AS `rptfields_fieldsize`,
  `rptfields`.`caption` AS `rptfields_caption`,
  `b2g`(`rptfields`.`fieldtype`) AS `rptfields_fieldtype_id`,
  `fieldtype_brief_f`(`rptfields`.`fieldtype`, 'en_us') AS `rptfields_fieldtype`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptfields`.`rptfieldsid`) AS `id`,
  'rptfields' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`rptfields`
  JOIN `rptstruct`
    ON ((`rptstruct`.`rptstructid` = `rptfields`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptfields_ru_ru"
--
CREATE
VIEW v_autorptfields_ru_ru
AS
SELECT
  `b2g`(`rptfields`.`rptfieldsid`) AS `rptfieldsid`,
  `rptfields`.`changestamp` AS `changestamp`,
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptfields`.`name` AS `rptfields_name`,
  `rptfields`.`fieldsize` AS `rptfields_fieldsize`,
  `rptfields`.`caption` AS `rptfields_caption`,
  `b2g`(`rptfields`.`fieldtype`) AS `rptfields_fieldtype_id`,
  `fieldtype_brief_f`(`rptfields`.`fieldtype`, 'ru_ru') AS `rptfields_fieldtype`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptfields`.`rptfieldsid`) AS `id`,
  'rptfields' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`rptfields`
  JOIN `rptstruct`
    ON ((`rptstruct`.`rptstructid` = `rptfields`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptformula"
--
CREATE
VIEW v_autorptformula
AS
SELECT
  `b2g`(`rptformula`.`rptformulaid`) AS `rptformulaid`,
  `rptformula`.`changestamp` AS `changestamp`,
  `rptformula`.`name` AS `rptformula_name`,
  `b2g`(`rptformula`.`platform`) AS `rptformula_platform_id`,
  `generator_target_brief_f`(`rptformula`.`platform`, NULL) AS `rptformula_platform`,
  `rptformula`.`code` AS `rptformula_code`,
  `b2g`(`rptformula`.`instanceid`) AS `instanceid`,
  `rptformula`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptformula`.`rptformulaid`) AS `id`,
  'rptformula' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptformula`
  JOIN `instance`
    ON ((`rptformula`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptformula_en_us"
--
CREATE
VIEW v_autorptformula_en_us
AS
SELECT
  `b2g`(`rptformula`.`rptformulaid`) AS `rptformulaid`,
  `rptformula`.`changestamp` AS `changestamp`,
  `rptformula`.`name` AS `rptformula_name`,
  `b2g`(`rptformula`.`platform`) AS `rptformula_platform_id`,
  `generator_target_brief_f`(`rptformula`.`platform`, 'en_us') AS `rptformula_platform`,
  `rptformula`.`code` AS `rptformula_code`,
  `b2g`(`rptformula`.`instanceid`) AS `instanceid`,
  `rptformula`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptformula`.`rptformulaid`) AS `id`,
  'rptformula' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptformula`
  JOIN `instance`
    ON ((`rptformula`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptformula_ru_ru"
--
CREATE
VIEW v_autorptformula_ru_ru
AS
SELECT
  `b2g`(`rptformula`.`rptformulaid`) AS `rptformulaid`,
  `rptformula`.`changestamp` AS `changestamp`,
  `rptformula`.`name` AS `rptformula_name`,
  `b2g`(`rptformula`.`platform`) AS `rptformula_platform_id`,
  `generator_target_brief_f`(`rptformula`.`platform`, 'ru_ru') AS `rptformula_platform`,
  `rptformula`.`code` AS `rptformula_code`,
  `b2g`(`rptformula`.`instanceid`) AS `instanceid`,
  `rptformula`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptformula`.`rptformulaid`) AS `id`,
  'rptformula' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptformula`
  JOIN `instance`
    ON ((`rptformula`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptstruct"
--
CREATE
VIEW v_autorptstruct
AS
SELECT
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptstruct`.`changestamp` AS `changestamp`,
  `rptstruct`.`caption` AS `rptstruct_caption`,
  `rptstruct`.`name` AS `rptstruct_name`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptstruct`.`rptstructid`) AS `id`,
  'rptstruct' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptstruct`
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptstruct_en_us"
--
CREATE
VIEW v_autorptstruct_en_us
AS
SELECT
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptstruct`.`changestamp` AS `changestamp`,
  `rptstruct`.`caption` AS `rptstruct_caption`,
  `rptstruct`.`name` AS `rptstruct_name`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptstruct`.`rptstructid`) AS `id`,
  'rptstruct' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptstruct`
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptstruct_ru_ru"
--
CREATE
VIEW v_autorptstruct_ru_ru
AS
SELECT
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptstruct`.`changestamp` AS `changestamp`,
  `rptstruct`.`caption` AS `rptstruct_caption`,
  `rptstruct`.`name` AS `rptstruct_name`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptstruct`.`rptstructid`) AS `id`,
  'rptstruct' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptstruct`
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoscript"
--
CREATE
VIEW v_autoscript
AS
SELECT
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `script`.`changestamp` AS `changestamp`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `b2g`(`script`.`target`) AS `script_target_id`,
  `generator_target_brief_f`(`script`.`target`, NULL) AS `script_target`,
  `script`.`code` AS `script_code`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`script`.`scriptid`) AS `id`,
  'script' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`script`
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoscript_en_us"
--
CREATE
VIEW v_autoscript_en_us
AS
SELECT
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `script`.`changestamp` AS `changestamp`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `b2g`(`script`.`target`) AS `script_target_id`,
  `generator_target_brief_f`(`script`.`target`, 'en_us') AS `script_target`,
  `script`.`code` AS `script_code`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`script`.`scriptid`) AS `id`,
  'script' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`script`
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoscript_ru_ru"
--
CREATE
VIEW v_autoscript_ru_ru
AS
SELECT
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `script`.`changestamp` AS `changestamp`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `b2g`(`script`.`target`) AS `script_target_id`,
  `generator_target_brief_f`(`script`.`target`, 'ru_ru') AS `script_target`,
  `script`.`code` AS `script_code`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`script`.`scriptid`) AS `id`,
  'script' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`script`
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosharedmethod"
--
CREATE
VIEW v_autosharedmethod
AS
SELECT
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `sharedmethod`.`changestamp` AS `changestamp`,
  `sharedmethod`.`the_comment` AS `sharedmethod_the_comment`,
  `sharedmethod`.`name` AS `sharedmethod_name`,
  `b2g`(`sharedmethod`.`returntype`) AS `sharedmethod_returntype_id`,
  `fieldtype_brief_f`(`sharedmethod`.`returntype`, NULL) AS `sharedmethod_returntype`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `id`,
  'sharedmethod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sharedmethod`
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosharedmethod_en_us"
--
CREATE
VIEW v_autosharedmethod_en_us
AS
SELECT
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `sharedmethod`.`changestamp` AS `changestamp`,
  `sharedmethod`.`the_comment` AS `sharedmethod_the_comment`,
  `sharedmethod`.`name` AS `sharedmethod_name`,
  `b2g`(`sharedmethod`.`returntype`) AS `sharedmethod_returntype_id`,
  `fieldtype_brief_f`(`sharedmethod`.`returntype`, 'en_us') AS `sharedmethod_returntype`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `id`,
  'sharedmethod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sharedmethod`
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosharedmethod_ru_ru"
--
CREATE
VIEW v_autosharedmethod_ru_ru
AS
SELECT
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `sharedmethod`.`changestamp` AS `changestamp`,
  `sharedmethod`.`the_comment` AS `sharedmethod_the_comment`,
  `sharedmethod`.`name` AS `sharedmethod_name`,
  `b2g`(`sharedmethod`.`returntype`) AS `sharedmethod_returntype_id`,
  `fieldtype_brief_f`(`sharedmethod`.`returntype`, 'ru_ru') AS `sharedmethod_returntype`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `id`,
  'sharedmethod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sharedmethod`
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autostructrestriction"
--
CREATE
VIEW v_autostructrestriction
AS
SELECT
  `b2g`(`structrestriction`.`structrestrictionid`) AS `structrestrictionid`,
  `structrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`structrestriction`.`struct`) AS `structrestriction_struct_id`,
  `part_brief_f`(`structrestriction`.`struct`, NULL) AS `structrestriction_struct`,
  `structrestriction`.`allowedit` AS `structrestriction_allowedit_val`,
  (CASE `structrestriction`.`allowedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowedit`,
  `structrestriction`.`allowadd` AS `structrestriction_allowadd_val`,
  (CASE `structrestriction`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowadd`,
  `structrestriction`.`allowread` AS `structrestriction_allowread_val`,
  (CASE `structrestriction`.`allowread` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowread`,
  `structrestriction`.`allowdelete` AS `structrestriction_allowdelete_val`,
  (CASE `structrestriction`.`allowdelete` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowdelete`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`structrestriction`.`structrestrictionid`) AS `id`,
  'structrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`structrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `structrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autostructrestriction_en_us"
--
CREATE
VIEW v_autostructrestriction_en_us
AS
SELECT
  `b2g`(`structrestriction`.`structrestrictionid`) AS `structrestrictionid`,
  `structrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`structrestriction`.`struct`) AS `structrestriction_struct_id`,
  `part_brief_f`(`structrestriction`.`struct`, 'en_us') AS `structrestriction_struct`,
  `structrestriction`.`allowedit` AS `structrestriction_allowedit_val`,
  (CASE `structrestriction`.`allowedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowedit`,
  `structrestriction`.`allowadd` AS `structrestriction_allowadd_val`,
  (CASE `structrestriction`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowadd`,
  `structrestriction`.`allowread` AS `structrestriction_allowread_val`,
  (CASE `structrestriction`.`allowread` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowread`,
  `structrestriction`.`allowdelete` AS `structrestriction_allowdelete_val`,
  (CASE `structrestriction`.`allowdelete` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowdelete`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`structrestriction`.`structrestrictionid`) AS `id`,
  'structrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`structrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `structrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autostructrestriction_ru_ru"
--
CREATE
VIEW v_autostructrestriction_ru_ru
AS
SELECT
  `b2g`(`structrestriction`.`structrestrictionid`) AS `structrestrictionid`,
  `structrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`structrestriction`.`struct`) AS `structrestriction_struct_id`,
  `part_brief_f`(`structrestriction`.`struct`, 'ru_ru') AS `structrestriction_struct`,
  `structrestriction`.`allowedit` AS `structrestriction_allowedit_val`,
  (CASE `structrestriction`.`allowedit` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowedit`,
  `structrestriction`.`allowadd` AS `structrestriction_allowadd_val`,
  (CASE `structrestriction`.`allowadd` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowadd`,
  `structrestriction`.`allowread` AS `structrestriction_allowread_val`,
  (CASE `structrestriction`.`allowread` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowread`,
  `structrestriction`.`allowdelete` AS `structrestriction_allowdelete_val`,
  (CASE `structrestriction`.`allowdelete` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `structrestriction_allowdelete`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`structrestriction`.`structrestrictionid`) AS `id`,
  'structrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`structrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `structrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosyslog"
--
CREATE
VIEW v_autosyslog
AS
SELECT
  `b2g`(`syslog`.`syslogid`) AS `syslogid`,
  `syslog`.`changestamp` AS `changestamp`,
  `syslog`.`verb` AS `syslog_verb`,
  `syslog`.`logstructid` AS `syslog_logstructid`,
  `syslog`.`loginstanceid` AS `syslog_loginstanceid`,
  `syslog`.`the_resource` AS `syslog_the_resource`,
  `b2g`(`syslog`.`thesession`) AS `syslog_thesession_id`,
  `the_session_brief_f`(`syslog`.`thesession`, NULL) AS `syslog_thesession`,
  `b2g`(`syslog`.`instanceid`) AS `instanceid`,
  `syslog`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`syslog`.`syslogid`) AS `id`,
  'syslog' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`syslog`
  JOIN `instance`
    ON ((`syslog`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosyslog_en_us"
--
CREATE
VIEW v_autosyslog_en_us
AS
SELECT
  `b2g`(`syslog`.`syslogid`) AS `syslogid`,
  `syslog`.`changestamp` AS `changestamp`,
  `syslog`.`verb` AS `syslog_verb`,
  `syslog`.`logstructid` AS `syslog_logstructid`,
  `syslog`.`loginstanceid` AS `syslog_loginstanceid`,
  `syslog`.`the_resource` AS `syslog_the_resource`,
  `b2g`(`syslog`.`thesession`) AS `syslog_thesession_id`,
  `the_session_brief_f`(`syslog`.`thesession`, 'en_us') AS `syslog_thesession`,
  `b2g`(`syslog`.`instanceid`) AS `instanceid`,
  `syslog`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`syslog`.`syslogid`) AS `id`,
  'syslog' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`syslog`
  JOIN `instance`
    ON ((`syslog`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosyslog_ru_ru"
--
CREATE
VIEW v_autosyslog_ru_ru
AS
SELECT
  `b2g`(`syslog`.`syslogid`) AS `syslogid`,
  `syslog`.`changestamp` AS `changestamp`,
  `syslog`.`verb` AS `syslog_verb`,
  `syslog`.`logstructid` AS `syslog_logstructid`,
  `syslog`.`loginstanceid` AS `syslog_loginstanceid`,
  `syslog`.`the_resource` AS `syslog_the_resource`,
  `b2g`(`syslog`.`thesession`) AS `syslog_thesession_id`,
  `the_session_brief_f`(`syslog`.`thesession`, 'ru_ru') AS `syslog_thesession`,
  `b2g`(`syslog`.`instanceid`) AS `instanceid`,
  `syslog`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`syslog`.`syslogid`) AS `id`,
  'syslog' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`syslog`
  JOIN `instance`
    ON ((`syslog`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosysrefcache"
--
CREATE
VIEW v_autosysrefcache
AS
SELECT
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `sysrefcacheid`,
  `sysrefcache`.`changestamp` AS `changestamp`,
  `sysrefcache`.`objectownerid` AS `sysrefcache_objectownerid`,
  `sysrefcache`.`cachetype` AS `sysrefcache_cachetype_val`,
  (CASE `sysrefcache`.`cachetype` WHEN 4 THEN 'space' WHEN 3 THEN 'mark' WHEN 2 THEN 'odd' WHEN 0 THEN 'none' WHEN 1 THEN 'even' ELSE '' END) AS `sysrefcache_cachetype`,
  `b2g`(`sysrefcache`.`sessionid`) AS `sysrefcache_sessionid_id`,
  `the_session_brief_f`(`sysrefcache`.`sessionid`, NULL) AS `sysrefcache_sessionid`,
  `sysrefcache`.`modulename` AS `sysrefcache_modulename`,
  `b2g`(`sysrefcache`.`instanceid`) AS `instanceid`,
  `sysrefcache`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `id`,
  'sysrefcache' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sysrefcache`
  JOIN `instance`
    ON ((`sysrefcache`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosysrefcache_en_us"
--
CREATE
VIEW v_autosysrefcache_en_us
AS
SELECT
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `sysrefcacheid`,
  `sysrefcache`.`changestamp` AS `changestamp`,
  `sysrefcache`.`objectownerid` AS `sysrefcache_objectownerid`,
  `sysrefcache`.`cachetype` AS `sysrefcache_cachetype_val`,
  (CASE `sysrefcache`.`cachetype` WHEN 4 THEN 'space' WHEN 3 THEN 'mark' WHEN 2 THEN 'odd' WHEN 0 THEN 'none' WHEN 1 THEN 'even' ELSE '' END) AS `sysrefcache_cachetype`,
  `b2g`(`sysrefcache`.`sessionid`) AS `sysrefcache_sessionid_id`,
  `the_session_brief_f`(`sysrefcache`.`sessionid`, 'en_us') AS `sysrefcache_sessionid`,
  `sysrefcache`.`modulename` AS `sysrefcache_modulename`,
  `b2g`(`sysrefcache`.`instanceid`) AS `instanceid`,
  `sysrefcache`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `id`,
  'sysrefcache' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sysrefcache`
  JOIN `instance`
    ON ((`sysrefcache`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosysrefcache_ru_ru"
--
CREATE
VIEW v_autosysrefcache_ru_ru
AS
SELECT
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `sysrefcacheid`,
  `sysrefcache`.`changestamp` AS `changestamp`,
  `sysrefcache`.`objectownerid` AS `sysrefcache_objectownerid`,
  `sysrefcache`.`cachetype` AS `sysrefcache_cachetype_val`,
  (CASE `sysrefcache`.`cachetype` WHEN 4 THEN 'space' WHEN 3 THEN 'mark' WHEN 2 THEN 'odd' WHEN 0 THEN 'none' WHEN 1 THEN 'even' ELSE '' END) AS `sysrefcache_cachetype`,
  `b2g`(`sysrefcache`.`sessionid`) AS `sysrefcache_sessionid_id`,
  `the_session_brief_f`(`sysrefcache`.`sessionid`, 'ru_ru') AS `sysrefcache_sessionid`,
  `sysrefcache`.`modulename` AS `sysrefcache_modulename`,
  `b2g`(`sysrefcache`.`instanceid`) AS `instanceid`,
  `sysrefcache`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `id`,
  'sysrefcache' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sysrefcache`
  JOIN `instance`
    ON ((`sysrefcache`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autothe_session"
--
CREATE
VIEW v_autothe_session
AS
SELECT
  `b2g`(`the_session`.`the_sessionid`) AS `the_sessionid`,
  `the_session`.`changestamp` AS `changestamp`,
  `b2g`(`the_session`.`applicationid`) AS `the_session_applicationid_id`,
  `workplace_brief_f`(`the_session`.`applicationid`, NULL) AS `the_session_applicationid`,
  `b2g`(`the_session`.`userrole`) AS `the_session_userrole_id`,
  `groups_brief_f`(`the_session`.`userrole`, NULL) AS `the_session_userrole`,
  `the_session`.`lastaccess` AS `the_session_lastaccess`,
  `the_session`.`lang` AS `the_session_lang`,
  `the_session`.`startat` AS `the_session_startat`,
  `the_session`.`closed` AS `the_session_closed_val`,
  (CASE `the_session`.`closed` WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `the_session_closed`,
  `b2g`(`the_session`.`usersid`) AS `the_session_usersid_id`,
  `users_brief_f`(`the_session`.`usersid`, NULL) AS `the_session_usersid`,
  `the_session`.`login` AS `the_session_login`,
  `the_session`.`closedat` AS `the_session_closedat`,
  `b2g`(`the_session`.`instanceid`) AS `instanceid`,
  `the_session`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`the_session`.`the_sessionid`) AS `id`,
  'the_session' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`the_session`
  JOIN `instance`
    ON ((`the_session`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autothe_session_en_us"
--
CREATE
VIEW v_autothe_session_en_us
AS
SELECT
  `b2g`(`the_session`.`the_sessionid`) AS `the_sessionid`,
  `the_session`.`changestamp` AS `changestamp`,
  `b2g`(`the_session`.`applicationid`) AS `the_session_applicationid_id`,
  `workplace_brief_f`(`the_session`.`applicationid`, 'en_us') AS `the_session_applicationid`,
  `b2g`(`the_session`.`userrole`) AS `the_session_userrole_id`,
  `groups_brief_f`(`the_session`.`userrole`, 'en_us') AS `the_session_userrole`,
  `the_session`.`lastaccess` AS `the_session_lastaccess`,
  `the_session`.`lang` AS `the_session_lang`,
  `the_session`.`startat` AS `the_session_startat`,
  `the_session`.`closed` AS `the_session_closed_val`,
  (CASE `the_session`.`closed` WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `the_session_closed`,
  `b2g`(`the_session`.`usersid`) AS `the_session_usersid_id`,
  `users_brief_f`(`the_session`.`usersid`, 'en_us') AS `the_session_usersid`,
  `the_session`.`login` AS `the_session_login`,
  `the_session`.`closedat` AS `the_session_closedat`,
  `b2g`(`the_session`.`instanceid`) AS `instanceid`,
  `the_session`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`the_session`.`the_sessionid`) AS `id`,
  'the_session' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`the_session`
  JOIN `instance`
    ON ((`the_session`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autothe_session_ru_ru"
--
CREATE
VIEW v_autothe_session_ru_ru
AS
SELECT
  `b2g`(`the_session`.`the_sessionid`) AS `the_sessionid`,
  `the_session`.`changestamp` AS `changestamp`,
  `b2g`(`the_session`.`applicationid`) AS `the_session_applicationid_id`,
  `workplace_brief_f`(`the_session`.`applicationid`, 'ru_ru') AS `the_session_applicationid`,
  `b2g`(`the_session`.`userrole`) AS `the_session_userrole_id`,
  `groups_brief_f`(`the_session`.`userrole`, 'ru_ru') AS `the_session_userrole`,
  `the_session`.`lastaccess` AS `the_session_lastaccess`,
  `the_session`.`lang` AS `the_session_lang`,
  `the_session`.`startat` AS `the_session_startat`,
  `the_session`.`closed` AS `the_session_closed_val`,
  (CASE `the_session`.`closed` WHEN 1 THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `the_session_closed`,
  `b2g`(`the_session`.`usersid`) AS `the_session_usersid_id`,
  `users_brief_f`(`the_session`.`usersid`, 'ru_ru') AS `the_session_usersid`,
  `the_session`.`login` AS `the_session_login`,
  `the_session`.`closedat` AS `the_session_closedat`,
  `b2g`(`the_session`.`instanceid`) AS `instanceid`,
  `the_session`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`the_session`.`the_sessionid`) AS `id`,
  'the_session' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`the_session`
  JOIN `instance`
    ON ((`the_session`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autotypemenu"
--
CREATE
VIEW v_autotypemenu
AS
SELECT
  `b2g`(`typemenu`.`typemenuid`) AS `typemenuid`,
  `typemenu`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `typemenu`.`ismenuitem` AS `typemenu_ismenuitem_val`,
  (CASE `typemenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `typemenu_ismenuitem`,
  `typemenu`.`istoolbarbutton` AS `typemenu_istoolbarbutton_val`,
  (CASE `typemenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `typemenu_istoolbarbutton`,
  `typemenu`.`name` AS `typemenu_name`,
  `typemenu`.`hotkey` AS `typemenu_hotkey`,
  `typemenu`.`caption` AS `typemenu_caption`,
  `typemenu`.`tooltip` AS `typemenu_tooltip`,
  `b2g`(`typemenu`.`the_action`) AS `typemenu_the_action_id`,
  `sharedmethod_brief_f`(`typemenu`.`the_action`, NULL) AS `typemenu_the_action`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`typemenu`.`typemenuid`) AS `id`,
  'typemenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`typemenu`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `typemenu`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autotypemenu_en_us"
--
CREATE
VIEW v_autotypemenu_en_us
AS
SELECT
  `b2g`(`typemenu`.`typemenuid`) AS `typemenuid`,
  `typemenu`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `typemenu`.`ismenuitem` AS `typemenu_ismenuitem_val`,
  (CASE `typemenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `typemenu_ismenuitem`,
  `typemenu`.`istoolbarbutton` AS `typemenu_istoolbarbutton_val`,
  (CASE `typemenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `typemenu_istoolbarbutton`,
  `typemenu`.`name` AS `typemenu_name`,
  `typemenu`.`hotkey` AS `typemenu_hotkey`,
  `typemenu`.`caption` AS `typemenu_caption`,
  `typemenu`.`tooltip` AS `typemenu_tooltip`,
  `b2g`(`typemenu`.`the_action`) AS `typemenu_the_action_id`,
  `sharedmethod_brief_f`(`typemenu`.`the_action`, 'en_us') AS `typemenu_the_action`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`typemenu`.`typemenuid`) AS `id`,
  'typemenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`typemenu`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `typemenu`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autotypemenu_ru_ru"
--
CREATE
VIEW v_autotypemenu_ru_ru
AS
SELECT
  `b2g`(`typemenu`.`typemenuid`) AS `typemenuid`,
  `typemenu`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `typemenu`.`ismenuitem` AS `typemenu_ismenuitem_val`,
  (CASE `typemenu`.`ismenuitem` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `typemenu_ismenuitem`,
  `typemenu`.`istoolbarbutton` AS `typemenu_istoolbarbutton_val`,
  (CASE `typemenu`.`istoolbarbutton` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `typemenu_istoolbarbutton`,
  `typemenu`.`name` AS `typemenu_name`,
  `typemenu`.`hotkey` AS `typemenu_hotkey`,
  `typemenu`.`caption` AS `typemenu_caption`,
  `typemenu`.`tooltip` AS `typemenu_tooltip`,
  `b2g`(`typemenu`.`the_action`) AS `typemenu_the_action_id`,
  `sharedmethod_brief_f`(`typemenu`.`the_action`, 'ru_ru') AS `typemenu_the_action`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`typemenu`.`typemenuid`) AS `id`,
  'typemenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`typemenu`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `typemenu`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autouniqueconstraint"
--
CREATE
VIEW v_autouniqueconstraint
AS
SELECT
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `uniqueconstraint`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `uniqueconstraint`.`perparent` AS `uniqueconstraint_perparent_val`,
  (CASE `uniqueconstraint`.`perparent` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `uniqueconstraint_perparent`,
  `uniqueconstraint`.`thecomment` AS `uniqueconstraint_thecomment`,
  `uniqueconstraint`.`name` AS `uniqueconstraint_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `id`,
  'uniqueconstraint' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`uniqueconstraint`
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autouniqueconstraint_en_us"
--
CREATE
VIEW v_autouniqueconstraint_en_us
AS
SELECT
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `uniqueconstraint`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `uniqueconstraint`.`perparent` AS `uniqueconstraint_perparent_val`,
  (CASE `uniqueconstraint`.`perparent` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `uniqueconstraint_perparent`,
  `uniqueconstraint`.`thecomment` AS `uniqueconstraint_thecomment`,
  `uniqueconstraint`.`name` AS `uniqueconstraint_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `id`,
  'uniqueconstraint' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`uniqueconstraint`
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autouniqueconstraint_ru_ru"
--
CREATE
VIEW v_autouniqueconstraint_ru_ru
AS
SELECT
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `uniqueconstraint`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `uniqueconstraint`.`perparent` AS `uniqueconstraint_perparent_val`,
  (CASE `uniqueconstraint`.`perparent` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `uniqueconstraint_perparent`,
  `uniqueconstraint`.`thecomment` AS `uniqueconstraint_thecomment`,
  `uniqueconstraint`.`name` AS `uniqueconstraint_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `id`,
  'uniqueconstraint' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`uniqueconstraint`
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autousers"
--
CREATE
VIEW v_autousers
AS
SELECT
  `b2g`(`users`.`usersid`) AS `usersid`,
  `users`.`changestamp` AS `changestamp`,
  `users`.`domainame` AS `users_domainame`,
  `users`.`email` AS `users_email`,
  `users`.`login` AS `users_login`,
  `users`.`phone` AS `users_phone`,
  `users`.`surname` AS `users_surname`,
  `users`.`name` AS `users_name`,
  `users`.`localphone` AS `users_localphone`,
  `users`.`family` AS `users_family`,
  `b2g`(`users`.`instanceid`) AS `instanceid`,
  `users`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`users`.`usersid`) AS `id`,
  'users' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`users`
  JOIN `instance`
    ON ((`users`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autousers_en_us"
--
CREATE
VIEW v_autousers_en_us
AS
SELECT
  `b2g`(`users`.`usersid`) AS `usersid`,
  `users`.`changestamp` AS `changestamp`,
  `users`.`domainame` AS `users_domainame`,
  `users`.`email` AS `users_email`,
  `users`.`login` AS `users_login`,
  `users`.`phone` AS `users_phone`,
  `users`.`surname` AS `users_surname`,
  `users`.`name` AS `users_name`,
  `users`.`localphone` AS `users_localphone`,
  `users`.`family` AS `users_family`,
  `b2g`(`users`.`instanceid`) AS `instanceid`,
  `users`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`users`.`usersid`) AS `id`,
  'users' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`users`
  JOIN `instance`
    ON ((`users`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autousers_ru_ru"
--
CREATE
VIEW v_autousers_ru_ru
AS
SELECT
  `b2g`(`users`.`usersid`) AS `usersid`,
  `users`.`changestamp` AS `changestamp`,
  `users`.`domainame` AS `users_domainame`,
  `users`.`email` AS `users_email`,
  `users`.`login` AS `users_login`,
  `users`.`phone` AS `users_phone`,
  `users`.`surname` AS `users_surname`,
  `users`.`name` AS `users_name`,
  `users`.`localphone` AS `users_localphone`,
  `users`.`family` AS `users_family`,
  `b2g`(`users`.`instanceid`) AS `instanceid`,
  `users`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`users`.`usersid`) AS `id`,
  'users' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`users`
  JOIN `instance`
    ON ((`users`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autovalidator"
--
CREATE
VIEW v_autovalidator
AS
SELECT
  `b2g`(`validator`.`validatorid`) AS `validatorid`,
  `validator`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `validator`.`code` AS `validator_code`,
  `b2g`(`validator`.`target`) AS `validator_target_id`,
  `generator_target_brief_f`(`validator`.`target`, NULL) AS `validator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`validator`.`validatorid`) AS `id`,
  'validator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`validator`
  JOIN `part`
    ON ((`part`.`partid` = `validator`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autovalidator_en_us"
--
CREATE
VIEW v_autovalidator_en_us
AS
SELECT
  `b2g`(`validator`.`validatorid`) AS `validatorid`,
  `validator`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `validator`.`code` AS `validator_code`,
  `b2g`(`validator`.`target`) AS `validator_target_id`,
  `generator_target_brief_f`(`validator`.`target`, 'en_us') AS `validator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`validator`.`validatorid`) AS `id`,
  'validator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`validator`
  JOIN `part`
    ON ((`part`.`partid` = `validator`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autovalidator_ru_ru"
--
CREATE
VIEW v_autovalidator_ru_ru
AS
SELECT
  `b2g`(`validator`.`validatorid`) AS `validatorid`,
  `validator`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `validator`.`code` AS `validator_code`,
  `b2g`(`validator`.`target`) AS `validator_target_id`,
  `generator_target_brief_f`(`validator`.`target`, 'ru_ru') AS `validator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`validator`.`validatorid`) AS `id`,
  'validator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`validator`
  JOIN `part`
    ON ((`part`.`partid` = `validator`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoviewcolumn"
--
CREATE
VIEW v_autoviewcolumn
AS
SELECT
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `viewcolumnid`,
  `viewcolumn`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `viewcolumn`.`name` AS `viewcolumn_name`,
  `viewcolumn`.`the_alias` AS `viewcolumn_the_alias`,
  `viewcolumn`.`sequence` AS `viewcolumn_sequence`,
  `b2g`(`viewcolumn`.`frompart`) AS `viewcolumn_frompart_id`,
  `part_brief_f`(`viewcolumn`.`frompart`, NULL) AS `viewcolumn_frompart`,
  `viewcolumn`.`forcombo` AS `viewcolumn_forcombo_val`,
  (CASE `viewcolumn`.`forcombo` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `viewcolumn_forcombo`,
  `viewcolumn`.`expression` AS `viewcolumn_expression`,
  `viewcolumn`.`aggregation` AS `viewcolumn_aggregation_val`,
  (CASE `viewcolumn`.`aggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `viewcolumn_aggregation`,
  `b2g`(`viewcolumn`.`field`) AS `viewcolumn_field_id`,
  `field_brief_f`(`viewcolumn`.`field`, NULL) AS `viewcolumn_field`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `id`,
  'viewcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`viewcolumn`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `viewcolumn`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoviewcolumn_en_us"
--
CREATE
VIEW v_autoviewcolumn_en_us
AS
SELECT
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `viewcolumnid`,
  `viewcolumn`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `viewcolumn`.`name` AS `viewcolumn_name`,
  `viewcolumn`.`the_alias` AS `viewcolumn_the_alias`,
  `viewcolumn`.`sequence` AS `viewcolumn_sequence`,
  `b2g`(`viewcolumn`.`frompart`) AS `viewcolumn_frompart_id`,
  `part_brief_f`(`viewcolumn`.`frompart`, 'en_us') AS `viewcolumn_frompart`,
  `viewcolumn`.`forcombo` AS `viewcolumn_forcombo_val`,
  (CASE `viewcolumn`.`forcombo` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `viewcolumn_forcombo`,
  `viewcolumn`.`expression` AS `viewcolumn_expression`,
  `viewcolumn`.`aggregation` AS `viewcolumn_aggregation_val`,
  (CASE `viewcolumn`.`aggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `viewcolumn_aggregation`,
  `b2g`(`viewcolumn`.`field`) AS `viewcolumn_field_id`,
  `field_brief_f`(`viewcolumn`.`field`, 'en_us') AS `viewcolumn_field`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `id`,
  'viewcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`viewcolumn`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `viewcolumn`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoviewcolumn_ru_ru"
--
CREATE
VIEW v_autoviewcolumn_ru_ru
AS
SELECT
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `viewcolumnid`,
  `viewcolumn`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `viewcolumn`.`name` AS `viewcolumn_name`,
  `viewcolumn`.`the_alias` AS `viewcolumn_the_alias`,
  `viewcolumn`.`sequence` AS `viewcolumn_sequence`,
  `b2g`(`viewcolumn`.`frompart`) AS `viewcolumn_frompart_id`,
  `part_brief_f`(`viewcolumn`.`frompart`, 'ru_ru') AS `viewcolumn_frompart`,
  `viewcolumn`.`forcombo` AS `viewcolumn_forcombo_val`,
  (CASE `viewcolumn`.`forcombo` WHEN -(1) THEN 'да' WHEN 0 THEN 'нет' ELSE '' END) AS `viewcolumn_forcombo`,
  `viewcolumn`.`expression` AS `viewcolumn_expression`,
  `viewcolumn`.`aggregation` AS `viewcolumn_aggregation_val`,
  (CASE `viewcolumn`.`aggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `viewcolumn_aggregation`,
  `b2g`(`viewcolumn`.`field`) AS `viewcolumn_field_id`,
  `field_brief_f`(`viewcolumn`.`field`, 'ru_ru') AS `viewcolumn_field`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `id`,
  'viewcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`viewcolumn`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `viewcolumn`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoworkplace"
--
CREATE
VIEW v_autoworkplace
AS
SELECT
  `b2g`(`workplace`.`workplaceid`) AS `workplaceid`,
  `workplace`.`changestamp` AS `changestamp`,
  `workplace`.`theplatform` AS `workplace_theplatform_val`,
  (CASE `workplace`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `workplace_theplatform`,
  `workplace`.`theversion` AS `workplace_theversion`,
  `workplace`.`caption` AS `workplace_caption`,
  `workplace`.`thecomment` AS `workplace_thecomment`,
  `workplace`.`name` AS `workplace_name`,
  `b2g`(`workplace`.`instanceid`) AS `instanceid`,
  `workplace`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`workplace`.`workplaceid`) AS `id`,
  'workplace' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`workplace`
  JOIN `instance`
    ON ((`workplace`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoworkplace_en_us"
--
CREATE
VIEW v_autoworkplace_en_us
AS
SELECT
  `b2g`(`workplace`.`workplaceid`) AS `workplaceid`,
  `workplace`.`changestamp` AS `changestamp`,
  `workplace`.`theplatform` AS `workplace_theplatform_val`,
  (CASE `workplace`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `workplace_theplatform`,
  `workplace`.`theversion` AS `workplace_theversion`,
  `workplace`.`caption` AS `workplace_caption`,
  `workplace`.`thecomment` AS `workplace_thecomment`,
  `workplace`.`name` AS `workplace_name`,
  `b2g`(`workplace`.`instanceid`) AS `instanceid`,
  `workplace`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`workplace`.`workplaceid`) AS `id`,
  'workplace' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`workplace`
  JOIN `instance`
    ON ((`workplace`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoworkplace_ru_ru"
--
CREATE
VIEW v_autoworkplace_ru_ru
AS
SELECT
  `b2g`(`workplace`.`workplaceid`) AS `workplaceid`,
  `workplace`.`changestamp` AS `changestamp`,
  `workplace`.`theplatform` AS `workplace_theplatform_val`,
  (CASE `workplace`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `workplace_theplatform`,
  `workplace`.`theversion` AS `workplace_theversion`,
  `workplace`.`caption` AS `workplace_caption`,
  `workplace`.`thecomment` AS `workplace_thecomment`,
  `workplace`.`name` AS `workplace_name`,
  `b2g`(`workplace`.`instanceid`) AS `instanceid`,
  `workplace`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`workplace`.`workplaceid`) AS `id`,
  'workplace' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`workplace`
  JOIN `instance`
    ON ((`workplace`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_instance"
--
CREATE
VIEW v_instance
AS
SELECT
  `b2g`(`instance`.`instanceid`) AS `instanceid`,
  `instance`.`lockuserid` AS `lockuserid`,
  `instance`.`locksessionid` AS `locksessionid`,
  `instance`.`securitystyleid` AS `securitystyleid`,
  `instance`.`name` AS `name`,
  `instance`.`objtype` AS `objtype`,
  `instance`.`ownerpartname` AS `ownerpartname`,
  `instance`.`ownerrowid` AS `ownerrowid`,
  `instance`.`status` AS `status`,
  `instance`.`archived` AS `archived`,
  `objstatus`.`name` AS `statusname`,
  `objstatus`.`isarchive` AS `isarchive`
FROM (`instance`
  LEFT JOIN `objstatus`
    ON ((`instance`.`status` = `objstatus`.`objstatusid`)));

-- 
-- Вывод данных для таблицы armjournal
--
-- Таблица survey.armjournal не содержит данных

-- 
-- Вывод данных для таблицы armjrnladd
--
-- Таблица survey.armjrnladd не содержит данных

-- 
-- Вывод данных для таблицы armjrnlrep
--
-- Таблица survey.armjrnlrep не содержит данных

-- 
-- Вывод данных для таблицы armjrnlrun
--
-- Таблица survey.armjrnlrun не содержит данных

-- 
-- Вывод данных для таблицы armtypes
--
-- Таблица survey.armtypes не содержит данных

-- 
-- Вывод данных для таблицы bpc_info
--
-- Таблица survey.bpc_info не содержит данных

-- 
-- Вывод данных для таблицы constraintfield
--
BEGIN;
INSERT INTO constraintfield VALUES
(x'81D6F8362AD53E4398ECDFD1117707A0', x'150A85055145F242A8EAEE81E1E27BBC', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, x'42304E8EC6032641BD107C3650D5B95B'),
(x'1EA2D09E0607EE49BD235F831A3A86FE', x'15492E0877260D49819517935015063A', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, x'CBBDBBA277AA5E479D3646AB5813CC27'),
(x'F897A51A2519C24394094B0652F21393', x'19ACF35E250B2644AB880DB8CBA8DA66', '2012-01-20 14:40:03', '2017-12-25 16:21:53', NULL, NULL, NULL, x'AEDE10BB9DE8344784444750220B79CE'),
(x'67C210AE9B069744A00619B350F5B93E', x'1BEE9539A343D3448B80CFCE5E5A90A5', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, x'BF56BA07E0FBCF468477AEE9C5EBFDCF'),
(x'B36BE8D930DFC34BB956901494C38D54', x'33E8C0DAE62FDE48AEAE843A7BF8F5FB', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, x'3743A2DC2CBB3A4696C0C37D6420679E'),
(x'589DD1A7F33C2440B5AFB80CF77A9937', x'396619AC0C713243AF89A7B13754CBB5', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, x'7DFC5301479BCC4384058339935320D4'),
(x'BDC473920492764EA6719F31ED575F68', x'3C4D70EAB393934286A59721303686BF', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, x'0FC7B0C75B17FA4CB81A328B0E29BF29'),
(x'5C9CC0540AFF494F927085CEEA24BB0D', x'475D40BD8BECC74EA646696C72FA3A1D', '2012-01-20 14:40:03', '2017-12-25 16:21:54', NULL, NULL, NULL, x'431F95DC8A34644CA248B9D11833BB46'),
(x'BF4B14AAC5E5714C9FF4BFB3368255B4', x'753DAA9E5434474F852456280498CABB', '2012-01-20 14:40:03', '2017-12-25 16:21:54', NULL, NULL, NULL, x'D77E3939283C4F41A18859E103B21F4A'),
(x'9A5A0FCD89DF784CA4EF78D5BD35525B', x'75C6053EBED02640AFB56F462A6D6EEF', '2012-11-20 14:11:52', '2017-12-25 16:21:54', NULL, NULL, NULL, x'24C4148E04FA8D4C8C74C28806A34ACD'),
(x'976E7B4F8E0E8344BC8733748BE210AF', x'75FF4CC5A7C32143903604D2D6233262', '2012-01-20 14:40:16', '2017-12-25 16:21:54', NULL, NULL, NULL, x'AB684CDF96732C44AF236BB1B7665B06'),
(x'2C69018196A768478ECB0316B5E9490F', x'79E7E4F70B7ED640BA48028010E0E59D', '2012-01-20 14:40:16', '2017-12-25 16:21:54', NULL, NULL, NULL, x'149976562DCDFF4F87242CCCC2209F72'),
(x'9C54DB9F2768EB45889BA167951C77F0', x'8A0C00ABD3B5EC46A23B888268EFB79D', '2012-01-20 14:40:15', '2017-12-25 16:21:54', NULL, NULL, NULL, x'56CA28FB7CD6054DAB844CC5D9A88066'),
(x'229DE7AE828F9A4F8D6F33328A7AAC05', x'8F42789808FA3543816EDC25789984B8', '2012-01-20 14:39:58', '2017-12-25 16:21:54', NULL, NULL, NULL, x'E24A0AA894472E4CA774277DD8C7E986'),
(x'549833E56278BF41A477601B9171F82F', x'9223802F1EC9C343B46B670DF6ACEAF6', '2012-11-20 14:11:52', '2017-12-25 16:21:54', NULL, NULL, NULL, x'431F95DC8A34644CA248B9D11833BB46'),
(x'B0C3538245A032429A6C934BCFD14E5E', x'94AB89F1C1B4D543959CBD91FB444A22', '2012-01-20 14:40:03', '2017-12-25 16:21:54', NULL, NULL, NULL, x'D25BACD9ABC3CB46A6302AD0EF3C5652'),
(x'10505EA1192FDA45BBDF11224A89BBD3', x'998CE7AD224B5546BBEB8428FEECBC09', '2012-01-20 14:39:58', '2017-12-25 16:21:54', NULL, NULL, NULL, x'422E7BC75803914FBDD2B95A66B1EB25'),
(x'54AA42ED60A7E645B47222249907756C', x'A6FEB36743005247A4D7DD443D1E5BA2', '2012-01-20 14:40:15', '2017-12-25 16:21:54', NULL, NULL, NULL, x'98CD861EC37BF847A69186227D01E40C'),
(x'D5713D7A4386B140B50E6B3B1FCFB08A', x'DA777B9FD629BB46A3D8D2D530E7F117', '2012-01-20 14:40:13', '2017-12-25 16:21:54', NULL, NULL, NULL, x'533A99AC9B5E1143A1ABF80C00923883'),
(x'0233B7117039A34F8F1A3272C3403647', x'EF92B6674E0E7E47BC006F172DE6762D', '2012-01-20 14:40:15', '2017-12-25 16:21:54', NULL, NULL, NULL, x'090365079152D44B90EB3B8118356905'),
(x'14596031B53AAF4991E971736A604FCC', x'F16616019529AA4496DE89A895053573', '2012-01-20 14:40:13', '2017-12-25 16:21:54', NULL, NULL, NULL, x'576D4D6F03EEBE4595BC51DF2D9FB41C'),
(x'83506B856DD42848BDABFA523D1C5E34', x'F71ACCAA8CA3D7449EBD2F23D7BB3177', '2012-01-20 14:39:58', '2017-12-25 16:21:54', NULL, NULL, NULL, x'AF477A68B568DD4D928F9229BE67CE36');
COMMIT;

-- 
-- Вывод данных для таблицы dinamicfilterscript
--
-- Таблица survey.dinamicfilterscript не содержит данных

-- 
-- Вывод данных для таблицы entrypoints
--
-- Таблица survey.entrypoints не содержит данных

-- 
-- Вывод данных для таблицы enumitem
--
BEGIN;
INSERT INTO enumitem VALUES
(x'9BAEE12ABF21B44BA554096D5B959903', x'009559227425124CB4658F03C797BC1A', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'PeriodicFunction', 3, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'01535044EC3B0546ABF6A0C737EB4EB6', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Май', 5, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'0518A41B32F8614985826AD7A5F174A2', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Роль', 8, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'0551019ED6548F499AA1D3AF6F1FFE5E', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Сообщено абоненту', 1, NULL),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'05999BBF92BC734BAF0F7EA28CE982B9', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Document', 0, NULL),
(x'728E3461855DE34892C434841FA1AA8F', x'084215ABBA680149B60F92E0E4EF07B6', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'As String', 0, NULL),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'09F1C3221A7CC942BADD70CF60CDB449', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Process', 2, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'0D6ADB8F228F004C8926C2D335A865BA', '2012-01-20 14:40:21', '2017-12-25 16:20:24', NULL, NULL, NULL, 'OTHER', 3, 'OTHER'),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'0DDA40E52BD74143A3ED675441DAE885', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Ссылка', 4, NULL),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'0E142804CF9BAC43BB4276E75A8B5230', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Получатель', 1, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'0EF46AC9845D6240B77CB913826FE469', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Экспорт по Excel шаблону', 4, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'1209CA4A83B80945BD8A2C2B558D7C81', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'SUM', 3, NULL),
(x'E0280E0D19D66A49BF995F9F28321C74', x'12AD44C8A1A7A143B65079E7005829E5', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Да', 1, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'12C8C2F832AB804EAADBFD0C472C4D8F', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Удаленные', 3, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'1337DBA1D9124943A77E32EFBBCE928B', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'СУБД', 0, NULL),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'13C9AF73FD92BF4BA6EA2FF0CA899600', '2012-01-20 14:40:21', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Не существенно', -1, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'1605A9D704F60C4B97BF5E17646538C0', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'По кварталу', 2, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'16252324026FAE48ADF0C3A628E9887C', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Число', 0, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'16744BAB2327E14199703EDA70279DB2', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Выражение', 2, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'17AD5B366D72A6468789144A41A3B399', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'AVG', 1, NULL),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'1936685FBF1E044C91BD2EDE895DA4B0', '2012-01-20 14:40:21', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Открыть документ', 2, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'19A4796EA759A34AB5C6DB629960571F', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Четверг', 4, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'1A5703B160AB4C44BDA406B2A3965206', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Дата', 1, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'1C20F2C04B3F8342ADA85988D89D00D9', '2012-01-20 14:40:19', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Сентябрь', 9, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'1DCC25ECA3A77945999A635103771D4E', '2012-01-20 14:40:20', '2017-12-25 16:20:24', NULL, NULL, NULL, 'Объект', 4, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'1ED8AA0BA686594A94CEDAB69358C111', '2012-01-20 14:40:21', '2017-12-25 16:20:24', NULL, NULL, NULL, 'DOTNET', 1, 'DOTNET'),
(x'65348B4111516148B4C5E9535B3FD7B3', x'1F20294966672D43B895B03DE079CC94', '2013-01-28 13:14:00', '2017-12-25 16:20:24', NULL, NULL, NULL, 'I', 1, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'2294747B39B92543A87BD2CE13450A1C', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'CUSTOM', 6, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'254E9E0D04A82A4C858104C9C67301F2', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Документ', 5, NULL),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'25B5850C826230429DE2C8259A053944', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Не существенно', 0, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'2645E0B05DA13B4485DF49BE14A9635B', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Таблица', 0, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'28CC47203248504996AFB28B488D4296', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Нет', 0, 'LNK_NO'),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'29824BF487BF12408822DB02AB157F52', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Строка атрибутов', 0, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'2A6D2B6749D5864AAF2049494C50300C', '2013-05-06 12:13:04', '2017-12-25 16:20:25', NULL, NULL, NULL, 'IV', 4, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'2B093A6A674FA548B3D99736548A8B7F', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Выражение', 1, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'2C043ED4BB47164C9CA62B0FBB162A14', '2012-01-20 14:40:22', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Processed', 8, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'2C49CEFF814355438E066B4F0ACEA451', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Входящие', 1, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'2DB889EDBA5E264294635F7B7367E7A8', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Экспорт по WORD шаблону', 3, NULL),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'2F2BF29663DAC14491523DBE0DA89B3C', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Частичная', 1, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'337B7817FDE28242BDE2124693B0BEA1', '2015-07-06 16:47:47', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Space', 4, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'35578CD79B86D04280B93227489427AF', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Коллекция', 1, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'355CA17083150D479CB59AED1C5C4F7E', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Запустить АРМ', 4, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'35BAE722580ABD448E8CD2C98E814E40', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, '<', 6, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'37522C1E10BCC44E92F3B2A1224D0023', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Доставлено', 4, NULL),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'38775ECD6C9DDF41BB62B5EE98E6A054', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Коллекция', 1, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'39A40BB22DE34E4A8185400831E8C4C9', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Выполнить метод', 2, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'39D144E249630E4482ACAECB60D2A92C', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Отложенные', 9, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'3C002ADB1E050345A4F2B787FD485C5B', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Суббота', 6, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'4007624AA4B2A643BB70B03B00551BB8', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Журнал', 4, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'41C59E21A77A58429DA17036D95B6037', '2012-01-20 14:40:20', '2017-12-25 16:20:25', NULL, NULL, NULL, 'На источник данных', 3, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'41DFF6516FC4F7498FBD2EE812D38B55', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Pause', 3, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'42151CD45C265140B0F59D1CCE44E14A', '2012-01-20 14:40:19', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Right Top', 6, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'42AAA4B51982B44686DF299D9165914C', '2012-01-20 14:40:21', '2017-12-25 16:20:25', NULL, NULL, NULL, 'Не важно', -1, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'4431D2D719EE8F4BA3736F73ADCC3CDF', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Документация', 3, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'446B7EF06ED2574AB0DAEFB731C9C8C9', '2015-07-06 16:47:47', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Mark', 3, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'44C03E0B8A0A224FA0EC8FDCBB1E36D7', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Справочник', 2, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'47D9CD988353124C90316797E96E6C26', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Июнь', 6, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'48F6CB7245C78141008700676E54DF1F', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Понедельник', 1, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'49612793DDC5DF428DA89B51F7B2F995', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, '>=', 4, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'49945C7126D7F4468F78F79CEFC23AED', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Принято', 2, NULL),
(x'C608D44CBE64964787E545A26D3B3DDA', x'4AE42C432D9CA54783651B33CB9F6286', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'AddForm', 0, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'4C62B4147628DB48B96C214CDD997791', '2012-01-20 14:40:21', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Среднее', 1, NULL),
(x'5E820B7D3C8CA244AC6EE53812337737', x'4E42AE0A7585204498798DD8B95F2A20', '2012-01-20 14:40:21', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Евро', 2, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'503BBB35F361B74B9DC3CF3282E1A3FD', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Дерево', 2, NULL),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'50DA56CEFB4259439AB174700AB9F971', '2012-01-20 14:40:22', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Групповой', 2, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'547DAC8316B73543BCC5A66377FC5700', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, '<=', 7, NULL),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'59F37C9F8708854C882A8EF3EB844FF3', '2012-01-20 14:40:22', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Построчно', 1, NULL),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'5A110E39E629044B8244430CAB062DEA', '2015-12-20 13:27:35', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Мужской', 2, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'5B2E6176C5391847B1F84CC2F9A89F09', '2012-01-20 14:40:21', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Высшее', 4, NULL),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'5C46F59F7139F641800345E540EDEC59', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Function', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'5DDB95B1E6915B4186D57A5DFE233377', '2012-01-20 14:40:22', '2017-12-25 16:20:26', NULL, NULL, NULL, 'VerifyRowExt', 6, 'VerifyRowExt'),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'5E7392CC89322C43B8347651A8F15265', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Поле', 7, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'5ED92E02DC348B479BDE11BFF069D140', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Active', 2, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'5FE15E9FE865FC47006FF27C3CE966E6', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Воскресенье', 7, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'614EE9F764F7B14EAB7095A5526A5359', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'По месяцу', 3, NULL),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'61B01F00C51C894D8A83F321ED72B5D4', '2012-01-20 14:40:22', '2017-12-25 16:20:26', NULL, NULL, NULL, ' Общий', 0, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'622BBE6A41A43944BE0CAA3D1256691E', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Связка ParentStructRowID  (в передлах объекта)', 4, 'LNK_ParentStructRowID'),
(x'3A3878A9883FD34787A231AF949E53B1', x'624B5B0C8D6B3E4DAD6410F8F4815284', '2012-01-20 14:40:19', '2017-12-25 16:20:26', NULL, NULL, NULL, 'Открыть отчет', 5, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'627B83F384BA36419CF9DB82EC2F930C', '2012-01-20 14:40:20', '2017-12-25 16:20:26', NULL, NULL, NULL, 'none', 0, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'63CDDF731B807F449B123836F6B5F0AD', '2012-01-20 14:40:22', '2017-12-25 16:20:27', NULL, NULL, NULL, 'CodeGenerator', 7, 'CodeGenerator'),
(x'12EEAA312481754EBD16698F4235234B', x'65D18D4389DFCA4DB3E62168A0BCA934', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Двумерная матрица', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'660528DCCFEBCC44874DBE3B5B049372', '2012-01-20 14:40:22', '2017-12-25 16:20:27', NULL, NULL, NULL, 'DefaultExt', 5, 'DefaultExt'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'6658722B88427E448EB92960736C3EA1', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Декабрь', 12, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'6725ED721AD44A47ACF925D7A9D09DF9', '2013-05-06 12:13:04', '2017-12-25 16:20:27', NULL, NULL, NULL, '?', 0, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'68C9D24AE62EB04F9A7DD863606922D5', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Скалярное поле ( не ссылка)', 0, NULL),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'6CD7A5BE7B3E54459E09ECA7BC4EBE53', '2016-01-04 14:21:34', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Женский', 1, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'6DBBF989DDA07A40BA99804CF8BD1AD7', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'МОДЕЛЬ', 1, NULL),
(x'961085CC094CE749A541D00372E6D444', x'71D49C1F24DC9C4D875314DCDB85D68E', '2013-06-11 13:36:33', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Сайт и МБ', 3, NULL),
(x'794061085D25D54FABBEDE9BC7987090', x'73B7D6EE9A161E40837A3D513EE40161', '2012-01-20 14:40:21', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Да', -1, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'741D12C8DC98B94ABA56844E863CC89C', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Строка', 0, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'77324C102C3AE54EB21EB2D136750CF7', '2012-01-20 14:40:22', '2017-12-25 16:20:27', NULL, NULL, NULL, 'StatusExt', 0, 'StatusExt'),
(x'A97386691DC5164C8EED7D8810FFF900', x'780B11D24230144FAB1667B726ACCD80', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Вторник', 2, NULL),
(x'961085CC094CE749A541D00372E6D444', x'782D33CDF8382A4ABC0B6351D03FF01C', '2013-06-11 13:36:18', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Сайт', 1, NULL),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'78A3BEE221889E4C9B6AF50751E03434', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Не важно', -1, NULL),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'792DA10D515D91448475A2169998F2CA', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Дерево', 2, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'7A0276E1DFA5B249A151657FD176F5CD', '2012-01-20 14:40:21', '2017-12-25 16:20:27', NULL, NULL, NULL, 'JAVA', 2, 'JAVA'),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'7BC5C6CCBCD5154BB1BAB95D17513874', '2012-01-20 14:40:21', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Неполное высшее', 3, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'7D6CAD9F6CA0B842A2DEB3850F2D3AEE', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'В процессе', 3, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'7E14A4F6BE146F4AAA3B1DF80E700721', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Единая зона', 0, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'7E99CC1ED81ACF4DB10BF7B059EF8CE9', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Тип документа', 9, NULL);
COMMIT;
BEGIN;
INSERT INTO enumitem VALUES
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'813B97BD84E7E7448D96186245DA8BE3', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Исходящие', 2, NULL),
(x'9BAEE12ABF21B44BA554096D5B959903', x'82013ED7FECBA64293251D49E3C5F249', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'SimpleFunction', 0, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'8370BCE7FAD1A44E89C9CEBEF9B65730', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Приложение', 2, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'8471C8CC2A4DB7498434076857134504', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Переадресация', 6, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'8478E6663F086649B595A44FB0E3ACD4', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Пятница', 5, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'85296531BC53E94DA92EAA8C06DB7EBA', '2012-01-20 14:40:19', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Right Center', 7, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'880235EA33937D4A822422CC302BAE70', '2012-01-20 14:40:20', '2017-12-25 16:20:27', NULL, NULL, NULL, 'Значение', 0, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'88B61E8F25CE3447AD6C1BBFF486C0B5', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Ничего не делать', 0, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'8967AB8FA14AC34884ABB4121F992AB6', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Раздел', 6, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'89A4BDAC5E086645B36B4D6EE1983D4B', '2012-01-20 14:40:22', '2017-12-25 16:20:28', NULL, NULL, NULL, 'InWork', 3, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'89CD19982D797A428C2653E44CC39A06', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Элемент оформления', 5, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'8B74CE3E17137E4AA26B52C36FCC2AD3', '2014-08-27 12:14:18', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Odd', 2, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'8BF04099E2E1514A9C1490BD0B78AC63', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Только расчет', 2, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'8CA054EDE3204F45BAC29F94EA75AADF', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Right Bottom', 8, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'8EC8A7B6E1499A4FB90C723D11333FD2', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Done', 4, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'8EDBE7B2FF8A8841AFEFF156885E4696', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Промежуточный ответ', 3, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9053AA1BDEF6C84B9EB2E66414219AD5', '2012-01-20 14:40:22', '2017-12-25 16:20:28', NULL, NULL, NULL, 'JrnlRunExt', 4, 'JrnlRunExt'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'9086B41DFEEC00479335575EC294ACBE', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Январь', 1, NULL),
(x'C48D9EC186B1F547B49F644C8C795459', x'9131EDE4432D4042AE3E560C5C344000', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Выполнено', 2, NULL),
(x'C48D9EC186B1F547B49F644C8C795459', x'91F148E2377F7949B5FE8B2ACEA8319B', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, 'В работе', 1, NULL),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'9325A9462E609540988EB760C874EBA7', '2012-01-20 14:40:21', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Ничего не делать', 0, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'946290D2F4E8824500C8A8C8BF6229B9', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Август', 8, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'94681C2F1E72FD4C987E5044F395C2EA', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Интервал', 3, NULL),
(x'961085CC094CE749A541D00372E6D444', x'95957657D464F24AB651A8BF99AF646E', '2013-06-11 13:36:12', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Нет', 0, NULL),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'96558B8D253A1447A23540BC6F3CF6C9', '2012-01-20 14:40:22', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Весь документ', 0, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'97EEDDD82490C44D8F0F36948D1AFB0E', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'По дню', 4, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'99453A0DD852D4449B1C5FEFA9BBBAE2', '2012-01-20 14:40:22', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Pause', 4, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'9D1AD5FFACFA6B42A63B94E77EAB6857', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, '=', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9D97202CE63987438622D2AB9425CC45', '2012-01-20 14:40:22', '2017-12-25 16:20:28', NULL, NULL, NULL, 'CustomExt', 2, 'CustomExt'),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'9DD9A340EEB37D41B4CA86448C9D2518', '2012-01-20 14:40:21', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Открыть строку', 1, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'9EA6178A9B9CBF4A8AE469F8E2D02718', '2012-01-20 14:40:19', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Перечисление', 2, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'9F54F3E5829DE142BDA84F43CD58D1ED', '2012-01-20 14:40:20', '2017-12-25 16:20:28', NULL, NULL, NULL, 'Состояние заявки', 0, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'A03844186983CB4C9840E72CB29BE179', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Черновики', 7, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'A03AA8F4F0E9DC40B276313E93AC80BE', '2012-01-20 14:40:20', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Документ процесса', 4, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'A1E06BAC66E1CC44AE3C5E583799070D', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Скалярный тип', 0, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'A3485723C0C5AB4D9570B1D90E494617', '2012-01-20 14:40:21', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Неполное среднее', 0, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'A415B97A5B1DCA47A2FCBBFA00CA46C9', '2012-01-20 14:40:22', '2017-12-25 16:20:29', NULL, NULL, NULL, 'ARMGenerator', 8, 'ARMGenerator'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'A617FF8395523D4FB5732332918EAB3E', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Февраль', 2, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'AA8FCD7F113A5B4A8F177D5B326B6D79', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Center Top', 3, NULL),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'ABE79CB5181F234B93BA7B148D00EDD4', '2012-01-20 14:40:21', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Да', 1, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'AD063B13CFACB0469918DA53A9B3007D', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Апрель', 4, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'AD7BF297629B6246B42F81C7D4A311B9', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Открыть документ', 1, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'ADF11B6B6C35674CA8EBE80A2A16C82F', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Отправленные', 6, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'AFADAFACD537574FB28BF45920D0B397', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'none', 0, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'AFD3E671A7E5C340931C864D5B038308', '2012-01-20 14:40:22', '2017-12-25 16:20:29', NULL, NULL, NULL, 'InControl', 6, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'B0BF2E4105E1F645B12468CFB5319DEE', '2012-01-20 14:40:20', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Связка InstanceID (в передлах объекта)', 3, 'LNK_InstanceID'),
(x'39CFD2BFEB805342A64A24C116D26991', x'B17067B17BF1FB4B8677D11D1D1284BE', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Prepare', 1, NULL),
(x'5E820B7D3C8CA244AC6EE53812337737', x'B1E79C988D519C488575486C888563AD', '2012-01-20 14:40:21', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Рубль', 0, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'B360B484D849BF47ACB5AE5111297FA0', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Оформляется', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'B401EA329193EE4193E4F29A7693A7DC', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Left Top', 0, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'B5F2CC92E6AC85488B7576736BE816E6', '2014-08-27 12:14:02', '2017-12-25 16:20:29', NULL, NULL, NULL, 'None', 0, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'B7AA45176F81814D849FF04C6A3CB0DA', '2012-01-20 14:40:22', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Active', 2, NULL),
(x'9BAEE12ABF21B44BA554096D5B959903', x'B7B1AD8B45589B489BF774413B7DE679', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'StopFunction', 2, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'B8B0468C5DBF56468FB637357A196764', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'COUNT', 2, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'B8F103B6917CB84FA33128DC9EF1E547', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'По году', 1, NULL),
(x'5E820B7D3C8CA244AC6EE53812337737', x'BA0B25544174B741BF51EC2B849FE8F3', '2012-01-20 14:40:21', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Доллар', 1, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'BA1C0F743D8C2D45B634CE55D5D68632', '2012-01-20 14:40:20', '2017-12-25 16:20:29', NULL, NULL, NULL, 'like', 8, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'BB806427972C1744ABB51169422C078D', '2012-01-20 14:40:22', '2017-12-25 16:20:29', NULL, NULL, NULL, 'OnFormExt', 1, 'OnFormExt'),
(x'382838929000504DB8E3262D094E3DFE', x'BF42B8AA674F294AB88ECC0C6657574D', '2012-01-20 14:40:19', '2017-12-25 16:20:29', NULL, NULL, NULL, 'Произвольные зоны', 10, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'BF98A944E3CE7F48A99620F18DEDF958', '2012-01-20 14:40:20', '2017-12-25 16:20:29', NULL, NULL, NULL, 'На строку раздела', 2, NULL),
(x'794061085D25D54FABBEDE9BC7987090', x'BFD37F22FA43BF49924A8E8E151F91DC', '2012-01-20 14:40:21', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Нет', 0, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'BFE521A734DFD64B991ADE4BF374111B', '2012-01-20 14:40:21', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Несколько высших', 5, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'C0F6B5A73202314C8A297DB1820B2486', '2012-01-20 14:40:22', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Ready', 5, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'C21AF3DBEB2EA4499CAF6C9E963E74D4', '2012-01-20 14:40:20', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Папка', 3, NULL),
(x'C48D9EC186B1F547B49F644C8C795459', x'C22869AA772CAD4BBDDCD52909E73B5F', '2012-01-20 14:40:20', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Результат', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'C300B4A587E77B41BBFF3E061DDC5107', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Center Center', 4, NULL),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'C32CFC3FD709014BB987A403AC8B4124', '2012-01-20 14:40:22', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Персональный', 1, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'C3358F086683FC4EA310658F27D97005', '2012-01-20 14:40:20', '2017-12-25 16:20:30', NULL, NULL, NULL, '>', 3, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'C465E5A56115DF478403DE8A3E28F6EC', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'В работе', 8, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'C61819AED7BC924294B813782318B4CD', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'MAX', 5, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'C676CD74358C904FAC962B6BD0974B17', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Календарь', 5, NULL),
(x'728E3461855DE34892C434841FA1AA8F', x'C6E6F44B3B225A49AB48B01E9AF4F3B9', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'As Numeric', 1, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'C783255CF444D64C8BA53195E3B1ACD4', '2012-01-20 14:40:20', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Среда', 3, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'C7B08E3853F08B48B9D422504CFD3025', '2012-01-20 14:40:20', '2017-12-25 16:20:30', NULL, NULL, NULL, '<>', 2, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'C84A7814233FED4FA6E8F36384ACC8CA', '2012-01-20 14:40:22', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Done', 7, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'CA125E0CD7DC814895D1F786EFAD1788', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Initial', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'CA2354BD7DC0F14CA543B7E58ABB4865', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Left Center', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'CC835814A7A20542938843B53BC1E341', '2012-01-20 14:40:22', '2017-12-25 16:20:30', NULL, NULL, NULL, 'JrnlAddExt', 3, 'JrnlAddExt'),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'CE404E6339B847408CB23D588054E33A', '2012-01-20 14:40:20', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Ссылка на объект', 1, 'LNK_OBJECT'),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'D10FE088B7872243A14F24FFB4234ED7', '2012-01-20 14:40:19', '2017-12-25 16:20:30', NULL, NULL, NULL, 'Завершенные', 10, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'D18C6461398DB54098FA12C0A0D52345', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Текст', 5, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'D2D4F44B9A825141B7D5C9061EFFBB00', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Июль', 7, NULL),
(x'C608D44CBE64964787E545A26D3B3DDA', x'D39843410C262A41AE2A4A8F6000E9F2', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'RunAction', 2, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'D39DFF55453BA1418FC4AC5E1C7ED9A2', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Center Bottom', 5, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'D43C7FFCE758784E8032D4759E554CC2', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Расширение с данными', 4, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'D46A6ACD79F9D245A2CAD6F0590DC199', '2012-01-20 14:40:22', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Prepare', 1, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'D77F1255C06E1A45A66FBAC47F2B5A7F', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Открыть журнал', 3, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'D7B80E55680E7144A0AAAFB82992B62E', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'MIN', 4, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'D8D071C53E90E84882A77BEE63B40532', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Октябрь', 10, NULL),
(x'E0280E0D19D66A49BF995F9F28321C74', x'DB0FA4FEAEAB524298C0D749CA186958', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Нет', 0, NULL),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'DC98F9BF8BDFA6428CEC1536142C4E7C', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Отправитель', 0, NULL),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'DD176D4122D5EC4B93AB5C4DADBD350C', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Один тип', 0, NULL),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'E2256C3EFEE83B47814ADE6FFD764382', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Другой', 2, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'E367C06804767842B6E2033CCB53F694', '2012-01-20 14:40:20', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Расширение', 3, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'E3E4A84AE4D1B042B598D2B46B61604C', '2014-08-27 12:14:12', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Even', 1, NULL),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'E56A043523F6EC45952D2B2F84AB001B', '2012-01-20 14:40:21', '2017-12-25 16:20:31', NULL, NULL, NULL, 'Нет', 0, NULL),
(x'728E3461855DE34892C434841FA1AA8F', x'E5BB816944538A459E80FE8F22C41956', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'As Date', 2, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'E64535603EFD3A458874C4D27B4D5B17', '2013-01-28 13:14:07', '2017-12-25 16:20:31', NULL, NULL, NULL, 'II', 2, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'E6DA6346ED859B44A0AC51D626BC128C', '2012-01-20 14:40:19', '2017-12-25 16:20:31', NULL, NULL, NULL, 'АРМ', 4, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'E728FAB6A08629498BA15B3694FFDAB2', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Processed', 5, NULL);
COMMIT;
BEGIN;
INSERT INTO enumitem VALUES
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'E89DB166708D3442B8502E454CBA8D5D', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Март', 3, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'E9CB6F7CBCC0E04D98ABDD4CA158DD0A', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Абонент не ответил', 2, NULL),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'E9F79F093B3C094B92C0972C1BD50E42', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Все типы сразу', 1, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'EC2F6B789448E34A9A64DC855EADB818', '2012-01-20 14:40:21', '2017-12-25 16:20:32', NULL, NULL, NULL, 'VB6', 0, 'VB6'),
(x'C608D44CBE64964787E545A26D3B3DDA', x'EC815D0F90E5B0408CEE6CEB0B689299', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'RefreshOnly', 1, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'ED28561485509540B4BC7515B9309E9B', '2013-01-28 13:14:14', '2017-12-25 16:20:32', NULL, NULL, NULL, 'III', 3, NULL),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'EE15993801C44F4E8F6F5B688BB61DA4', '2012-01-20 14:40:22', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Локальный', 2, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'F055BC8039E136428E4C26AAD488C064', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'cls__', 0, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'F1ABE170891F9E41B07D32D9C0F896FC', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Ссылка на строку', 2, 'LNK_ROW'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'F227F8A1B5B06C43AEFA0098FC6D70DB', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Ноябрь', 11, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'F27A70EEAB629A4792DE21336FFB978D', '2012-01-20 14:40:21', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Среднее специальное', 2, NULL),
(x'9BAEE12ABF21B44BA554096D5B959903', x'F3850937529B304F806D3534CE1ABD9C', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'StartFunction', 1, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'F83AC30500509D44BFF9BEC2DCEC164D', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Возврат', 5, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'F9F70767622992409DD1FD2C7CC43313', '2012-01-20 14:40:22', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Initial', 0, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'FA91227AE95A6D4098F2D904B12BB32F', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, 'На объект ', 1, NULL),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'FB1121156C564145BD743B942B6B4AAF', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Полная', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'FC8EA9C17ECAF7478E10A6CD41D8F3FA', '2012-01-20 14:40:19', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Left Bottom', 2, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'FFFAF68FD485D745805D9B1A3F192168', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, 'Значение из параметра', 1, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы epfilterlink
--
-- Таблица survey.epfilterlink не содержит данных

-- 
-- Вывод данных для таблицы extenderinterface
--
-- Таблица survey.extenderinterface не содержит данных

-- 
-- Вывод данных для таблицы field
--
BEGIN;
INSERT INTO field VALUES
(x'3BD09DDC0811AB46BA41199E4AA97A4C', x'0048EEF856686543B804E08FA3E36836', '2017-12-25 17:21:37', '2017-12-25 17:21:37', NULL, NULL, NULL, NULL, NULL, 2, 'Тип параметра', 'ptype', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 0, 2, NULL, x'AB287FCA5332D04782A1869147F27E4D', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'023CBBB7214126428DCCA905C7CAF264', '2012-01-20 14:39:59', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 3, 'Платформа', 'Platform', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'0352B4F4F9C7304FB0E233498862A6FB', '2012-01-20 14:40:13', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'045B02DB8005AC4D9B3A97F8352BFD42', '2014-04-15 11:45:14', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 19, 'Иконка раздела', 'partIconCls', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'585457BE9A11AE4C94A27AB69877C201', x'047C8523E842FE40BBD9AEAC6115FDD4', '2017-12-25 18:17:15', '2017-12-25 18:17:15', NULL, NULL, NULL, NULL, NULL, 1, 'Модуль', 'themodule', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 0, 2, NULL, x'4438A0124E1E354C88F3BD7148EECF81', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'071E3E565D314543B9C12910037F595E', '2012-01-20 14:40:16', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 3, 'Код', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, 0, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'050E1CC4F38C434B9D6EC5FCD37BEB47', x'0849DBF13B9FE940AA27CAA7A524604D', '2012-01-20 14:40:02', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 1, 'Журнал', 'TheJournal', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 1, x'16319A32B3ACC24E93CE5920E84AD8E8', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'79A1C111B229DC4DBDB71EB21D2FF878', x'08F26761BF3ACE43B8F661D969EF1034', '2012-01-20 14:40:16', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 1, 'Разрешенное состояние', 'TheState', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'66C846DFF838F14E92E25F899D98BD16', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'090365079152D44B90EB3B8118356905', '2012-01-20 14:40:15', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'0C2652A0A1C78041A2C6DB82B70371A9', '2012-01-20 14:40:16', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 8, 'Для комбо', 'ForCombo', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'0D21836D650C7E49A3EED78AA5E84D1C', '2012-01-20 14:40:02', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 2, 'Расширение', 'TheExtention', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'0D3ABD32A2B82445B9C11E290710778C', '2012-01-20 14:40:16', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 15, 'Правило составления BRIEF поля', 'ruleBrief', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 500, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'0D5ECD307DA1B246A306C78C6FF9D5AA', '2014-03-11 13:16:37', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 16, 'Иконка объекта', 'objIconCls', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'0DF7465693D94647A4329088098D18C4', '2014-02-07 14:57:48', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 18, 'Целочисленный ключ', 'integerpkey', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'0E1879337F4A0D4B9E52B54228BE1F2A', '2012-01-20 14:40:16', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 4, 'Свзяь: Поле для join приемник', 'TheJoinDestination', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'5E3DF43BB50EDB4D8EFA62DF3261A272', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8131E84FA500594B9413D06318A119D4', x'0F822574BB1C99409D3FD437DEC9B3ED', '2012-01-20 14:40:02', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 2, 'Расширение', 'TheExtention', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'0FC7B0C75B17FA4CB81A328B0E29BF29', '2012-01-20 14:40:16', '2017-12-25 16:21:55', NULL, NULL, NULL, NULL, NULL, 3, 'Код', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 14, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'149976562DCDFF4F87242CCCC2209F72', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 4, 'Имя поля', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B10601C795AA73418097614495D6EF28', x'14B4CF6C92BF8F46AD1CD4A2B360E6BD', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 1, 'Поле', 'TheField', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'15402D79B1AA0842BF678D7D220AF66E', '2012-01-20 14:40:13', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 3, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'162D0FE4B342E04B813B558CBBCA84FF', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 8, 'Может быть пустым', 'AllowNull', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D08EB034B5C49C4BBA59870A4599F52A', x'164A939DB55F49489280F4D7733304CC', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 2, 'Скрипт', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'16559DABC41D4640B979093EF40199A3', '2012-01-20 14:39:58', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 9, 'Login', 'Login', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'16A28D8A31BFAD44AABAF271D8F7A399', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 4, 'Конфиг', 'TheConfig', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'16D23B7F3218B4409C2937F00AC5DF4B', '2017-12-25 17:00:18', '2017-12-25 17:00:18', NULL, NULL, NULL, NULL, NULL, 20, 'Владелец', 'towner', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 0, 2, NULL, x'89EC2176573B4C44A0B3DF2CE8723111', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'176DB72D891905429ED6ED59A109D500', '2012-01-20 14:40:02', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 14, 'Примечание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'17D7B34429D89D48A72E6921D49EB5D2', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0F332D7BA738CD4EA00A85955E94C12D', x'1864094F659BB149ACDE425A03B67853', '2017-12-25 16:54:04', '2017-12-25 16:54:04', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'18A058D6F7E4FA429048215433A13347', '2012-01-20 14:40:15', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 3, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4438A0124E1E354C88F3BD7148EECF81', x'19BE54B57AE5FF429CE2AC6D81DA0FBD', '2017-12-25 17:09:05', '2017-12-25 17:09:05', NULL, NULL, NULL, NULL, NULL, 1, 'Базовый тест', 'basetest', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 0, 2, NULL, x'BB5AE3BF51194E4CAD052DF3B8CD92AE', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'1A84D08432139F4BA547257056C7C3D7', '2012-01-20 14:40:15', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 2, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'1AADB443D53B00478B0DCADAC3AA848E', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 6, 'Поле - фильтр 2', 'FilterField2', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'585457BE9A11AE4C94A27AB69877C201', x'1ADA3728F2DA4B439C9D5385E67255C7', '2017-12-25 18:17:54', '2017-12-25 18:17:54', NULL, NULL, NULL, NULL, NULL, 3, 'Значение', 'theValue', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'1B44AA1227414641956D6F887E04B47D', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'003476C234BE3340B4B5756CD5252CEA', x'1BF559ACC4FF1844AF62ED2BE0BB53CA', '2012-01-20 14:40:02', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 1, 'Название отчета', 'repname', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'1C81FD5B49BB84479710A0529A35CF74', '2012-01-20 14:40:16', '2017-12-25 16:21:56', NULL, NULL, NULL, NULL, NULL, 12, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'1DA5823CB495E84993717AE35A1EE5F0', '2012-01-20 14:40:16', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 4, 'Подверсия', 'VersionMinor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'1DE4E3D848C2C247868B2623D6B3E592', '2012-01-20 14:40:15', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'1E5877214C48A14190A3898F8065D615', '2012-01-20 14:40:15', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 10, 'Ссылка на раздел', 'RefToPart', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'1F26059075A3D7438DD91164EC7557AD', '2012-01-20 14:40:16', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 2, 'Строка соединения с источником', 'ConnectionString', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'1F2D71DE2EA202439AEBE9844DCC4D26', '2012-01-20 14:40:15', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 3, 'Объект', 'TheObject', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AD5B514233E2DB408F9045DCFCE01BE6', x'2040990F8E51BD4CB6176DECFA4F8627', '2012-01-20 14:40:16', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 1, 'Платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'20EAAE69F1C8524BB6DA71F033C7208D', '2012-01-20 14:40:02', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 21, 'Разрешена печать', 'AllowPrint', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'21E364D6ADCE054DA244E2039EECE21A', '2012-01-20 14:40:16', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 1, 'Название режима', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 5, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'22CCEDFFD4595B40ADA4531839F059CA', '2014-07-09 22:40:51', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 3, 'модуль', 'modulename', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'2300BA81E2F5E146958E664DFCEF2B6B', '2012-01-20 14:40:16', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 3, 'Разрешено добавлять', 'AllowAdd', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2405E5C702C3544DA6976F9C9518B5E9', '2012-01-20 14:40:02', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 11, 'Файл картинки', 'IconFile', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 2000, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'24C4148E04FA8D4C8C74C28806A34ACD', '2012-01-20 14:40:02', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'27FAE1F8B8903A49902B9FCF50BA04F0', '2012-01-20 14:40:13', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 1, 'Последовательность', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', '%P', NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'28235A8810E61B46A7A77F4402F3EE8B', '2012-01-20 14:40:16', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 4, 'Поле - фильтр 0', 'FilterField0', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'28848240D781C44399163998F43B2F29', '2012-01-20 14:40:02', '2017-12-25 16:21:57', NULL, NULL, NULL, NULL, NULL, 5, 'Примечание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'29BD7E8346A648498546C52BDD2ECC82', '2012-06-04 16:40:44', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 13, 'Видмость зависит от пользователя', 'UseOwnership', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'2A675E9391B908459F484DF0E87EF687', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 2, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'2B57FE359AE20D4F87CA9C51A17F4FDD', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 5, 'Вариант', 'GeneratorStyle', x'AC992E5363D5D44BAC7A66DD6D7DD243', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'2BD7973D7EBF9B47A94A561697724485', '2012-01-20 14:40:15', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 7, 'Горячая клавиша', 'HotKey', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'2D13F4D4B6A5EB4F812E2910E961E2B8', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 23, 'Маска', 'TheMask', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2D7A4347B9FC7F43B06F569A15CC81DA', '2012-01-20 14:40:02', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 20, 'Разрешен фильтр', 'AllowFilter', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'2DB4F8FC94D05A4DBF6278963DECAD92', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 8, 'При удалении', 'OnDelete', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'7A7476873D74B947AF1CAB00FF81154F', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'2F926B0127D09A439FD588D53724E5DB', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 7, 'Исключить из индексирования', 'ManualRegister', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D08EB034B5C49C4BBA59870A4599F52A', x'31F0647932DA6146AE303EDB9D36C058', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 1, 'Платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'32473779E7B2DB41A34A9F6AAEC5BD36', '2012-01-20 14:40:15', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 4, 'Метод', 'the_Action', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'32918078A0BB9D4B8482FC94C3A00B2E', '2012-01-20 14:40:03', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 4, 'Псевдоним представления', 'ViewAlias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'332EF0EE70A27C47AC122CC57B907967', '2012-01-20 14:40:02', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 3, 'Версия', 'TheVersion', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 30, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'334FA599A91FD24DBE1AA84D56E30353', '2012-01-20 14:40:15', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 3, 'Размер', 'FixedSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5536327DD7BA124DAFC2E7FF3613B4A1', x'3522BEC13E7EF64D928CD35D347CC04C', '2012-01-20 14:40:16', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 2, 'Скрипт', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'35BB10AD3FE2DC4EB6FED22292735BD2', '2012-01-20 14:39:58', '2017-12-25 16:21:58', NULL, NULL, NULL, NULL, NULL, 1, 'Фамилия', 'Family', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'3743A2DC2CBB3A4696C0C37D6420679E', '2012-01-20 14:40:15', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'3817A7E9D5356C4EB468B52F523E59D0', '2012-06-04 16:40:44', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 1, 'Идентификатор владельца', 'ObjectOwnerID', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'38F28AD75F0BF848B5F3C9230790DAA7', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 12, 'Ссылка на раздел', 'RefToPart', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'3D0C94D74AABF24C9A848445B27D028B', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 5, 'Обязательное поле', 'MandatoryField', x'F7A946DE1BD2FB43BD3EDF6E82BD9477', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'3D79183F14ADB34C947B69CDDF289C35', '2012-01-20 14:40:02', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 6, 'Фильтр', 'TheFilter', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'DD6ECA18A1559045974FA973B8762638', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'3D95955ACBF0994C9BD7214886BDC2BA', '2012-01-20 14:40:03', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 3, 'Выравнивание', 'ColumnAlignment', x'4E199AA330CFC04F92980FFD1A7B0707', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'3DDA49D28AFFDF429EC3A3A866E5B4DD', '2012-01-20 14:39:59', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 2, 'Тип поля', 'FieldType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'3E9213D5E60C8144B79231A098EF94C9', '2013-05-06 12:13:08', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 14, 'Архивировать вместо удаления', 'UseArchiving', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'3E9A65BCAB1C394992E5E9D938DA5BD0', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 11, 'При удалении', 'OnDelete', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'3F2BB9B88F11C543AF2ABDEA0D7E6CA9', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 3, 'Подсказка', 'ToolTip', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'4039D821BEFAE843BAB2C7D05C6651F1', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 12, 'Поведение при добавлении', 'AddBehaivor', x'C608D44CBE64964787E545A26D3B3DDA', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'404410118C1BE44B9DF110E08910F052', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'4068A5FE3A87D04E80B9B88CB3A7570E', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 5, 'Разрешено удалять', 'AllowDelete', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'4091DB91A97D81459DE91A30F697DA5A', '2012-01-20 14:40:15', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 3, 'Подсказка', 'ToolTip', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'41365BA8B23A6545A4467D9E6AA1FA50', '2012-01-20 14:39:59', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 4, 'Метод для формирования', 'PrepareMethod', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'422E7BC75803914FBDD2B95A66B1EB25', '2012-01-20 14:39:58', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 4, 'Имя для входа', 'Login', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'42304E8EC6032641BD107C3650D5B95B', '2012-01-20 14:40:16', '2017-12-25 16:21:59', NULL, NULL, NULL, NULL, NULL, 4, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'42EC5E3F709973408C2DAD363EBAEFCC', '2012-01-20 14:40:13', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 2, 'Заголовок', 'TheCaption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'431F95DC8A34644CA248B9D11833BB46', '2012-01-20 14:40:03', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E09493DABDE1854BAA454C6C92793865', x'43A1C78ABF4BC446A2E7B860F93A4CCA', '2017-12-25 17:42:49', '2017-12-25 17:42:49', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'43CFD88A728C3349A0ABCCAED0DC11A3', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 4, 'Раздел', 'FromPart', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'43DC9A4694826E469E8323C9A02C9C6C', '2012-01-20 14:40:03', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 5, 'Аггрегация при группировке', 'GroupAggregation', x'E15AE3F962B892419FB50F7DD6A5BF03', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'44B70D542EDAF64489685F1A00AF372F', '2012-01-20 14:39:59', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 3, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'44C39AEA9B8F5A419CDF438A27C7AF2F', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 2, 'Класс ссылки', 'RefClassID', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'44E64538EA3AC241932DC946CB5CBE7D', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 9, 'При сохранении', 'OnSave', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'44F899710146D44D865358688A220A8E', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 8, 'Примечания', 'DescriptionString', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'452C16E19EFFC046B2AE8B7962327874', '2012-01-20 14:40:15', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 7, 'Возвращает значение', 'OutParam', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'45EF18E2EC0D924C9A40001A0777CB1A', '2012-01-20 14:40:03', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 2, 'При открытии', 'OnRun', x'B40D6B5ED7B42E44AEB5B2B35F51FA54', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'46886FE2AF53D84D8FDC0B89A6536F8A', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 3, 'Номер версии', 'VersionMajor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'46CA30E81A20034D9DBC3769CCF5EAB4', '2012-01-20 14:40:02', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 16, 'Ограничения к журналу', 'JournalFixedQuery', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'4706FED84DEDCA40BF195813742B1AA4', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 8, 'При создании', 'OnCreate', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'480E8A1B067CC443BB6430126CC62E52', '2012-01-20 14:40:16', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 5, 'Описание', 'the_Comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'48F7DAB2A2B53B4A95F0D88AA74F202B', '2012-01-20 14:39:58', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 2, 'Группа AD', 'ADGroup', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'49026CB4877D044C959599D6D81FBEF1', '2012-01-20 14:40:02', '2017-12-25 16:22:00', NULL, NULL, NULL, NULL, NULL, 2, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
COMMIT;
BEGIN;
INSERT INTO field VALUES
(x'1A0E0B5D3680124BB08160139558B594', x'4918E7AFF0F88A4AB7669C8F163F76F8', '2012-01-20 14:40:15', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'TheName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BD09DDC0811AB46BA41199E4AA97A4C', x'4966BC4FB474AB43AE6949F7B9616607', '2017-12-25 17:22:19', '2017-12-25 17:22:19', NULL, NULL, NULL, NULL, NULL, 3, 'Обязательный', 'mandatory', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'496770C738B39248A18F28417379EA86', '2012-01-20 14:40:16', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 11, 'Тип репликации', 'ReplicaType', x'2B9FC453B8526A44BBF4F90A068EA396', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'497DEF6C4BBE3742A2680B9155957F6B', '2012-01-20 14:40:02', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 38, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'49E6AE83FAEB70479AF2F07A576345AA', '2012-01-20 14:40:16', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 2, 'Поле, на которое накладывается ограничение', 'TheField', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'4AE3643BF6A4BA49B0F85BF88770EEBA', '2012-01-20 14:40:13', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'4AEE4C033EA34146B27D6CD0D5F2CD9B', '2012-01-20 14:40:02', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 8, 'Отчет', 'Report', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'F925E1F51486CF4AA5281690B3C2040E', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'4B08929AF474634693B416587BCC102D', '2012-01-20 14:39:58', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 5, 'Пароль', 'Password', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CE37F730811C7246B0F96E5BF4B15971', x'4C7130F4D8D0624780B0FCC2256627BF', '2012-01-20 14:40:02', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 1, 'Тип документа', 'TheDocumentType', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'4D0AA71C88A35B44A8BA46E3001CA1CD', '2012-01-20 14:40:15', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 3, 'Редактировать параметр нельзя', 'NoEdit', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'4DAAFFAFB30060459BDCC0507C198597', '2017-12-25 16:58:09', '2017-12-25 16:58:09', NULL, NULL, NULL, NULL, NULL, 1, 'Название теста', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'4E11440C87AD7C4BB7782C5DF78855B2', '2012-01-20 14:40:16', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 1, 'Структура, которой принадлежит поле', 'ThePart', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'4E59801BB0C45940B17E858E450FD636', '2012-01-20 14:39:58', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 7, 'e-mail', 'EMail', x'8608384640BAA948AAF5B8B138FB38C8', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'4EE8DCC2C7F88843BC47229E2E7A4910', '2012-01-20 14:39:58', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 8, 'Телефон', 'Phone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'50713C28D9A43A4E8BFA77AF0C2F704A', '2012-01-20 14:39:58', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 2, 'Имя', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'526592209A9B7D47B9588F502B334E27', '2012-01-20 14:40:15', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 5, 'Размер', 'DataSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'52A505481C86D347BD2F5C785F002E17', '2012-01-20 14:39:58', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 2, 'Текущая роль пользователя', 'UserRole', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'EE6A0EA4417B6D47923CACA251C08E87', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'32245159DFE6F941A4366BF7DB1800BB', x'533A99AC9B5E1143A1ABF80C00923883', '2012-01-20 14:40:13', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 1, 'Маска зоны', 'ZoneMask', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'53E2C57C8E936245BD3AA6B97484B8DC', '2012-01-20 14:40:03', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'5457EE3FCA222742BF0F252E5E26A72B', '2012-01-20 14:39:59', '2017-12-25 16:22:01', NULL, NULL, NULL, NULL, NULL, 5, 'Тип отчета', 'ReportType', x'12EEAA312481754EBD16698F4235234B', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5467F4C026EE574BA16165E7582A86F4', '2012-01-20 14:40:13', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 5, 'Размер', 'FieldSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5A437DA5B3730741B22BC18782085C84', x'54892B16BB19C14186CC5E3B0EBE02A8', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 1, 'Язык - название', 'LangFull', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'54BFA35C84C2334097CBF39A598B1655', '2013-07-10 18:50:55', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 0, 'Имя вкладки', 'TabName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, 'Возможность организовывать дополнительные вкладки для увеличения объема формы редактирования', NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'560CCC73DC89724CBC4E67C07028EA15', '2013-05-06 12:13:08', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 17, 'Архивировать вместо удаления', 'UseArchiving', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'568A2862604DBE4C845387B8F227B9A9', '2012-01-20 14:39:58', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 6, 'Доменное имя', 'DomaiName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'56CA28FB7CD6054DAB844CC5D9A88066', '2012-01-20 14:40:15', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 2, 'Имя', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'56E9FAA5DADE6745A5E351D1DB6DA9D1', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 2, 'Разрешен просмотр', 'AllowRead', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'56F918905A5D5547A8986B3C52E4F32C', '2012-01-20 14:40:13', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 7, 'Тип, куда ссылаемся', 'RefToType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'57025F8A0A88024DAE93E81E717140D4', '2012-01-20 14:40:02', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 9, 'Документ', 'Document', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'576D4D6F03EEBE4595BC51DF2D9FB41C', '2012-01-20 14:40:13', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 1, 'Значение', 'the_Value', x'18153A059FCAC94E99311C4AB23C54CE', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'57B055D27CB93240A4A73B76F765E2E3', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 17, 'Нумератор', 'TheNumerator', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'882F32DE48CA014E8ACDBEC71338D8CC', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'58014B86E904874599058D3F480B3CD2', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 5, 'Включать в меню', 'IsMenuItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'589CD89E08C83D4FAEF62E2AB006A146', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 10, 'При открытии', 'OnRun', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'589EC8C8E4F7F341A607B5160BC871C5', '2012-01-20 14:40:13', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 6, 'Тип ссылки', 'RefType', x'BB4E2D1305A56849BC1C50716757A2C5', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'59FD7494E228AF47A92734CD52DDBAC8', '2012-01-20 14:40:13', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 3, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'5C5420F107406A49A220DD9CD45CA9B1', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 2, 'Псевдоним', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'5C60BC924A29264DB6A0490B11A2B65E', '2012-01-20 14:40:15', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'5C8EFFDC6FEF834DA2D318545B7B142F', '2012-01-20 14:40:02', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 3, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'5CA5849F4CB5C24E99A1C9B7D61F9A95', '2012-01-20 14:40:16', '2017-12-25 16:22:02', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'5CFE7F7D9C75394B9AC8E748A35EB0E0', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 13, 'Объект расширения', 'ExtenderObject', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'5D0BC4816FB6C2468B1D45888F52ED6C', '2012-01-20 14:39:58', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 2, 'Ресурс', 'the_Resource', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'5D87FB366347474A9E73291FBFE1F1DF', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 21, 'Шаблон для краткого отображения', 'shablonBrief', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'47CAC986A370044BA314A12DC725B70B', x'5E67A488FD095B4587C3081C04413B0D', '2017-12-25 17:36:15', '2017-12-25 17:36:15', NULL, NULL, NULL, NULL, NULL, 1, 'Вопрос', 'question', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'2D4D523F3B8A874997EA4B0FB621C1DA', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5E94EA1F98118C40906040BD85D60EDC', '2012-01-20 14:40:13', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5A437DA5B3730741B22BC18782085C84', x'6089784572E2B24CA33C2559564C95A5', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 2, 'Код языка', 'LangShort', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'623C86641C1DD349BF84604893BCD630', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 9, 'Размер поля', 'DataSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'62939D47339C71489FF4FF281A9A3D97', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 3, 'Надпись', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'6294208EDC98A04E83B77796A363820C', '2012-01-20 14:40:13', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'63AB589BA3D08F46B1A0B5890349F55C', '2012-01-20 14:40:15', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 2, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'65DBC4A748C5D141A6143A6C57363977', '2012-01-20 14:40:15', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 9, 'Отложенное сохранение', 'DelayedSave', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'6635C79B580B7F4FA07407E2CB9CF633', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 1, 'Имя группы', 'FieldGroupBox', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'66650B8C936598408D5BCD1835C3BB7A', '2012-01-20 14:40:03', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4438A0124E1E354C88F3BD7148EECF81', x'66E2B584A03A874781E218D38FE6EC37', '2017-12-25 17:09:52', '2017-12-25 17:09:52', NULL, NULL, NULL, NULL, NULL, 10, 'Номер варианта', 'vnum', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'66FFDAA193BFF245879ABFD03C8D1E83', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 13, 'Стиль', 'TheStyle', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 50, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, 'Дополнительный стилевой признак для генератора  GUI', NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'676DEEC83B3BF34581FCC8F3FA40B840', '2012-01-20 14:40:15', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 2, 'Описание метода', 'the_Comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0EE6621A36D0304D98DB9034533FD00C', x'682BD312F4923C419513D23B58075073', '2017-12-25 17:20:56', '2017-12-25 17:20:56', NULL, NULL, NULL, NULL, NULL, 1, 'Тип Вопроса', 'qtype', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'ED314B8655AFFE4EB13CA7B508D53BA7', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'6896BFF3F10F2C42A457124B8FF36CB9', '2012-06-04 16:40:44', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 2, 'Сессия', 'SessionID', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A23E94783679584FB31676E4F968E3B4', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'68CAE51FED8B624197FD6F44E2D0D6D9', '2012-01-20 14:40:13', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 3, 'Идентификатор строки', 'OwnerRowID', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'692DAD0CD6A11D4987AB0BFB5C11E4D6', '2012-01-20 14:40:16', '2017-12-25 16:22:03', NULL, NULL, NULL, NULL, NULL, 3, 'Архивное', 'IsArchive', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'6B6B75696557834694480A729ED9CCE0', '2012-01-20 14:40:16', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 6, 'Не записывать в журнал', 'NoLog', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'6C5D7D65FDB4464B9E10F140A42AD509', '2012-01-20 14:40:16', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 7, 'При создании', 'OnCreate', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'7A7476873D74B947AF1CAB00FF81154F', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'6D085B0A45543E43983790F35EEF74D9', '2014-04-15 11:45:14', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 4, 'Иконка журнала', 'jrnlIconCls', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'6D704889A360DE498A0DA4DEE615DBD8', '2012-01-20 14:40:15', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 2, 'Трактовка', 'TypeStyle', x'24B86D7EF796A443A9D60CB89A66FE20', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'6E114E9F6A772547ACEEFB88734D4556', '2012-01-20 14:39:58', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 6, 'Последнее подтверждение', 'LastAccess', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'6FE2700A628D9D49B5C06F0918D81797', '2013-07-10 18:50:55', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 0, 'Тип кеширования', 'CacheType', x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'7044B40CCA76DB48A233EBBC749132F4', '2012-01-20 14:40:16', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 2, 'Псевдоним', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'7070D54129C6C848A0A417ECE3163EB6', '2012-01-20 14:40:15', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 4, 'Тип данных', 'TypeOfParm', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2A49E8F524222F4585FFA14882C6554F', x'711023109A1A0F479BE88E8C161A1120', '2012-01-20 14:39:59', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'715FB7CC138F0148AADF2C16EF98F035', '2012-05-28 17:19:44', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 3, 'Режим открытия', 'OpenMode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'719F7F66A264274D93164A3A100A02AA', '2012-01-20 14:40:02', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 12, 'Расширение', 'TheExtention', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'71A9B816D3094B4A86D1FE3371D1D345', '2012-01-20 14:40:16', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 18, 'Шаблон зоны нумерации', 'ZoneTemplate', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'728E351326635C4B86533B7889594E4D', '2012-01-20 14:40:02', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 13, 'АРМ', 'ARM', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'40B745DAF4C6974BB4EB3DE0A6C480B5', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'7356A5A4795A07499D2CAC330FAEF4BB', '2012-01-20 14:40:02', '2017-12-25 16:22:04', NULL, NULL, NULL, NULL, NULL, 2, 'Название класса', 'TheClassName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'747E09BA467801469F6AA62B63FBD083', '2012-01-20 14:40:15', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 4, 'Идентификатор вызываемого метода', 'ActionID', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'75B9F1885CCCC24DB85E7DB3CCBBA666', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 3, 'Очередь', 'QueueName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'7603E3482F2B8D4EA7D09852EF5CDBE6', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 20, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'766A3B30E1A9884182328B87342735B2', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 7, 'Сортировка источника данных', 'SortField', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'778BEE54A226CE439350C496251E88AF', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 7, 'Горячая клавиша', 'HotKey', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8131E84FA500594B9413D06318A119D4', x'77AD01D324ADDE4D9DA90B6148B89662', '2012-01-20 14:40:02', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'78D895D334C63F479671D9322967DA2C', '2012-01-20 14:40:02', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 1, 'Реализация', 'ThePlatform', x'6531AF860CC4E14188E2DE89D2C1BF84', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'79374CE191F32446B135B1D27E52D383', '2012-01-20 14:40:15', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 2, 'Параметр', 'ParamName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'7949BBB5D48E844B9E8FD8647287062B', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 11, 'Ссылка на тип', 'RefToType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3EF70062751D5118822204C4F4F5020', x'79D0954B5006F0408A7224431AAE1AE4', '2012-01-20 14:40:15', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 2, 'Скрипт', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'7BFF06EA8FAD704187A74A019A5730F0', '2013-05-14 16:14:43', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 15, 'Сохранять объект целиком', 'CommitFullObject', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'7C19B16501CC5F4CA316830D43E24A58', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 14, 'Шаблон для краткого отображения', 'shablonBrief', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'7C715213F6E95544A225797A38525BCF', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'7C9ED214068F6B4EBA437EE095DCBA7B', '2012-01-20 14:40:16', '2017-12-25 16:22:05', NULL, NULL, NULL, NULL, NULL, 6, 'Агрегация', 'Aggregation', x'E15AE3F962B892419FB50F7DD6A5BF03', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'7CBC36D5141A144B9ABF7326E396E760', '2012-01-20 14:40:15', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 5, 'Включать в меню', 'IsMenuItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'7D03FEC7BE86A648B808788BB35D8849', '2012-01-20 14:40:13', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 4, 'Тип поля', 'FieldType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'7DFC5301479BCC4384058339935320D4', '2012-01-20 14:40:15', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'7EAE9A6123DA0E4681ECCBE32A96D493', '2012-01-20 14:40:15', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 8, 'Вариант сортировки в табличном представлении', 'GridSortType', x'728E3461855DE34892C434841FA1AA8F', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'7F0E7C2D8150E64C8BDD156668269911', '2012-01-20 14:40:02', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 15, 'Тип документа', 'ObjectType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'80DF8E6D32976042847EE1209FF71CCE', '2012-01-20 14:40:16', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'82461B4060B7B242913BCFDC7D4C44E7', '2012-01-20 14:40:16', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 3, 'Версия', 'VersionMajor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8261E22384CCD642B7A2D8DA0026EBEE', x'8289AA2A31E8A945961524EE2CDAD2C5', '2012-01-20 14:40:16', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 1, 'Целевая платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'828D644EFE81444E98ABCD542C698286', '2012-01-20 14:39:58', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 5, 'Пользователь', 'Usersid', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'55B88B1465099E4EA3D648DCC8CE528B', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'83FDB46A09011044B5C4CAB69153378B', '2012-01-20 14:40:15', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 2, 'Целевая платформа', 'TargetPlatform', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'842BC8FA8E5E0A408433C29994016DD5', '2012-01-20 14:40:15', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 2, 'Тип хранения', 'StoageType', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CBCD0D6CECB7B245BD6FA25065FD66A1', x'84872BCFEDC6374D9F9913B3B7DB611F', '2017-12-25 17:51:32', '2017-12-25 17:51:32', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'8492289A3109E240BF8DA5DE550052B6', '2012-01-20 14:40:16', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 1, 'Провайдер', 'Provider', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 128, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
COMMIT;
BEGIN;
INSERT INTO field VALUES
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'8575828DCCB8AD42A6A76538E481BA21', '2012-01-20 14:40:15', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 1, 'Поле (значение)', 'FieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'860E54C84370D14A875B0386EA200688', '2012-01-20 14:39:59', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 8, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'863AE5CA67FDBA439BABCF5E828B7B94', '2012-01-20 14:40:16', '2017-12-25 16:22:06', NULL, NULL, NULL, NULL, NULL, 6, 'Включать в тулбар', 'IsToolBarButton', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'89E7E3F472210F4093747F79118802D7', '2012-01-20 14:39:59', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 3, 'Размер', 'FieldSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'8BD31B913B739B46BFF3516F735A0C8F', '2012-01-20 14:39:59', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 4, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3EF70062751D5118822204C4F4F5020', x'8C5D85F3195B434DBE96FA2156DB51E1', '2012-01-20 14:40:15', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, 'Целевая платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'8CBDD9A01C79BB4597EACA9389E993E6', '2017-12-25 16:59:16', '2017-12-25 16:59:16', NULL, NULL, NULL, NULL, NULL, 2, 'Группа', 'tgroup', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, -1, 0, 2, NULL, x'0F332D7BA738CD4EA00A85955E94C12D', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'89EC2176573B4C44A0B3DF2CE8723111', x'8CC9028CB7A18F40BE57FD35F66E08F2', '2017-12-25 16:56:31', '2017-12-25 16:56:31', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'8D727636686B454FB3E63754B3625164', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, 'ProgID контрольконо элемента', 'ControlProgID', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'8EA7B2BF6A47CB4581DAC2AD0CC71AA6', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, 'структура, доступ к которой ограничен', 'Struct', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'8EEAA0B2E8183E41AAF17358EA471802', '2012-01-20 14:40:03', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 4, 'Сортировка колонки', 'ColSort', x'728E3461855DE34892C434841FA1AA8F', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'8F0DF7445FB5FC4A975BA0C421E377C5', '2012-01-20 14:40:03', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 2, 'Поле представления', 'ViewField', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'8F6E8AF0D9AA3045A986FA201A9CB743', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 6, 'Фильтр источника данных', 'FilterString', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'8F954A5E5D43A54188945D70B788CD3D', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 5, 'Ручной join', 'HandJoin', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CBCD0D6CECB7B245BD6FA25065FD66A1', x'8FC152688BA47649BD7A318423F715C0', '2017-12-25 17:52:24', '2017-12-25 17:52:24', NULL, NULL, NULL, NULL, NULL, 10, 'Значение', 'theValue', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'90627C216E67474D9ABC67A754661FA1', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'91255A0E505DD14290D37E3DF29DFC51', '2012-01-20 14:40:13', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 9, 'Массив значений', 'ValueArray', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'91C176D39A2F3647956B3A1A13ECC8DF', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 3, 'Запрещено использовать', 'IsRestricted', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'91D6162E9EF6F44D804A3A3A87876BC4', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, '№', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, 'defsort', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'92A191DC907A7B41992FEE0E2139A949', '2012-01-20 14:40:02', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8261E22384CCD642B7A2D8DA0026EBEE', x'93D550949210D24EB014CCEBD7FE526B', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 2, 'Скрипт', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5607A06E80B9234DB209202389953A13', x'93FFEC828C54324FA9E98212DCE538B3', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 1, 'Приложение', 'Package', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'C2E0DB8C89591042BDFB33C2C45F2509', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'9471AD46ACA9EA479C4AF685D7CBABFD', '2012-01-20 14:40:16', '2017-12-25 16:22:07', NULL, NULL, NULL, NULL, NULL, 6, 'Краткая информация', 'IsBrief', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'94E580DCCCED2E41BE4FB27E23D6B780', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 5, 'Тип поля', 'FieldType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'94F9A86BD8B2E94D97BBEE6ED01C3CF4', '2012-01-20 14:40:15', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 3, 'Название в коде', 'NameInCode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'957AD70CDF485D4F8D3AC66F0EA66B6A', '2012-01-20 14:39:58', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 4, 'Закрыта', 'Closed', x'E0280E0D19D66A49BF995F9F28321C74', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'9606F6E2AFFCB0468E387ADA90C05EBC', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 9, 'Отображать при выборе ссылки', 'AllowRefToObject', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'9676341BA2FF2F42ACACFA465357D3C3', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 2, 'Целевая платформа', 'TargetPlatform', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'969228CDDA5D044D961001E312E4C4CB', '2012-01-20 14:40:13', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 1, 'Последовательность', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', '%P', NULL, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'9857DF622E53A54C924FE0CA9AF26DCE', '2012-01-20 14:40:13', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'98CD861EC37BF847A69186227D01E40C', '2012-01-20 14:40:15', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 2, 'Значение', 'NameValue', x'18153A059FCAC94E99311C4AB23C54CE', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'999CA22159C1D04D89258DF526B895FE', '2012-01-20 14:40:15', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'the_Comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'99D598E6212E4149AD6266AFF7B34F45', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 2, 'Тип структры', 'PartType', x'B736F5EE412A1048B1ED7FB8557C25B9', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9AD2DE26AB2FB84ABE815CE5013238FD', '2012-01-20 14:40:02', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 17, 'Разрешено добавление', 'AllowAdd', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'9AE5BC4C22977840BA6BDEA3480E455D', '2012-01-20 14:39:58', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 4, 'Действие', 'VERB', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'9B43F17390F9F242BAF05265D2FEA3FA', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 3, 'Источник данных', 'DataSource', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'9BE3C3B42EFDEC4889B2ED11FDC75FDA', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 9, 'Не показывать форму выбора', 'DontShowDialog', x'E0280E0D19D66A49BF995F9F28321C74', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'9CC7C465A81002458FE79F06DB70303F', '2012-01-20 14:40:02', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 1, 'Источник', 'RowSource', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, 'View из которого построен журнал', NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'9DABCC08689A334C9F37876ACF95F27D', '2012-01-20 14:40:16', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 6, 'Порядок', 'SEQ', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9EE64CB2B5C3854DA3A918BF50385854', '2012-01-20 14:40:02', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 7, 'Журнал', 'Journal', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'16319A32B3ACC24E93CE5920E84AD8E8', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'9F813D7FBD932245B914FCCC2C91B48F', '2012-01-20 14:39:58', '2017-12-25 16:22:08', NULL, NULL, NULL, NULL, NULL, 5, 'Идентификатор документа', 'LogInstanceID', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AB287FCA5332D04782A1869147F27E4D', x'9FD4F11528279B45A8CB8A88EC7B8307', '2017-12-25 17:17:03', '2017-12-25 17:17:03', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'003476C234BE3340B4B5756CD5252CEA', x'9FD766EF1E249448AB2BAEB442FF12CC', '2012-01-20 14:40:02', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 2, 'Отчет', 'TheReport', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 1, x'F925E1F51486CF4AA5281690B3C2040E', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'A00FA7E471BA8143A1938DA3DF3AE36F', '2012-01-20 14:40:02', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'A02B5AFD54EC304BBADC96424894D118', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 1, 'Приложение', 'Package', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'C2E0DB8C89591042BDFB33C2C45F2509', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'A263F6A96AC0DA4D9B8A659CFFDF25E6', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 16, 'Автонумерация', 'IsAutoNumber', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'A346C0EDD504C845AD5372CCDEA55210', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 1, 'Структура, которой принадлежит метод', 'Part', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'A409E1A9C8F03A448E1EA78A7B53F84B', '2012-01-20 14:40:15', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 3, 'Редактировать параметр нельзя', 'NoEdit', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AD5B514233E2DB408F9045DCFCE01BE6', x'A4DF0B748FB3FA4F809CBBC0400417C9', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 2, 'Скрипт', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'A50917873AF66643AE915255F1A6AB91', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 3, 'Для поиска', 'ForChoose', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'A643F157081A8C4B9EB122E58F4D5E75', '2012-01-20 14:40:15', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 6, 'В тулбар', 'IsToolBarButton', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'A6AD8C1D36B8F0448F86CBD63379EF4A', '2012-01-20 14:40:02', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 4, 'Платформа реализации', 'ThePlatform', x'6531AF860CC4E14188E2DE89D2C1BF84', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'A737207F12045F4FB13B96FCAFB6CE63', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 10, 'Тип ссылки', 'ReferenceType', x'BB4E2D1305A56849BC1C50716757A2C5', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'A9145A446225274895486236BCF0B09B', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 2, 'Метод', 'Method', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'AA4BCC195B855B428957431FE17C8C6F', '2012-01-20 14:40:13', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 2, 'Раздел', 'OwnerPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'AB684CDF96732C44AF236BB1B7665B06', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 2, '№ п/п', 'Sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', 'PARTID=%P', NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AC430CE7C5F1AD4BBEB227E2CAF81780', '2012-01-20 14:40:02', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 10, 'Метод', 'Method', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'AC8B0BE94A01584DAF79768BB242119D', '2012-01-20 14:40:16', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'AD1768A8E4E4BE4EB08C60828659BD52', '2012-01-20 14:40:15', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 4, 'Нужен размер', 'AllowSize', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'AD229F02920EC347A3E5FEA5ABFCC7C8', '2012-01-20 14:39:58', '2017-12-25 16:22:09', NULL, NULL, NULL, NULL, NULL, 7, 'Момент открытия', 'StartAt', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AD7508DF65915840A66214F74D5A257B', '2012-01-20 14:40:02', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 18, 'Разрешено редактирование', 'AllowEdit', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'ADF67B2937FEE64EAC8B40D2E1E50A93', '2012-01-20 14:40:15', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 7, 'Поиск текста', 'AllowLikeSearch', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'AEDE10BB9DE8344784444750220B79CE', '2012-01-20 14:40:03', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 2, 'Псевдоним', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 32, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'AF477A68B568DD4D928F9229BE67CE36', '2012-01-20 14:39:58', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'AFFFFBD63B4BBB449D96FD96C6B3A920', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 3, 'Псвдоним', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'B1A9CEEE5BC9C44186740C229C2892B3', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 14, 'Ссылка в пределах объекта', 'InternalReference', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'B2CA6F7ABC11704A910C8ACA1F370BFD', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 4, 'Метод', 'the_Action', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'B3C5D7628BBA8942ADD1D374580562FF', '2012-01-20 14:40:02', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 2, 'Тип расширения', 'ExtType', x'C7FEC37988B7224E8BE3F34759F1190C', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'B44D6A47DB69C54EA4D7999C09183B97', '2012-01-20 14:39:58', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 3, 'Раздел с которым происхоит действие', 'LogStructID', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'B4BFBFEDBC84104B97B3A174D782CD9F', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 15, 'Только создание объекта', 'CreateRefOnly', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'B5B21C9A6D0EED4195D1E81F8955FAFB', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 6, 'Среда разработки', 'TheDevelopmentEnv', x'6531AF860CC4E14188E2DE89D2C1BF84', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'B69A9691B3776949950E4A1D03D35FD6', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 5, 'Поле - фильтр 1', 'FilterField1', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'B797253247A067458F01B6FC770A0EB0', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'B9AE9D29B2752E4B85921E48C6CFB6B7', '2012-01-20 14:40:15', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 6, 'Максимум', 'Maximum', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'BA700AEBB90FAE44ADE16910E4E7A240', '2012-01-20 14:40:16', '2017-12-25 16:22:10', NULL, NULL, NULL, NULL, NULL, 6, 'При запуске', 'OnRun', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'7A7476873D74B947AF1CAB00FF81154F', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'BADD37C8FE4E5D44AABCC4701DF2ED55', '2012-01-20 14:40:02', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 3, 'Название библиотеки', 'TheLibraryName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2A49E8F524222F4585FFA14882C6554F', x'BB7A3BB448294B4A8E4D53887AE4AA4E', '2012-01-20 14:39:59', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 2, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'43C096558C1CA5429A65863272429EC4', x'BB7B3C6ED8C4744E863F8D6C61325A3B', '2017-12-25 17:57:18', '2017-12-25 17:57:18', NULL, NULL, NULL, NULL, NULL, 1, 'Тестируемый', 'person', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'E09493DABDE1854BAA454C6C92793865', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'BC07F828234A3B4F80A28C30F5F12730', '2012-01-20 14:40:16', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 2, 'Связь: Поле для join источник', 'TheJoinSource', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'5E3DF43BB50EDB4D8EFA62DF3261A272', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BC2555EC6D61834DA45F61ACAD93149F', '2012-01-20 14:40:02', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 19, 'Рарешено удаление', 'AllowDel', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'BC360C9BCF2B864081419FEA56D6BA94', '2012-01-20 14:40:15', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 5, 'В меню', 'IsMenuItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BDC65D7D13D14B4DBDABF0890B8D1CBE', '2012-01-20 14:40:02', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 4, 'Включить в тулбар', 'AsToolbarItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'BF56BA07E0FBCF468477AEE9C5EBFDCF', '2012-01-20 14:40:15', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 1, 'Последовательность', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', 'PARAMETER%P', NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'BF7AFD80E3E1874897BEFEADC78B9EFC', '2012-01-20 14:40:13', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 8, 'Раздел, куда ссылаемся', 'RefToPart', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'BFA8CC4E8013174E9169AAEF48E2964B', '2012-01-20 14:39:59', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 2, 'Файл отчета', 'ReportFile', x'C340EA421CD62F46AF6F314D2F0000E1', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'585457BE9A11AE4C94A27AB69877C201', x'C05A31B62F2D7D4386428074B6FAF8F6', '2017-12-25 18:17:51', '2017-12-25 18:17:51', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'C1EBF74D21473849B88B8A09A12F3400', '2012-01-20 14:40:16', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 7, 'Поле - фильтр 3', 'FilterField3', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'C2BD06116470BD47BF0505DE96CBACD6', '2012-01-20 14:40:15', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 3, 'Возвращаемый тип', 'ReturnType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'C2C81EA1042CA646A46659D2066349BC', '2012-01-20 14:40:13', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 2, 'Схема нумерации', 'Shema', x'382838929000504DB8E3262D094E3DFE', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'C4A81CCB73ACBF47BEC9DE9F1A0554CC', '2012-01-20 14:40:02', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 2, 'Выражение', 'TheExpression', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, 0, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, 'выражение для формирования фильтра', NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'C4BC8E49F283934095A838A8CD0C4B83', '2012-01-20 14:40:16', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 4, 'COM класс', 'GeneratorProgID', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'C5E82E7A7E969E4499BEF45B53615802', '2012-01-20 14:39:58', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 9, 'Местный телефон', 'LocalPhone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'C63FFED2D728944E80664B4B73BF102D', '2012-01-20 14:40:16', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 5, 'Источник краткой информации', 'BriefString', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'C6673C12706DB54D99EFEC32C85EEC7B', '2012-01-20 14:39:59', '2017-12-25 16:22:11', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'C69F7C918243284A90767BC70352F94E', '2012-01-20 14:40:13', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 4, 'Можно отключать', 'AllowIgnore', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'C7837FFC5C63A34EBD541D7C3A1E0805', '2012-01-20 14:40:15', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 2, 'Скрипт', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'C7F9B324369671488EB5233FA8EDCF4B', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 2, 'Название', 'the_Comment', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'BB5D44A540C20A43A17D39A9ECC08422', x'C89A7CCBBB67C24FB46720C11EA4F166', '2017-12-25 17:38:26', '2017-12-25 17:38:26', NULL, NULL, NULL, NULL, NULL, 10, 'Время на прохождение модуля', 'moduletime', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'CA4BEE80724CD8439E7C0D635C4BA8B1', '2012-01-20 14:40:15', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 7, 'Горячая клавиша', 'HotKey', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'CABEA17A06C3F543A416ABA0F9BB6DB5', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 7, 'Для отображения в таблице', 'IsTabBrief', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
COMMIT;
BEGIN;
INSERT INTO field VALUES
(x'05C61246727ED0478A2852CC7BFF4C7F', x'CB3AFCA9DB42EC4E880973228594665C', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'CBBDBBA277AA5E479D3646AB5813CC27', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 1, '№ п/п', 'Sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'49B51BC53B61E84EA2577C21F0C3D585', 'PART_OR_OBJECTID=%P', NULL, NULL, NULL, NULL, NULL),
(x'43C096558C1CA5429A65863272429EC4', x'CE843301D88AE24FAE06B85BB28B3CE2', '2017-12-25 18:16:20', '2017-12-25 18:16:20', NULL, NULL, NULL, NULL, NULL, 10, 'Вариант теста', 'testVariant', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'4438A0124E1E354C88F3BD7148EECF81', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'CE94E3A02452CF48935B2963093CEB96', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 1, 'Представление', 'TheView', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BD09DDC0811AB46BA41199E4AA97A4C', x'D06BD1F6C1796F44AEEC91A7E8B2CD35', '2017-12-25 17:18:13', '2017-12-25 17:18:13', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'D08E98EBBC4F834FB79CD4773654471D', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 4, 'Подверсия', 'VersionMinor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'D1131FAA950F2B49A447601A029D16F3', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 3, 'Объект', 'TheObject', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'D25BACD9ABC3CB46A6302AD0EF3C5652', '2012-01-20 14:40:03', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 1, 'Представление', 'PartView', x'C2DE53F44B73964DBF2F89A0B0332CB9', -1, -1, 0, 0, 0, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'D286B50DC3C23442B4EAA8FFB5F14A2E', '2012-01-20 14:40:15', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 6, 'В тулбар', 'IsToolBarButton', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'D58EE2FB7930254EA159998191C32782', '2012-01-20 14:40:16', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 5, 'Поле', 'Field', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'D5BE1FBDCE5B2B409EC5609D94E8FC58', '2012-01-20 14:39:59', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'D5D4BFB72A29D1418986EA197AC38275', '2012-01-20 14:39:59', '2017-12-25 16:22:12', NULL, NULL, NULL, NULL, NULL, 2, 'Выражение', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'D6368FFEFD2FA3419BF315554CF22424', '2012-01-20 14:39:59', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 7, 'Базовый запрос', 'ReportView', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'D6D6FAE4D21C6B42B6F29B733D616892', '2012-01-20 14:40:16', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 4, 'Разрешено изменять', 'AllowEdit', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'D70EF489A6577B489EE3471E19972638', '2012-01-20 14:40:16', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 5, 'Представление для выбора', 'ChooseView', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'D77E3939283C4F41A18859E103B21F4A', '2012-01-20 14:40:03', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 1, 'Представление', 'SrcPartView', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'4D24C3DAD670A445885DD610F748EBFC', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2D4D523F3B8A874997EA4B0FB621C1DA', x'D89907C66E598749A8BDEDC577E53CF4', '2017-12-25 17:54:02', '2017-12-25 17:54:02', NULL, NULL, NULL, NULL, NULL, 1, 'Тип Вопроса', 'qtype', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'ED314B8655AFFE4EB13CA7B508D53BA7', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'D97FF283D0E4A645A5614703602BB9DE', '2012-01-20 14:40:15', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 8, 'Тип ссылки', 'ReferenceType', x'BB4E2D1305A56849BC1C50716757A2C5', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'DA54895B7920D94DA1752DF34D31E2BE', '2012-01-20 14:39:59', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 6, 'Расширение для создания отчета', 'TheReportExt', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'DC329F056AE0B84480909B9F21F0D412', '2012-01-20 14:40:02', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'TheDescription', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'DCCA6DDB19E13A41BE63ED1B5A6B8BEC', '2012-01-20 14:40:16', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 2, 'База данных', 'DBName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'DD041A279409B7439C470EC8EB9999BF', '2012-01-20 14:40:16', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 4, 'Допускается только один объект', 'IsSingleInstance', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'DD3BAAED6251234DB2200C017A16CC53', '2012-01-20 14:40:02', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 5, 'Вариант действия', 'ActionType', x'3A3878A9883FD34787A231AF949E53B1', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'DD51EE13A4A9504E8C214A35A6743D6C', '2012-01-20 14:39:59', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'DEDFC8B1EE4DFF46B28B9E6F4852A1AE', '2012-01-20 14:40:15', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 2, 'Параметр', 'ParamName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'DF2429F38B66B9479CAFCDDA9B0C081B', '2012-01-20 14:40:16', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'DFBC9C0B62AE6D40995E1299EAEEA664', '2012-01-20 14:39:58', '2017-12-25 16:22:13', NULL, NULL, NULL, NULL, NULL, 1, 'Сессия', 'TheSession', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A23E94783679584FB31676E4F968E3B4', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'E0B7C2728F4A884693D8A7E5839343A8', '2012-01-20 14:40:16', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 10, 'Отображать при поиске', 'AllowSearch', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'E10090E920B24445A483AFADDA09CEEF', '2012-01-20 14:40:16', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 16, 'Вести журнал изменений', 'IsJormalChange', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'52932CFE9AE20B4291343E3BDD832A6E', x'E24A0AA894472E4CA774277DD8C7E986', '2012-01-20 14:39:58', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 1, 'Пользователь', 'TheUser', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'55B88B1465099E4EA3D648DCC8CE528B', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'E2948ED3CE97BE4BA976D1998EE21CA3', '2012-01-20 14:40:15', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 6, 'Можно не задавать', 'AllowNull', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'E2ED0ACDFDDE0C468D52A98A09D3C086', '2012-01-20 14:39:58', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 3, 'Отчество', 'SurName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'ED314B8655AFFE4EB13CA7B508D53BA7', x'E2EE7927F465794C9CBD5D6B37E79112', '2017-12-25 17:06:04', '2017-12-25 17:06:04', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'E316214CAFA73C4D8EED671C681E78E3', '2012-01-20 14:40:15', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 3, 'Подсказка', 'ToolTip', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'E38CB46586BB2D42A8C4E1CC5AC74F2C', '2012-01-20 14:40:15', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 9, 'Ссылка на тип', 'RefToType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'E5042C091A48154C9741738CE08064A1', '2012-01-20 14:40:15', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 4, 'Конфиг', 'TheConfig', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'E6D050D3945BD94EBA9BE028575D15BA', '2012-01-20 14:40:16', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'TheName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'E7192E16C9BD4640B7375F1018307043', '2012-01-20 14:39:58', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 3, 'Момент закрытия', 'ClosedAt', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E7D8257EEED0BD4F87D143910056735B', '2012-01-20 14:40:16', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 4, 'Разрешена модификация', 'AllowModify', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'BB5D44A540C20A43A17D39A9ECC08422', x'E8033AA4F302184F873D2BA18A18C0EA', '2017-12-25 17:37:01', '2017-12-25 17:37:01', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 256, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'E81AD38FB43733499536284B161D1215', '2012-01-20 14:40:02', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 1, 'Последовательность', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'E9313F83C43FCF429DFE5D81870CA276', '2012-01-20 14:40:15', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 1, 'Поле (значение)', 'FieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E97EEC74927E144983ED61C47253C3BA', '2012-01-20 14:40:16', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 3, 'Разрешен просмотр', 'AllowRead', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'E9F50C668C4DF94486378EC5A894FE22', '2012-01-20 14:39:58', '2017-12-25 16:22:14', NULL, NULL, NULL, NULL, NULL, 1, 'Приложение', 'ApplicationID', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'C421399726499D4CA7816062CF81B5AD', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'BB5D44A540C20A43A17D39A9ECC08422', x'EA2A4A296A8664428334040F0D7A2815', '2017-12-25 17:39:36', '2017-12-25 17:39:36', NULL, NULL, NULL, NULL, NULL, 20, 'Баллы за модуль', 'modulecost', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'EC17956C14F42044A5C3F04B7D91A23E', '2012-01-20 14:39:58', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 8, 'Локализация', 'Lang', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 25, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'EC9A95007193DA4796B67DF48E836010', '2012-01-20 14:40:16', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 3, 'Заголовок', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'ED484E66281E0D4786567FFB0672C2FA', '2012-01-20 14:40:16', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 4, 'Описание', 'the_comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'EDEFC1792738FB4A8EB11DD6B5E8740F', '2012-01-20 14:40:15', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 1, 'Платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'F01A2228A296014A9708711D439C9787', '2012-01-20 14:40:16', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 22, 'Имя класса для мастера строк', 'theNameClass', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'F1F54B530CB4054B9F0D9DC6C3EE5D56', '2012-01-20 14:40:15', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 5, 'Минимум', 'Minimum', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'F3BA514510EA2740A4401B6A23F36198', '2012-01-20 14:40:16', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 7, 'Формула', 'Expression', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'F71745CCA37F35478351A031B3315154', '2012-01-20 14:40:16', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 2, 'Класс контрольногоэлемента', 'ControlClassID', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'F7B5144DE8A0A445ADCC5B2D11D547B9', '2012-01-20 14:40:16', '2017-12-25 16:22:15', NULL, NULL, NULL, NULL, NULL, 2, 'Этот режим является основным режимом работы объекта', 'DefaultMode', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'F92E464CB68309428FD9D5B4E7C168EF', '2012-01-20 14:40:15', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 1, 'Платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'FA0E0DE36C81CC4E9F2A3A736ED110BA', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 3, 'Связывать как', 'RefType', x'7A49AD62E1F3494A80A0A5E19E9BE068', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'FA3705AE04871C4BA6906A1F7B521FA9', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 2, 'Начальное', 'isStartup', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'FA3F8898B85E65458EE5F6D4011BE295', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 4, 'ID', 'IDField', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 128, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FA8A2FCC5083CB48AB9D57E6103D4490', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 1, 'Название', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5536327DD7BA124DAFC2E7FF3613B4A1', x'FBA664914D432E499BCBED05CD08591C', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 1, 'Целевая платформа', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FBC3C5571B0DA34F98493C4AB14A3162', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 2, 'По родителю', 'PerParent', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'FBCE92419F45624085AD8E293A7A86AE', '2012-01-20 14:40:02', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 3, 'Поле фильтра', 'FilterField', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, 'название поля в фильтре из которого будет сформировано выражение, если поле в фильтре задано', NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'FBF842A55E1BBC42A5EA3FFEFBDFBF1C', '2012-01-20 14:40:03', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 1, 'Последовательность', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', '%P', NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'FDD81F11562038498668757130F4D57C', '2014-03-29 14:41:38', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 5, 'Массовое выделение', 'UseFavorites', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'FE7B6D8584309E4884424263A02AE30A', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 19, 'Поле для расчета даты', 'NumberDateField', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'FE9414AC95E93D49B2E650A8F546F63A', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 2, 'Тип платформы', 'TargetType', x'7B8AB80EDCF2524F9B7D3D4E61B55C81', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'FEFF1E43FFEF1445B237B1ACABD0A2FB', '2012-01-20 14:40:16', '2017-12-25 16:22:16', NULL, NULL, NULL, NULL, NULL, 3, 'Описание', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы fieldexpression
--
-- Таблица survey.fieldexpression не содержит данных

-- 
-- Вывод данных для таблицы fieldmenu
--
-- Таблица survey.fieldmenu не содержит данных

-- 
-- Вывод данных для таблицы fieldparammap
--
-- Таблица survey.fieldparammap не содержит данных

-- 
-- Вывод данных для таблицы fieldrestriction
--
-- Таблица survey.fieldrestriction не содержит данных

-- 
-- Вывод данных для таблицы fieldsrcdef
--
-- Таблица survey.fieldsrcdef не содержит данных

-- 
-- Вывод данных для таблицы fieldtype
--
BEGIN;
INSERT INTO fieldtype VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'070587C891D14D4D855DC392CC0F9AE7', '2012-01-20 14:40:21', '2017-12-25 16:20:19', NULL, NULL, NULL, 'RTF', 0, 'RTF текст', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0DFD5D53226AC2469BAD3826D9BA4590', '2012-01-20 14:40:19', '2017-12-25 16:20:20', NULL, NULL, NULL, 'StructType', 2, 'Тип раздела', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0E0E9768303AE34BBF7B07BD26194226', '2012-01-20 14:40:19', '2017-12-25 16:20:20', NULL, NULL, NULL, 'MULTIREF', 4, 'множественная ссылка', -1, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0E966C3308625946A524419EFD682B68', '2012-01-20 14:40:19', '2017-12-25 16:20:20', NULL, NULL, NULL, 'Image', 0, 'Изображение (картинка)', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'119CFDAF7CA1A3469DB157D627D33DF1', '2012-01-20 14:40:20', '2017-12-25 16:20:20', NULL, NULL, NULL, 'WFFuncParam', 2, 'Вариант расшифровки параметра функции', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'12EEAA312481754EBD16698F4235234B', '2012-01-20 14:40:20', '2017-12-25 16:20:20', NULL, NULL, NULL, 'ReportType', 2, 'Вариант отчета', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'130ED29361B9474DBEEEDCEEBAFCAC62', '2012-01-20 14:40:21', '2017-12-25 16:20:20', NULL, NULL, NULL, 'Education', 2, 'Образование', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'14AFD3A4DCC1514D969C8CB52FA64346', '2013-07-10 18:50:53', '2017-12-25 16:20:20', NULL, NULL, NULL, 'CustomControl', 5, 'Контрольный элемент  для формы', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'18153A059FCAC94E99311C4AB23C54CE', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Integer', 0, 'Целое число', 0, NULL, NULL, 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'208F8A9E26619940B23E30426F9BDC04', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'URL', 0, 'Адрес ресурса в интернет', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'24B86D7EF796A443A9D60CB89A66FE20', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'TypeStyle', 2, 'Вариант трактовки типа поля', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'28375783F0580E40A5A6F407682050ED', '2012-01-20 14:40:22', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Days', 3, 'Номер дня в месяце', 0, '1', '31', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'2B9FC453B8526A44BBF4F90A068EA396', '2012-01-20 14:40:22', '2017-12-25 16:20:21', NULL, NULL, NULL, 'ReplicationType', 2, 'Вариант репликации докуента', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'2F775E9F99BF5F44AF3FFD18EDDA92C5', '2012-01-20 14:40:22', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Numeric', 0, 'Число', 0, NULL, NULL, 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'382838929000504DB8E3262D094E3DFE', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'NumerationRule', 2, 'Правило нумерации', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'39CFD2BFEB805342A64A24C116D26991', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'WFProcessState', 2, 'Состояния процесса', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'3A3878A9883FD34787A231AF949E53B1', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'MenuActionType', 2, 'Вариант действия при выборе пункта меню', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'40D06AC61A2F4441AD0F483A99E89F0C', '2012-01-20 14:40:20', '2017-12-25 16:20:21', NULL, NULL, NULL, 'WFShortcutType', 2, 'Варианты ярлыков, которые может размещать процесс', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'48E476E732F57D41B8D77D5B47FCCD6F', '2012-01-20 14:40:20', '2017-12-25 16:20:21', NULL, NULL, NULL, 'String', 0, 'Строка ограниченной длины', -1, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'49C996F8B1BADA43BB19007C00353C42', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Seconds', 3, 'Число секунд', 0, '0', '59', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'4E199AA330CFC04F92980FFD1A7B0707', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'VHAlignment', 2, 'Выравнивание', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'4E5C4BC769C18B48AD39568F8061E4A0', '2012-01-20 14:40:20', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Memo', 0, 'Многострочное поле для ввода информации', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5DBA9EA722D3CD4598BA73511319CE19', '2012-01-20 14:40:20', '2017-12-25 16:20:21', NULL, NULL, NULL, 'MasterString', 0, 'Мастер строк', -1, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5E820B7D3C8CA244AC6EE53812337737', '2012-01-20 14:40:21', '2017-12-25 16:20:21', NULL, NULL, NULL, 'CurrencyType', 2, 'Валюта платежа', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5E9603EC041094438B81FAA4AADEBC4A', '2012-01-20 14:40:22', '2017-12-25 16:20:21', NULL, NULL, NULL, 'InfoStoreType', 2, 'Тип каталога', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'62A2627C8D09A546AFDCC0286C87EDCC', '2012-01-20 14:40:21', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Date', 0, 'Дата', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'63D6B9F8FA25734797AF43C663D098C8', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Autoincrement', 0, NULL, 0, NULL, NULL, 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'6531AF860CC4E14188E2DE89D2C1BF84', '2012-01-20 14:40:21', '2017-12-25 16:20:21', NULL, NULL, NULL, 'DevelopmentBase', 2, 'Платформа разработки', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'65348B4111516148B4C5E9535B3FD7B3', '2013-01-28 13:13:46', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Quarter', 2, 'Квартал', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'661E7836D4C89B4C9F4109D999E4CFB0', '2012-01-20 14:40:19', '2017-12-25 16:20:21', NULL, NULL, NULL, 'Months', 2, 'Месяцы', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'728E3461855DE34892C434841FA1AA8F', '2012-01-20 14:40:19', '2017-12-25 16:20:22', NULL, NULL, NULL, 'ColumnSortType', 2, 'Вариант сортиовки данных колонки', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'794061085D25D54FABBEDE9BC7987090', '2012-01-20 14:40:21', '2017-12-25 16:20:22', NULL, NULL, NULL, 'Boolean', 2, 'Да / Нет', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'7A49AD62E1F3494A80A0A5E19E9BE068', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'JournalLinkType', 2, 'Для связи журналов друг с другом', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'7B8AB80EDCF2524F9B7D3D4E61B55C81', '2012-01-20 14:40:19', '2017-12-25 16:20:22', NULL, NULL, NULL, 'TargetType', 2, 'Вариант уровня приложения, куда может генерироваться код', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8608384640BAA948AAF5B8B138FB38C8', '2012-01-20 14:40:21', '2017-12-25 16:20:22', NULL, NULL, NULL, 'E-MAIL', 0, 'Почтовый адрес', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'875B1E3EC05C2B4E91D257077FD2CDBB', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'Time', 0, 'Время', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', '2014-08-27 12:13:12', '2017-12-25 16:20:22', NULL, NULL, NULL, 'ParityType', 2, 'Четность', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8F47A07A0CA8254B9425A540399C6705', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'DateTime', 0, 'Дата и время', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'91A380866B51DD46B994A3A74F3BCEE3', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'Minutes', 3, 'Номер минуты', 0, '0', '59', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9243EDA963BAE84CB2B1BB0047848ED3', '2012-01-20 14:40:21', '2017-12-25 16:20:22', NULL, NULL, NULL, 'Hours', 3, 'Номер часа', 0, '0', '23', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9313F4BAD350454D96AF56B8415569D8', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'MesureFormat', 2, 'Формат индикатора', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'961085CC094CE749A541D00372E6D444', '2013-06-11 13:02:16', '2017-12-25 16:20:22', NULL, NULL, NULL, 'ExportType', 2, 'Тип экспорта', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9BAEE12ABF21B44BA554096D5B959903', '2012-01-20 14:40:19', '2017-12-25 16:20:22', NULL, NULL, NULL, 'WFStepClass', 2, 'Тип шага процесса', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9DF4659492B4B34D8052290BEC7E9E2B', '2012-01-20 14:40:19', '2017-12-25 16:20:22', NULL, NULL, NULL, 'Reference', 4, 'Ссылка', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'A265C1406720474BA7A0624218DC70B2', '2014-04-15 11:45:12', '2017-12-25 16:20:22', NULL, NULL, NULL, 'Birthday', 0, 'День и месяц', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'A97386691DC5164C8EED7D8810FFF900', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'DayInWeek', 2, 'День недели', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'AC992E5363D5D44BAC7A66DD6D7DD243', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'GeneratorStyle', 2, 'GeneratorStyle', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B02DEF620198924FBDD07F52BA87CEE6', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'PlatType', 2, 'Тип плательщика', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B0D7CA66564368479AED471FFB780C23', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'msgState', 2, 'Состояние заявки', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B40D6B5ED7B42E44AEB5B2B35F51FA54', '2012-01-20 14:40:21', '2017-12-25 16:20:22', NULL, NULL, NULL, 'OnJournalRowClick', 2, 'действие при открытии строки журнала', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B736F5EE412A1048B1ED7FB8557C25B9', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'PartType', 2, 'PartType', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B7E0814A6D0F1547942EC38398FC9EA2', '2012-01-20 14:40:21', '2017-12-25 16:20:22', NULL, NULL, NULL, 'MultiLanguage Memo', 0, NULL, 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B8FD39DBA4C2534AA357281F13BD16AE', '2012-01-20 14:40:19', '2017-12-25 16:20:22', NULL, NULL, NULL, 'HTML', 0, 'Документ в формате HTML', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BB4E2D1305A56849BC1C50716757A2C5', '2012-01-20 14:40:20', '2017-12-25 16:20:22', NULL, NULL, NULL, 'ReferenceType', 2, 'ReferenceType', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BBD7C8B4A25D1B48B6F9406635CC0ADF', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'stateNomen', 2, NULL, 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BE284B2A37ECFF42BE74A891808C4361', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'ConditionType', 2, 'Варианты условий', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'FolderType', 2, 'Тип папки', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C00BE4D87950314B8CD5BBC66BAFA683', '2012-01-20 14:40:21', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Button', 5, NULL, 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C2DE53F44B73964DBF2F89A0B0332CB9', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'ID', 0, 'Идентификатор', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C340EA421CD62F46AF6F314D2F0000E1', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'File', 0, 'Файл', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C48D9EC186B1F547B49F644C8C795459', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'msgResult', 2, 'Результат', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C608D44CBE64964787E545A26D3B3DDA', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'PartAddBehaivor', 2, 'Поведение при добавлении строки раздела', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C7FEC37988B7224E8BE3F34759F1190C', '2012-01-20 14:40:22', '2017-12-25 16:20:23', NULL, NULL, NULL, 'ExtentionType', 2, 'Тип расширения', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'D2A8289A6E0CBF4FAF397EA43298B2F9', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'OrgPrefix', 3, 'Префикс инв. номера', 0, '0', '49', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DF53B3432350CD48AC0F5142BB4F1330', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Sex', 2, 'Мужской / Женский', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E0280E0D19D66A49BF995F9F28321C74', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'YesNo', 2, 'Да / Нет (0 или 1)', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E15AE3F962B892419FB50F7DD6A5BF03', '2012-01-20 14:40:19', '2017-12-25 16:20:23', NULL, NULL, NULL, 'AggregationType', 2, 'Вариант агрегации по полю', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E47F3330E2A570448B995F37A5F1947D', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Percent', 3, '0-100 %', 0, '0', '100', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E5FEA67D39955749BBBCCA7C4E34FF21', '2012-01-20 14:40:21', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Password', 0, 'Пароль', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E8905A69C55FFC4081B8E84551EF4DDF', '2012-01-20 14:40:21', '2017-12-25 16:20:23', NULL, NULL, NULL, 'WFFuncState', 2, 'Состояние функции в бизнес процессе', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Employment', 2, 'Занятость', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F7819EB0736C144EB977F40CEC9B200C', '2012-01-20 14:40:22', '2017-12-25 16:20:23', NULL, NULL, NULL, 'ReferenceSQL', 4, 'Ссылка на источник данных - SQL запрос', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F7A946DE1BD2FB43BD3EDF6E82BD9477', '2012-01-20 14:40:21', '2017-12-25 16:20:23', NULL, NULL, NULL, 'TriState', 2, 'Да / Нет / Не определено', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F9C1F4F3C381A64598755A31414D9CA7', '2013-05-06 12:13:04', '2017-12-25 16:20:23', NULL, NULL, NULL, 'Panel', 5, 'Поле для подключение дополнительной панели в код формы', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FE94C47845AC134AB677A0BB3FDD793E', '2012-01-20 14:40:20', '2017-12-25 16:20:23', NULL, NULL, NULL, 'MultiLanguage String', 0, 'Строка с поддержкой многоязычности', -1, NULL, NULL, 0, 0, 0);
COMMIT;

-- 
-- Вывод данных для таблицы fieldtypemap
--
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'003724EF4164E24090766ABEC8BC3B4E', '2012-01-20 14:40:21', '2017-12-25 16:20:32', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'007AAFC5BEAC1E44A955737D6F6B68E7', '2012-01-20 14:40:21', '2017-12-25 16:20:32', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'00C1FA5E53185A439F89BA359F0DBE28', '2012-01-20 14:40:20', '2017-12-25 16:20:32', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'013F584D778C5A408ECC9FB887DA8903', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'01470EF9DDC63340B0877C0144E0C741', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TEXT', 0),
(x'12EEAA312481754EBD16698F4235234B', x'0165153C8ECDD6408ABAB2E1280B4CC3', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'01B8C8781C530C488F147E4C9281B92A', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'01CBA6FCC9575341AC22BABAA1BAD0E5', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'PASSWORD', 80),
(x'E0280E0D19D66A49BF995F9F28321C74', x'020B4937D15BA442BCF2EDAA7DFF8E1B', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'02BD7CE3787AA34FAC44949D67E9A44F', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'02C8F70B0559A24CAE5E9EABE61062ED', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'0329CCC2C0238547B7DBD4385271318B', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'035F8A91EAFBF04587833F8DC3B32B00', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'03BE96A24CEB064089D5368AA8B4C6D1', '2012-01-20 14:40:19', '2017-12-25 16:20:33', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'048588B2FAA6D941A7E2C07ECB81C86F', '2012-01-20 14:40:19', '2017-12-25 16:20:33', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'04C66FABEF0843488A34A2CEAF3FD935', '2012-01-20 14:40:19', '2017-12-25 16:20:33', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'058E171D5641A245A1315F2EBD150140', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'067845F73956884E920F712072CC8C54', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'961085CC094CE749A541D00372E6D444', x'068BABD19BC2A9448DA70BA6F043CFE7', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'06B3BDA468FFAF4F80975FD7645FBE86', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'06F37517198E344A91A3D7D76C917CF2', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'06FCCC84DB7C0744BB857CC9C62AE3CA', '2012-01-20 14:40:22', '2017-12-25 16:20:33', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'078A9A808F54744E8E0297AF179FF20C', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'07CE65331A7C694D8672064C13CB9095', '2012-01-20 14:40:21', '2017-12-25 16:20:33', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'0871E8A42E00C74CB8D1EEFBAFC77CAB', '2012-01-20 14:40:20', '2017-12-25 16:20:33', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'08A0C224AF7FAD4AA8F05607092B7908', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 255),
(x'B0D7CA66564368479AED471FFB780C23', x'094301A4D4787444BA6A6A6191CF9C73', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'0A2ABDAC6505C04F9F60036F941DFF7C', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'0AA6D18BF4CF084B9C76B482472636B1', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'DATETIME', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'0AA71258A5417E41B915AE3040ED348E', '2012-01-20 14:40:19', '2017-12-25 16:20:34', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'0AC71F954FCB664CBD3209C56623D411', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'0E966C3308625946A524419EFD682B68', x'0ACEFDB7B445524CB05BEF58B5C0598E', '2012-01-20 14:40:19', '2017-12-25 16:20:34', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'IMAGE', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'0B404B678B0AE942A2EED4925B50FFF2', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'0BE6E26BE6CA4C4488D567B2C718DDA3', '2012-01-20 14:40:22', '2017-12-25 16:20:34', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'0C8999E152819044B2F9A24C40264067', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'0CA10B8D85D3A548BB66E983A1F0882A', '2012-01-20 14:40:19', '2017-12-25 16:20:34', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'0DA6F9F74D791A43A2F3787D9E2A7D42', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'0DED46E63315AC439816DFFA70047F34', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'VARCHAR', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'0E0A32D4008A084D8789E55851F0EC0F', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MEMO', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'0E525A1697F19E4B93257C5D4F9AD40D', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TIME', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'0E93D90C73695744A53B48D9325205C3', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'0F37E1821899754E8A3CEE0D503C635C', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'0F855B4651ECFE45BE7B942B43F7F76C', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'0FB24BA7F70B934CAC99F12E19CE6875', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'uniqueidentifier', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'0FEC848BF9C33C49BDB1207AD7999301', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'107D13A98DD0024898148F1A957F25A2', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'10AA9CCEA8BA8C4FAEDC870B5F47C066', '2012-01-20 14:40:22', '2017-12-25 16:20:34', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'10B453ED0C6F864989089E2C02E4132B', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'10BCCBA188A3964BA452A1316BD8B47B', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MEMO', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'10D8DC2BBFF28F4692F9AEE4AC48EADA', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'DATETIME', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'10E31191789B274CB1BF39B3136E2DCD', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'1123FA4A2251DE45A07A2DBC360968EE', '2012-01-20 14:40:20', '2017-12-25 16:20:34', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'VARCHAR', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'116B422600E0844EB0979BDABCCDB46C', '2012-01-20 14:40:21', '2017-12-25 16:20:34', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'button', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'11AA270EAD471C47B17E63E0D7C9DE07', '2012-01-20 14:40:19', '2017-12-25 16:20:34', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'121064D92ECE7B48924070862B3BEE6F', '2012-01-20 14:40:22', '2017-12-25 16:20:35', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'NUMERIC', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'125057C62A275C41A86FF66C8A6A60FF', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'GUID', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'1293F9894E5C064E9267219F4105CEDA', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'1349D364F7C55A4183712A9DA0675C49', '2013-07-10 18:50:53', '2017-12-25 16:20:35', NULL, NULL, NULL, x'6D7D8396C49AF74788AFCE375153C200', 'xtype', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'1361BF2DDF70DC4CAFB308E271BA9E81', '2012-01-20 14:40:21', '2017-12-25 16:20:35', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'button', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'13901ABC26F60448A71DC6DFE444EE43', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Object', 0),
(x'0E966C3308625946A524419EFD682B68', x'1400E64471891D47AE06E07EE697B22B', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'9313F4BAD350454D96AF56B8415569D8', x'140F805F6773544E8BFD2BF3FEEC9FF6', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'1478D0F35D023F48AFF807F79C266E36', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'CHAR', 38),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'14CD81A07497BC49AFE23E3E6F5D0157', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'GUID', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'14ECB1A19BDBBB42AFFEFA42488DF4F4', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'151C9E8FE55D624AA73F068ECCF29A2A', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'15A5910C2946064B9C1ACB555CFB4976', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'15AF0EA55D569E4098B63B16DB7ACD42', '2012-01-20 14:40:21', '2017-12-25 16:20:35', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'15BB13224F01144D800259F7A5A33DEF', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'167275BCECD04F4F950EF257A9F1F130', '2012-01-20 14:40:21', '2017-12-25 16:20:35', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'172E658AAE428445A272113D2115AB79', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'1742003ECD862147B9119725AFB346D6', '2012-01-20 14:40:21', '2017-12-25 16:20:35', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'PASSWORD', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'174305D883AEBD44A0F7744A13C11D41', '2012-01-20 14:40:22', '2017-12-25 16:20:35', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'1773627665D1D74700DBA5FC9BB7D855', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'17CC8546D1366B4A8616972BF1E454C2', '2012-01-20 14:40:21', '2017-12-25 16:20:35', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'RTF', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'17EA102B73D3A54AB3EF2811F7BF6156', '2012-01-20 14:40:22', '2017-12-25 16:20:35', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'18316FE9BC5D4340A536612CF0570098', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'189DE24778D8B24D97B66AFE7A34ECB9', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'197A04D44B16BB4E96626EB218A7BF87', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'1980A7DA5042C040BA6A3A906696C05E', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'System.Guid', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'19C2BBBDAA0A2941B20200316D11D654', '2012-01-20 14:40:20', '2017-12-25 16:20:35', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'DATE', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'1A07925B26D172468A4503B170DF5612', '2012-01-20 14:40:19', '2017-12-25 16:20:35', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'bytea', 0),
(x'F9C1F4F3C381A64598755A31414D9CA7', x'1B1B4E929AF2894E88E48E8E16044E22', '2013-05-06 12:13:04', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'null', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'1B918C480E556F4A9B238D75140D6121', '2012-01-20 14:40:22', '2017-12-25 16:20:36', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'1BE413776EAD8549A1A903C5F97188A2', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'1C8D8E7503E3264F903953A9D4ACC581', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'1C94A949A459994C8AB488C73F3DC9FF', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'1D553BF4FB07BC4489C27EE1E1DAEF41', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'1DB7BBA4F0B92749AEFCC2488810370C', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'1E4CA22BBA3DCF4FA20CD9A4B2837030', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'1E6C2EABC95F96418B85BFF9F808E8D1', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'1E972C52312D4E419EBC42E638657C21', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'URL', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'1EDC169F8F0C7F439AF8CB357E63C5A8', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'1F49FBF19CC5C541A6C5835EF27F5284', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'1F9EE73CC780224F9B7743ABF9E17698', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'DATE', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'1FE8E6B08D701B45AEADCDF765ACF64D', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'200CC54C1D02C544BFFE13D2CDD7C79F', '2012-01-20 14:40:21', '2017-12-25 16:20:36', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'20F84ED299CCCB4AB5AA233FDC5F565E', '2012-01-20 14:40:22', '2017-12-25 16:20:36', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'20FF6063DE31AE4DBD3D0481B524E23A', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'28375783F0580E40A5A6F407682050ED', x'220C14E59713EA49AC42EA553D1619E8', '2012-01-20 14:40:22', '2017-12-25 16:20:36', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'2215919D3EEDCA489082C914AB35D6CD', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'2256ED34DB508B459A0C50B641D64DF1', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'22CE03C2F7478943A4BF9F0B5513046D', '2012-01-20 14:40:21', '2017-12-25 16:20:36', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'22EC7793104CBC4798FFEF5AA25F5BCE', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'2336910AE0972B459660C9A13F2339EF', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'233F338DC4266049A5D950B774CC9D45', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'28375783F0580E40A5A6F407682050ED', x'2389439F8229EC448AD6A66E74809297', '2012-01-20 14:40:22', '2017-12-25 16:20:36', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'241D9B83AF07F049B6EF2F0053B4E411', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'244016E0464EE343811499ACC659528D', '2012-01-20 14:40:20', '2017-12-25 16:20:36', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'2466E954D2C88749ABB15F62E5BCF3C1', '2012-01-20 14:40:19', '2017-12-25 16:20:36', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'251D7CF895F4FF479FCA115B855F91C6', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'25280242D096E74EAE665A0262B844E5', '2012-01-20 14:40:22', '2017-12-25 16:20:37', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'255135AF67CB6C47B0121AE19611B67D', '2012-01-20 14:40:22', '2017-12-25 16:20:37', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'25AB5868DB4FA0408A7389403F32C56D', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'0E966C3308625946A524419EFD682B68', x'26479DFD66F0044D8B9D645CAC9E405F', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'IMAGE', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'264B9617B8931946A9D8A0306BE1533D', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'265A0390DAF41546B3E5B4AAA619610F', '2012-01-20 14:40:21', '2017-12-25 16:20:37', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'PASSWORD', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'268D9B4D6317344583A87EE4B49D5CFD', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'26EE04FB1D335249BF8F882E256081B0', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'2714FB39752F9549A1DB1E3B89FA29D3', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'FILE', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'27DC01F557134C48B951DF0F55B55CB7', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'2812536D2B28B446AF2CB25606EB13DC', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'28400B39E524F741810115B2D6F50F5C', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'28682CA552772348B25F2947CF18429A', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTEGER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'28827EE7913C7D4D8ADF1ECE233EFBDB', '2012-01-20 14:40:22', '2017-12-25 16:20:37', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'290A433E733B324C93F7B20AE9E9FB5B', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'2917DEBFAEEB2C4689677E5F26420185', '2012-01-20 14:40:21', '2017-12-25 16:20:37', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'29F66253F6D9F744BCF246C3FE52AE5F', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'28375783F0580E40A5A6F407682050ED', x'2A5DDC585B4CB3429C27043D83E81F94', '2012-01-20 14:40:22', '2017-12-25 16:20:37', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'2A611A80183483448925BC70EDC8F63C', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'2AA70E5A7CB57946BE056FAF22D23631', '2012-01-20 14:40:22', '2017-12-25 16:20:37', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'2AA950DF5D95AC4DBADCCEE676EABC35', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'2AAAE5F913C9084CAE59610755341E7F', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'DATETIME', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'2B055C97106C944F9BD8587404BB26D0', '2012-01-20 14:40:21', '2017-12-25 16:20:37', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'8F47A07A0CA8254B9425A540399C6705', x'2BA206F1D6FAFA429599E90DA089CE49', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'DATETIME', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'2BE917CFE5774044AA474F4411BD203A', '2012-01-20 14:40:19', '2017-12-25 16:20:37', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'2C8806CE94A0DB458032E223E5B38707', '2012-01-20 14:40:20', '2017-12-25 16:20:37', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'2CC7C4265E83874DA14B12A24D9CE41C', '2012-01-20 14:40:21', '2017-12-25 16:20:37', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'2CCA25F5C04E8847B318AA58880D8998', '2012-01-20 14:40:22', '2017-12-25 16:20:37', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'2D8A797C2B72F944AF01EC39C6FEB9DC', '2012-01-20 14:40:20', '2017-12-25 16:20:38', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'2DAEC05AA0EC3543AECBE173E60DC42F', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'DATE', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'2DB6A3F19E09E64A870AF81BB8D6F5A7', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'2E07696105DFED40A327D785983F8FFB', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'2EB7D2FC6199E645A517384EF090CA92', '2012-01-20 14:40:20', '2017-12-25 16:20:38', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'2F112EA64D3DD14A808EF151ADE95075', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'2F399ABCBE633142998921DEEE5600A2', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'2F415BE983FADE4FAEEAC616BDCE4F18', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'2F7A4C0032FDCB48A9067DDD65FDE3ED', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'2FD82BA5A8FC2445BB86B27BF340A8EC', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'STRING', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'2FEC9D08878CAA41923A8D6299AFA707', '2012-01-20 14:40:22', '2017-12-25 16:20:38', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'317DBA8A050D22439082A23D45E316C6', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'317FD3717DCE62478D5C105678156C23', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'3188A83F7CB289489C2B67307E82B24C', '2012-01-20 14:40:20', '2017-12-25 16:20:38', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'32343DD49F18464E9CCDD0EC1A1705C9', '2012-01-20 14:40:20', '2017-12-25 16:20:38', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'3257116E04117C43B92FA850679D61BC', '2012-01-20 14:40:22', '2017-12-25 16:20:38', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'3266D1D2A434A64BA33383D1D1CF1D18', '2012-01-20 14:40:22', '2017-12-25 16:20:38', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'961085CC094CE749A541D00372E6D444', x'32A13254550B1A4EBA92F4CB6BBBC181', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'33138DB6B4EA96458D792C145B31466E', '2012-01-20 14:40:22', '2017-12-25 16:20:38', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'3374FEC527EAE74A88A1E36363009039', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'DATE', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'339AD3BC851FAB489AF6331E035CEB80', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'343C78E7D688464D9C9C3DF7690DF31F', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'346692E240DA144BBAF07666E7DAE354', '2014-04-15 11:45:12', '2017-12-25 16:20:38', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'DATETIME', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'3519EEB85F1F26498E11BA61842DC5DC', '2012-01-20 14:40:20', '2017-12-25 16:20:38', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'35C224874B20FF47995904A139F42BAE', '2012-01-20 14:40:20', '2017-12-25 16:20:38', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'961085CC094CE749A541D00372E6D444', x'35EBAB2F06924D4081D59DE08F86A835', '2012-01-20 14:40:21', '2017-12-25 16:20:38', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'3612E314682B8B44B7FA63A468034F8C', '2012-01-20 14:40:19', '2017-12-25 16:20:38', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 255),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'363D4E724321534F8E75F147F06F780E', '2012-01-20 14:40:22', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'366BB5F8F4D01446939AC433931C6B5C', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'3673E9F1AC85A244A7EEC1DD48917544', '2012-01-20 14:40:19', '2017-12-25 16:20:39', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'961085CC094CE749A541D00372E6D444', x'367D4DC389AFBD478AD97DCF3A2D84CA', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'36B363DE1882494198F707E8DF7B75C8', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TEXT', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'3792DC4B9AF6A84AB3EFE8993AB56723', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'12EEAA312481754EBD16698F4235234B', x'37A5FDB043F05E4294821005276CCADC', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'37A91F064CC53D4A84E06DE44203D8B9', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'37F579E17A5C6E47BCE071050D364F1B', '2012-01-20 14:40:19', '2017-12-25 16:20:39', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'3862BAF800AB854FBAA36FA50F167309', '2012-01-20 14:40:19', '2017-12-25 16:20:39', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'392E659746BBD1499E5F5F503F027E03', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'39420EF4D8188C4EABD1301BA03A048B', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'button', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'395342520BCD084281A62D0B955058C8', '2012-01-20 14:40:22', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'39881434C48103409CDF3E2C5EE68416', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'39CDE3E0AEF6AA42AAA4A4959262C815', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'button', 0),
(x'382838929000504DB8E3262D094E3DFE', x'39F3B7F6D42D3245BD7DD1F85CCFF8C3', '2012-01-20 14:40:19', '2017-12-25 16:20:39', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'39F78E9D670B944684FA1D1CBA3D1337', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'3A919456862EB44890B7896A3DF76267', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'3ABD9113F28CDA41AF06B249E6E15D08', '2012-01-20 14:40:22', '2017-12-25 16:20:39', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'3AD53B0E56254248985098439D5ED7BB', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TIME', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'3AD825B7823111448517ABB53D5D8BF4', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TEXT', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'3B00E6514B8E5340B4319AB7889A0935', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'3B13685909BED848B7FDE7B5FF2C45BF', '2012-01-20 14:40:22', '2017-12-25 16:20:39', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'3BCCEF9DADDE254E8311D50F3CBD94F0', '2012-01-20 14:40:19', '2017-12-25 16:20:39', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'3C01ACD3C2A7834DAB08AF4D4B4C4525', '2012-01-20 14:40:22', '2017-12-25 16:20:39', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'3C173EDFE906F34EA4621344BF5D8290', '2012-01-20 14:40:19', '2017-12-25 16:20:39', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'3C836B494013C04B99E6F53407D81BFC', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'3CE401971BA7A245BB9D64E02A085E22', '2012-01-20 14:40:20', '2017-12-25 16:20:39', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'3CF48378EA9EB64A8936CD9C91F9B68D', '2012-01-20 14:40:21', '2017-12-25 16:20:39', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'3D9B6E48D55CCD4E9897A811488DD8EF', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'3DB16322DB965B48BECE3FD5F863952D', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'long', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'3E223711A80AB34F8C6FB25DF9C11457', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'3E2A5C029466E94586CABA68C0826FDF', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'961085CC094CE749A541D00372E6D444', x'3E536AE3637B53438292B93E66AD6D11', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'3F834B9C16E1534FB66D93421F4E41E4', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'3FB4FC47DCEAD149BC66EFBA1AEB3AD7', '2012-01-20 14:40:20', '2017-12-25 16:20:40', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'GUID', 0),
(x'961085CC094CE749A541D00372E6D444', x'4026054C39D2E54597706F2DFEFFE297', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'410BD7F77828BB40BD71038EC173AAE8', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'414E05630AC22644B59AC17CC3D035DA', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'4150883B7C8E484CB28F31511BB71282', '2012-01-20 14:40:20', '2017-12-25 16:20:40', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'TIME', 0),
(x'0E966C3308625946A524419EFD682B68', x'416E964CAA12574B927A52492296EA6A', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Object', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'4195559EE88BF947839D9D072D188F4F', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'FILE', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'420C05F83E14F24EB5EB0E2C990AFBF0', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'4214FFBF279C2445925974727AE08FD3', '2012-01-20 14:40:20', '2017-12-25 16:20:40', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'426D1FB85EE30540B485ABDF32B85C01', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'4271348C380904498E463A5B7246DC25', '2012-01-20 14:40:22', '2017-12-25 16:20:40', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'42F3697F1D751D4AA04A7916FF96D94C', '2012-01-20 14:40:22', '2017-12-25 16:20:40', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'42F94446AB0ABA4C9F72CFD39E92461B', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'431C5E08DE46F045B53AA39CC833E9ED', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'43768CD13C13654E949461D91248B60D', '2012-01-20 14:40:20', '2017-12-25 16:20:40', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'43787028A89A6743A2DF04B543D2D315', '2012-01-20 14:40:21', '2017-12-25 16:20:40', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'43D314DE605480458E01EE8FE1CAE609', '2012-01-20 14:40:22', '2017-12-25 16:20:40', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'C608D44CBE64964787E545A26D3B3DDA', x'43DE7D6B4042AD448DE267EB1BECA282', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'441EA9410E894E41B8EBB73FDFBA15E3', '2012-01-20 14:40:22', '2017-12-25 16:20:40', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'444770DD96FFF74A84E5C933CFD8AA75', '2012-01-20 14:40:22', '2017-12-25 16:20:40', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'444D0D6F25C0D34CA391289182F457B6', '2012-01-20 14:40:20', '2017-12-25 16:20:40', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'4476C34307E61B42840E3DF4FDC31D88', '2012-01-20 14:40:19', '2017-12-25 16:20:40', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'44B1862225AC574398B448B2BE9DEAAB', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'long', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'4647E8183310334693C5E96D339B431D', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'46B2D89FD7C22E4286D7491A26C0C292', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'46C78243211EC443AD62D7BF23DB425B', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'46DD2D738ADD154291392FB4EEA322F6', '2012-01-20 14:40:22', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'46E881897DE36F4792BADBED59C34E4B', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'476AF8F1D7C35844BC2CD4EF595BE0FC', '2014-03-12 10:17:16', '2017-12-25 16:20:41', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 255),
(x'8608384640BAA948AAF5B8B138FB38C8', x'47C31E42CD41704FA24E33F82DF36566', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'EMAIL', 80),
(x'39CFD2BFEB805342A64A24C116D26991', x'481C718429F1CA4D8EF719793356D8D5', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'48A26D27C55BE6438A4BC8DA6F5B8185', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'48E48090AEE3904CB5B8809ADAE9805B', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'49190B89D239074B8CBF50919E7F845B', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'49AD10820B2891498A3A1F90137A1741', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'49F94AD563BE51498696858FB7184DBC', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'49FC0D711E80014FAC946479D4CC1469', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'4A0383D50195AC4982FF8083849DED78', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'VARIANT', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'4A1412946E51CE48B2F3A9464CD16876', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'4A4186615F7E274DA2EF77E559A5EFC9', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'4A4A09D22EF2F84BBD6FFF17D5238BBF', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 255),
(x'E47F3330E2A570448B995F37A5F1947D', x'4AD0825463E04446872FE998322E782A', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'4AD2FFC839AFF749805AF3C8E991FF70', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'4B90EC578339BF40B6347FD9B6299B53', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'4BB8278D1692C8468BF824D3BD38CFE5', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'DATE', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'4CAD2B8E4B60B3449BB4B308FB2DE5E7', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MEMO', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'4CE7EE6936E5EB43A7E88ACA1FE5C887', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'4D079C19CD738D49ACFAFB0AEDA33886', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'4DEA817C0AECDB47A4F4014712A7B438', '2012-01-20 14:40:21', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'4E0D57C5801CF24197CAD7B7A1D06277', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'4E13BADB724FD44493437DBD5B98D26C', '2012-01-20 14:40:20', '2017-12-25 16:20:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'4E440B12054BB24589F4E8A678CBF557', '2012-01-20 14:40:19', '2017-12-25 16:20:41', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MULTIREF', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'4E601A616DC02D4680FBE03D0DD3A5DB', '2012-01-20 14:40:22', '2017-12-25 16:20:42', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'double', 0),
(x'382838929000504DB8E3262D094E3DFE', x'4EE96C7B1294A147B25882CF8302DBBD', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'4F11E6A70E0A5E4CA626CA65D7283663', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'HTML', 0),
(x'F9C1F4F3C381A64598755A31414D9CA7', x'4F62528BAD5D2F4F97B638C8060FD98E', '2013-05-06 12:13:04', '2017-12-25 16:20:42', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'object', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'4F7EF9F7FF514548B3233D9F7C97521E', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'4F9DAFF0051586499E7C9E6F11F99927', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'4FE4738DB9ED5C4AAE84C2AE1FA9C811', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'500194A2767D4448835B6152B4E43EE0', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'500B10DBA5A5BC4CA0CDA88DD55FD0E1', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'EMAIL', 80),
(x'794061085D25D54FABBEDE9BC7987090', x'500DFF5496FAEB4A8241E8934195E486', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'507551E93165A8438A9BCD63EE6D966D', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'507FD80242CE9146BE90566B80734461', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'datetime', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'51087E58B322364694FBD9C3F1BF1CA9', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'515B6F12A1F38F439A63A4673255599A', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'516ED224A06971408D844B180BA27BA6', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'51A4AAA55C86DD47B4A28CBB277EBFBD', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'51BF10C5C24A3F488D3375312F206FF8', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Guid', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'523327DF72BA4B49BB54F5E49D34C749', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'525BA05E14854A46AC120FB38B3EB4A8', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'BINARY', 16),
(x'F9C1F4F3C381A64598755A31414D9CA7', x'526BD0CFFDD5A24E81AF0811CD1319F6', '2013-05-06 12:13:04', '2017-12-25 16:20:42', NULL, NULL, NULL, x'6D7D8396C49AF74788AFCE375153C200', 'panel', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'528B2974A85EF849A4DC2405E96C089F', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'52A600F382247C408AF3B9D5CB6A4679', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'52CFF45CCA93044792324BD3A1F29438', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'53289C977CF8694AB2440CA909938356', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'5368F45AD46D2B49918EC08D63C2AA3B', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'53D93562EF168D4EAD34F003F6114277', '2012-01-20 14:40:19', '2017-12-25 16:20:42', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'540577124E9F7C4388A13163FA94A456', '2012-01-20 14:40:20', '2017-12-25 16:20:42', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'5416563B1B044140BC308E0051271087', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'54D0855EC6324040A60650EA489CCA9D', '2012-01-20 14:40:21', '2017-12-25 16:20:42', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'54EFD69B657C5E4586218127BDA8C199', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'55064E2ADE9C8248B66205CA8E9E8FA7', '2012-01-20 14:40:21', '2017-12-25 16:20:43', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 80),
(x'C608D44CBE64964787E545A26D3B3DDA', x'563DEB427B272846AA179348F7BA0BEA', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'57BBB7F4262CC34EB84E9C737334AB1D', '2012-01-20 14:40:21', '2017-12-25 16:20:43', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'5806594BA63DDF4DA683C115D78DDC8C', '2012-01-20 14:40:20', '2017-12-25 16:20:43', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'5860A1D9247FF942B435CEAEBD0F0716', '2012-01-20 14:40:21', '2017-12-25 16:20:43', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'DATE', 0),
(x'0E966C3308625946A524419EFD682B68', x'58717893BC039A47B0134451568AE434', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'IMAGE', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'5949C0FB3A539F4A8082BB923C488B47', '2012-01-20 14:40:21', '2017-12-25 16:20:43', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'59570E8D36467D4E80A9DA838B566439', '2012-01-20 14:40:22', '2017-12-25 16:20:43', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'float', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'597933B6E3817C4C9864493E6981670C', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'59B1EEF680E88445AC6200F973DBCE81', '2012-01-20 14:40:20', '2017-12-25 16:20:43', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'28375783F0580E40A5A6F407682050ED', x'5A55D368FC93EE4095D990A7058F0566', '2012-01-20 14:40:22', '2017-12-25 16:20:43', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'5A6B43506E0AF14E98C3D21B46CE8965', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'5A71D50006B7B745957A8918EBF19D87', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'5A860CB67E518641B3597F05959C6C96', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'5AFBB5ADDC7C964F8EE5A75CD3C9381C', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'5B2F9C8B27241940BE75806DC586162E', '2012-01-20 14:40:20', '2017-12-25 16:20:43', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'5B3266B1ECABD54FB8AE599897029C28', '2012-01-20 14:40:21', '2017-12-25 16:20:43', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'DATE', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'FE94C47845AC134AB677A0BB3FDD793E', x'5B640F84390E9744B0D1C5779D23C761', '2012-01-20 14:40:20', '2017-12-25 16:20:43', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TEXT', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'5B64BE60B0DDCF4FBF62A074FE5B1EAE', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'5BC33A28AB47124F8889750561D5FC26', '2012-01-20 14:40:19', '2017-12-25 16:20:43', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'5C024E3DE6D30943843E872AEA99D836', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TEXT', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'5C991E6C827F4643A72597BA71BD661E', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'DATETIME', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'5D9B220E64C48C47A35DE3851A979107', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'5DCDF2835908DD41B82A566323BE783D', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'5E90166DB25CC546AE90184B3170F897', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'5EC3ABCA62E9FA428F7DA0D1B4D57CEE', '2012-01-20 14:40:21', '2017-12-25 16:20:44', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'5F2113C9DA14FF4AB6B4C604FC0F03E3', '2012-01-20 14:40:22', '2017-12-25 16:20:44', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'5FA1A2F8D8E7EB47B6625D97411D7327', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'REFERENCE', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'5FC05C144DBCAC458D4DC56161045A86', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'5FD70BB67D2C68499BAF5D9551855CBA', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'608DB67A6F7E1C4783A9FBA8AADF0AE1', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'60F87E7AEB6AEC4EA6770AE4A08C8D8F', '2012-01-20 14:40:22', '2017-12-25 16:20:44', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'61B510595350F34AA9543A3534859A1B', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'long', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'6305221CA3AEE84CBF357C4569EE272E', '2012-01-20 14:40:22', '2017-12-25 16:20:44', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MEMO', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'6343BE1503F6E443B724E1ED0043B9FE', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'REFERENCE', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'634E7CCDDA50AE44BC7CD3A82BFB273B', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'63A387B721537B4A948180B69B024B2A', '2012-01-20 14:40:22', '2017-12-25 16:20:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'NUMERIC', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'63A9D0C8A40D8644B0E1F12D9F757224', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'URL', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'63E6C904B8635E42B173C88D7C51D13F', '2012-01-20 14:40:21', '2017-12-25 16:20:44', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'6434FFB5A0BBC244AA46E62DB112D9CF', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'647002EF0801FA4DA041CB9CA883DB8B', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'648592FC68C2E042B9D4702077E7DB68', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'6493034F4F9B41478064A907D8300EBE', '2012-01-20 14:40:21', '2017-12-25 16:20:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'64C26AA807C5FD43B73008DD521291B2', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'64CB8FE9035AD64781B4F69AAB00EB46', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'6519A95FF80FDD408AAF8CA4F5CDC4AA', '2012-01-20 14:40:20', '2017-12-25 16:20:44', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'66068D810DECFA4E98DD6A10D8E5C536', '2012-01-20 14:40:19', '2017-12-25 16:20:44', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'6643413BA03D0E418B197DEDE49B0F84', '2012-01-20 14:40:21', '2017-12-25 16:20:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'665BBD9CED15314FA0E21A0704429FD6', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'666B8A1FF34F3B4B9EB76D70774C4149', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'66B0BD00CD54204BB1E839C99B5000C7', '2012-01-20 14:40:22', '2017-12-25 16:20:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'double', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'66C13E0D91A2C64E942850F424EE8127', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'66CEBE0B5021C34196164D9EDFFEBC53', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'67C2306134293E4D9A8BA1D04E6E29F7', '2012-01-20 14:40:22', '2017-12-25 16:20:45', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'67EB6A72ABC7C940AA53D6284A8019DF', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'68366C4A3BB69E46A56A7EA4514FD2FE', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'68AC3C4ED97F4E409C297186AA47E6E9', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MULTIREF', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'69115F53225B4F46BFC669D7622FC13E', '2012-01-20 14:40:22', '2017-12-25 16:20:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MEMO', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'694BAE337B8B5148AC4D5950C9352B8F', '2012-01-20 14:40:21', '2017-12-25 16:20:45', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 255),
(x'0E0E9768303AE34BBF7B07BD26194226', x'6982D14F03DE4B4D846A24F602F1D1E3', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MULTIREF', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'69A147BD9A661A4E8CFA05654710B05F', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'6A7E514C359E3642AEBDCED6B13CE9DD', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'6ACB485EC2CED449B05C7F1F66931412', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MULTIREF', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'6B85946331EB004CAEF2A94AB26FB0C7', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'6BD1A9830A291A458143144A67DCB5BD', '2012-01-20 14:40:21', '2017-12-25 16:20:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'RTF', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'6C2071903E7E4F4ABF50EA24E2A5F277', '2012-01-20 14:40:21', '2017-12-25 16:20:45', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'date', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'6D4B6E731A92B4419D5A1C943DE13A5C', '2012-01-20 14:40:21', '2017-12-25 16:20:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'6D7D238CA4234A4A84113F3567EFFC9D', '2012-01-20 14:40:21', '2017-12-25 16:20:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'6D80DC821C6516438AA1656BD3BBDE80', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'6DCE8F9A556C3D4D816F1F4A75329DC6', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'6E19E131BDC01E4DB73BC9C8CDD36AE6', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'6E5301DE40D38E45AE1000B3C7C26114', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'6EC9C31504640F469C5CCB1D1F5074F0', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'HTML', 0),
(x'0E966C3308625946A524419EFD682B68', x'6F0C7E51193148458915C6B31FE16EA4', '2012-01-20 14:40:19', '2017-12-25 16:20:45', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'IMAGE', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'6F614913A9F7E14A89448619112092F7', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'6F6245A2D8A0D6489E896A2E07EA8A6E', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'6F67AA511DFA4F4DB25AA399AB84AED6', '2012-01-20 14:40:20', '2017-12-25 16:20:45', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'6F7D8B1C34959444854D414351DA6D1A', '2012-01-20 14:40:22', '2017-12-25 16:20:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'382838929000504DB8E3262D094E3DFE', x'6FA8A28FBF118B4AA0164EAF1987A52D', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'706539AE8ADFE1439167BA9210604B19', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'706735BD309F9A4F9CEB7A9CA616AE06', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MEMO', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'7236D83026B0AC48ABDEE075658210C2', '2012-01-20 14:40:22', '2017-12-25 16:20:46', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'72953A52A61AF640A496A2E7E9C01FD8', '2013-07-10 18:50:53', '2017-12-25 16:20:46', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'control', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'7396C4399B1E1647947C3016BE2354A5', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'7463EC2B621FF74E867EA2E954B84B29', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'74D73F583298C749B68279F7870C856F', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'7531A73943BF69469846BABA62A3EE8C', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTEGER', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'7583DEE3008CA341915C46B8BF239E44', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'EMAIL', 80),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'75B2AFC2D6073D41B3B7D0DA6190F770', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'75FE881A3B01434EAF5E735521A3F154', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'77F7899A9A68324BA0D8197D71BB90FF', '2012-01-20 14:40:22', '2017-12-25 16:20:46', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MEMO', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'78B69A4A53595F4496FC90AD5AACA5D1', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'790955FA479B244486FF5D608A15AD5C', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'791BA3E30121944B827EDDC20972993B', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'792EBF9CFEE66649A8C91CDD216685E1', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'793B16E691BDC64DB6A48135962B7706', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'RTF', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'7A04718E25346E4C9357BCC6A08A45A9', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'button', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'7A4006298FB9E04B97083C483A46601E', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'7A66CE69670A564BB0D2103F62AC8008', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'7A84A013B7798240AC6B8FB733781145', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'7A88369F88A592479FF556B6B14595AE', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'7B6BD482084C0E4FB057E58739C73443', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'7BBD5249013BA342B4925D521B44ECDB', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'7CA0926EA6EC3C43B23352AAD14E8F80', '2012-01-20 14:40:21', '2017-12-25 16:20:46', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'7CE4E0B0528FBF48BED5AF813C7A59E9', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'7D2F374D68A451469D0A9B378BB2E2FE', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'FILE', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'7E1F93C70A45B44190FB213C76F9B310', '2012-01-20 14:40:20', '2017-12-25 16:20:46', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'BINARY', 16),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'7E4E341E44B4DA40B28DB9D4F5360F88', '2012-01-20 14:40:19', '2017-12-25 16:20:46', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'7F0D25878FC2C941AF85F1AA0F7E6EA8', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'3A3878A9883FD34787A231AF949E53B1', x'7F6D4BF4D808AC4E8CB3F1CBCB4A06BD', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'7F77CD69B99A534194BB5A34709C9237', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'382838929000504DB8E3262D094E3DFE', x'7FC086670365C340940B434CD3C51B1D', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'7FF2054BC4DAC34B94708D32DF1416F0', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'801C62B8A79316458CB932F6879F07AC', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'961085CC094CE749A541D00372E6D444', x'80877664C051D644B719A0ED6BA6CB97', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'80B87DC969ED1F49AE31FD63D0102B61', '2012-01-20 14:40:22', '2017-12-25 16:20:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'80E378BC4DA0B44E8C9A27EB42BB9144', '2012-01-20 14:40:22', '2017-12-25 16:20:47', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'811F6AD16531CD489FF8A8AB11B1CCA3', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'81CF0AC4CEFF354DB109D1D28A0B9BB9', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'81D9B01B54D42F499194E9DB9566E567', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'823261589407A2448812682B5671FF07', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'82A0E42542F9354D9CD018D88FFDE747', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'83A15A28DE54B14CB185B2C0B564F581', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 255),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'83B93E490996C640AF8661C27F9ED8E6', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'83CF8680B0E463429ABA642B8EF529E1', '2012-01-20 14:40:22', '2017-12-25 16:20:47', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'847048FFC99AF049B089EE4EB93FFF83', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'85301625B54A6340A2F2DF8E668740DD', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'856BA210F7C7304AB8E596E7A3E2B49D', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'STRING', 0),
(x'961085CC094CE749A541D00372E6D444', x'85731504E0E5C94E9639F2767FBF028C', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'85E999E05A99A947B5E7D5A7A83BCE44', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'DATE', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'8618C3A2E45E214094A4BEAF11EFD400', '2012-01-20 14:40:21', '2017-12-25 16:20:47', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'DATETIME', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'86246579E1D1E446AC492FCBF916081C', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'TEXT', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'86867B455853C848B4619D0D1B2C6F67', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'86BF7074A2E11F44BB8A7D0B371964B5', '2012-01-20 14:40:19', '2017-12-25 16:20:47', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'87616D15AE183C4080EB6430998718B3', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TEXT', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'87A22187001A0C46A03B3BEAC564DA48', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'VARCHAR', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'88CA7E1F4DBE344B872F871FCFCCD1AB', '2012-01-20 14:40:20', '2017-12-25 16:20:47', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'897E5AF258CD9545A810BA5B7D54E989', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'898B85C89F014E46A099E39A85723F58', '2012-01-20 14:40:21', '2017-12-25 16:20:48', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'DATE', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'8A7FA2C33C0D76408D982AE096A71E59', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'28375783F0580E40A5A6F407682050ED', x'8AEF368FDB834B408B6D0F814E885986', '2012-01-20 14:40:22', '2017-12-25 16:20:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'8B1F403C1C72B34898FB686AF25D0575', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'8BB1D2F0EE25E94FA9E160A0493DA05B', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'8C448639F5E6844A8693E1DB793BBD6B', '2012-01-20 14:40:22', '2017-12-25 16:20:48', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'8C94FAB9A3611249B53519EEA3FECDD1', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'8D0EE224EF190D489DC80B721DD198A3', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'382838929000504DB8E3262D094E3DFE', x'8D2B5D3D8FB8CD4C9CEDE6C5FC014FB4', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'0E966C3308625946A524419EFD682B68', x'8D446D3FC8671B4EA0418B15B705A58C', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'IMAGE', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'8D7BCC67DB769040B83AFBEFF35ADBDD', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'8DA448F236AC5740A0843CB2E626E501', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'8DBB66254458BE49B9BCA94E26570BE1', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'8E5085A20EDD624BA6E525778318CEAB', '2012-01-20 14:40:19', '2017-12-25 16:20:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'8EB86F8B93946644803434206F42988F', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'timestamp', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'8EED9B451BEC194F8FDC05548243CEFD', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'8EFC424CA39DB844BE5F810F15D8F733', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'8F0478F147BDB9428B3BCE26F39F9E65', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'8F051B2BD79A8147B36CA7F2B1DF5CA9', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'8F9E154028707B4686A34B6C9F09CB80', '2012-01-20 14:40:22', '2017-12-25 16:20:48', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MEMO', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'90179AF846037541847631D658ABE1E0', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TIME', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'902DFCB7D832494E9873C11ED77E1CC0', '2012-01-20 14:40:20', '2017-12-25 16:20:48', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'904DB6711BBC53469959256EA90C4AA1', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'912268BA82F02C41ABBEA3CCCE5682C2', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'919C7B7480F8D94A9698AE9B69DE7301', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'91B9D7B3B9AFBC4E879D358DD59CA132', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'91FBDAB509FB0D4FAC5263BCDA469312', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'92958F71023D784A9F555ADB665AF715', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'92B44036334B4A4DB66AD6D7992B0A3C', '2012-01-20 14:40:22', '2017-12-25 16:20:49', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'92E2B558C2046D45B2E01008B7FCA80E', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 255),
(x'9BAEE12ABF21B44BA554096D5B959903', x'92E4E14651C39F4797CD42CF2B154399', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'93051E187CD17F4C819946478316C492', '2012-01-20 14:40:22', '2017-12-25 16:20:49', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'9334F90351C1D94AA2E69F001DE361D2', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'93E0FB20E3BA4E4EBB6D0BC7DE624E74', '2012-01-20 14:40:21', '2017-12-25 16:20:49', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 80),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'9400D45351607943ADFA41897F306FCB', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'942CCC3B05A75B4399BF1BDA17D272D5', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'94499C450187F441AB77678330006E4A', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'94EB115EEBE90E48981DF833BAE167B3', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'9540CA4A02C8894DBB9986AF5DEB7BC8', '2013-07-10 18:50:53', '2017-12-25 16:20:49', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'null', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'9547CEB87A45424BB6F90DFF64C9CDAC', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'9612A766E8609B4985C7FFF239412BC7', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'962F579E88FC5F4B8F097CE533992460', '2012-01-20 14:40:22', '2017-12-25 16:20:49', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'9647543F92C49343A78875FFF7340F87', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'9654E5127F78C64280BBD07E98037F23', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'9673464C2A0AE7438D18BF35FA647655', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'9764341505A01F42867DD3851D37BC17', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'978485210D6B834E8DB65EA3E671B850', '2012-01-20 14:40:21', '2017-12-25 16:20:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'97B014584F8FBF4A9D2A53BD1BDEC45B', '2012-01-20 14:40:22', '2017-12-25 16:20:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'97CD57FC4D38124A8624947259568773', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'98191119310F5041963B71D699964EDB', '2012-01-20 14:40:19', '2017-12-25 16:20:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'98A91B8F47F32B40AE5CE8C08845E151', '2012-01-20 14:40:21', '2017-12-25 16:20:49', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'98F8BF4E9FF8A449837856A9DAA69193', '2012-01-20 14:40:20', '2017-12-25 16:20:49', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'99029922565A8245963262D035883E1A', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'992E85863EDDB54D93A7600A22EF7EEA', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'994BB64CA7A86140A82EBF3AC21B885E', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'9953A3059E9BCA40A2C39E1434D379A3', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'998DE4841E2CF84989977D1DFDE683C1', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MEMO', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'9A0E04F0D322064AB33F5D5AED074C59', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'9A3504CC068B0145950DD280B5D5400A', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'9A7159086299B844932FDC99C4D24532', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'9ADC5AF2642CE84A8103056C220F73BA', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'9B275CF8B678A24D9C5B95147AAA4407', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'FILE', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'9B317BD696FA954E8ED7174C98D60CD6', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9B38D89CEFE6964392E86434F28DF149', '2012-01-20 14:40:22', '2017-12-25 16:20:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'9B4096B8139B1B4CA30A0A91A7447D20', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'9B463B640AE93F4BA936BA0FC6B60176', '2012-01-20 14:40:21', '2017-12-25 16:20:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'9C570FB2BBD3ED4B8013E80B75A56AD0', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'9C7A0730E6580D418BC22194D83D7C71', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'DATETIME', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'9C7C401F95B1004EBA7CE8CF94D34C6F', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'9CB43D18C4D2704DA5736387C5E17D0D', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'9D72241BAA1D704095C611DD980F4CEF', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'9E2DB203907B184582B1E8030133C17D', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'HTML', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'9E2F10E918EF0E4AA0AA26ED94B632B0', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'9E49500CD8B7CD41ACF309EF266E0087', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'DATE', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'9E5668B912D53E4DA5A838AFE853D4C9', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9EB0F34E06563249AC0CA7DF11A47EC7', '2012-01-20 14:40:22', '2017-12-25 16:20:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'9EC4375041F4514EB546B3E817175DDC', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'9ECEA70C7A6A3E42ACB78E18A99F790C', '2012-01-20 14:40:19', '2017-12-25 16:20:50', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'12EEAA312481754EBD16698F4235234B', x'9EE3496E2494EF40AB4A0F0F5F28CA73', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'9EF2214B32F2C24BA263B15A5F151A8A', '2012-01-20 14:40:20', '2017-12-25 16:20:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MEMO', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'9FA02684CEB34043A937E71E8C41CB04', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'9FC3B2D240318B4DA60F66E6C9D187A5', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'9FC492031996D0419582CDC75BCC8B9E', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'9FD2B6538201BC4FBDA9F1B762810078', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'A029B4E4D1E6A34DAEB3F6D2F94143CB', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'UNIQUEIDENTIFIER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'A03A02842B01324589824F5947BE70B0', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'A08BC769EA41E84081349321BA15359A', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'A19F8E36DF1B014A8E0011054F9D51C1', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'382838929000504DB8E3262D094E3DFE', x'A1C54F0034BBBB4E8D3EE800622C4177', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'A22C68A461CFCF4D94405C9EC618B806', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'A3811D47620B384D96073DB2903DA2AF', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'A38D5C2662932149A394F3419C1907FE', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'A3E19E69EC8BA341A9489F1494243F82', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'A4523E50298C4F409AF63C5F55A71F47', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'RTF', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'A472AA47489521459AB4A736E8CA274D', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TIME', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'A4EFC5C60914D34999ACABB7BAB64022', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'A52B08E765F3B6458F2EEA830572F630', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'A5E8ADE9154A614FACC797BC735BD217', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'A5FEBD322C8CF742B39FA0F209A9B6C8', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'A6078BF0EA99D74FB44B085F515EF17D', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'STRING', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'A609A4D33B6B36439174812D401383AE', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 80),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'A60CA76E2CBCEA4CB76988D06FD62697', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'A6272A77B40F0D4D9CAFFA4510BE28E8', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'IMAGE', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'A64B491672B60544BCA5ADFDD3D34780', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'TEXT', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'A65A67F603A57F4DA0F8C30BBCDDA91A', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'DATETIME', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'A6D82174417BA544B14EA12758BB0171', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'A6E92CA93217B041A1973AAA8D64D4AB', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'A70E147F2F9090469A00C727264B61D4', '2012-01-20 14:40:20', '2017-12-25 16:20:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MASTERSTRING', 0),
(x'961085CC094CE749A541D00372E6D444', x'A786F06FE4140A42BD98187D7F4746DC', '2012-01-20 14:40:21', '2017-12-25 16:20:51', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'A795BBAFD7EE1042A3ADEAAD75C959CB', '2012-01-20 14:40:19', '2017-12-25 16:20:51', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'A79EBE753098BB41A48A19E75834DEC6', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'GUID', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'A834DAF3751F93469C03E249DC708412', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'A86C07624C463C44A33B879B534CEE64', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'A889E797FC105642816205651ACB8EB2', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'A8E583405F95A7469832B992236B4962', '2012-01-20 14:40:19', '2017-12-25 16:20:52', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'combobox', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'A94849DBC2AB1748AF0CE9D63745D976', '2012-01-20 14:40:22', '2017-12-25 16:20:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'A94C6498A6162E49AF925C22B897FAD7', '2012-01-20 14:40:22', '2017-12-25 16:20:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MEMO', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'A9981881F2D475429A78784023C963FE', '2012-01-20 14:40:21', '2017-12-25 16:20:52', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'A9E39FB8B3BE0249A01BF51052E39AD1', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'AAA953ADE0456746A9761240BCB28C0E', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TEXT', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'AACCF8796589C445BDB58F2FECD50602', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'AAE454949E54CD44B40A3423992F49E4', '2012-01-20 14:40:22', '2017-12-25 16:20:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'AB668BBA0DEAB945A9B7BDE2361453F6', '2012-01-20 14:40:19', '2017-12-25 16:20:52', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'AC3AB82B839F7E47BA5D8415B1E0FC1C', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'AC85A748353A484E8917492C41124A1A', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'AD2D606D6FAD7343817C8393FE6E2EF2', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'AD6F7D85CD125F4EBBC0A0C8DD87AB90', '2012-01-20 14:40:19', '2017-12-25 16:20:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTEGER', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'ADAB7B7970C4534486C39BC95963F918', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'AE199F213E65DF43B24D6513B8D26420', '2012-01-20 14:40:21', '2017-12-25 16:20:52', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'AEEFE01DFA4F6F43B500FB2EC9DF7567', '2012-01-20 14:40:21', '2017-12-25 16:20:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'AF17007E0E12574A98FB054073B504D6', '2012-01-20 14:40:21', '2017-12-25 16:20:52', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'AFB9A2EC4AFCFA43AD86626FD8BD7B39', '2012-01-20 14:40:22', '2017-12-25 16:20:52', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'B0537985DB52B14EA760BC488949911C', '2012-01-20 14:40:21', '2017-12-25 16:20:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'B08F9CE643E9424D81B12E5626D860FE', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'B0F093C6EAC465459821737C85BE9A2D', '2012-01-20 14:40:22', '2017-12-25 16:20:52', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'NUMERIC', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'B14EFCA19F6F8240B77320C589FF9572', '2012-01-20 14:40:20', '2017-12-25 16:20:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'B177827C64A68D478D3A7DBC72BE0665', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'B1EACF92488C8A438758DC8CB924883F', '2012-01-20 14:40:22', '2017-12-25 16:20:53', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'B1EBCD495F78EA4E89DEF2AAEA1E2B64', '2012-01-20 14:40:21', '2017-12-25 16:20:53', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'B20B53E0D76C824ABA75938B387BFC46', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'C608D44CBE64964787E545A26D3B3DDA', x'B221ACF39E46074E95A3630D36BA2116', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'B25C34734723A444997C9776461222FA', '2012-01-20 14:40:21', '2017-12-25 16:20:53', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MEMO', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'B30B049752EBCD439817C6119450C85A', '2012-01-20 14:40:21', '2017-12-25 16:20:53', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'EMAIL', 80),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'B310EB7FC684254CA3513119D8C91781', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'B31B6FC4F11C7E49A73D87780856F13D', '2012-01-20 14:40:22', '2017-12-25 16:20:53', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'B38984013C06F8498C16828B53AD0CED', '2012-01-20 14:40:21', '2017-12-25 16:20:53', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'B3ABD2311956EF4797AA81D850B0B0F8', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'FILE', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'B3C2465AB2729C429FFCADFF061826FC', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'HTML', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'B3E04DB0EF186A488546B71A878B0AB9', '2012-01-20 14:40:20', '2017-12-25 16:20:53', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'B41D8CEF18E2BA40AFA84FE34C8AE742', '2012-01-20 14:40:20', '2017-12-25 16:20:53', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'B46079892AE0144D8EC609F34ED67A0C', '2012-01-20 14:40:20', '2017-12-25 16:20:53', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'B497DBA37BEF964A847FDD1FCD3DE65C', '2012-01-20 14:40:19', '2017-12-25 16:20:53', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'B4D6CB3F10C42B45A600A20A964F626D', '2012-01-20 14:40:20', '2017-12-25 16:20:53', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'B4D8A9873525FE40A0FEB4780CB4FC89', '2012-01-20 14:40:21', '2017-12-25 16:20:53', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'B59BB0F11EA2484096D71C4157B56EAD', '2014-04-15 11:45:12', '2017-12-25 16:20:53', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Date', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'B5B24432084C1E409EA1C6D4A1B2DF77', '2014-04-15 11:45:12', '2017-12-25 16:20:53', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'DATE', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'B5CA5000239AF0468E0933CEF4663F94', '2012-01-20 14:40:20', '2017-12-25 16:20:53', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'B5F9BD2C4AE6D441BA4E3FACA9EA3BBB', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'DATE', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'B69000591A047843AAD5656A88DDE690', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'B6B1B744D6B1134E9BD421AAD0DF3734', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'B6D4133A34071E40B9A9C873B43010C5', '2012-01-20 14:40:21', '2017-12-25 16:20:54', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'B71BD7DC4FC11D4584719892B20547B9', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'B7856329518D2040906372C0AF586D61', '2012-01-20 14:40:22', '2017-12-25 16:20:54', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'B79FF79A9DF82C4A934916046B7F6F9C', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'B7CA21CB42A5B04DBC1B17647A64F353', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'B8117D8A9AE02046B90218B930B6B68C', '2012-01-20 14:40:21', '2017-12-25 16:20:54', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 255),
(x'C48D9EC186B1F547B49F644C8C795459', x'B863FD50FC96E94FBC35CF2341ED068C', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'382838929000504DB8E3262D094E3DFE', x'B86D68F97EED07459C60EE94EF957F82', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'B88DB342890CB2498B2F6D1E75BB008B', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'B8994254A421D04DA7DE58CFD25C1CFB', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'B9236906D765D74AAB5F19BE86CB067C', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'BA23F47B88F5C34DBFCE9C6891128B2F', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'BA4CF1C84B8E054D97F82A09A0A9D778', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'0E966C3308625946A524419EFD682B68', x'BB2BA2EF3975264C883D339741C1D779', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'VARIANT', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'BB5CE67250E644499DE4C885ABCE1FEF', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'STRING', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'BB7090CEB2A3BD43A3FEB6CDDB69C9D9', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'BB8F2C34F87E1949A8A6178D3ADD8736', '2012-01-20 14:40:22', '2017-12-25 16:20:54', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'BBD9A166DD8B824D845ECF1F3920F8CB', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'BC150510D6F9DA4B9F718399BD74BE35', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'BCA749FEF82B4841BAC990C82D4F6AD3', '2012-01-20 14:40:19', '2017-12-25 16:20:54', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'BCE43BBD18875A43B2F8BCFC1DF89CA2', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'time', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'BD3E34A38094024692241E4B3F078420', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'BD7C4599EAB2FF4D96F77A91DA9C286C', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'BE1A412589C1474E861A7A56B381A767', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'BE22438FD1422247A5020B3FB4FDD921', '2012-01-20 14:40:20', '2017-12-25 16:20:54', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'BEA20ADBC443AA4FBED02DC3C98A2A41', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'BF4AAE9A6DA4C54EAC5EC1E99DF17F6F', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'28375783F0580E40A5A6F407682050ED', x'BF62E8413595B749BC7D60BBE75308E4', '2012-01-20 14:40:22', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'28375783F0580E40A5A6F407682050ED', x'BF8355D1CED7644DB23752C91A0091C2', '2012-01-20 14:40:22', '2017-12-25 16:20:55', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'BFB9B0F39500B14B8A63CF0485F3599B', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'C01C7C35E6D794409FC699297F716E48', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'VARCHAR', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'C01D17C16E2A1B4CB17A1C82A767656F', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'C0287E98D949E641A82EE2AD6B3FD621', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'382838929000504DB8E3262D094E3DFE', x'C0B5AB22565AC446BF8F3F95785C19A1', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'C0E3F060038E9D4CBDF4302B6FB7E3B9', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'C15C42539B3F1D4EA1C07CA242E9BC4E', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'C16B77CE50E23D4F8DA551AE6C366801', '2012-01-20 14:40:21', '2017-12-25 16:20:55', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'RTF', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'C214760CD3FFE54EB9B1DBEA607B9E42', '2012-01-20 14:40:21', '2017-12-25 16:20:55', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'PASSWORD', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'C234775E83F08E4E81763D75CCF77DB0', '2012-01-20 14:40:21', '2017-12-25 16:20:55', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'C27D4664A9233C43A6927DCF06136A34', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'C2CA25ABCABD834AAF56C1D1C232C365', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'C2D88707584FA64C9297362FB9E80CEF', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'C2EBB8DC2A1F114288FD879C4C131519', '2012-01-20 14:40:21', '2017-12-25 16:20:55', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'C3AB3729018F834D868BF1D19A552AA4', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'C41B1CFCA3FE934B804757BA8C0C6EAA', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'C46B9A128EAC604098E2B2F60193AF9A', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'C55A83A1118B90439EC8B7BFDA7A53E1', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'C5B4F4E8CDD6AE45981200AA46D0C7C5', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'12EEAA312481754EBD16698F4235234B', x'C619D2800A71B74CBCFBA31D1FB4603E', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'C664CF7938AD174BB9625A4F926290FD', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'GUID', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'C6F22F648468F54CA2A19BDA95E9BCAC', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'C700537165B51B43899D5F9DCCB63088', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'C708EE39DE4B6E47B45F9F1A3407108B', '2012-01-20 14:40:19', '2017-12-25 16:20:55', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'C7265BCA476C074F8849B05597BA3AC6', '2012-01-20 14:40:20', '2017-12-25 16:20:55', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'C74C670B35910F49A07BAC01D7C19EA3', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'C78C8D97B5438A4BA7E97574F9145192', '2012-01-20 14:40:22', '2017-12-25 16:20:56', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'C793C1E28DA8844FA62E28C2F351D4F4', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TEXT', 0),
(x'0E966C3308625946A524419EFD682B68', x'C801453529D92B46B922A7DD296A5059', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'BYTEA', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'C89ABABDADF3564093E37B6917B63B52', '2012-01-20 14:40:21', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'C8C8066128543B4CBCF14A85E4460CBA', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'C9A40BB7DAAEF344BE20EC4DFFD49B6F', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'C9A794082DC1834DA7393AB9A2A4EC73', '2012-01-20 14:40:22', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'C9BD826A83FAAD4CB1EE9D4FCF3FE1F6', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'CA19EAAACAD8CC479330DF1939F08142', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'CA8F798401F178448790AAB2191BD3C8', '2012-01-20 14:40:22', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'CAFB9768E1582C44B91B27847F321FD3', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'CB18AC4412265D4E8B28441614DDC60C', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'CB25E1166FD9A24FB3D8E73CFFDB1551', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'382838929000504DB8E3262D094E3DFE', x'CB433949826CD84AA8A311170E7844E4', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'382838929000504DB8E3262D094E3DFE', x'CB75282766FE2C438459C88BFCD64528', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'CBA28B1615D0EB4097A019EF31179C64', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'961085CC094CE749A541D00372E6D444', x'CBC868ADC123E94D911B301189F46C52', '2012-01-20 14:40:21', '2017-12-25 16:20:56', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'CBD9F06C28E0104B957EB6AEED1BB6B4', '2012-01-20 14:40:19', '2017-12-25 16:20:56', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'CBDA2558F9C1B1479C8B2908BA17D347', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'CC1A3FCE8BAEAC40A5939127075033AD', '2013-07-10 18:50:53', '2017-12-25 16:20:56', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'nothing', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'CCEEE52F456BDF4C83113823A82D3FC8', '2012-01-20 14:40:20', '2017-12-25 16:20:56', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'CD4DA43D56731B49AF35F36A10DC6DBA', '2012-01-20 14:40:21', '2017-12-25 16:20:56', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'CD6B582366E1A041BA6F53D415DEA074', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'CD831A688CAE0B478453ED026577A407', '2012-01-20 14:40:22', '2017-12-25 16:20:57', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'12EEAA312481754EBD16698F4235234B', x'CDABA97CD9ED644C9AAB643F403D38D4', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'CDFA9EF4C931ED48885C9F39CD48FBAC', '2012-01-20 14:40:22', '2017-12-25 16:20:57', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'CE2754C4A28D4946AE6F4A51E8B9C3B1', '2012-01-20 14:40:21', '2017-12-25 16:20:57', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'CE652A83DE051B45B90E4EA4E75F6F5D', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'CHAR', 38),
(x'9313F4BAD350454D96AF56B8415569D8', x'CEA095114C32A044A0734790A611F0F6', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'CEBE1D911E7A5E4AAB04B9EB28FB88A5', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TEXT', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'CF0D035CBEF958478E9CC3C8033EC88B', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'REFERENCE', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'CF267DE34FBA2040A9A7A9156F9F2FEC', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'CF8FF46F3B4E644C83FA13F3C9FF4094', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'D006060802C98E418EA66B8BD06B68AA', '2012-01-20 14:40:21', '2017-12-25 16:20:57', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'PASSWORD', 80),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'D029ACA4CBE73B48A59259B8914F00C7', '2012-01-20 14:40:22', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'DOUBLE', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'D036288797F4A046BEA387DA59977181', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'D1216B942B32D54CA96CBCF6C0571B2E', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'D1BAE6D707E4F34D9E82A7667B927E93', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MEMO', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'D1D40D95E9870C44A2E1FB81D1283AFA', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'D241A0A0C80F6C4C9D608247F0F3AA07', '2012-01-20 14:40:21', '2017-12-25 16:20:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'D27CCD16808D7E4B9D5BE7A943385053', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'HTML', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'D2880EB926E6254F9456FE61E75ECA83', '2012-01-20 14:40:22', '2017-12-25 16:20:57', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'D2EEE4ECC57B1148B238A087B3C04DCE', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'combobox', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'D35D8EA707DDD54A81D85532B248E44B', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'D3CC818FDF587E4C8BF7706E31DDE34E', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'D4CECD33846B304D9E08382263CE7817', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MEMO', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'D52F4C5BB6FB5941A012206B0884C07F', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'URL', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'D55DB50BA214D843AF06EB5C9C01566D', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'VARCHAR', 0),
(x'382838929000504DB8E3262D094E3DFE', x'D63E0061ACEB0D4CB614826C4AFB2A14', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'D68B082B7BAADE4E9EB50E6A2B10302E', '2012-01-20 14:40:19', '2017-12-25 16:20:57', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTEGER', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'D6D1778F38F93945B889924B46297089', '2012-01-20 14:40:20', '2017-12-25 16:20:57', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TEXT', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'D7264656C58DB84BB585510C44DC18A2', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'D7A25CB3F5B29849B1BEB2B34B714EB1', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'D7DFB996EDFF9B48AEBFB3C2643712C0', '2012-01-20 14:40:21', '2017-12-25 16:20:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'D8656F13D0606248A17F48515B555DA7', '2012-01-20 14:40:22', '2017-12-25 16:20:58', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'D8695062DBB6A9429A8F0549CDD2A132', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'D8F9D6CC29A539498141F0D9CF924705', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'DA24657503CDFA4EBEE78D2FCF168E67', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'DA4C721E5ADC63499EA14C2F6F27330C', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTEGER', 0),
(x'0E966C3308625946A524419EFD682B68', x'DA67A7B250689345BE097F7950D6C7AD', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'IMAGE', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'DA6D61323CE93840B927210680A3E0B0', '2012-01-20 14:40:21', '2017-12-25 16:20:58', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'DBF913F15DBF124DB2E598DA6272B1CD', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'DC0331D2D75D5E41B5FF6FE27640612B', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'DC7B7D0F5A163E4787B91202C9FA58A4', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0);
COMMIT;
BEGIN;
INSERT INTO fieldtypemap VALUES
(x'C608D44CBE64964787E545A26D3B3DDA', x'DC7E62FC015CEA408F82886B8277B4EC', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'DD270B817B6E46429EFF512F3FD75E0B', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'DD2804B188D65C4E84DFA6298EEE663C', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'URL', 0),
(x'961085CC094CE749A541D00372E6D444', x'DDA3F256E96D524382427C5263CFAAD1', '2012-01-20 14:40:21', '2017-12-25 16:20:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'28375783F0580E40A5A6F407682050ED', x'DDABE80657EA374FB12D7FD752E0D014', '2012-01-20 14:40:22', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'DE2E5ED94C888B439C99F381D1F12FBE', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 255),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'DE7A9D85FC1D34448E6C1B8DA1478FAD', '2012-01-20 14:40:22', '2017-12-25 16:20:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'float', 0),
(x'0E966C3308625946A524419EFD682B68', x'DF3808CFE581FD4C81A7AA0D9027D04D', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'MEDIUMBLOB', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'DFA69BA2EC1A8044910B937F132EC5B6', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'DFBF870BE5669E4987578335F360AF52', '2012-01-20 14:40:21', '2017-12-25 16:20:58', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'DFEF3CABB850B248959C2733A8EF9109', '2012-01-20 14:40:19', '2017-12-25 16:20:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'uuid', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'E0462A80BF61364086391DA36D25E2A6', '2012-01-20 14:40:20', '2017-12-25 16:20:58', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'E182046722C55E42819FE99D9BB0834D', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'uuid', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'E18879F6B911544B9C077AF1B77305F2', '2012-01-20 14:40:22', '2017-12-25 16:20:59', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'E20E9892BBC84147807D3BB4BC7FC876', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'E230E29430600C4CA7A3E5965404EC37', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TEXT', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'E255B802693CC24989E0DA90739C4CBA', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'E2C8E78715693F47A6A7B04FF6498623', '2012-01-20 14:40:21', '2017-12-25 16:20:59', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'E2FC1369A9D37549969D17E099EFD1A2', '2012-01-20 14:40:21', '2017-12-25 16:20:59', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'DATE', 0),
(x'12EEAA312481754EBD16698F4235234B', x'E30FD1431B78BB46AF14CFD65B76E1B5', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'E355E222C379A448A1848930E37ACE68', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'URL', 0),
(x'28375783F0580E40A5A6F407682050ED', x'E3C0F173C49480438FB757752EED749C', '2012-01-20 14:40:22', '2017-12-25 16:20:59', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'E3CDD218D810514FB5D0CF99D7071ADD', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'E3D04DF653AD1D4F9ACD741AAFFA910A', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'E3D071106D4B744CBC9BEAA390F72805', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'E4BC48A6FA9E7440829A11BFF99881A2', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'E52C3CB5FCB8A34EA7D420066A821334', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'E54167E795778E4B8005FB9ACFC5BD82', '2012-01-20 14:40:22', '2017-12-25 16:20:59', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'NUMERIC', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'E5BB01ED488CDC49AEE5BF93D93C9DDC', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'E62054938A2D884A93E6DA869E008B1C', '2012-01-20 14:40:21', '2017-12-25 16:20:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'E623465D5EB8BF498E01533BBBF37009', '2014-03-16 13:37:52', '2017-12-25 16:20:59', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'varchar', 20),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'E6296C4354F4864CBD0E19AC1F7F1B95', '2012-01-20 14:40:22', '2017-12-25 16:20:59', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'NUMERIC', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'E64E9361D64733468D33E25F941D8EC3', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'DATE', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'E664BB371FADA44F9DE39716956DA1CE', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'STRING', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'E6934FDA0EB4E14AB7558BA4CB4B60B6', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'E6D43EC58E6EF54CBA2EDF410364CC61', '2012-01-20 14:40:20', '2017-12-25 16:20:59', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TIME', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'E714893DE1597749BBF721B4EEAD2F76', '2012-01-20 14:40:21', '2017-12-25 16:20:59', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'E78B2EC618DB0F4BA992425958C753CD', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'E7AF7BD3001539429DA6428C1843D534', '2012-01-20 14:40:19', '2017-12-25 16:20:59', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'E81EA0208EDACD40B6D2DCD58A8A0134', '2012-01-20 14:40:21', '2017-12-25 16:21:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'E9F7A9E736012A48A5E32CCF6BB20D3B', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'DATE', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'EA24A4A15C8F2F43AF1B009B0012D320', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'EAD7BAB0F89D6A43B46C86AB3547C4E1', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'EB1D59DF80DDEE4E8F74FE8D77584696', '2012-01-20 14:40:22', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'EB583BE07DBB7F47B261702F7DCF0DDD', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'EB96DDDB126DE348AA1847B360072906', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'EC20B1F04000E94795AE4AC8FFB4F3EB', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'ED7E4718D7C108488D2B64DE9C6366A6', '2012-01-20 14:40:21', '2017-12-25 16:21:00', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Integer', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'ED86354AC5804A4EB616DFB0F46A3C09', '2012-01-20 14:40:21', '2017-12-25 16:21:00', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'ED8E15B1346FAE4798135F1F5B4775BB', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTEGER', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'EDFF33010579414B88D09906753F6843', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'EE7B82A6659DE445BD0CD5FD02E72080', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'EE7F18E82827F44D84A981C168DD9D51', '2012-01-20 14:40:22', '2017-12-25 16:21:00', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'EF87130B68D474499CAFC28EBEBE2A0B', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TEXT', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'EF97EF5684613D4082795761818CCEDD', '2012-01-20 14:40:21', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 80),
(x'794061085D25D54FABBEDE9BC7987090', x'F0FA00AF3C0C6C44B4FFB2CB829567B9', '2012-01-20 14:40:21', '2017-12-25 16:21:00', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'F17E93EDFB516E48B0A3D83366CD153C', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'F1E6C74B588FD74A8B67DC959B3C7037', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'F210CA26F508F044BFCE4861597291D2', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'VARCHAR', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'F23D564A94911044BB7741AE5968BD8A', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'F243F1A54FFBA849988DBE2DE5AC1BC6', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'28375783F0580E40A5A6F407682050ED', x'F2B10FBEC9F3E44BA2D3C6795826AA18', '2012-01-20 14:40:22', '2017-12-25 16:21:00', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'F2C3EFA9649CD342ACDFC79ABC30AFE7', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'F4873E2EBAD50B42B0D5D384DAF72472', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'F49F71DAEDBDD54CB297444642FA7A11', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'F4D1229969529F48ADAC030600AB6F38', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MEMO', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'F4EEFFB995FE884AB1B242A906273126', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'long', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'F51B21533292844E8CE762090B87DB03', '2012-01-20 14:40:20', '2017-12-25 16:21:00', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'F5A65EB28624444F9A3A9BA15A62E1D4', '2012-01-20 14:40:19', '2017-12-25 16:21:00', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'F5C466004F23BA4F8776312BB2E1BA96', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'F60E36CBCF875B44917DD004F2E048FE', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTEGER', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'F7BB562E8DFE504785808F37F2A06B2D', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'F80EBB649DECC844970985457B9DC2F2', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'F80F967BD0D6214B8CC8CD6C4E407C05', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'F8A409EAC5651C4CBB2054F334AE397F', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'F8D4F1A13C5DE94E86315D9DD7F35C84', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'F92CCC9C9C6A9849A2FA6EA9D3731051', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MULTIREF', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'F9F8A529E82562478A3F3FEBB1AF40D8', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'12EEAA312481754EBD16698F4235234B', x'FA12513768BF5B49B485344BD4AD64F4', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'FA143F0EB40B344B87531217F04DE22B', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'FA55F2BBD48A2A448450EC9CE3934DE1', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'DATE', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'FAA51F9523F72E40A7383191D688ACBF', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'STRING', 0),
(x'28375783F0580E40A5A6F407682050ED', x'FB07422D0DFBE44291C78DAA59BD655D', '2012-01-20 14:40:22', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'FBD335EC0A32C44C842A662EBCCC93B7', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'FBDDA9A9BA6C084C95BB0BE42A1BF5AA', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'FC48EAB34F48EE478247110073C1A1BB', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'FC4B99FE73FD3941A395599551A1F4D9', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'FC94091EBA1C154486B5E635ABB83448', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'FCEABBD1416E454396E700B6849249F9', '2012-01-20 14:40:19', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'FD2876D3D2BAB9418AAB04BFB0B19E72', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'FD979A35AD0ADD42850D1A5A4CDBDEA2', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'FDD68D3315FC7E41A9C2B0141FB67ADD', '2012-01-20 14:40:22', '2017-12-25 16:21:01', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'FDEE323E4D5838438A0EB93C7242EC76', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'FE38140A8B9A8244891842B3652F63C2', '2012-01-20 14:40:21', '2017-12-25 16:21:01', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'EMAIL', 80),
(x'E0280E0D19D66A49BF995F9F28321C74', x'FE923C834856CE4EB4C11DCA9D233800', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'FF0DE4EE2E50B84BBF90525F55D26959', '2012-01-20 14:40:22', '2017-12-25 16:21:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'FF3C7C2D7592424D90E2B8165D59FFAE', '2012-01-20 14:40:20', '2017-12-25 16:21:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0);
COMMIT;

-- 
-- Вывод данных для таблицы fieldvalidator
--
-- Таблица survey.fieldvalidator не содержит данных

-- 
-- Вывод данных для таблицы fileterfield
--
BEGIN;
INSERT INTO fileterfield VALUES
(x'2CCCDB710A968247AE621EE8B088C88E', x'055B711F9F59C447BB518F0DAA05ED8C', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 0, 'svp_info_qtype', 'Тип Вопроса', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'ED314B8655AFFE4EB13CA7B508D53BA7', 0),
(x'318688B2DB858B4183606C4005E4F782', x'0682C92BC355994B8D52AC1E9961AC82', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 0, 'sva_info_person', 'Тестируемый', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'E09493DABDE1854BAA454C6C92793865', 0),
(x'48F6C9202FF69B42B6AA98174C890922', x'14F4B44C0EAF3F459F85AD37A6FE110C', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 0, 'svt_info_name', 'Название теста', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'BA4693D87DB64041A5CB3A8FBD4D6EFE', x'2BDE102F41AB8440BBA2C8FCD756886D', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 1, 'svm_info_moduletime_GE', 'Время на прохождение модуля >=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'318688B2DB858B4183606C4005E4F782', x'37E414D1123F0B4C9CC22A110EF2CD1F', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 1, 'sva_info_testVariant', 'Вариант теста', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'4438A0124E1E354C88F3BD7148EECF81', 0),
(x'548D8553F4C1DA439DF9AD6F6C71CF34', x'3BEB0D5B33FE6849BB2CFB9C4D81812B', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, 0, 'svq_info_qtype', 'Тип Вопроса', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'ED314B8655AFFE4EB13CA7B508D53BA7', 0),
(x'04E0FBDBF1D1CF4093B413A12B6D1A7B', x'566E53BE75C7D348A2DC6FB481D33FFD', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 1, 'svv_info_vnum', 'Номер варианта', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'04E0FBDBF1D1CF4093B413A12B6D1A7B', x'5914DAB51C2A884585CC919AB6920964', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 0, 'svv_info_basetest', 'Базовый тест', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'BB5AE3BF51194E4CAD052DF3B8CD92AE', 0),
(x'BA4693D87DB64041A5CB3A8FBD4D6EFE', x'70EFC6FCD61F8645BD5F80A2540898A2', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 3, 'svm_info_modulecost_GE', 'Баллы за модуль >=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'78ADA5775B4E3B459CBA7374B6392B66', x'84672465B40A144F9E0A612C6A7EB3CF', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 0, 'svd_testgroup_name', 'Название', x'48E476E732F57D41B8D77D5B47FCCD6F', 256, 0, NULL, NULL, 0),
(x'223B052B7D25844F809622F614013C59', x'965AEA2C6572C445A48EC05F5736039A', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 0, 'svh_info_name', 'Название', x'48E476E732F57D41B8D77D5B47FCCD6F', 256, 0, NULL, NULL, 0),
(x'BA4693D87DB64041A5CB3A8FBD4D6EFE', x'D453F4028A337E489F7D66C88937507E', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 0, 'svm_info_name', 'Название', x'48E476E732F57D41B8D77D5B47FCCD6F', 256, 0, NULL, NULL, 0),
(x'48F6C9202FF69B42B6AA98174C890922', x'DCA36EA08002314F84836AC5A0BD3564', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 2, 'svt_info_towner', 'Владелец', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'89EC2176573B4C44A0B3DF2CE8723111', 0),
(x'48F6C9202FF69B42B6AA98174C890922', x'E3D8063197017F40AAEC7C7F738A3637', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 1, 'svt_info_tgroup', 'Группа', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'0F332D7BA738CD4EA00A85955E94C12D', 0),
(x'BA4693D87DB64041A5CB3A8FBD4D6EFE', x'E6D2ACBB710EFD4FBA00756B54F076A8', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 2, 'svm_info_moduletime_LE', 'Время на прохождение модуля <=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'20214FFEAB38D24C8BA795F969FC81C4', x'EF4915A2240EF043932C3005F26FC6C1', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 0, 'svo_info_name', 'Название', x'48E476E732F57D41B8D77D5B47FCCD6F', 256, 0, NULL, NULL, 0),
(x'BA4693D87DB64041A5CB3A8FBD4D6EFE', x'F27000AB4248E44CB1B79F1DBF7278CF', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 4, 'svm_info_modulecost_LE', 'Баллы за модуль <=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0);
COMMIT;

-- 
-- Вывод данных для таблицы filterfieldgroup
--
BEGIN;
INSERT INTO filterfieldgroup VALUES
(x'46596192F351664181A3D8755373ED93', x'04E0FBDBF1D1CF4093B413A12B6D1A7B', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 0, 'fGroup', 'Описание', 0),
(x'27F8CBE7D219F043AC1C823A4B087BAB', x'20214FFEAB38D24C8BA795F969FC81C4', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 0, 'fGroup', 'Информация', 0),
(x'A1CF4AF2E777B34A9FEE60E57DCB7223', x'223B052B7D25844F809622F614013C59', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 0, 'fGroup', 'Идентификация', 0),
(x'6A6A30294A81C44395E1F8EC5720649A', x'2CCCDB710A968247AE621EE8B088C88E', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 0, 'fGroup', 'Описание', 0),
(x'DA4BFF6AA3C3B04AAB86CE47FAE21548', x'318688B2DB858B4183606C4005E4F782', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 0, 'fGroup', 'Описание', 0),
(x'A7E7E28AD586F34C8D40B2EC42A80C1F', x'48F6C9202FF69B42B6AA98174C890922', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 0, 'fGroup', 'Описание теста', 0),
(x'43732244A4D3A94CB70B3D79659BAF97', x'548D8553F4C1DA439DF9AD6F6C71CF34', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, 0, 'fGroup', 'Описание вопроса', 0),
(x'DBD70298708B5E44ADB79468DB0343A3', x'78ADA5775B4E3B459CBA7374B6392B66', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 0, 'fGroup', 'Группа тестов', 0),
(x'212E90AC78E96E41AC5339108803548C', x'BA4693D87DB64041A5CB3A8FBD4D6EFE', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 0, 'fGroup', 'Описание модуля', 0);
COMMIT;

-- 
-- Вывод данных для таблицы filters
--
BEGIN;
INSERT INTO filters VALUES
(x'46596192F351664181A3D8755373ED93', x'03A2FE12FD8A1346B4B00E0584F74A6C', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 'svv', 'Фильтр для Вариант теста', 'Вариант теста'),
(x'A1CF4AF2E777B34A9FEE60E57DCB7223', x'175B6DEC1A065E4DB0277F7C524D3D55', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 'svh', 'Фильтр для Тестируемый', 'Человек, проходящий тестирование'),
(x'DBD70298708B5E44ADB79468DB0343A3', x'18239AA0CAB3CE4A9A5CEAB2DB5D54F8', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 'svd', 'Фильтр для Справочники', 'Справочники системы тестирования'),
(x'43732244A4D3A94CB70B3D79659BAF97', x'33FBC02B09FAC648A6B838F64DD860F5', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, 'svq', 'Фильтр для Вопрос теста', 'Вопрос теста'),
(x'6A6A30294A81C44395E1F8EC5720649A', x'387FA5D428B5E643A0461B98897720FD', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 'svp', 'Фильтр для Параметры вопросов', 'Списки параметров для каждого типа вопросов'),
(x'212E90AC78E96E41AC5339108803548C', x'7DFDC0BFA82C564583434DBEECB0A062', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 'svm', 'Фильтр для Модуль теста', 'Тематический модуль теста'),
(x'27F8CBE7D219F043AC1C823A4B087BAB', x'8E15B3564EA19943AB203C1E0FF04746', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 'svo', 'Фильтр для Организация', 'Организация, которая создает тесты и организует тестирование'),
(x'A7E7E28AD586F34C8D40B2EC42A80C1F', x'B078014617214F488247290B1D131C36', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 'svt', 'Фильтр для Тест', 'Описание теста'),
(x'DA4BFF6AA3C3B04AAB86CE47FAE21548', x'FA417020422ABA4F882A543EAE00A431', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 'sva', 'Фильтр для Ответы', 'Ответы на вопросы теста');
COMMIT;

-- 
-- Вывод данных для таблицы fldextenders
--
-- Таблица survey.fldextenders не содержит данных

-- 
-- Вывод данных для таблицы gencontrols
--
BEGIN;
INSERT INTO gencontrols VALUES
(x'3014B534C6BD81488A6E795010553E24', x'47C2D62605A3BF4C8EBEB1ED841C7639', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'GridEX20', NULL, 0, 0);
COMMIT;

-- 
-- Вывод данных для таблицы generator_target
--
BEGIN;
INSERT INTO generator_target VALUES
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'057F5FFC77FF8442A87278590FC3D0DB', '2012-01-20 14:40:23', '2017-12-25 16:20:17', NULL, NULL, NULL, 'VB Model', 1, 'MTZ_VBQUEUE', 'MTZ_MODELGEN2_V2.Generator', 0, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'1E837D44592F5547B0AB5CB12CCF4B0A', '2012-01-20 14:40:23', '2017-12-25 16:20:17', NULL, NULL, NULL, 'WIN.NET', 2, 'MTZ_NETQUEUE', 'MTZ_WINNET2.Generator', 0, 1),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'25AD0CC1ED9518459177E29824F01E47', '2012-01-20 14:40:23', '2017-12-25 16:20:17', NULL, NULL, NULL, 'ORACLE', 0, 'MTZ_ORAQUEUE', 'MTZ_ORACLEGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'27E1D236C090B444AC36B1A75B8C19B4', '2012-01-20 14:40:23', '2017-12-25 16:20:17', NULL, NULL, NULL, 'ASPNET', 2, 'MTZ_NETQUEUE', 'MTZ_ASPNET2.Generator', 0, 1),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'2D307FAB83A4B34B9CE8016206458C47', '2012-01-20 14:40:23', '2017-12-25 16:20:17', NULL, NULL, NULL, 'VB.NET Model', 1, 'MTZ_NETQUEUE', 'MTZ_DOTNETMODEL3.Generator', 0, 1),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'3014B534C6BD81488A6E795010553E24', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'VB Interface', 2, 'MTZ_VBQUEUE', 'MTZ_OCXGEN2_V2.Generator', 0, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'4BBFCD0384FD254C8B81434496AF7D84', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'ASP', 2, 'MTZ_ASPQUEUE', 'ASPGen_V2.Generator', 0, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'582C650C52A98F4E8CB0D266431CD24B', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MS SQL 2000', 0, 'MTZ_SQLQUEUE', 'MTZ_SQLGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'6D7D8396C49AF74788AFCE375153C200', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'Ext JS', 2, NULL, NULL, 0, 3),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'9DD37D9D437AC34EAA101FBCED75F3CB', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'PGSQL', 0, 'MTZ_PGQUEUE', 'MTZ_POSTGRESGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'C4CF9CB244736A448F14824C92DC2D30', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MySQL', 0, 'MTZ_MYSQLGEN', 'MTZ_MYSQLGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'C85153245B510A428990FD9AB999D14C', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'VB ARM', 4, 'MTZ_VBQUEUE', 'MTZ_VB6ARMGEN.GENERATOR', 1, 0);
COMMIT;

-- 
-- Вывод данных для таблицы genmanualcode
--
BEGIN;
INSERT INTO genmanualcode VALUES
(x'25AD0CC1ED9518459177E29824F01E47', x'0C660F7FF6D5FE44AFF366FA89034FF5', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'Login', 'Login', 'create or replace procedure Login\r\n  \r\n(aTHE_SESSION out  CHAR/* Идентификатор новой сессии */  \r\n  \r\n,aPWD VARCHAR2/* Пароль */  \r\n  \r\n,aUSR VARCHAR2/* Имя пользователя */  \r\n  \r\n)  \r\n as   \r\n  \r\naID char(38);   \r\naUSERSID char(38);   \r\nasysid char(38);   \r\nSysLogid char(38); \r\nexistsCnt integer;   \r\nbegin   \r\nasysid := null;   \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM'';   \r\nathe_session:=null  ;   \r\nif aPWD is null   \r\nthen   \r\n select count(*) into existsCnt from users where Login=ausr and Password is null;   \r\n  if existsCNt =1   \r\n  then   \r\n    select USERSID into ausersid from users where Login=ausr and Password is null;   \r\n    select  mtz.newid() into aID from sys.dual;   \r\n       if asysid is null then   \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(aid,sysdate,ausersid,0,sysdate);   \r\n       else   \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate);   \r\n       end if;   \r\n     athe_session:=aid;   \r\n      \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_SUCCESS'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n  else \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_FAILED'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n  End if;   \r\nelse   \r\n   \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD;   \r\n  if existsCNt =1   \r\n  then   \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD;   \r\n   select  mtz.newid() into aID from sys.dual;   \r\n       if asysid is null then   \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(aid,sysdate,ausersid,0,sysdate);   \r\n       else   \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate);   \r\n       end if;   \r\n     athe_session:=aid;   \r\n      \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_SUCCESS'', aThe_Resource=>ausr,aLogInstanceID=>null);  \r\n      \r\n  else   \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED'';   \r\n    if existsCNt =1   \r\n    then   \r\n     select USERSID into ausersid from users where DomaiName =ausr ;   \r\n     select  mtz.newid() into aID from sys.dual;   \r\n       if asysid is null then   \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(aid,sysdate,ausersid,0,sysdate);   \r\n   \r\n       else   \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate);   \r\n       end if;   \r\n     athe_session:=aid;   \r\n      \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_SUCCESS'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n    else \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_FAILED'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n    End if;   \r\n  end if;   \r\nend if; -- password is null   \r\nend;   \r\n  '),
(x'25AD0CC1ED9518459177E29824F01E47', x'2248998532DBB944B94F8C6666DFFAB7', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'NEWID', 'NEWID', 'create or replace function NEWID return varchar2 as\r\n  Result varchar2(40);\r\n  lguid raw(128);\r\n  sTempString varchar2(40);\r\nbegin\r\n  \r\n  \r\n  \r\n  select sys_guid() into lguid from dual;\r\n  \r\n  sTempString:=to_char(lguid);\r\n \r\n  Result:=''{'' || \r\n              Substr(sTempString, 1, 8) \r\n              || ''-'' ||\r\n              Substr(sTempString, 9, 4) \r\n              || ''-'' ||\r\n              Substr(sTempString, 13, 4) \r\n              || ''-'' ||\r\n              Substr(sTempString, 17, 4) \r\n              || ''-'' ||\r\n              Substr(sTempString, 21, 12) \r\n              || ''}'';\r\n  return(Result);\r\nend NEWID;'),
(x'C4CF9CB244736A448F14824C92DC2D30', x'47B4A592397A5947AA047B297879E4E9', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'индексы', NULL, 'CREATE  INDEX Syslog_times ON SysLog(ChangeStamp) \r\n$$\r\n\r\ncreate index instance_lockuser on instance(lockuserid)\r\n\r\n$$\r\n\r\ncreate index instance_locksession on instance(locksessionid)\r\n\r\n$$\r\n\r\n \r\n'),
(x'C4CF9CB244736A448F14824C92DC2D30', x'494A11821D40DB449D4CCBB1F8A2EA97', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_ROLEENTRY', 'V_ROLEENTRY', 'drop view if exists V_RoleEntryPoints \r\n$$\r\ncreate view V_RoleEntryPoints as\r\nselect \r\nRoles_WP.instanceid ROLEID ,\r\nRoles_WP.WP ARMID,\r\nRoles_ACT.Accesible,\r\nEntrypoints.Name,\r\nEntrypoints.Caption\r\nfrom ROLES_WP \r\njoin ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid\r\njoin entrypoints on \r\nROLES_ACT.entrypoints=entrypoints.entrypointsid\r\n$$'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'4B2610ED3817FA4DA02F159D28E6D6B6', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'create or replace  view V_LOG as \r\nselect syslog.syslogid\r\n,syslog.changestamp\r\n,the_session.StartAt \r\n,the_session.Closed\r\n,syslog.the_Resource\r\n,syslog.LogStructID\r\n,syslog.LogInstanceID\r\n,syslog.VERB\r\n,users.login\r\n,users.Family\r\n,users.Name\r\n,users.Surname\r\n,instance.name instname\r\n,instance.objtype\r\n,part.caption\r\n,objecttype.the_comment\r\n from  syslog\r\njoin the_session on syslog.thesession=the_session.the_sessionid\r\njoin users on the_session.usersid=users.usersid\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\nleft join part on syslog.LogStructID = part.name\r\nleft join objecttype on instance.objtype =objecttype.name\r\n\r\n$$'),
(x'25AD0CC1ED9518459177E29824F01E47', x'5679CCB9E2D794468EE8DE68692E4D18', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'AutoCloseSession-job-AdminUnlockAll', 'JOB_FIX', 'create or replace procedure AutoCloseSession\r\n \r\n as  \r\n \r\nasid char(38); \r\nbegin \r\ndeclare cursor closer is \r\nselect the_sessionid id from the_session where lastaccess < (sysdate()-0.008) and closed =0; \r\ncloser_rec  closer%ROWTYPE; \r\nbegin \r\n --open closer; \r\n for closer_rec in closer loop \r\n   Logout (closer_rec.id); \r\n end loop; \r\n--close closer; \r\nend; \r\nend; \r\n/\r\ndeclare\r\nnum_new_job_no number;\r\nbegin\r\nselect JOB into num_new_job_no from USER_JOBS where What=''begin MTZ.AutoCloseSession; end;'';\r\nDBMS_JOB.REMOVE(num_new_job_no);\r\ncommit;\r\nend;\r\n/\r\ndeclare\r\nnum_new_job_no number;\r\nbegin\r\nsys.dbms_job.submit(job => num_new_job_no,\r\nwhat => ''begin MTZ.AutoCloseSession; end;'',\r\nnext_date => sysdate + (1/1000),\r\ninterval => ''sysdate+30/1440'');\r\ncommit;\r\nexception\r\nwhen others then\r\ndbms_output.put_line(sqlcode||sqlerrm);\r\nend;\r\n/\r\ncreate or replace procedure AdminUnlockAll\r\n \r\n as  \r\n \r\nbegin \r\nupdate instance set LockUserID = null, LockSessionID=null  ;\r\nend; \r\n/'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'6612E1DCCB58714196AFF0D47BA22687', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_SYSLOG', 'V_SYSLOG', 'if exists (select * from dbo.sysobjects where id = object_id(N''[dbo].[V_SYSVIEW]'') and OBJECTPROPERTY(id, N''IsView'') = 1)\r\ndrop view [dbo].[vRPTCOST]\r\n$$\r\n\r\ncreate view V_SYSLOG as\r\nselect \r\nsyslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID \r\nfrom  syslog \r\njoin the_session on syslog.thesession=the_session.the_sessionid \r\njoin users on the_session.usersid=users.usersid'),
(x'25AD0CC1ED9518459177E29824F01E47', x'7AEEF78FA76F554987E7B109426C85C7', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'create or replace view V_LOG as \r\n\r\nselect syslog.syslogid\r\n\r\n,syslog.changestamp\r\n\r\n,the_session.StartAt\r\n\r\n,the_session.Closed\r\n\r\n,syslog.the_Resource\r\n\r\n,syslog.LogStructID\r\n\r\n,syslog.LogInstanceID\r\n\r\n,syslog.VERB\r\n\r\n,NVL(users.login,the_Resource || ''|'' || NVL(logstructid,''null'')) login\r\n\r\n,users.Family\r\n\r\n,users.Name\r\n\r\n,users.Surname\r\n\r\n,instance.name instname\r\n\r\n,instance.objtype\r\n\r\n,part.caption\r\n\r\n,objecttype.the_comment\r\n\r\n from  syslog\r\n\r\nleft join the_session on syslog.thesession=the_session.the_sessionid\r\n\r\nleft join users on the_session.usersid=users.usersid\r\n\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\n\r\nleft join part on syslog.logstructid = part.name\r\n\r\nleft join objecttype on instance.objtype =objecttype.name'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'7E2905974C43F542A5D651E0C61EF18C', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'Indexes', NULL, 'CREATE  INDEX Syslog_times ON SysLog(ChangeStamp) \r\n$$\r\n\r\ncreate index instance_lockuser on instance(lockuserid)\r\n\r\n$$\r\n\r\ncreate index instance_locksession on instance(locksessionid)\r\n\r\n$$'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'8C0BE38F3E8C53488586BAA367A924CD', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_ROLEENTRY', 'V_ROLEENTRY', 'create or replace view V_RoleEntryPoints as\r\nselect \r\nRoles_WP.instanceid ROLEID ,\r\nRoles_WP.WP ARMID,\r\nRoles_ACT.Accesible,\r\nEntrypoints.Name,\r\nEntrypoints.Caption\r\nfrom ROLES_WP \r\njoin ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid\r\njoin entrypoints on \r\nROLES_ACT.entrypoints=entrypoints.entrypointsid\r\n\r\n$$'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'9F67088E79FB68408D8397FF89933C41', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_ROLEENTRY', 'V_ROLEENTRY', 'create view V_RoleEntryPoints as\r\nselect \r\nRoles_WP.instanceid ROLEID ,\r\nRoles_WP.WP ARMID,\r\nRoles_ACT.Accesible,\r\nEntrypoints.Name,\r\nEntrypoints.Caption\r\nfrom ROLES_WP \r\njoin ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid\r\njoin entrypoints on \r\nROLES_ACT.entrypoints=entrypoints.entrypointsid\r\n$$'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'A6BFDCE2D29D734295FA35361B188448', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'индексы', NULL, 'if exists (select * from dbo.sysindexes where name = N''Syslog_times'' and id = object_id(N''[dbo].[SysLog]''))\r\ndrop index [dbo].[SysLog].[Syslog_times]\r\n$$\r\n\r\n CREATE  INDEX [Syslog_times] ON [dbo].[SysLog]([ChangeStamp]) WITH  FILLFACTOR = 90\r\n$$\r\n\r\n\r\n\r\n \r\ncreate index instance_lockuser on instance(lockuserid)\r\n\r\n$$\r\n\r\ncreate index instance_locksession on instance(locksessionid)\r\n\r\n$$\r\n'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'AEFA7B4E215A28488C479AD56068E1C5', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'create view V_LOG as \r\nselect syslog.syslogid\r\n,syslog.changestamp\r\n,the_session.StartAt\r\n,the_session.Closed\r\n,syslog.the_Resource\r\n,syslog.LogStructID\r\n,syslog.LogInstanceID\r\n,syslog.VERB\r\n,users.login\r\n,users.Family\r\n,users.Name\r\n,users.Surname\r\n,instance.name instname\r\n,instance.objtype\r\n,part.caption\r\n,objecttype.the_comment\r\n from  syslog\r\njoin the_session on syslog.thesession=the_session.the_sessionid\r\njoin users on the_session.usersid=users.usersid\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\nleft join part on syslog.logstructid = part.name\r\nleft join objecttype on instance.objtype =objecttype.name\r\n\r\n$$'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'B7C6E1294D28474EA9256438FFA32979', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_SYSLOG', 'V_SYSLOG', 'create or replace view V_SYSLOG as\r\nselect \r\nsyslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID \r\nfrom  syslog \r\njoin the_session on syslog.thesession=the_session.the_sessionid \r\njoin users on the_session.usersid=users.usersid\r\n\r\n\r\n$$'),
(x'C4CF9CB244736A448F14824C92DC2D30', x'DD847A996E9C254A863E0CA4C32248D1', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_SYSLOG', 'V_SYSLOG', 'drop view if exists V_SYSLOG\r\n$$\r\n\r\ncreate view V_SYSLOG as\r\nselect \r\nsyslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID \r\nfrom  syslog \r\njoin the_session on syslog.thesession=the_session.the_sessionid \r\njoin users on the_session.usersid=users.usersid'),
(x'25AD0CC1ED9518459177E29824F01E47', x'E239BB14F1876348A89F0A31EC0F2903', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'Logout', 'Logout', 'create or replace procedure Logout\r\n  \r\n(aCURSESSION CHAR/**/  \r\n  \r\n)  \r\n as   \r\n  \r\nexistsCnt integer;  \r\nSysLogid char(38);  \r\nasysid char(38);  \r\nausr char(38); \r\nbegin  \r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;  \r\nif existsCnt >0 then  \r\n   begin  \r\n    select usersid into ausr from the_session where the_sessionid=acursession;\r\n    select login into ausr from users where usersid=ausr;\r\n    declare cursor dl  is  \r\n    select ''update ''|| thevalue || '' set LockSessionID =null where LockSessionID=:1'' str from sysoptions where optiontype=''MAP'' and theValue not like ''V[_]%'';  \r\n    dl_rec dl%rowtype;  \r\n    begin  \r\n    --open dl;  \r\n    for dl_rec in dl loop  \r\n\t      execute immediate dl_rec.str using acursession;  \r\n    end loop;  \r\n    --close dl;  \r\n\r\n    select instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\n    \r\n    SysLogid:=MTZ.NEWID(); \r\n    MTZSystem.SysLog_SAVE( aTheSession=>acursession,aCURSESSION=>acursession, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGOUT'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n\r\n\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;  \r\n    update the_session set closed=1,closedAt=sysdate(), changeStamp=sysdate() where     the_sessionid=acursession;  \r\n \r\n    end;  \r\n  end;    \r\n End if;  \r\nend;  '),
(x'C4CF9CB244736A448F14824C92DC2D30', x'EDF8C6C8AE970742893BA6B933CE301D', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'drop view if exists V_LOG\r\n$$\r\ncreate view V_LOG as \r\nselect syslog.syslogid\r\n,syslog.changestamp\r\n,the_session.StartAt\r\n,the_session.Closed\r\n,syslog.the_Resource\r\n,syslog.LogStructID\r\n,syslog.LogInstanceID\r\n,syslog.VERB\r\n,users.login\r\n,users.Family\r\n,users.Name\r\n,users.Surname\r\n,instance.name instname\r\n,instance.objtype\r\n,part.caption\r\n,objecttype.the_comment\r\n from  syslog\r\njoin the_session on syslog.thesession=the_session.the_sessionid\r\njoin users on the_session.usersid=users.usersid\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\nleft join part on syslog.logstructid = part.name\r\nleft join objecttype on instance.objtype =objecttype.name\r\n\r\n$$');
COMMIT;

-- 
-- Вывод данных для таблицы genpackage
--
BEGIN;
INSERT INTO genpackage VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8C53A112A8EE714A9C8E525C175FC1EB', '2012-01-20 14:40:23', '2017-12-25 16:20:17', NULL, NULL, NULL, 'Базовая поставка');
COMMIT;

-- 
-- Вывод данных для таблицы genreference
--
BEGIN;
INSERT INTO genreference VALUES
(x'3014B534C6BD81488A6E795010553E24', x'2C7DEAC32DDD7341AC19250476364CBF', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MTZManager', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'486373152B9A18499FB169ED86592585', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MTZUtil', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'676608A13E79704583B8E2BCBDA3D630', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MSXML2', NULL, 0, 0),
(x'3014B534C6BD81488A6E795010553E24', x'69B93396BD073248A9CDB95F0A875C64', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MTZUtil', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'6BA60D1FCDBA6A44B2545DCE28686AEE', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MTZManager', NULL, 0, 0),
(x'3014B534C6BD81488A6E795010553E24', x'B92047D23095F348A164A0715933D116', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MTZSession', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'DC9F2BC6936DEA45B4D0DB765B9B0B77', '2012-01-20 14:40:23', '2017-12-25 16:20:18', NULL, NULL, NULL, 'MTZSession', NULL, 0, 0);
COMMIT;

-- 
-- Вывод данных для таблицы groups
--
-- Таблица survey.groups не содержит данных

-- 
-- Вывод данных для таблицы groupuser
--
-- Таблица survey.groupuser не содержит данных

-- 
-- Вывод данных для таблицы instance
--
BEGIN;
INSERT INTO instance VALUES
(x'055442F2BB884F4698F04E8A63B63EAF', NULL, NULL, NULL, '2017-12-25', 'svp', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'087D4068FC388846B9BA1DBFC211166C', NULL, NULL, NULL, '2017-12-25', 'svq', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'212E90AC78E96E41AC5339108803548C', NULL, NULL, NULL, '2017-12-25', 'svm', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'27F8CBE7D219F043AC1C823A4B087BAB', NULL, NULL, NULL, '2017-12-25', 'svo', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'31D30CD6FADC14419EEE8DDDAD047660', NULL, NULL, NULL, '2017-12-25', 'svm', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'43732244A4D3A94CB70B3D79659BAF97', NULL, NULL, NULL, '2017-12-25', 'svq', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'46596192F351664181A3D8755373ED93', NULL, NULL, NULL, '2017-12-25', 'svv', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'488A2A619C7DCC4DA46EBB77EBB9FA20', NULL, NULL, NULL, '2017-12-25', 'svt', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'6A6A30294A81C44395E1F8EC5720649A', NULL, NULL, NULL, '2017-12-25', 'svp', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'855EFBE00E05224385059E0CA132E901', NULL, NULL, NULL, NULL, 'пользователи и группы', 'mtzusers', NULL, NULL, NULL, NULL, 0),
(x'96077605F0A6EB46AB18A939902CA2F3', NULL, NULL, NULL, '2017-12-25', 'svd', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'9DFD4E651C49A24181EAE4E5C17A8EA9', NULL, NULL, NULL, '2017-12-25', 'svo', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'A174A8C5011DF543AA2B5431031FD45C', NULL, NULL, NULL, NULL, 'системная информация', 'mtzsystem', NULL, NULL, NULL, NULL, 0),
(x'A1CF4AF2E777B34A9FEE60E57DCB7223', NULL, NULL, NULL, '2017-12-25', 'svh', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', NULL, x'9DF5C65287E9E7119CAAA81E843486A3', NULL, NULL, 'Спец:Метамодель', 'MTZMetaModel', NULL, NULL, NULL, NULL, 0),
(x'A7E7E28AD586F34C8D40B2EC42A80C1F', NULL, NULL, NULL, '2017-12-25', 'svt', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'D01B830C400A4F4F9CAB35CB47D3D42C', NULL, NULL, NULL, '2017-12-25', 'svv', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'DA4BFF6AA3C3B04AAB86CE47FAE21548', NULL, NULL, NULL, '2017-12-25', 'sva', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'DBD70298708B5E44ADB79468DB0343A3', NULL, NULL, NULL, '2017-12-25', 'svd', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'E0D42F75BFA40C4EA7D4AB2F4F3193D3', NULL, NULL, NULL, '2017-12-25', 'svh', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'F769416702564D4C9E1D1A1732C4899C', NULL, NULL, NULL, '2017-12-25', 'sva', 'mtzjrnl', NULL, NULL, NULL, NULL, 0);
COMMIT;

-- 
-- Вывод данных для таблицы instancevalidator
--
-- Таблица survey.instancevalidator не содержит данных

-- 
-- Вывод данных для таблицы iu_crole
--
-- Таблица survey.iu_crole не содержит данных

-- 
-- Вывод данных для таблицы iu_int_modules
--
-- Таблица survey.iu_int_modules не содержит данных

-- 
-- Вывод данных для таблицы iu_rcfg_def
--
-- Таблица survey.iu_rcfg_def не содержит данных

-- 
-- Вывод данных для таблицы iu_rcfg_docmode
--
-- Таблица survey.iu_rcfg_docmode не содержит данных

-- 
-- Вывод данных для таблицы iu_rcfg_mod
--
-- Таблица survey.iu_rcfg_mod не содержит данных

-- 
-- Вывод данных для таблицы iu_u_def
--
-- Таблица survey.iu_u_def не содержит данных

-- 
-- Вывод данных для таблицы iu_u_def_temp
--
-- Таблица survey.iu_u_def_temp не содержит данных

-- 
-- Вывод данных для таблицы jcolumnsource
--
BEGIN;
INSERT INTO jcolumnsource VALUES
(x'946C70994B4E6D409EF9A9946DDDDC59', x'0AB664157001F743AD0B18C11071ED82', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, x'FD9627E19339F543A4BE7F278D7C258B', 'svv_info_basetest'),
(x'CEA699F2F906484D85D715ED1E7C5A00', x'0CEA1FC55A598048ABF6AF951502BE5E', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, x'FD9627E19339F543A4BE7F278D7C258B', 'svv_info_vnum'),
(x'F177810AD69A6F41AD06C4F7015AE9A9', x'35C2E1B29DB17943A7FEB28F35F639AD', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, x'8F68DB8741886B44A1808D2D0ACF040A', 'svo_info_name'),
(x'3B4018ED18442C44896A46E9427D2FD5', x'4A87451462469F40BDA897E5DB51DC5D', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, x'E9B332C0D2037845B600F9B9CFABE413', 'svt_info_tgroup'),
(x'D5EFC4B86FE71C418EEBE32B44091E81', x'63CB50DC15942D4085730C8417E2B9FA', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, x'3F916079454D0B4DA9DF0C93C78BF48F', 'svh_info_name'),
(x'E92224C512F3A4488FF8E2686F8E26D5', x'9B97ABEDE6943949B7C73EC323CE48AB', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, x'B73FEEC237AF2F42B11A0CFB82A55B8B', 'svm_info_moduletime'),
(x'1E19EA46125EBB4E9FAEDEF7F109C7ED', x'9D976CA401D34E45A531955B13FC8663', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, x'E9B332C0D2037845B600F9B9CFABE413', 'svt_info_name'),
(x'2E93F6BF404BBE40B03BB292436CC7CA', x'AD86DCF083B1224FA621BFFCC2C2F878', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, x'C721804AE292E843A176024AEBCCC136', 'svp_info_qtype'),
(x'022A5EBC99961F4F891DF108EB9CD55C', x'B98C14EB597A3541B48A00577F275987', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, x'E9B332C0D2037845B600F9B9CFABE413', 'svt_info_towner'),
(x'EB3861B818244C40B07994B5B26122AD', x'C94E9DC0564DFF4B91CE28A11250F85F', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, x'9B2EFCB66C615F42B6FA0FF0B874C8B7', 'svq_info_qtype'),
(x'1B33F390B0076D40A1AEB51A3440715A', x'D3C41E702D81BF47B00FEB36DD99545F', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, x'C2B9F3FA917A114CAE71D9C9693D1B0A', 'sva_info_person'),
(x'5D701E83FED8314CA9DCBDF39D80757B', x'D61C9F19636BD942B4BE13CF8EB271AB', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, x'C2B9F3FA917A114CAE71D9C9693D1B0A', 'sva_info_testVariant'),
(x'BBEFBC32D0D50340886466A0A3C6DE84', x'D8B6630337CDFE459C300952D377633B', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, x'B73FEEC237AF2F42B11A0CFB82A55B8B', 'svm_info_modulecost'),
(x'484812BF8F5AA44D8A864A296A6C89F7', x'ECB92D583B98FA4F99E333F46F191FA7', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, x'7766C109C9DD4945AB0BE0F20FA7ADF9', 'svd_testgroup_name'),
(x'8A6071132B9BBD4EBBAC9CA41E6CDD33', x'F4A178618D793A408EE0CA82DA06A899', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, x'B73FEEC237AF2F42B11A0CFB82A55B8B', 'svm_info_name');
COMMIT;

-- 
-- Вывод данных для таблицы journal
--
BEGIN;
INSERT INTO journal VALUES
(x'96077605F0A6EB46AB18A939902CA2F3', x'04AE9D0587344642B6B4CB808C91543B', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 'Справочники', 'Справочники', 'Журнал для документов типа: Справочники системы тестирования', NULL, 0),
(x'E0D42F75BFA40C4EA7D4AB2F4F3193D3', x'34CBD8863D042848970A248A0E30D81A', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 'Тестируемый', 'Тестируемый', 'Журнал для документов типа: Человек, проходящий тестирование', NULL, 0),
(x'D01B830C400A4F4F9CAB35CB47D3D42C', x'4F73B8EA0F6C3C4EA655D266605E3914', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 'Вариант теста', 'Вариант теста', 'Журнал для документов типа: Вариант теста', NULL, 0),
(x'087D4068FC388846B9BA1DBFC211166C', x'9BC5A9F253DCC04992C63F16CD9A652B', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, 'Вопрос теста', 'Вопрос теста', 'Журнал для документов типа: Вопрос теста', NULL, 0),
(x'F769416702564D4C9E1D1A1732C4899C', x'B633BDC26198FC4CAA55C3BB39EB4A2C', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 'Ответы', 'Ответы', 'Журнал для документов типа: Ответы на вопросы теста', NULL, 0),
(x'055442F2BB884F4698F04E8A63B63EAF', x'C94D6E8EDE7A6740BE29EFF09F5804A2', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 'Параметры вопросов', 'Параметры вопросов', 'Журнал для документов типа: Списки параметров для каждого типа вопросов', NULL, 0),
(x'31D30CD6FADC14419EEE8DDDAD047660', x'D54833E18F900A4BBF50934518807253', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 'Модуль теста', 'Модуль теста', 'Журнал для документов типа: Тематический модуль теста', NULL, 0),
(x'488A2A619C7DCC4DA46EBB77EBB9FA20', x'E4BDBF579B40924DBF95F5F9299DEE00', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 'Тест', 'Тест', 'Журнал для документов типа: Описание теста', NULL, 0),
(x'9DFD4E651C49A24181EAE4E5C17A8EA9', x'F1AD0CED81136048AD0CCD9E8D48A506', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 'Организация', 'Организация', 'Журнал для документов типа: Организация, которая создает тесты и организует тестирование', NULL, 0);
COMMIT;

-- 
-- Вывод данных для таблицы journalcolumn
--
BEGIN;
INSERT INTO journalcolumn VALUES
(x'488A2A619C7DCC4DA46EBB77EBB9FA20', x'022A5EBC99961F4F891DF108EB9CD55C', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 3, 'Владелец', 0, 0, 0),
(x'F769416702564D4C9E1D1A1732C4899C', x'1B33F390B0076D40A1AEB51A3440715A', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 1, 'Тестируемый', 0, 0, 0),
(x'488A2A619C7DCC4DA46EBB77EBB9FA20', x'1E19EA46125EBB4E9FAEDEF7F109C7ED', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 1, 'Название теста', 0, 0, 0),
(x'055442F2BB884F4698F04E8A63B63EAF', x'2E93F6BF404BBE40B03BB292436CC7CA', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 1, 'Тип Вопроса', 0, 0, 0),
(x'488A2A619C7DCC4DA46EBB77EBB9FA20', x'3B4018ED18442C44896A46E9427D2FD5', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 2, 'Группа', 0, 0, 0),
(x'96077605F0A6EB46AB18A939902CA2F3', x'484812BF8F5AA44D8A864A296A6C89F7', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 1, 'Название', 0, 0, 0),
(x'F769416702564D4C9E1D1A1732C4899C', x'5D701E83FED8314CA9DCBDF39D80757B', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 2, 'Вариант теста', 0, 0, 0),
(x'31D30CD6FADC14419EEE8DDDAD047660', x'8A6071132B9BBD4EBBAC9CA41E6CDD33', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 1, 'Название', 0, 0, 0),
(x'D01B830C400A4F4F9CAB35CB47D3D42C', x'946C70994B4E6D409EF9A9946DDDDC59', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 1, 'Базовый тест', 0, 0, 0),
(x'31D30CD6FADC14419EEE8DDDAD047660', x'BBEFBC32D0D50340886466A0A3C6DE84', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 3, 'Баллы за модуль', 0, 1, 0),
(x'D01B830C400A4F4F9CAB35CB47D3D42C', x'CEA699F2F906484D85D715ED1E7C5A00', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 2, 'Номер варианта', 0, 0, 0),
(x'E0D42F75BFA40C4EA7D4AB2F4F3193D3', x'D5EFC4B86FE71C418EEBE32B44091E81', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 1, 'Название', 0, 0, 0),
(x'31D30CD6FADC14419EEE8DDDAD047660', x'E92224C512F3A4488FF8E2686F8E26D5', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 2, 'Время на прохождение модуля', 0, 1, 0),
(x'087D4068FC388846B9BA1DBFC211166C', x'EB3861B818244C40B07994B5B26122AD', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, 1, 'Тип Вопроса', 0, 0, 0),
(x'9DFD4E651C49A24181EAE4E5C17A8EA9', x'F177810AD69A6F41AD06C4F7015AE9A9', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 1, 'Название', 0, 0, 0);
COMMIT;

-- 
-- Вывод данных для таблицы journalsrc
--
-- Таблица survey.journalsrc не содержит данных

-- 
-- Вывод данных для таблицы localizeinfo
--
BEGIN;
INSERT INTO localizeinfo VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'21F2858B2A00BC4ABD83F366B8ADFD0B', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'Русский', 'ru_ru'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FBDD86968C86B84A843A2077A830FEBD', '2012-01-20 14:40:23', '2017-12-25 16:20:19', NULL, NULL, NULL, 'English (us)', 'en_us');
COMMIT;

-- 
-- Вывод данных для таблицы methodrestriction
--
-- Таблица survey.methodrestriction не содержит данных

-- 
-- Вывод данных для таблицы mtzapp
--
BEGIN;
INSERT INTO mtzapp VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'14420EFF0DA74C488B800FF708B1837C', '2012-01-20 14:39:57', '2017-12-25 16:22:17', NULL, NULL, NULL, 'Администрирование', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'64B719A7A2609040BF9B0CA9501B8DA8', '2012-01-20 14:39:57', '2017-12-25 16:22:17', NULL, NULL, NULL, 'Ядро', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'A933F9ACA890164E9ADB6E06CB3E2457', '2017-12-25 16:41:51', '2017-12-25 16:41:51', NULL, NULL, NULL, 'SURVEY', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'CE9E6F9481728F4899D03A4F64DA5C1D', '2012-01-20 14:39:57', '2017-12-25 16:22:17', NULL, NULL, NULL, 'СТД', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '2012-01-20 14:39:57', '2017-12-25 16:22:17', NULL, NULL, NULL, 'Ядро2', NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы mtzext_def
--
-- Таблица survey.mtzext_def не содержит данных

-- 
-- Вывод данных для таблицы mtzextrel
--
-- Таблица survey.mtzextrel не содержит данных

-- 
-- Вывод данных для таблицы nextstate
--
-- Таблица survey.nextstate не содержит данных

-- 
-- Вывод данных для таблицы num_head
--
-- Таблица survey.num_head не содержит данных

-- 
-- Вывод данных для таблицы num_values
--
-- Таблица survey.num_values не содержит данных

-- 
-- Вывод данных для таблицы num_zones
--
-- Таблица survey.num_zones не содержит данных

-- 
-- Вывод данных для таблицы objectmode
--
BEGIN;
INSERT INTO objectmode VALUES
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'1797BDCBD643404A9128F9E8AD7F8309', '2012-06-15 12:10:20', '2017-12-25 16:21:13', NULL, NULL, NULL, 'main', -1, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы objecttype
--
BEGIN;
INSERT INTO objecttype VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0C3F032BB9DF064FA4F8B3A3275AEFEB', '2017-12-25 16:55:23', '2017-12-25 16:55:23', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Организация', 'svo', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Организация, которая создает тесты и организует тестирование', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'15AD6D8C2238804FA381D9EA19FEAC06', '2012-01-20 14:40:15', '2017-12-25 16:21:12', NULL, NULL, NULL, x'64B719A7A2609040BF9B0CA9501B8DA8', 'Спец.: Метамодель системы', 'MTZMetaModel', -1, NULL, NULL, NULL, NULL, 0, 0, 2, 'Документ, который содержит исчерпывающую информацию о структурных особенностях и базовом поведении документов.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'16319A32B3ACC24E93CE5920E84AD8E8', '2012-01-20 14:40:03', '2017-12-25 16:21:12', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', 'Описание журнала', 'MTZJrnl', 0, NULL, NULL, NULL, NULL, -1, 0, 2, 'Документ описывает журнал, который используется для работы с множеством документов. В журнале могут отображаться документы одного, или нескольких типов.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'23AF28C455F9544FB7CBE555A419F5C9', '2017-12-25 16:50:46', '2017-12-25 16:50:46', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Тест', 'svt', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Описание теста', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'37C0E0E9467C274D009D085EA9279CD2', '2012-01-20 14:39:58', '2017-12-25 16:21:12', NULL, NULL, NULL, x'64B719A7A2609040BF9B0CA9501B8DA8', 'Спец.: Системные данные', 'MTZSystem', -1, NULL, NULL, NULL, NULL, 0, 0, 2, 'Документ заполняется системой автоматически. Он содержит журнал активности пользователей системы, в который заносится вся информация о действиях пользователей.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'402C9F451A03A1499606F8BD1A392D97', '2017-12-25 17:13:05', '2017-12-25 17:13:05', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Параметры вопросов', 'svp', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Списки параметров для каждого типа вопросов', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'40B745DAF4C6974BB4EB3DE0A6C480B5', '2012-01-20 14:40:02', '2017-12-25 16:21:12', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', 'Описание АРМ', 'MTZwp', 0, NULL, NULL, NULL, NULL, -1, 0, 2, 'Документ описывает структуру автоматизированного рабочего места и особенности его функционирования.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'498781EAE9DAC441825FCAA922F309A2', '2017-12-25 16:47:06', '2017-12-25 16:47:06', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Вопрос теста', 'svq', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Вопрос теста', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'644A47FAE4C43F4F8236B8E8F19B66AA', '2017-12-25 17:29:56', '2017-12-25 17:29:56', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Тестируемый', 'svh', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Человек, проходящий тестирование', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'7E5B4FC4C09F1443B24407235EE1E7E3', '2012-01-20 14:39:58', '2017-12-25 16:21:12', NULL, NULL, NULL, x'64B719A7A2609040BF9B0CA9501B8DA8', 'Справочник: пользователи', 'MTZUsers', -1, NULL, NULL, NULL, NULL, 0, -1, 2, 'Документ содержит списки пользователей и состав групп пользователей системы.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'882F32DE48CA014E8ACDBEC71338D8CC', '2017-12-25 17:49:18', '2017-12-25 17:49:18', NULL, NULL, NULL, x'CE9E6F9481728F4899D03A4F64DA5C1D', 'Нумератор', 'STDNumerator', 0, NULL, NULL, NULL, NULL, -1, -1, 2, 'Хранилище использованных номеров', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8D3FAB25808E6948BF5D35875ABED7E3', '2017-12-25 17:31:08', '2017-12-25 17:31:08', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Ответы', 'sva', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Ответы на вопросы теста', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8FB8F3BE916E2941BAD51BA076BDE3BD', '2012-01-20 14:40:02', '2017-12-25 16:21:12', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', 'Расширения функциональности', 'MTZExt', 0, NULL, NULL, NULL, NULL, -1, 0, 2, 'Каталог функциональных расширений системы (ADDINS). ', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C8B7C2961C380544AECB76AA0C268EDA', '2017-12-25 16:48:05', '2017-12-25 16:48:05', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Модуль теста', 'svm', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Тематический модуль теста', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'CA26E2638FB3FA40A1C70E7134DCDB63', '2017-12-25 16:49:05', '2017-12-25 16:49:05', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Вариант теста', 'svv', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Вариант теста', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DD6ECA18A1559045974FA973B8762638', '2012-01-20 14:40:13', '2017-12-25 16:21:13', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', 'Описание фильтра', 'MTZFltr', 0, NULL, NULL, NULL, NULL, -1, 0, 2, 'Документ описывает структуру фильтра, который используется для ограничения множества информации, которая отображается в журнале , отчете и т.п.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E3EDC1A12C8DC649910F9029EBABEC71', '2017-12-25 17:48:49', '2017-12-25 17:48:49', NULL, NULL, NULL, x'A933F9ACA890164E9ADB6E06CB3E2457', 'Справочники', 'svd', 0, NULL, NULL, NULL, NULL, 0, 0, 0, 'Справочники системы тестирования', 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F925E1F51486CF4AA5281690B3C2040E', '2012-01-20 14:39:59', '2017-12-25 16:21:13', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', 'Описание отчета', 'MTZRprt', 0, NULL, NULL, NULL, NULL, -1, 0, 2, 'Документ описывает отчетные формы, которые используются в АРМ.', 0, 0, NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы objstatus
--
-- Таблица survey.objstatus не содержит данных

-- 
-- Вывод данных для таблицы parameters
--
BEGIN;
INSERT INTO parameters VALUES
(x'630488E98C381146811E48FA4232909F', x'004A03039F104543B551CBA8652F270E', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, 2, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'02493C2C18C49746B91EB0116461BD08', '2012-01-20 14:40:22', '2017-12-25 16:21:06', NULL, NULL, NULL, 2, 'result', 'результат', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'15DD78CFDC707D44B17B2379B865296E', x'02DAFA45BB29E24E8C8BAF6D6F3B44F0', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, 1, 'ID', 'Идентификатор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'0717A6A963AFAE43BA31E72C5C2B8D69', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, 4, 'access', 'Разрешение', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'0A67E45088FDBC44A2E0CE84E1FE435F', '2012-01-20 14:40:22', '2017-12-25 16:21:06', NULL, NULL, NULL, 4, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'10BC1B77AC749443B32BBF4F9D9A1B68', x'0D3A750CFD200B44A227762F44FC075D', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, 1, 'CURSESSION', 'Текущая сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'EF928D932409414A873D109F2B7E4A8E', x'0D7EB5C67FDE3B4887D1358A138BB598', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'0E54C02EF048BB438570734759AF3E8A', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'RowQueryID', 'Идентификатор массива строк', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'0F46CF9496319442B462E7782C5919C2', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'ObjTypeName', 'ObjTypeName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'914F746119B06C428DAEC716FFC3A359', x'12B08565EEBBFD4CA898EFD27F6DC387', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'OK', 'Активна', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'7C699918ED8755488C5AB2E46F969A01', x'1383F27A22005A46A4D81FC2A4DD5E5C', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'14A28D77A87B81418D307F61DFC00C7A', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'OutputQueryID', 'идентификатор масива результатов', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'256C582747265940A19A68269009436B', x'17E5F2142E98ED4CA4BC2060F89A0F2D', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'THE_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'FCBF34CB1A194142B6510EB857957106', x'1AD3BCC6EB35EC4587D7AB514B3DBB9C', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'DesPartName', 'DesPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'7C699918ED8755488C5AB2E46F969A01', x'1C2EBBBC305A0B40A38AE4F1B42B502F', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'1D52C71C0DF5704A94256F5C0F6A29EB', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'RowQueryID', 'Идентификатор массива строк', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'1F53DC1DFFFFA8429947D3B5B31E9246', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'7C909231CC8D0349848800B95285235B', x'23360A045293CA408BC93E0CF1D0F657', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'the_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'210A9E74BA5959498678F52843AA8058', x'233E02F0139AE44EA9C89FC53EEF866B', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'265352B60462114080A7BE08269CB2AA', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'15DD78CFDC707D44B17B2379B865296E', x'29C1044B089F5446AA9155CA6FF73153', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'StartMode', 'Режим запуска', x'48E476E732F57D41B8D77D5B47FCCD6F', 10, 0, 0, 0, NULL, NULL),
(x'32117F9E5091A3449F0004515E1F52E3', x'2B242FBE582BC24DBA7C2538789C32D1', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'CURSESSION', 'Сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'07ACAAA83D6A794A9B138A1F86268619', x'2C5E075515239B4A8B65BB066E55CC92', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'CURSESSION', 'Текущая сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'31B3832BFF994A4C97F664E1D72B5987', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'369E7F6DE3699645B7AAD37BE72B49FF', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'InstanceID', 'Object', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, -1, 0, NULL, NULL),
(x'32117F9E5091A3449F0004515E1F52E3', x'3ACF44B41D8380438898C10CB63E69C4', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'OK', 'Активна', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'3C04E559AB21FA4AAAB02D103BF5496B', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'the_Table', 'Таблица', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'9B3C33461AE5654F866E7A5331F55FA1', x'3C21D1129F6E934F84F2F044D88A8BAB', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'the_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'3D1D37E2B2D7994CBF582AB9E5BD9806', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 4, 'CURSESSION', 'Session', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'189BA291EFAC4F4EAAD06E822C0EF813', x'3F1B751283D8B144A89D8BD19369D251', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'CURSESSION', 'Сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'3FA69DE4AB8D2E4AA5B068957E67E936', '2012-01-20 14:40:22', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'6E677CB3C067374C8C15FC0C2FF2D4C3', x'41E0C88E8BDBC148B9983BC1E0368261', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 2, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'9B3C33461AE5654F866E7A5331F55FA1', x'431E464F1792554096859869D7D45391', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'472C899664808C488606A848C852CEE3', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 1, 'InstanceID', 'Object', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, -1, 0, NULL, NULL),
(x'0A0BA3815B58C04B9C4EBF85F6ED0D29', x'4732B581F47ED442A214877D91FE6CFA', '2012-01-20 14:40:23', '2017-12-25 16:21:07', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'423DD52A283D05448914825B4C14D188', x'47709B1FF1466A48A7DA75FB3AEA94D7', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'256C582747265940A19A68269009436B', x'47951E030AB4EB4A8C7CA210EC652B19', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'486728724AB16B4BA8B0EA8A33F23541', '2012-01-20 14:40:22', '2017-12-25 16:21:08', NULL, NULL, NULL, 3, 'SymmetricFieldName', 'SymmetricFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'49501BDE5C1A7E42BE54835C0371635B', '2012-01-20 14:40:22', '2017-12-25 16:21:08', NULL, NULL, NULL, 3, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'630488E98C381146811E48FA4232909F', x'498B7985F78FF44A849E191D499E45B7', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'4AB7FBBD6E690A42A4DBF61D25FA2E54', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 3, 'SymmetricFieldName', 'SymmetricFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'6E677CB3C067374C8C15FC0C2FF2D4C3', x'4CBE8379BE56ED4093B30F7974E89057', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'4E5E23A87C13184CB5C938CFF670C6CD', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 4, 'ForwardFieldName', 'ForwardFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'F1217C6329D52B47A1AFCA5D78122583', x'514447FCEF51064CB6D69BF72A7700CD', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'ID', 'Идентификатор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'514619735DF5A24E9553494C66BBCA62', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 4, 'CURSESSION', 'Сессия пльзователя', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'1BE3ABBEEE11EC46A4BE99A7765C4919', x'55DFB972B8A9BB4D8635828C912D45E2', '2012-01-20 14:40:22', '2017-12-25 16:21:08', NULL, NULL, NULL, 3, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'56A16F933FB3494AB35C3CC68B44FDDF', '2012-01-20 14:40:22', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'4A81487A52B1D346956DD642396D6624', x'59ABB73807441748896BF96742AAAC10', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'Name', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'5A6582BB730E4B45B35DEB86500AA807', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 3, 'the_Table', 'Part Table Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'5C00D85D610AC14985F000B340F61D96', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'CURSESSION', 'Сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'92E4E9C5DE0A734D8532987765502B7F', x'61856491860E874CA3F14000AA6100BF', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'FolderID', 'Идентификатор папки', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 1, x'4A358BE16D8643408226B70CED4E25F8', NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'6402A7E88DAD1543BA67F4604C4E4928', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'RowID', 'Row', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'630488E98C381146811E48FA4232909F', x'677716F06837EB478D3FF1B2AC41BC8C', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 3, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'69088C8C339EEC4DBF9C96C90FC429DF', '2012-01-20 14:40:22', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'ObjTypeName', 'ObjTypeName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'6980FFA5BB384649A08E97ED2AB33046', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 4, 'CURSESSION', 'Сессия пльзователя', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0D4FFB33823D354D8740267028D7C9E6', x'69C0823176EFE24F85BCA6FB285A7D32', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'6A03F8B76948FF4DB65C1589A02417A0', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'OutputQueryID', 'идентификатор масива результатов', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'6BE8F3B707A4B34F8C6370D0C46D2DEB', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'OutputQueryID', 'идентификатор масива результатов', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'DD7C81607BDA8844B4641A1A0F672F09', x'6CC257488A3A534482386117D33622DA', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'6E92EE8D23C1674C85D5C79E7FD20B69', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 4, 'CURSESSION', 'Сессия пльзователя', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'6F05B3A67DC1FA46B1EE13FEF206AD92', '2012-01-20 14:40:22', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'result', 'результат', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'210A9E74BA5959498678F52843AA8058', x'75225D914C86CD418ED2B73BF897E82E', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 1, 'THE_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'75CEB40D4A851341BA6923DF8E4CD7BE', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 4, 'ForwardFieldName', 'ForwardFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'0092456FBB41414EB8952D4837E67242', x'7DF1B10789D240408763B495AE7E912C', '2012-01-20 14:40:23', '2017-12-25 16:21:08', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'73C4D7500DCA204AB80CAF9E590D3D3E', x'807DDBFBE0FEB84C8CB4BB83F7646206', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 2, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'80D7E8CE16523B49AFC7E517200F4EBA', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 4, 'OwnerPartName', 'Раздел- владелец', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'8ECAF9BA4ED33842B39362368309E916', x'821AEFC6FCBC3C4CBA93013E1862AACF', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'207A1BE2EAE05C40979EADB6E8B57039', x'82A6194A0686134A8A9BAC218C97EBB2', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'ServerTime', 'Текущее время', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'256C582747265940A19A68269009436B', x'83EF19FE37E7054EAA81437FB242BE6B', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'1BE3ABBEEE11EC46A4BE99A7765C4919', x'8401F9DCDB91BD4EBD7BF742C359597A', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'84F06FB3D9CDF7448FCD1611A763C789', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'verb', 'Действие', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'73C4D7500DCA204AB80CAF9E590D3D3E', x'876EB1FDFF137245A04D454D072F2879', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'879FF254EBEAB6409824490608127300', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 4, 'CURSESSION', 'Session', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'88B91AC502DBEF41ACAE1A0E9DEA5234', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 4, 'access', 'Разрешение', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'423DD52A283D05448914825B4C14D188', x'8A868F7F9B94904FA19DCDACD062BB4E', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'8AEC10606BB4744C97AA7472F37C0E90', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'8B93EF9511049140AD3501229C1DFFBA', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 5, 'OwnerRowID', 'Строка - владелец', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'3762A089D0A8A141B66BD4A7DF0209D5', x'8BCB39EB4FBFE94EB3A1C5B1DEAA7ED0', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'8FDD6BF323A63C409153B5D2332F97D3', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'the_Table', 'Part Table Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'930D5B883BCD334E9AE0483E43081A48', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 4, 'CURSESSION', 'Session', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'F1217C6329D52B47A1AFCA5D78122583', x'94BFF57E90BF4D4DA05AFB19E7F48B20', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 2, 'StartMode', 'Режим запуска', x'48E476E732F57D41B8D77D5B47FCCD6F', 10, 0, 0, 0, NULL, NULL),
(x'423DD52A283D05448914825B4C14D188', x'956C48610673F24A886408BA840185F4', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'961F588B97D86B4D8D050D5172FF07C8', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'C91480E8C8050E4F8483BA8655D0A695', x'997A7E40F4D8C849BEEDC83D97967574', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 2, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'9AB751F16E6F2B47AC915E6082F53A59', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'CURSESSION', 'Сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'9D0972F11E1D1C4696E6DF27795B8D72', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'the_Table', 'Part Table Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'1030074F5485B54680BED5156D7B5ED0', x'9D1C418BA4ACD94E926E3A0683F7B12D', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'Name', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'0602EBA7393EE44B9BD5EC16763ECEAE', x'9E0D59BEB5FB8D4F8C39035F7872F52D', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'9FA4509E7C2B634EBCCC66B942D9A34D', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 4, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'A02DAE269F05574089BEF959616F1A64', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'E87EFB3431ACD242901DF7625B3BF9C8', x'A1AF5C3D97F6D84C9A84B3113BE3E64C', '2012-01-20 14:40:22', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'A4F4DFED3F4C3B4A9CD28BF497B24F9E', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 1, 'InstanceID', 'Object', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, -1, 0, NULL, NULL),
(x'7C909231CC8D0349848800B95285235B', x'A5E70A015929164EB75CAA707BA02D32', '2012-01-20 14:40:23', '2017-12-25 16:21:09', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'A5F9752DCA07E7459BC3A098409AB213', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'result', 'результат', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'189BA291EFAC4F4EAAD06E822C0EF813', x'A6310E7C8EC1FD459DFDBCB5A1F9FE7F', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'OK', 'Активна', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'0C77834331E693419C9F1B176AFFF6B2', x'A6B9DF3891A10B4487197C47D986BF3C', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ID', 'Идентификатор документа', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'A6FE7A6A6D32BA4E9732A6F2C84BC45E', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'AB918A29EDFF7A47A4875BAF2BF6B366', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'RowID', 'Row', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'AD4A2B895D016C41BB479D24AE85A4F7', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'SymmetricPartName', 'SymmetricPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'AF0978FD4334B14AB0A414816AB7FE17', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'the_resource', 'идентификатор стиля прав', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL);
COMMIT;
BEGIN;
INSERT INTO parameters VALUES
(x'914F746119B06C428DAEC716FFC3A359', x'B13F4B3C642B0249875207F5A85AC862', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'CURSESSION', 'Сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'B16C75601ABB7047BE7ED5DB547493B3', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'the_resource', 'идентификатор стиля прав', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'210A9E74BA5959498678F52843AA8058', x'B3EC599E57649F4C937197C4B67170BC', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'B40681342532354886232B80195181E0', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 3, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'B4940A01B4CFD64C939906C3396159D2', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'CURSESSION', 'Сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0092456FBB41414EB8952D4837E67242', x'B5450655D3B54B428AA6F705F3594E1D', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 3, 'USR', 'Имя пользователя', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'B70F181434700548B43DC541D5DE5272', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'SymmetricPartName', 'SymmetricPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'4E88894AB4593C4CBEAAAC21C0540E4C', x'BA07B4F155F6054F90E1F95FE72100E1', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ServerTime', 'Текущее время', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'BA2EA4D770262F46BB4671BA9FD625E1', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 4, 'OwnerPartName', 'Раздел- владелец', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'6002EE6D427C204B92AE4523FA7AB2F4', x'BBE007DFC9D47F40B08D59D4578CA260', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ReportType', 'Тип отчета', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, 0, 0, NULL, NULL),
(x'43CBAE567B75404D93C32CAB8DD5F223', x'BBF76985160EBA4F959876A9F5EDBDF4', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ServerTime', 'Текущее время', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'1BE3ABBEEE11EC46A4BE99A7765C4919', x'BDEA74DA1A74DC4CB69DE0A99C95F5EF', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 2, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'57B9CFFE6114554F9F3D17F3F88F6E97', x'BE7FDC2219BDF849AA617C2F90182153', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ID', 'Идентификатор документа', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'3A9F2A69298F374D9C8CAE25B8C3F3CA', x'BEB4E5433889944DA536A0C4803B288C', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ID', 'Идентификатор документа', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'C09B1D8602A5BF469C6AA1CB950F21F5', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 3, 'the_Table', 'Таблица', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'C154093CBD71344C968406BF3F3764C6', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 3, 'SymmetricFieldName', 'SymmetricFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'C2616E96291E534B9D3A41679E23B335', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 5, 'OwnerRowID', 'Строка - владелец', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'C91480E8C8050E4F8483BA8655D0A695', x'C674FFE5A59F3749BF4125AD199B4CA7', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 3, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'C7A2B97987DAF04C85538424B1E7CF7D', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'2A9D95C08E3F9D44A705ECA9582090D2', x'C7AD2E16AD5C6E49BD575935F88AF62E', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'ServerTime', 'Текущее время', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'E87EFB3431ACD242901DF7625B3BF9C8', x'C818203DAAE0304FA2E91DECE9EEE8D3', '2012-01-20 14:40:22', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'C8D21A3F142DC046AC05CDF2AD05B6B6', '2012-01-20 14:40:23', '2017-12-25 16:21:10', NULL, NULL, NULL, 1, 'RowQueryID', 'Идентификатор массива строк', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'73C4D7500DCA204AB80CAF9E590D3D3E', x'C9106E3A416DF149B7CBD430A70ECF5D', '2012-01-20 14:40:22', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'C9EF9698FF129249823DE20317923AEC', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'RowID', 'Row', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'CB74EC8BA23D7741A20C7B3BC1D6FC3B', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 3, 'verb', 'Действие', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'54315A579D6CA042B44B00E9651C4D94', x'CBBB4A6DEDED0244B098349D084D4B8E', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'CC5302EF7B75064A9C490D7AA8E873C1', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 4, 'access', 'Разрешение', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'0A0BA3815B58C04B9C4EBF85F6ED0D29', x'CFAB81680BAB0C48A15455DEDF6E515E', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'D0AA0AB59D7DC740989BA6392D703C4D', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'resource', 'идентификатор стиля прав', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'7C909231CC8D0349848800B95285235B', x'D1E00EDCE5299D4CAD922F3B88DA6C19', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'E87EFB3431ACD242901DF7625B3BF9C8', x'D24256904AF6E343BDDA66DE2FF1D0D2', '2012-01-20 14:40:22', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'the_Zone', 'Зона', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'D2DF837002FF944399F3C526F3F5DE28', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'SymmetricPartName', 'SymmetricPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'D53F8AB7A1FB694D8E954A788A135FE1', '2012-01-20 14:40:22', '2017-12-25 16:21:11', NULL, NULL, NULL, 4, 'ForwardFieldName', 'ForwardFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'A3A3E499B5642042953BA1207696EBF9', x'D7643BA82007A449B943FCAF9E587D85', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'CURSESSION', 'Текущая сессия', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'7C699918ED8755488C5AB2E46F969A01', x'DBB74A09AEA0F748ACE216A7D1DFDC2B', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'THE_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'D4FB62D7B36C5248A04C6DED40CF06E6', x'DE8FC7E908461C498B93C8CDCF57CEBF', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'CURSESSION', 'Идентификатор сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'E6DDB1D91E84D94FBFC058C7C79BE67B', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 3, 'verb', 'Действие', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'0A0BA3815B58C04B9C4EBF85F6ED0D29', x'EB69FF9CE1A3694ABB59B0CC69FABF94', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'THE_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'6E677CB3C067374C8C15FC0C2FF2D4C3', x'F056AFA1B2CCEE4EB61CAEAED6CDC755', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 3, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'0092456FBB41414EB8952D4837E67242', x'F3B48F5396A54A4FAF1F84262FBE7DCC', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'THE_SESSION', 'Идентификатор новой сессии', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'F4E163834CFC24489353ABA54ACF7AFB', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 3, 'the_Table', 'Таблица', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'9B3C33461AE5654F866E7A5331F55FA1', x'F814C72A3CBBE543935C3BFF4484517A', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 2, 'PWD', 'Пароль', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'C91480E8C8050E4F8483BA8655D0A695', x'F9037DA2B7D0EE49B51B1580A1E1BF20', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'NumeratorID', 'нумератор', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'FB0885D55B7F05478D6791FE50F5AC27', '2012-01-20 14:40:22', '2017-12-25 16:21:11', NULL, NULL, NULL, 4, 'num', 'номер', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'FBE437262482314492110023A88E8F18', '2012-01-20 14:40:23', '2017-12-25 16:21:11', NULL, NULL, NULL, 1, 'ObjTypeName', 'ObjTypeName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы parentpackage
--
-- Таблица survey.parentpackage не содержит данных

-- 
-- Вывод данных для таблицы part
--
BEGIN;
INSERT INTO part VALUES
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'003476C234BE3340B4B5756CD5252CEA', '2012-01-20 14:40:02', '2017-12-25 16:21:18', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 2, 1, 'Отчеты', 'ARMJRNLREP', 'Отчеты из журнала', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'050E1CC4F38C434B9D6EC5FCD37BEB47', '2012-01-20 14:40:02', '2017-12-25 16:21:18', NULL, NULL, NULL, x'00000000000000000000000000000000', 4, 1, 'Поведение журналов', 'ARMJournal', 'Описание действий журанлов', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'05C61246727ED0478A2852CC7BFF4C7F', '2012-01-20 14:40:16', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 5, 1, 'Пакет генерации', 'GENPACKAGE', 'Пакет генерации', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'882F32DE48CA014E8ACDBEC71338D8CC', x'0BC03D83D7E8914D91032DD084BEFC1E', '2012-01-20 14:40:13', '2017-12-25 16:21:19', NULL, NULL, NULL, x'32245159DFE6F941A4366BF7DB1800BB', 1, 1, 'Номера', 'Num_Values', 'уникальные номера', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DD6ECA18A1559045974FA973B8762638', x'0C74B3F476E66E4BA833EDE44CB9FA63', '2012-01-20 14:40:13', '2017-12-25 16:21:19', NULL, NULL, NULL, x'23D9C69807B88C4191E7C351511B5EB1', 1, 1, 'Поле фильтра', 'FileterField', 'Поле фильтра', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'402C9F451A03A1499606F8BD1A392D97', x'0EE6621A36D0304D98DB9034533FD00C', '2017-12-25 17:14:27', '2017-12-25 17:14:27', NULL, NULL, NULL, NULL, 1, 0, 'Описание', 'svp_info', 'Описание типа вопроса', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'E3EDC1A12C8DC649910F9029EBABEC71', x'0F332D7BA738CD4EA00A85955E94C12D', '2017-12-25 17:01:36', '2017-12-25 17:01:36', NULL, NULL, NULL, NULL, 1, 1, 'Группа тестов', 'svd_testgroup', 'Группа тестов', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'1A0E0B5D3680124BB08160139558B594', '2012-01-20 14:40:15', '2017-12-25 16:21:19', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 6, 1, 'Интерфейсы расширения', 'FldExtenders', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'236DF435F8613B41924F83792F76E698', '2012-01-20 14:40:15', '2017-12-25 16:21:19', NULL, NULL, NULL, x'A5EF70062751D5118822204C4F4F5020', 2, 1, 'Зачения', 'ENUMITEM', 'Для описания Enum типов', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DD6ECA18A1559045974FA973B8762638', x'23D9C69807B88C4191E7C351511B5EB1', '2012-01-20 14:40:13', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Группа полей фильтра', 'FilterFieldGroup', 'Группа полей фильтра', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DD6ECA18A1559045974FA973B8762638', x'24D75AB76F6BBD45B0BBC75D17309DC9', '2012-01-20 14:40:13', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, 'Фильтр', 'Filters', 'Фильтр', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'2A49E8F524222F4585FFA14882C6554F', '2012-01-20 14:39:59', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 2, 'Секции', 'RPTStruct', 'Секции', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'2CDE4EEF8B45AB4EAFE366AA500081DA', '2012-01-20 14:40:02', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 2, 'Меню', 'EntryPoints', 'Меню', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'498781EAE9DAC441825FCAA922F309A2', x'2D4D523F3B8A874997EA4B0FB621C1DA', '2017-12-25 17:28:24', '2017-12-25 17:28:24', NULL, NULL, NULL, NULL, 1, 0, 'Описание вопроса', 'svq_info', 'Описание вопроса', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'2E1322E4F4070F4C8246B0F16CD9186A', '2012-01-20 14:39:59', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, 'Формулы', 'RPTFormula', 'Формулы', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'2E9E8E54F6892248A312101CA4A9FE74', '2012-01-20 14:40:15', '2017-12-25 16:21:19', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 2, 1, 'Методы раздела', 'PARTMENU', 'Методы уровня раздела', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'317BD7F857A78C48BB5822700737D4B8', '2012-01-20 14:40:03', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, 'Колонки журнала', 'JournalColumn', 'Колонки журнала', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'882F32DE48CA014E8ACDBEC71338D8CC', x'32245159DFE6F941A4366BF7DB1800BB', '2012-01-20 14:40:13', '2017-12-25 16:21:19', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Зоны', 'Num_zones', 'Зоны уникальных нумеров', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'33AC48F4133B994893EE47D3D62962EC', '2012-01-20 14:40:16', '2017-12-25 16:21:19', NULL, NULL, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', 1, 1, 'Органичения разделов', 'STRUCTRESTRICTION', 'Ораничения на доступ к разделу документа', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'402C9F451A03A1499606F8BD1A392D97', x'3BD09DDC0811AB46BA41199E4AA97A4C', '2017-12-25 17:15:29', '2017-12-25 17:15:29', NULL, NULL, NULL, NULL, 2, 1, 'Параметры вопроса', 'svp_params', 'Список параметров для конкретного типа вопроса', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'8D3FAB25808E6948BF5D35875ABED7E3', x'43C096558C1CA5429A65863272429EC4', '2017-12-25 17:41:31', '2017-12-25 17:41:31', NULL, NULL, NULL, NULL, 1, 0, 'Описание', 'sva_info', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'CA26E2638FB3FA40A1C70E7134DCDB63', x'4438A0124E1E354C88F3BD7148EECF81', '2017-12-25 17:01:25', '2017-12-25 17:01:25', NULL, NULL, NULL, NULL, 1, 0, 'Описание', 'svv_info', 'Описание варианта теста', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'C8B7C2961C380544AECB76AA0C268EDA', x'47CAC986A370044BA314A12DC725B70B', '2017-12-25 17:33:01', '2017-12-25 17:33:01', NULL, NULL, NULL, NULL, 2, 1, 'Вопросы модуля', 'svm_qlist', 'Список вопросов модуля', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'8FB8F3BE916E2941BAD51BA076BDE3BD', x'4A14627F7685BC48ACBA1F9DC4874459', '2012-01-20 14:40:02', '2017-12-25 16:21:20', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, 'Описание', 'MTZExt_def', 'Список зарегистрированных расширений', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'4CE798E5DEA9414086FA972E95635600', '2012-01-20 14:40:15', '2017-12-25 16:21:20', NULL, NULL, NULL, x'A3EF70062751D5118822204C4F4F5020', 1, 1, 'Параметры', 'PARAMETERS', 'Параметры метода', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'4D24C3DAD670A445885DD610F748EBFC', '2012-01-20 14:40:03', '2017-12-25 16:21:20', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Источники журнала', 'JournalSrc', 'Источники журнала', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'4DB613D7E84C6D46BE2B448874DC0469', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 5, 1, 'Представление', 'PARTVIEW', 'Вариант представления, который может использоваться для создания журнала', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'7E5B4FC4C09F1443B24407235EE1E7E3', x'52932CFE9AE20B4291343E3BDD832A6E', '2012-01-20 14:39:58', '2017-12-25 16:21:20', NULL, NULL, NULL, x'EE6A0EA4417B6D47923CACA251C08E87', 1, 1, 'Состав группы', 'GroupUser', 'Состав группы', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5536327DD7BA124DAFC2E7FF3613B4A1', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 4, 1, 'Логика на форме', 'VALIDATOR', 'Действия в впроцессе редактирования', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'7E5B4FC4C09F1443B24407235EE1E7E3', x'55B88B1465099E4EA3D648DCC8CE528B', '2012-01-20 14:39:58', '2017-12-25 16:21:20', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, 'Пользователи', 'Users', 'Пользователи', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5607A06E80B9234DB209202389953A13', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'C2E0DB8C89591042BDFB33C2C45F2509', 1, 1, 'Обязательные приложения', 'ParentPackage', 'Приложения от которых зависит данное приложение', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'8D3FAB25808E6948BF5D35875ABED7E3', x'585457BE9A11AE4C94A27AB69877C201', '2017-12-25 17:41:07', '2017-12-25 17:41:07', NULL, NULL, NULL, NULL, 2, 1, 'Ответы', 'sva_data', 'Строки ответов', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5A437DA5B3730741B22BC18782085C84', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'00000000000000000000000000000000', 6, 1, 'Локализация', 'LocalizeInfo', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5E3DF43BB50EDB4D8EFA62DF3261A272', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', 1, 1, 'Колонка', 'ViewColumn', 'Колонка пердставления', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'66C846DFF838F14E92E25F899D98BD16', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 5, 1, 'Состояния', 'OBJSTATUS', 'Возможные логические состояния документа', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'6D2968111CA0DB45B67D76A07F3FF64C', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 4, 1, 'Режим работы', 'OBJECTMODE', 'Режим работы', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'6E6CC434159246478D9D4800B6549003', '2012-01-20 14:40:03', '2017-12-25 16:21:20', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, 'Журнал', 'Journal', 'Журнал', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'70307B0F09F77D4E868CCC337E3075D1', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', 3, 1, 'Ограничения методов', 'METHODRESTRICTION', 'Ограничение на использование методов раздела', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'79A1C111B229DC4DBDB71EB21D2FF878', '2012-01-20 14:40:16', '2017-12-25 16:21:20', NULL, NULL, NULL, x'66C846DFF838F14E92E25F899D98BD16', 1, 1, 'Разрешенные переходы', 'NEXTSTATE', 'Матрица переходов ', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'7A7476873D74B947AF1CAB00FF81154F', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 2, 1, 'Методы типа', 'TYPEMENU', 'Методы уровня типа', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'8131E84FA500594B9413D06318A119D4', '2012-01-20 14:40:02', '2017-12-25 16:21:21', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 3, 1, 'Действия', 'ARMJRNLRUN', 'Дополнительные действия в журнале', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'81AFF1D32C914849A87DDF549EE796E2', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 5, 0, 'Описание источника данных', 'FIELDSRCDEF', 'Описание источника данных для полей типа ReferenceSQL ', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'8261E22384CCD642B7A2D8DA0026EBEE', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 2, 1, 'Динамический фильтр', 'DINAMICFILTERSCRIPT', 'Выражение для построения дополнительного фильтра для ссылочных полей', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'895CAA9CCBF1624BB1D0FF2D29A40057', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 3, 1, 'Ограничение уникальности', 'UNIQUECONSTRAINT', 'Ограничение уникальности', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'0C3F032BB9DF064FA4F8B3A3275AEFEB', x'89EC2176573B4C44A0B3DF2CE8723111', '2017-12-25 17:11:34', '2017-12-25 17:11:34', NULL, NULL, NULL, NULL, 1, 0, 'Информация', 'svo_info', 'Информация об организации', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 6, 1, 'Интерфейсы расширения', 'ExtenderInterface', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'9B803E67F6CF0943A52BFE2118AE508E', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'B9EF70062751D5118822204C4F4F5020', 1, 1, 'Библиотеки', 'GENREFERENCE', 'Библиотеки, которые используются при генерации', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'9C11C524C95DAC4ABB01B8CF8EBA998E', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', 2, 1, 'Ограничения полей', 'FIELDRESTRICTION', 'Ограничения на доступ к полям раздела', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'9F3507D4042269499789956215E456E6', '2012-01-20 14:40:02', '2017-12-25 16:21:21', NULL, NULL, NULL, x'2CDE4EEF8B45AB4EAFE366AA500081DA', 1, 1, 'Привязка фильтра', 'EPFilterLink', 'Привязка фильтра к журналу', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'37C0E0E9467C274D009D085EA9279CD2', x'A23E94783679584FB31676E4F968E3B4', '2012-01-20 14:39:58', '2017-12-25 16:21:21', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, 'Сессия пользователя', 'the_Session', 'Зарегистрированные сессии пользователей', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', '2012-01-20 14:40:16', '2017-12-25 16:21:21', NULL, NULL, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', 2, 1, 'Связанные представления', 'PARTVIEW_LNK', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A3EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:21', NULL, NULL, NULL, x'ADEF70062751D5118822204C4F4F5020', 1, 1, 'Реализация', 'SCRIPT', 'Код метода на понятном конкретному генератору языке', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A4EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 1, 1, 'Поле', 'FIELD', 'Поле', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A5EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, 'Тип поля', 'FIELDTYPE', 'Типы полей, перечисления, интервалы', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A6EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'A5EF70062751D5118822204C4F4F5020', 1, 1, 'Отображение', 'FIELDTYPEMAP', 'Отображение типа поля на физический тип хранения', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'E3EDC1A12C8DC649910F9029EBABEC71', x'AB287FCA5332D04782A1869147F27E4D', '2017-12-25 17:16:48', '2017-12-25 17:16:48', NULL, NULL, NULL, NULL, 3, 1, 'Тип параметра', 'svd_ptype', 'Тип параметра вопроса', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'AD5B514233E2DB408F9045DCFCE01BE6', '2012-01-20 14:40:16', '2017-12-25 16:21:22', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 3, 1, 'Проверка правильности', 'INSTANCEVALIDATOR', 'Проверка правильности для объекта в целом', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'ADEF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'00000000000000000000000000000000', 4, 1, 'Методы и процедуры', 'SHAREDMETHOD', 'Методы и процедуры', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'AFEF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Тип объекта', 'OBJECTTYPE', 'Тип объекта (карточки)', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'B10601C795AA73418097614495D6EF28', '2012-01-20 14:40:16', '2017-12-25 16:21:22', NULL, NULL, NULL, x'895CAA9CCBF1624BB1D0FF2D29A40057', 1, 1, 'Поля ограничения', 'CONSTRAINTFIELD', 'Поля ограничения', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'B1EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 1, 2, 'Раздел', 'PART', 'Раздел объекта', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'B9EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:16', '2017-12-25 16:21:22', NULL, NULL, NULL, x'05C61246727ED0478A2852CC7BFF4C7F', 1, 1, 'Генераторы', 'GENERATOR_TARGET', 'Генераторы', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'23AF28C455F9544FB7CBE555A419F5C9', x'BB5AE3BF51194E4CAD052DF3B8CD92AE', '2017-12-25 16:57:25', '2017-12-25 16:57:25', NULL, NULL, NULL, NULL, 1, 0, 'Описание теста', 'svt_info', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'C8B7C2961C380544AECB76AA0C268EDA', x'BB5D44A540C20A43A17D39A9ECC08422', '2017-12-25 17:32:12', '2017-12-25 17:32:12', NULL, NULL, NULL, NULL, 1, 0, 'Описание модуля', 'svm_info', 'Описание модуля тестирования', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'C2E0DB8C89591042BDFB33C2C45F2509', '2012-01-20 14:40:16', '2017-12-25 16:21:22', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, 'Приложение', 'MTZAPP', 'Группа взаимосвязных документов', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'C421399726499D4CA7816062CF81B5AD', '2012-01-20 14:40:02', '2017-12-25 16:21:22', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, 'Арм', 'WorkPlace', 'Арм', -1, 0, x'09C838C6B647EA4782176BBBD95A9215', x'09C838C6B647EA4782176BBBD95A9215', NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'CA6FBEF85D59464FACDBFB5838A246CA', '2012-01-20 14:40:15', '2017-12-25 16:21:22', NULL, NULL, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', 1, 1, 'Отображение параметров', 'PARTPARAMMAP', 'отображение значений полей раздела на параметры метода', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'CA936976E67DDA4A82168BDDF2B0588E', '2012-01-20 14:40:16', '2017-12-25 16:21:22', NULL, NULL, NULL, x'B9EF70062751D5118822204C4F4F5020', 3, 1, 'Ручной код', 'GENMANUALCODE', 'Код, который не укладывается в описание модели', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'498781EAE9DAC441825FCAA922F309A2', x'CBCD0D6CECB7B245BD6FA25065FD66A1', '2017-12-25 17:50:57', '2017-12-25 17:50:57', NULL, NULL, NULL, NULL, 2, 1, 'Параметры вопроса', 'svq_params', 'Значения параметров вопроса', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'CE37F730811C7246B0F96E5BF4B15971', '2012-01-20 14:40:02', '2017-12-25 16:21:22', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, 'Список типов', 'ARMTypes', 'Типы документов, которые подключаются в MDI режиме', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'D08EB034B5C49C4BBA59870A4599F52A', '2012-01-20 14:40:16', '2017-12-25 16:21:23', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 4, 1, 'Значение по умолчанию', 'FIELDEXPRESSION', 'Выражение для вычисления поля\r\nили значение по умолчанию', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'D5BE0BB4C5840B4B8679172AA1ACDAD9', '2012-01-20 14:40:15', '2017-12-25 16:21:23', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 3, 1, 'Логика поля на форме', 'FIELDVALIDATOR', 'Логика взаимосвязей на форме при изменении поля', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'882F32DE48CA014E8ACDBEC71338D8CC', x'D9BE36C44E29A7488C376D4CF32343BE', '2012-01-20 14:40:13', '2017-12-25 16:21:23', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, 'Описание', 'Num_head', 'Описание нумератора', -1, 0, x'D95DDA3AF051D745BC52A10614A3FBA4', x'D95DDA3AF051D745BC52A10614A3FBA4', NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'8FB8F3BE916E2941BAD51BA076BDE3BD', x'DDE68FE4F979424DBAC3CB39F69171BC', '2012-01-20 14:40:02', '2017-12-25 16:21:23', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Реализации расширения', 'MTZExtRel', 'Реализации расширения для разных разработческих плаформ', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'DED0770C9E55FC43B181156E126543F1', '2012-01-20 14:39:59', '2017-12-25 16:21:23', NULL, NULL, NULL, x'2A49E8F524222F4585FFA14882C6554F', 1, 1, 'Поля секции', 'RPTFields', 'Поля секции', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'37C0E0E9467C274D009D085EA9279CD2', x'DF24D235302854419E80FF578AAB323C', '2013-07-02 17:26:08', '2017-12-25 16:21:23', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Разрешенные владельцы', 'SysRefCache', 'владельцы информации для к объектам которых\r\nразрешен достуа для  текущей сесии', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'644A47FAE4C43F4F8236B8E8F19B66AA', x'E09493DABDE1854BAA454C6C92793865', '2017-12-25 17:42:29', '2017-12-25 17:42:29', NULL, NULL, NULL, NULL, 1, 0, 'Идентификация', 'svh_info', 'Идентификация тестируемого человека', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'E4C38941C2713D42A56F4E71CB91B52D', '2012-01-20 14:40:15', '2017-12-25 16:21:23', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 1, 1, 'Методы поля', 'FIELDMENU', 'Методы, ассоциированные с полем', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'E82A7554B006C64E8DAA692E52A0D36C', '2012-01-20 14:40:15', '2017-12-25 16:21:23', NULL, NULL, NULL, x'E4C38941C2713D42A56F4E71CB91B52D', 1, 1, 'Отображение параметров', 'FIELDPARAMMAP', 'Отображение значений на параметры метода', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'37C0E0E9467C274D009D085EA9279CD2', x'E8DAEA453798E54E9A3107370302F20F', '2012-01-20 14:39:58', '2017-12-25 16:21:23', NULL, NULL, NULL, x'00000000000000000000000000000000', 4, 1, 'Журнал событий', 'SysLog', 'Журнал событий, которые произошли в системе', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'EB858C8D5ED1D745B13B0B4001EB9AC2', '2012-01-20 14:40:03', '2017-12-25 16:21:23', NULL, NULL, NULL, x'317BD7F857A78C48BB5822700737D4B8', 1, 1, 'Состав колонки', 'JColumnSource', 'Состав колонки', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'E3EDC1A12C8DC649910F9029EBABEC71', x'ED314B8655AFFE4EB13CA7B508D53BA7', '2017-12-25 17:05:48', '2017-12-25 17:05:48', NULL, NULL, NULL, NULL, 2, 1, 'Тип вопроса', 'svd_qtype', 'Тип вопроса', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'EDAB37F8E9CA0A439DEE519DBB1B79D5', '2012-01-20 14:40:02', '2017-12-25 16:21:23', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 1, 1, 'Добавление', 'ARMJRNLADD', 'Варианты обработки добавления', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'7E5B4FC4C09F1443B24407235EE1E7E3', x'EE6A0EA4417B6D47923CACA251C08E87', '2012-01-20 14:39:58', '2017-12-25 16:21:23', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, 'Группы', 'Groups', 'Группы', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'FA3D9B25ACB8784188FD4B715D372FC3', '2012-01-20 14:39:59', '2017-12-25 16:21:23', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, 'Описание', 'Reports', 'Описание', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'FB1CB30425654A479F16999870D8EAAF', '2012-01-20 14:40:16', '2017-12-25 16:21:23', NULL, NULL, NULL, x'B9EF70062751D5118822204C4F4F5020', 2, 1, 'Контрольные элементы', 'GENCONTROLS', 'Контрольные элементы, которые используются при генерации', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы partmenu
--
BEGIN;
INSERT INTO partmenu VALUES
(x'C421399726499D4CA7816062CF81B5AD', x'09C838C6B647EA4782176BBBD95A9215', '2012-01-20 14:40:02', '2017-12-25 16:21:23', NULL, NULL, NULL, 'UpdateItemName', NULL, NULL, x'1A9DB54F2301D3479F4FE12085C5D074', 0, 0, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'D95DDA3AF051D745BC52A10614A3FBA4', '2012-01-20 14:40:13', '2017-12-25 16:21:23', NULL, NULL, NULL, 'STDNumerator_SetName', NULL, NULL, x'1A9DB54F2301D3479F4FE12085C5D074', 0, 0, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'F4ACF611A5B0A744ADC53A46BBB7FBA7', '2012-01-20 14:40:13', '2017-12-25 16:21:23', NULL, NULL, NULL, 'UpdateItemName', NULL, NULL, x'1A9DB54F2301D3479F4FE12085C5D074', 0, 0, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы partparammap
--
BEGIN;
INSERT INTO partparammap VALUES
(x'09C838C6B647EA4782176BBBD95A9215', x'332488684FE969479A26E4A84D6B8FB6', '2012-01-20 14:40:02', '2017-12-25 16:21:24', NULL, NULL, NULL, '.Name', 'Name', -1),
(x'D95DDA3AF051D745BC52A10614A3FBA4', x'5DF9EB83912F8F48902CB803F3B13E80', '2012-01-20 14:40:13', '2017-12-25 16:21:24', NULL, NULL, NULL, '.brief', 'Name', 0),
(x'F4ACF611A5B0A744ADC53A46BBB7FBA7', x'816FDAEC9EA0CE449689633756F0B6A5', '2012-01-20 14:40:13', '2017-12-25 16:21:24', NULL, NULL, NULL, '.Name', 'Name', -1);
COMMIT;

-- 
-- Вывод данных для таблицы partview
--
BEGIN;
INSERT INTO partview VALUES
(x'32245159DFE6F941A4366BF7DB1800BB', x'0106C9DB089FA74FB75D6772FB3936B6', '2017-12-25 16:40:31', '2017-12-25 16:40:31', NULL, NULL, NULL, 'Зоны авто(Зоны)', 'autonum_zones', -1, NULL, NULL, NULL, NULL),
(x'5536327DD7BA124DAFC2E7FF3613B4A1', x'05E3F2B77691184BB9BE8D37011EA0B1', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 'Логика на форме авто(Логика на форме)', 'autovalidator', -1, NULL, NULL, NULL, NULL),
(x'ED314B8655AFFE4EB13CA7B508D53BA7', x'0A3ABAD092B1E248A3EAEE7580884E24', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 'Тип вопроса авто(Тип вопроса)', 'autosvd_qtype', -1, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'0BB050C63D606043B040966AFE17D52D', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 'Привязка фильтра авто(Привязка фильтра)', 'autoepfilterlink', -1, NULL, NULL, NULL, NULL),
(x'8261E22384CCD642B7A2D8DA0026EBEE', x'0E7BEC7F0412B04B9221349D150A61CB', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 'Динамический фильтр авто(Динамический фильтр)', 'autodinamicfilterscript', -1, NULL, NULL, NULL, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'1004F737DE558140B7CFBFEEF67AC5BB', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 'Группы авто(Группы)', 'autogroups', -1, NULL, NULL, NULL, NULL),
(x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'17A3BE0E13E82D48968904E99CBEABAB', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 'Логика поля на форме авто(Логика поля на форме)', 'autofieldvalidator', -1, NULL, NULL, NULL, NULL),
(x'2A49E8F524222F4585FFA14882C6554F', x'1AAEE7B25962AB44B102FA3BCA496706', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 'Секции авто(Секции)', 'autorptstruct', 0, NULL, NULL, NULL, NULL),
(x'47CAC986A370044BA314A12DC725B70B', x'1B8C7A8E0BF46647A63AB0F73CBF8492', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 'Вопросы модуля авто(Вопросы модуля)', 'autosvm_qlist', -1, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'230ACEC3C9FF7D46AB6159A96FDE728B', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 'Ограничение уникальности авто(Ограничение уникальности)', 'autouniqueconstraint', -1, NULL, NULL, NULL, NULL),
(x'050E1CC4F38C434B9D6EC5FCD37BEB47', x'27B621FD6C3A304E8F8D4C384114731D', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 'Поведение журналов авто(Поведение журналов)', 'autoarmjournal', -1, NULL, NULL, NULL, NULL),
(x'B10601C795AA73418097614495D6EF28', x'2F7F9C623258EA47A3AA6B1B42CA2CF6', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 'Поля ограничения авто(Поля ограничения)', 'autoconstraintfield', -1, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'31022036E1779A4EA3E4331D28F2D77B', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 'Раздел авто(Раздел)', 'autopart', 0, NULL, NULL, NULL, NULL),
(x'5607A06E80B9234DB209202389953A13', x'364C82134C114F4CBC2EB7A570726371', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 'Обязательные приложения авто(Обязательные приложения)', 'autoparentpackage', -1, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'36D585732AC95D49B657105E7AAAC324', '2017-12-25 16:40:48', '2017-12-25 16:40:48', NULL, NULL, NULL, 'Пользователи авто(Пользователи)', 'autousers', -1, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'37931936C900E240819E34C8CBB78F01', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 'Ограничения методов авто(Ограничения методов)', 'automethodrestriction', -1, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'3AAEA9D16479704391BC79C3CC18A966', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 'Описание источника данных авто(Описание источника данных)', 'autofieldsrcdef', -1, NULL, NULL, NULL, NULL),
(x'AD5B514233E2DB408F9045DCFCE01BE6', x'3FC826B692BCE24D8F5BF3817FFB0E22', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 'Проверка правильности авто(Проверка правильности)', 'autoinstancevalidator', -1, NULL, NULL, NULL, NULL),
(x'D08EB034B5C49C4BBA59870A4599F52A', x'3FE943E2C34EC74D804AC4A0F448C2CA', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 'Значение по умолчанию авто(Значение по умолчанию)', 'autofieldexpression', -1, NULL, NULL, NULL, NULL),
(x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'411766E4CAE4B042854D9FA89E200F9B', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 'Описание теста авто(Описание теста)', 'autosvt_info', -1, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'4136FD339F98154CAE032FAA5208EAE2', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 'Разрешенные владельцы авто(Разрешенные владельцы)', 'autosysrefcache', -1, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'41B8EFCE276DE74DBB986A42FB7B67E0', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 'Режим работы авто(Режим работы)', 'autoobjectmode', -1, NULL, NULL, NULL, NULL),
(x'CBCD0D6CECB7B245BD6FA25065FD66A1', x'431A6C20E0CE684193C33B7C2D36B4C7', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 'Параметры вопроса авто(Параметры вопроса)', 'autosvq_params', -1, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'43E053D2087F73459E4F18BC8C16F123', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 'Контрольные элементы авто(Контрольные элементы)', 'autogencontrols', -1, NULL, NULL, NULL, NULL),
(x'4438A0124E1E354C88F3BD7148EECF81', x'49F5A143369DDB4BA69EF8DDE20E5D39', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 'Описание авто(Описание)', 'autosvv_info', -1, NULL, NULL, NULL, NULL),
(x'89EC2176573B4C44A0B3DF2CE8723111', x'4B482C5676F3E34884FA028C6383D287', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 'Информация авто(Информация)', 'autosvo_info', -1, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'4DC116E2492D724CA1CD05369D288270', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 'Меню авто(Меню)', 'autoentrypoints', 0, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'52F28B84DDC8564197A34350BB7EF873', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 'Источники журнала авто(Источники журнала)', 'autojournalsrc', -1, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'53A117D2E128674BA602392CE765D3D6', '2017-12-25 16:40:59', '2017-12-25 16:40:59', NULL, NULL, NULL, 'Поле фильтра авто(Поле фильтра)', 'autofileterfield', -1, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'5664BABDC36D0F4BB86081CD205A887F', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 'Методы поля авто(Методы поля)', 'autofieldmenu', -1, NULL, NULL, NULL, NULL),
(x'0EE6621A36D0304D98DB9034533FD00C', x'5CE3638E13F2A9499993EEC628EEA37F', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 'Описание авто(Описание)', 'autosvp_info', -1, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'5DE4A47587357245A80E318CEBEA3AC6', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 'Отображение параметров авто(Отображение параметров)', 'autopartparammap', -1, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'5DE7359D37AE654CBCD98E38FB878ADB', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 'Интерфейсы расширения авто(Интерфейсы расширения)', 'autoextenderinterface', -1, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'61C42A7BF6C5F540B54914CB87C7263A', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 'Ограничения полей авто(Ограничения полей)', 'autofieldrestriction', -1, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'61D2FE9CAB7F7E43AF34EDAC9D53AC1E', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 'Фильтр авто(Фильтр)', 'autofilters', -1, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'62472937D190C846AEB4B0E61206BC7E', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 'Органичения разделов авто(Органичения разделов)', 'autostructrestriction', -1, NULL, NULL, NULL, NULL),
(x'8131E84FA500594B9413D06318A119D4', x'65685FEDDE1E0A41990BD9E3508DAA59', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 'Действия авто(Действия)', 'autoarmjrnlrun', -1, NULL, NULL, NULL, NULL),
(x'52932CFE9AE20B4291343E3BDD832A6E', x'6900BA17F03CFA4ABBE35AE88C6CF359', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 'Состав группы авто(Состав группы)', 'autogroupuser', -1, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'6950ED62E8662945A85577FB9BAEA29C', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 'Формулы авто(Формулы)', 'autorptformula', -1, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'6A7F7CFB90566B46A5F3700C31960873', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 'Сессия пользователя авто(Сессия пользователя)', 'autothe_session', -1, NULL, NULL, NULL, NULL),
(x'43C096558C1CA5429A65863272429EC4', x'74AE8E3EA988E643B4E4F429AB439A70', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 'Описание авто(Описание)', 'autosva_info', -1, NULL, NULL, NULL, NULL),
(x'05C61246727ED0478A2852CC7BFF4C7F', x'76CF696E8C5D7840B948E19AF4C5F8B1', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 'Пакет генерации авто(Пакет генерации)', 'autogenpackage', -1, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'77E33C6066F6E1408A00C09B34E74DBE', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 'Генераторы авто(Генераторы)', 'autogenerator_target', -1, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'7898CBC77CACB249B82F376D1B002D92', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 'Поля секции авто(Поля секции)', 'autorptfields', -1, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'7AF9C265DA4C254DA1B24EAFAD1C5DA8', '2017-12-25 16:40:59', '2017-12-25 16:40:59', NULL, NULL, NULL, 'Группа полей фильтра авто(Группа полей фильтра)', 'autofilterfieldgroup', -1, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'7D8CBA99F3D3794E89AD9ED4F7EBCA0F', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 'Описание авто(Описание)', 'automtzext_def', -1, NULL, NULL, NULL, NULL),
(x'BB5D44A540C20A43A17D39A9ECC08422', x'7D930B78CF482A4992AF72B0A27C8B63', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 'Описание модуля авто(Описание модуля)', 'autosvm_info', -1, NULL, NULL, NULL, NULL),
(x'E09493DABDE1854BAA454C6C92793865', x'7D975840913F1244A6AE2BA7CFFE31B5', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 'Идентификация авто(Идентификация)', 'autosvh_info', -1, NULL, NULL, NULL, NULL),
(x'2D4D523F3B8A874997EA4B0FB621C1DA', x'7EBC61BB2401C1478A448D0B7C5C3D7C', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 'Описание вопроса авто(Описание вопроса)', 'autosvq_info', -1, NULL, NULL, NULL, NULL),
(x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'82475455375F3B499ED817FC450FC11D', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 'Добавление авто(Добавление)', 'autoarmjrnladd', -1, NULL, NULL, NULL, NULL),
(x'AB287FCA5332D04782A1869147F27E4D', x'873A241131D8C04696C25CCA59FD008A', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 'Тип параметра авто(Тип параметра)', 'autosvd_ptype', -1, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'8D888D9BB903AB45BE1D34F7C781AEC5', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 'Тип объекта авто(Тип объекта)', 'autoobjecttype', -1, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'95389B524FEB1B4AB58E03E54DE2792D', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 'Библиотеки авто(Библиотеки)', 'autogenreference', -1, NULL, NULL, NULL, NULL),
(x'3BD09DDC0811AB46BA41199E4AA97A4C', x'95F038D23E19214184A7FEB206A76048', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 'Параметры вопроса авто(Параметры вопроса)', 'autosvp_params', -1, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'97E9606728F78240A81E6F8A76366F72', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 'Реализации расширения авто(Реализации расширения)', 'automtzextrel', -1, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'9996B4B982280F4E9DDB397EE113D8BF', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 'Зачения авто(Зачения)', 'autoenumitem', -1, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'9C18067A20CE7A478A1E8FB2EA3B88BF', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 'Арм авто(Арм)', 'autoworkplace', -1, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'9C22E9FE56C11F419A69165462FFC923', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 'Номера авто(Номера)', 'autonum_values', -1, NULL, NULL, NULL, NULL),
(x'585457BE9A11AE4C94A27AB69877C201', x'A177A30CED146C40B1739BA930414F83', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 'Ответы авто(Ответы)', 'autosva_data', -1, NULL, NULL, NULL, NULL),
(x'0F332D7BA738CD4EA00A85955E94C12D', x'A21ECC7060A091499190AB6C8927E190', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 'Группа тестов авто(Группа тестов)', 'autosvd_testgroup', -1, NULL, NULL, NULL, NULL),
(x'A3EF70062751D5118822204C4F4F5020', x'AD4FC85C7BD93749A223B8A59724D34A', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 'Реализация авто(Реализация)', 'autoscript', -1, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'B494E86B21F7F649A7A9FBBF7E4E21F9', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 'Методы типа авто(Методы типа)', 'autotypemenu', -1, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'B51BA1564F631D4489F11172B817E335', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 'Представление авто(Представление)', 'autopartview', -1, NULL, NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'BCD3A0398C04034F9EB658D3A54A47C9', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 'Методы и процедуры авто(Методы и процедуры)', 'autosharedmethod', -1, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'C694DFB0F089C54FB902510A08FC703F', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 'Интерфейсы расширения авто(Интерфейсы расширения)', 'autofldextenders', -1, NULL, NULL, NULL, NULL),
(x'003476C234BE3340B4B5756CD5252CEA', x'C6A688C5DBB3364B9DDDCFEFA93670B5', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 'Отчеты авто(Отчеты)', 'autoarmjrnlrep', -1, NULL, NULL, NULL, NULL),
(x'79A1C111B229DC4DBDB71EB21D2FF878', x'C7E40F4ADD38A1449F56705666A3AD75', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 'Разрешенные переходы авто(Разрешенные переходы)', 'autonextstate', -1, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'CC612AFABE864148B5A25D0C6A272E96', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 'Колонки журнала авто(Колонки журнала)', 'autojournalcolumn', -1, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'CD1F5FD6E89BF24DA31825C9959A51DD', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 'Поле авто(Поле)', 'autofield', -1, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'CE88C00D5447314F8A6307ACB0BA6DE2', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 'Методы раздела авто(Методы раздела)', 'autopartmenu', -1, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'D06B5F3A8859AF4C8F890D4A773A51A0', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 'Описание авто(Описание)', 'autoreports', -1, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'D15576EFF01F6140BD9E0AD3004C538D', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 'Состояния авто(Состояния)', 'autoobjstatus', -1, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'D32DEC41B6E0A840A90FB050C9D50689', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 'Колонка авто(Колонка)', 'autoviewcolumn', -1, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'DEFA4458675ACC4F86FD6F66D93026C2', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 'Тип поля авто(Тип поля)', 'autofieldtype', -1, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'DF76A4AA0533FD4582EF07182F24F489', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 'Приложение авто(Приложение)', 'automtzapp', -1, NULL, NULL, NULL, NULL),
(x'CE37F730811C7246B0F96E5BF4B15971', x'E84B652091A1F04EB8FAED49DA17D25C', '2017-12-25 16:40:53', '2017-12-25 16:40:53', NULL, NULL, NULL, 'Список типов авто(Список типов)', 'autoarmtypes', -1, NULL, NULL, NULL, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'F006A12EC9FEEC4B969CE6B3130B5C37', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 'Состав колонки авто(Состав колонки)', 'autojcolumnsource', -1, NULL, NULL, NULL, NULL),
(x'5A437DA5B3730741B22BC18782085C84', x'F2EB4EB40F9514459EF3EECEF24D52EC', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 'Локализация авто(Локализация)', 'autolocalizeinfo', -1, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'F33DE6333F50374B95A2C3A4AA3FB564', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 'Параметры авто(Параметры)', 'autoparameters', -1, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'F4CB7C14D69863458559874945E07963', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 'Ручной код авто(Ручной код)', 'autogenmanualcode', -1, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'F8FB99894B4AFF48B2CA58C2FE320E80', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 'Отображение авто(Отображение)', 'autofieldtypemap', -1, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'F93BEAAF2ED6C44281861300DC106249', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 'Связанные представления авто(Связанные представления)', 'autopartview_lnk', -1, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'FB99B0F83B4DE14FB6CBBC453D61F13D', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 'Журнал авто(Журнал)', 'autojournal', -1, NULL, NULL, NULL, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'FD7683D9D63D2F47AED5D48900D981F5', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 'Описание авто(Описание)', 'autonum_head', -1, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'FF264BCE62927B4C9CFACD7BBFEDE8FF', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 'Журнал событий авто(Журнал событий)', 'autosyslog', -1, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'FF7012D1DBE9BF4A9F0978EBC7976BA4', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 'Отображение параметров авто(Отображение параметров)', 'autofieldparammap', -1, NULL, NULL, NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы partview_lnk
--
-- Таблица survey.partview_lnk не содержит данных

-- 
-- Вывод данных для таблицы queryresult
--
-- Таблица survey.queryresult не содержит данных

-- 
-- Вывод данных для таблицы reports
--
-- Таблица survey.reports не содержит данных

-- 
-- Вывод данных для таблицы rpresult
--
-- Таблица survey.rpresult не содержит данных

-- 
-- Вывод данных для таблицы rptfields
--
-- Таблица survey.rptfields не содержит данных

-- 
-- Вывод данных для таблицы rptformula
--
-- Таблица survey.rptformula не содержит данных

-- 
-- Вывод данных для таблицы rptstruct
--
-- Таблица survey.rptstruct не содержит данных

-- 
-- Вывод данных для таблицы script
--
BEGIN;
INSERT INTO script VALUES
(x'B9334E07C91EA14A8300E98C73D55FE2', x'0092456FBB41414EB8952D4837E67242', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'RETURNS uuid AS\r\n$BODY$\r\ndeclare\r\nathe_session uuid;\r\naID uuid; \r\naUSERSID uuid; \r\nasysid uuid; \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null  or aPWD=''''\r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  newid() into aID ; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,localtimestamp); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,localtimestamp); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nreturn athe_session;\r\nend; \r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'AF85990CEE27D54AA564635E0BFFC9D5', x'0093E1D8E2B28F4988C3DD13BDCBE1F5', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' returns integer as $$\r\n\r\ndeclare\r\naresult integer;\r\naid1 uuid; \r\nexistsCnt  integer; \r\nbegin \r\naresult:=0; \r\n \r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID; \r\nif existsCnt =0 then \r\n  return aresult; \r\nend if; \r\n \r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n \r\nif existsCnt=0 then \r\n    return aresult; \r\nelse \r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1 and the_value=anum; \r\n \r\n  if existsCnt=0 then \r\n      return aresult; \r\n  else \r\n     aresult:=1; \r\n  end if; \r\nend if; \r\nreturn aresult; \r\nend; \r\n$$ language ''plpgsql'';'),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'0602EBA7393EE44B9BD5EC16763ECEAE', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'declare\r\nexistsCnt integer;\r\n\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;\r\nif existsCnt >0 then\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;\r\n    update the_session set closed=1,closedAt=now(), changeStamp=now() where     \r\n    the_sessionid=acursession;\r\n End if;'),
(x'5E20BE73EAF75A4AA41F85E25CA6511E', x'07ACAAA83D6A794A9B138A1F86268619', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'cursor s is select the_sessionid id from the_session\r\nwhere lastAccess <sysdate()-1;\r\ns_rec s%rowtype;\r\nbegin\r\n--open s;\r\nfor s_rec in s loop\r\n  logout(s_rec.id);\r\nEnd loop;\r\nClose s;\r\nend;\r\n\r\n\r\n\r\n'),
(x'757FBD6854AD3748A6A7A8DDE3B2992A', x'0A0BA3815B58C04B9C4EBF85F6ED0D29', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aID char(38); \r\naUSERSID char(38); \r\nasysid char(38); \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null \r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nend; \r\n'),
(x'B9409AD474614649A81DB7FE105C3546', x'0C77834331E693419C9F1B176AFFF6B2', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nupdate instance set LockUserID = null, LockSessionID=null where instanceID=athe_ID;\r\nend;'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'0D4FFB33823D354D8740267028D7C9E6', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', '\r\nupdate the_session set lastaccess=now() where the_sessionid=acursession and closed=0;\r\n\r\n'),
(x'1A9DB54F2301D3479F4FE12085C5D074', x'1030074F5485B54680BED5156D7B5ED0', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nitem.name = Name\r\n'' может не быть формы, если используем просто ActiveX\r\nParentForm.Caption = item.Name\r\nitem.Save'),
(x'5E20BE73EAF75A4AA41F85E25CA6511E', x'10BC1B77AC749443B32BBF4F9D9A1B68', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' \r\nreturns void as\r\n$$\r\ndeclare\r\naCurs refcursor;\r\naID uuid;\r\nbegin\r\n\r\nopen aCurs for select the_sessionid id from the_session\r\nwhere lastAccess < LOCALTIMESTAMP -1;\r\nLOOP\r\nFETCH aCurs  INTO aID;\r\nIf Not FOUND Then\r\n    EXIT;  \r\n END IF;\r\n PERFORM logout (aID);\r\nEND LOOP;\r\nclose aCurs;\r\n\r\n\r\nend; $$\r\nlanguage ''plpgsql'';'),
(x'DBF6E8946A10DC44948386C801798FF0', x'15DD78CFDC707D44B17B2379B865296E', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nIf ID <> "" Then\r\n    Dim Obj As Object\r\n    Set Obj = item.Manager.GetInstanceObject(ID)\r\n    If Not Obj Is Nothing Then\r\n      Dim objGui As Object\r\n      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)\r\n      If objGui Is Nothing Then Exit Sub\r\n\r\n       If StartMode = "AUTO" Then\r\n        StartMode = ""\r\n        dim i as long\r\n        For i = 100 To 0 Step -10\r\n          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName & ":" & "M" & i) Then\r\n            StartMode = "M" & i\r\n            Exit For\r\n          End If\r\n        Next\r\n       End If\r\n      \r\n      objGui.Show StartMode & "", Obj\r\n      Set objGui = Nothing\r\n    End If\r\n  End If\r\n  '),
(x'F0D654042486874894B064FBC74775E6', x'189BA291EFAC4F4EAAD06E822C0EF813', '2012-01-20 14:40:22', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'existsCnt integer;\r\nbegin\r\nselect Count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n\r\nif  existsCnt>0 then\r\naOK:=1;\r\nelse\r\naOK :=0;\r\nend if;\r\nend;'),
(x'653A7AA8D1EC4F418FDF91E53ACED1BA', x'19FCDE9AB6945C40A4FE85EA282B2607', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @RowID uniqueidentifier\r\ndeclare @InstanceID uniqueidentifier\r\ndeclare QR cursor for select result from queryresult where queryresultid =@rowqueryID\r\nopen qr\r\nfetch next from QR into @RowID\r\nwhile @@fetch_status>=0\r\nbegin\r\n\tbegin tran\r\n        EXEC  RowToInstance @InstanceID=@InstanceID OUTPUT , @RowID = @ROWID, @the_Table=@the_TABLE, @CURSESSION=@CURSESSION\r\n                if not @Instanceid is null\r\n                begin\r\n\t  if not exists( select 1 from queryresult where QUERYRESULTID = @OutputQueryID and RESULT=@InstanceID)\r\n\t    begin\r\n\t      insert into queryresult (queryresultid,result) values(@outputqueryid,@instanceid)\r\n\t    end\r\n                end\r\n\tcommit\t\r\n\tfetch next from QR into @RowID\r\nend\r\nclose QR\r\ndeallocate QR'),
(x'0DAF8191D0F039458CDB67CDB500C41E', x'1BE3ABBEEE11EC46A4BE99A7765C4919', '2012-01-20 14:40:22', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'an integer;\r\naid1 char(38);\r\naid2 char(38);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nend;'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'207A1BE2EAE05C40979EADB6E8B57039', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', '\r\nset aServerTime=now();\r\n'),
(x'757FBD6854AD3748A6A7A8DDE3B2992A', x'210A9E74BA5959498678F52843AA8058', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'RETURNS uuid AS\r\n$BODY$\r\ndeclare\r\nathe_session uuid;\r\naID uuid; \r\naUSERSID uuid; \r\nasysid uuid; \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null  or aPWD=''''\r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  newid() into aID ; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,localtimestamp); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,localtimestamp); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nreturn athe_session;\r\nend; \r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'AF85990CEE27D54AA564635E0BFFC9D5', x'22D884EA98E5D54E870523EE2B34645F', '2012-01-20 14:40:22', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @id1 uniqueidentifier\r\nset @result=0\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\nreturn\r\n\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n    return\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 and the_value=@num )\r\n      return\r\n  else\r\n     set @result=1\r\n  end\r\nend'),
(x'F56A375B9B336543BA80785E28BCF4DA', x'22EBBC3448B7A24A882B35B1197FD4C1', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', ' '),
(x'B9334E07C91EA14A8300E98C73D55FE2', x'256C582747265940A19A68269009436B', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aID char(38); \r\naUSERSID char(38); \r\nasysid char(38); \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null \r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nend; \r\n'),
(x'3A87B16FA9450F4290CECDE34B5AEE19', x'2A2707F6A066554F9D7043B28DE13DC5', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'asid char(38);\r\nbegin\r\ndeclare cursor closer is\r\nselect the_sessionid id from the_session where lastaccess < (sysdate()-0.008) and closed =0;\r\ncloser_rec  closer%ROWTYPE;\r\nbegin\r\n --open closer;\r\n for closer_rec in closer loop\r\n   Logout (closer_rec.id);\r\n end loop;\r\nclose closer;\r\nend;\r\nend;\r\n\r\n'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'2A9D95C08E3F9D44A705ECA9582090D2', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns timestamp as $$\r\ndeclare\r\naServerTime timestamp;\r\nexistsCnt integer;\r\nbegin\r\nselect LOCALTIMESTAMP into aServerTime;\r\nreturn aServerTime;\r\nend;\r\n$$ language ''plpgsql'';'),
(x'942A498D78707D4B9847AEFC27B4855D', x'2F8CDB10B3AE0D49871C7444ACF38B24', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @parent varchar(255)\r\ndeclare @prev varchar(255)\r\n\r\ndeclare @tmpID  uniqueidentifier\r\ndeclare @tmpRowID  uniqueidentifier\r\n\r\ndeclare @s nvarchar(4000)\r\n\r\n -- checking session  --\r\nif not exists( select 1 from the_session where the_sessionid=@cursession and closed=0 )\r\n  begin\r\n    raiserror(''Session expired'',16,1)\r\n    if @@trancount>0 rollback tran\r\n    return\r\n  end\r\n\r\nset @parent =@the_table\r\nset @tmpID = @ROWID\r\n\r\nagain:\r\n\r\nset @prev = @parent\r\nset @parent = null\r\nselect @parent =value from sysoptions where optiontype = ''parent'' and  name=@prev\r\n\r\n--print @parent\r\n\r\nif @parent is null\r\nbegin\r\n    set @s = N''select @root=InstanceID from '' + @prev + N'' where '' +@prev + N''id=@id''\r\n--    print @s\r\n    exec sp_executesql @s,N''@root uniqueidentifier out,@id uniqueidentifier'',@tmpRowID out,@tmpid\r\n   set @InstanceID=@tmpRowID\t    \t\r\nend\r\nelse\r\nbegin\r\n    set @s = N''select @parent=ParentStructRowID from '' + @prev+ N'' where '' +@prev + N''id=@id''\r\n--    print @s\r\n    exec sp_executesql @s,N''@parent uniqueidentifier out,@id uniqueidentifier'',@tmpRowID out,@tmpid\r\n    set @tmpID = @tmpROWID\r\n    goto again\r\nend\r\n'),
(x'F0D654042486874894B064FBC74775E6', x'32117F9E5091A3449F0004515E1F52E3', '2012-01-20 14:40:22', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'if  exists( select 1 from the_session where the_sessionid=@cursession and closed=0 )\r\nset @OK=1\r\nelse\r\nset @OK =0'),
(x'E68540AA5B74374A8EC465D99A653966', x'33F43E07C3CB6B4BACF28C37958796F8', '2012-01-20 14:40:22', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '    Dim OK As Boolean\r\n    Dim ID As String\r\n    Dim brief As String\r\n\r\n    On Error Resume Next\r\n''     On Error GoTo bye\r\n\r\n    Dim Obj As Object\r\n    Dim part_col As Variant\r\n    Dim part_item As Object\r\n    Set Obj = CallByName(RowItem, ForwardFieldName, VbGet)\r\n    Set part_col = CallByName(Obj, SymmetricPartName, VbGet, False)\r\n    part_col.Filter = SymmetricFieldName + "=''" + RowItem.Application.ID + "''"\r\n''    RowItem.Parent.Remove RowItem.ID\r\n    Set part_item = part_col.Item(1)\r\n    part_col.Delete part_item.ID\r\n    Exit Sub\r\nbye:\r\nResume\r\n'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'3762A089D0A8A141B66BD4A7DF0209D5', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns void as $$\r\n\r\nbegin\r\nupdate the_session set lastaccess=LOCALTIMESTAMP where the_sessionid=acursession and closed=0;\r\nend;\r\n$$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'B9409AD474614649A81DB7FE105C3546', x'3A9F2A69298F374D9C8CAE25B8C3F3CA', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$\r\nbegin\r\nupdate instance set LockUserID = null, LockSessionID=null ;\r\nend;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE\r\n'),
(x'76E8EEA2D854ED4AB124775F5DA2D911', x'4101C5A7FE03E74BB2E24BD318553C8D', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '    Dim OK As Boolean\r\n    Dim ID As String\r\n    Dim brief As String\r\n    Dim Mode As String\r\n    Dim ResObject as Object\r\n    On Error Resume Next\r\n    Mode = Mid(TypeName(Me), InStr(TypeName(Me), "_") + 1)\r\n    \r\n''     On Error GoTo bye\r\n    If Len(Mode) = 0 Then\r\n        OK = Item.Application.Manager.GetObjectListDialogEx(ID, brief, "", ObjTypeName)\r\n    Else\r\n        ID = CreateGUID2\r\n        If Len(ObjTypeName) = 0 Then\r\n            Dim newObj As Object\r\n            Set newObj = Item.Application.Manager.GetNewObject\r\n            If Not (newObj Is Nothing) Then\r\n                OK = True\r\n                ID = newObj.ID\r\n            End If\r\n        Else\r\n            OK = Item.Application.Manager.NewInstance(ID, ObjTypeName, "")\r\n        End If\r\n        Dim ref As Object, objGui As Object\r\n        Set ref = Item.Application.Manager.GetInstanceObject(ID)\r\n        If Not ref Is Nothing Then\r\n          Set objGui = Item.Application.Manager.GetInstanceGUI(ID)\r\n          If objGui Is Nothing Then Set ref = Nothing: Exit Sub\r\n          objGui.Show "", ref, False\r\n          Set objGui = Nothing\r\n        Else\r\n          OK = False\r\n        End If\r\n    End If\r\n    Dim Obj As Object\r\n    Set Obj = Item.Application.Manager.GetInstanceObject(ID)\r\n    If Obj Is Nothing Then\r\n        OK = False\r\n    End If\r\n    If OK Then\r\n\tDim Coll as New Collection\r\n        Dim part_col As Variant\r\n        Dim part_item As Object\r\n        CallByName RowItem, ForwardFieldName, VbSet, Obj\r\n        Coll.Add TypeName(RowItem)+ ":" + RowItem.ID\r\n        RowItem.Save\r\n        If Len(SymmetricPartName) > 0 And Len(SymmetricFieldName) > 0 Then\r\n          Set part_col = CallByName(Obj, SymmetricPartName, VbGet, True)\r\n          Set part_item = part_col.Add\r\n          CallByName part_item, SymmetricFieldName, VbSet, RowItem.Application\r\n          part_item.Save\r\n          Coll.Add SymmetricPartName + ":" + part_item.ID\r\n        End If\r\n        Call Item.Application.Manager.AddCustomObjects(Coll, Obj.ID)\r\n    Else\r\n        RowItem.Parent.Remove RowItem.ID\r\n    End If\r\n    Exit Sub\r\nbye:\r\nResume'),
(x'5CEE0C2BFA7F0D499F5AB5E8692551DD', x'423DD52A283D05448914825B4C14D188', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aid1 char(38);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt  from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\nreturn;\r\nend if;\r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    return ;\r\nelse\r\n  select num_zonesid into aID1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt  from num_values where parentStructRowID=aID1 ;\r\n  if  existsCnt=0 then\r\n      return;\r\n  else\r\n     delete from num_values where parentStructRowID=aID1 and the_value=anum;\r\n  end if;\r\nend if;\r\nend;'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'43CBAE567B75404D93C32CAB8DD5F223', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'set @ServerTime =getdate()'),
(x'B44F91D85D6B1A49A72F985617727583', x'45CBAD6E19A0694582C6E261EB9F350C', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nItem.Name = RowItem.Name\r\nParentForm.Caption = item.Name\r\nItem.Save'),
(x'45353961F7ABF74682F39B7E610DD9C0', x'4A81487A52B1D346956DD642396D6624', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On error resume next\r\nRowItem.Application.Name=name\r\nRowItem.Application.Save'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'4E88894AB4593C4CBEAAAC21C0540E4C', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nselect sysdate() into aServerTime from sys.dual;\r\nend;'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'54315A579D6CA042B44B00E9651C4D94', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'update the_session set lastaccess=getdate() where the_sessionid=@cursession and closed=0\r\n'),
(x'B9409AD474614649A81DB7FE105C3546', x'57B9CFFE6114554F9F3D17F3F88F6E97', '2012-01-20 14:40:23', '2017-12-25 16:21:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'update instance set LockUserID = null, LockSessionID=null where instanceID=@ID'),
(x'77CFE773BAE6B442A03B4F67EEDEF4F1', x'590C33479B0E4D4EB5BA3D5DED41DEB6', '2012-01-20 14:40:22', '2017-12-25 16:21:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nupdate instance set LockUserID = null, LockSessionID=null \r\nend;'),
(x'B9B78F5BB1D8A04C90AF55F83D1A6E5D', x'6002EE6D427C204B92AE4523FA7AB2F4', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On error goto bye\r\nDim ID As String\r\n Dim Obj As Object\r\n ''ID = CreateGUID2\r\n ''Call RowItem.Application.Manager.NewInstance(ID, "VRRPT", "Отчет " & Date)\r\n ''Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)\r\n If RowItem.Report.VRRPT_MAIN.Count = 0 Then\r\n  Set Obj = RowItem.Report.VRRPT_MAIN.Add\r\n Else\r\n  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)\r\n End If\r\n \r\n Set Obj.Author = RowItem.Application.FindRowObject("Users", Item.Application.MTZSession.GetSessionUserID())\r\n Obj.TheDate = Date\r\n \r\n If ReportType = "CLNT" Then\r\n   Set Obj.Client = RowItem.Application\r\n End If\r\n If ReportType = "PRJ" Then\r\n   Set Obj.Project = RowItem.Application\r\n End If\r\n If ReportType = "CONT" Then\r\n   Set Obj.Contract = RowItem.Application\r\n End If\r\n If ReportType = "PERS" Then\r\n   Set Obj.Person = RowItem.Application\r\n End If\r\n \r\n Obj.Save\r\n RowItem.Save\r\n\r\n Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "Создание отчета"'),
(x'E89AA4494BDB294380FB801A24C9D7AF', x'60D4C1E492845945AA63B0322ABDBFE4', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @nid uniqueidentifier \r\ndeclare @opn varchar(255)\r\ndeclare @orid uniqueidentifier \r\ndeclare @s nvarchar(4000)\r\n\r\n\r\n\r\ndelete from num_values where OwnerPartName is null or OwnerRowID is null\r\n\r\ndeclare nlist cursor local for select distinct OwnerPartName from num_values\r\nopen nlist\r\nfetch next from nlist into @opn\r\nwhile @@fetch_status >=0 \r\nbegin\r\n  set @s= N''delete from num_values where ownerpartname='''''' + @opn + '''''' and OwnerRowID not in ( select '' + @opn + ''id from '' + @opn + '' )''\r\n  exec sp_executesql   @s\r\n  fetch next from nlist into @opn\r\nend\r\nclose nlist\r\ndeallocate nlist'),
(x'5CEE0C2BFA7F0D499F5AB5E8692551DD', x'630488E98C381146811E48FA4232909F', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @id1 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\nreturn\r\n\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n    return\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n      return\r\n  else\r\n     delete from num_values where parentStructRowID=@ID1 and the_value=@num\r\n  end\r\nend'),
(x'653A7AA8D1EC4F418FDF91E53ACED1BA', x'633EDD818ACE1A44975DC1726CB69D93', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$ \r\n\r\ndeclare\r\naInstanceID uuid; \r\nexistsCnt integer; \r\naCurs refcursor;\r\naID uuid;\r\nbegin\r\n\r\nopen aCurs for select result ID from queryresult where queryresultid =arowqueryID; \r\n \r\n\r\n\r\nloop\r\nFETCH aCurs  INTO aID;\r\nIf Not FOUND Then\r\n    EXIT;  -- exit loop\r\n END IF;\r\n  aInstanceID:= RowToInstance (aID, athe_TABLE, aCURSESSION); \r\n       if not ainstanceid is null then\r\n          select count(*) into existsCnt from queryresult where QUERYRESULTID = aOutputQueryID and RESULT=aInstanceID; \r\n\t  if existsCnt =0 then \r\n\t    insert into queryresult (queryresultid,result) values(aoutputqueryid,ainstanceid); \r\n\t  end if; \r\n       end if;\r\nEND LOOP;\r\n\r\nclose aCurs; \r\n\r\nend; $BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE\r\n  COST 100;'),
(x'68DD82A28891404CB0F2BE69CAEE3DEA', x'67936738C8E3A5428FA61B44AC59EFFA', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' returns integer\r\nas $$\r\nbegin\r\n return 1;\r\nend;\r\n$$ language ''plpgsql'';\r\n'),
(x'553B7D899965DB42AA1C54BAB3D2F597', x'6AF7A7548BEFE648A637A238E9C33E21', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @n integer\r\ndeclare @id1 uniqueidentifier\r\ndeclare @id2 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\ninsert into instance(instanceid,name,objtype) values(@NumeratorID,''Numerator'',''STDNumerator'')\r\n\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n  begin\r\n    set @num =1\r\n    set @ID1 = newid()\r\n    set @ID2 = newid()\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(@id1,@NumeratorID, @the_zone)\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n    return\r\n  end\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n    begin\r\n      set @num =1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n      return\r\n    end\r\n  else\r\n    begin\r\n      select @n = max(the_value)+1 from num_values where parentStructRowID=@ID1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @n,@OwnerPartName,@OwnerRowID)\r\n      set @num = @n\r\n    end\r\n  end\r\nend\r\n'),
(x'0DAF8191D0F039458CDB67CDB500C41E', x'6E677CB3C067374C8C15FC0C2FF2D4C3', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns integer as $$\r\ndeclare\r\nanum integer;\r\nan integer;\r\naid1 uuid;\r\naid2 uuid;\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return anum;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return anum;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nreturn anum;\r\nend;\r\n$$\r\nlanguage ''plpgsql'';'),
(x'36A4A142A28A1F4F999B6680DFF514DE', x'721727EF750E8945A227DAFB0C3A7920', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On Error GoTo bye\r\n'''''''''''''''''''''''''''''''' change me \r\n\r\n Dim cRow As object '' INV_OS.INVOS_PLACE\r\n Dim hist As object ''INV_OS.INVOS_HIST\r\n Set cRow = RowItem\r\n Set hist = cRow.Application.INVOS_HIST.Add\r\n \r\n \r\n With hist\r\n    .UntilDate = Now\r\n    Set .ChangedBy = cRow.Application.FindRowObject("Users", cRow.Application.MTZSession.GetSessionUserID)\r\n    ''Set .TheOrg = cRow.TheOrg\r\n    .ComplNumber = cRow.ComplNumber\r\n    Set .Direction = cRow.Direction\r\n    Set .Uprav = cRow.Uprav\r\n    Set .Otdel = cRow.Otdel\r\n    Set .TheHouse = cRow.TheHouse\r\n    Set .MatOtv = cRow.MatOtv\r\n    .Flow = cRow.Flow\r\n    .Room = cRow.Room\r\n    .WorkPlaceNum = cRow.WorkPlaceNum\r\n    Set .TheOwner = cRow.TheOwner\r\n    .Save\r\n End With\r\n\r\n\r\n\r\n Exit Sub\r\nbye:\r\n  MsgBox err.Description, vbOKOnly + vbCritical, "Ошибка сохранения истории"'),
(x'DC5699060533EF45933191CE323B5942', x'72EE6FAFC9E0C149B9A8DC039F558710', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nItem.Name = RowItem.Description\r\nparentform.caption = item.name\r\nItem.Save'),
(x'553B7D899965DB42AA1C54BAB3D2F597', x'73C4D7500DCA204AB80CAF9E590D3D3E', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', '\r\n/**********************************\r\ndeclare @n integer\r\ndeclare @id1 uniqueidentifier\r\ndeclare @id2 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\ninsert into instance(instanceid,name,objtype) values(@NumeratorID,''Numerator'',''STDNumerator'')\r\n\r\nif not exists(select 1 from num_zones where zonemask=@zone and instanceid=@NumeratorID)\r\n  begin\r\n    set @num =1\r\n    set @ID1 = newid()\r\n    set @ID2 = newid()\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(@id1,@NumeratorID, @zone)\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(@id2,@ID1, @num)\r\n    return\r\n  end\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n    begin\r\n      set @num =1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(@id2,@ID1, @num)\r\n      return\r\n    end\r\n  else\r\n    begin\r\n      select @n = max(the_value)+1 from num_values where parentStructRowID=@ID1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(@id2,@ID1, @n)\r\n      set @num = @n\r\n    end\r\n  end\r\nend\r\n************************************************************/\r\n\r\nan integer;\r\naid1 char(38);\r\naid2 char(38);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nend;'),
(x'77CFE773BAE6B442A03B4F67EEDEF4F1', x'7AD2E7E8ECE8494E9A5323A59E196198', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'update instance set LockUserID = null, LockSessionID=null '),
(x'B9334E07C91EA14A8300E98C73D55FE2', x'7C699918ED8755488C5AB2E46F969A01', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', ' declare aID binary(16); \r\n    declare aUSERSID binary(16); \r\n    declare asysid binary(16); \r\n    declare existsCnt int;  \r\n\r\nset asysid = null; \r\n\r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\n\r\nset athe_session=null  ; \r\n\r\nif aPWD is null then \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    set  aID=G2B(UUID()); \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,now(),ausersid,0,now()); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,now(),ausersid,0,now()); \r\n       end if; \r\n\t   set athe_session=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1   then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   set  aID=G2B(UUID())  ; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,now()); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,now(),ausersid,0,now()); \r\n       end if; \r\n       set athe_session=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     set aid=G2B(UUID()); \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,now(),ausersid,0,now()); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,now(),ausersid,0,now()); \r\n       end if; \r\n     set athe_session=aid; \r\n    End if; \r\n  end if; \r\nend if; '),
(x'B9334E07C91EA14A8300E98C73D55FE2', x'7C909231CC8D0349848800B95285235B', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @ID uniqueidentifier\r\ndeclare @USERSID uniqueidentifier\r\ndeclare @sysid uniqueidentifier\r\n\r\nset @sysid = null\r\nselect @sysid=instanceid from instance where objtype = ''MTZSYSTEM''\r\n\r\n\r\nset @THE_SESSION=null  \r\n\r\nif @PWD is null\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password is null)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password is null\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend\r\nelse\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password=@PWD)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password=@PWD\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\nelse\r\nif exists( select 1 from users where DomaiName=@usr and @PWD=''INTEGRATED'' )\r\nbegin\r\n    select @usersid=USERSID from users where DomaiName=@usr\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend -- password is null\r\n'),
(x'AF85990CEE27D54AA564635E0BFFC9D5', x'8CC641CD63FA824D93489432CE3B4F91', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aid1 char(38); \r\nexistsCnt  integer; \r\nbegin \r\naresult:=0; \r\n \r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID; \r\nif existsCnt =0 then \r\n  return; \r\nend if; \r\n \r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n \r\nif existsCnt=0 then \r\n    return; \r\nelse \r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1 and the_value=anum; \r\n \r\n  if existsCnt=0 then \r\n      return; \r\n  else \r\n     aresult:=1; \r\n  end if; \r\nend if; \r\nend; '),
(x'FDD4DE795C04F845AC792E5A3D956D97', x'8E545933D0073E4C940FCF566620B888', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '''Migrate security\r\nOn Error GoTo bye\r\n  If RowItem.Person Is Nothing Then Exit Sub\r\n\r\n  RowItem.Person.Secure Item.SecureStyleID\r\n  RowItem.Person.propagate\r\nbye:\r\n  Exit Sub\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "Усановка стиля защиты"'),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'8ECAF9BA4ED33842B39362368309E916', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'existsCnt integer;\r\n\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;\r\nif existsCnt >0 then\r\n   begin\r\n    declare cursor dl  is\r\n    select ''update ''|| thevalue || '' set LockSessionID =null where LockSessionID=:1'' str from sysoptions where optiontype=''MAP'' and theValue not like ''V[_]%'';\r\n    dl_rec dl%rowtype;\r\n    begin\r\n    --open dl;\r\n    for dl_rec in dl loop\r\n\t      execute immediate dl_rec.str using acursession;\r\n    end loop;\r\n    --close dl;\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;\r\n    update the_session set closed=1,closedAt=sysdate(), changeStamp=sysdate() where     the_sessionid=acursession;\r\n    end;\r\n  end;  \r\n End if;\r\nend;\r\n'),
(x'F0D654042486874894B064FBC74775E6', x'914F746119B06C428DAEC716FFC3A359', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns integer as $$\r\ndeclare\r\naOK integer;\r\nexistsCnt integer;\r\nbegin\r\nselect Count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n\r\nif  existsCnt>0 then\r\naOK:=1;\r\nelse\r\naOK :=0;\r\nend if;\r\nreturn aOK;\r\nend;\r\n$$ language ''plpgsql'';'),
(x'258D7B47F74F1A49A0B0D3437EC16957', x'92E4E9C5DE0A734D8532987765502B7F', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On Error GoTo bye\r\n Dim ID As String\r\n Dim Obj As Object '' EstComplex.Application '' Object\r\n Dim GObj As Object\r\n Dim fold As Object ''EstCatalog.Application '' Object\r\n \r\n ID = CreateGUID2\r\n Call RowItem.Application.Manager.NewInstance(ID, "EstComplex", RowItem.TheName & " " & Date)\r\n Set Obj = RowItem.Application.Manager.GetInstanceObject(ID)\r\n If Obj.EC_Def.Count = 0 Then\r\n    With Obj.EC_Def.Add\r\n        .TheName = RowItem.TheName\r\n    End With\r\n Else\r\n    Obj.EC_Def.Item(1).TheName = RowItem.TheName\r\n End If\r\n Obj.Save\r\n Set RowItem.LinkedEC = Obj\r\n RowItem.Save\r\n Set GObj = RowItem.Application.Manager.GetInstanceGUI(Obj.ID)\r\n GObj.Show "", Obj, True ''False\r\n Set Obj = RowItem.Application.Manager.GetInstanceObject(ID)\r\n RowItem.TheName = Obj.EC_Def.Item(1).TheName\r\n RowItem.Save\r\n Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "Создание ИК"\r\n'),
(x'3A87B16FA9450F4290CECDE34B5AEE19', x'9304EAA253399642B215C21B65F96172', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' \r\nreturns void as\r\n$$\r\ndeclare\r\naCurs refcursor;\r\naID uuid;\r\nbegin\r\n\r\nopen aCurs for select the_sessionid id from the_session\r\nwhere lastAccess < LOCALTIMESTAMP -1;\r\nLOOP\r\nFETCH aCurs  INTO aID;\r\nIf Not FOUND Then\r\n    EXIT;  \r\n END IF;\r\n PERFORM logout (aID);\r\nEND LOOP;\r\nclose aCurs;\r\n\r\n\r\nend; $$\r\nlanguage ''plpgsql'';\r\n'),
(x'77CFE773BAE6B442A03B4F67EEDEF4F1', x'96D714DBA167024E9BFDC40160FB52C0', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$\r\nbegin\r\nupdate instance set LockUserID = null, LockSessionID=null ;\r\nend;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'757FBD6854AD3748A6A7A8DDE3B2992A', x'9B3C33461AE5654F866E7A5331F55FA1', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @ID uniqueidentifier\r\ndeclare @USERSID uniqueidentifier\r\ndeclare @sysid uniqueidentifier\r\n\r\nset @sysid = null\r\nselect @sysid=instanceid from instance where objtype = ''MTZSYSTEM''\r\n\r\n\r\nset @THE_SESSION=null  \r\n\r\nif @PWD is null\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password is null)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password is null\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend\r\nelse\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password=@PWD)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password=@PWD\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\nelse\r\nif exists( select 1 from users where DomaiName=@usr and @PWD=''INTEGRATED'' )\r\nbegin\r\n    select @usersid=USERSID from users where DomaiName=@usr\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend -- password is null\r\n'),
(x'5E20BE73EAF75A4AA41F85E25CA6511E', x'A3A3E499B5642042953BA1207696EBF9', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @id uniqueidentifier\r\ndeclare s cursor for select the_sessionid from the_session \r\nwhere DATEADD ( minute , 30, lastAccess )<getdate()\r\nopen s\r\nfetch next from s into @id\r\nwhile @@fetch_status >=0\r\nbegin\r\n  exec logout  @id\r\n  fetch next from s into @id\r\nEnd\r\nClose s\r\ndeallocate s\r\n\r\n\r\n\r\n\r\n'),
(x'68DD82A28891404CB0F2BE69CAEE3DEA', x'A67CD40458C8CE428558CA92F097F8E9', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'apr integer;\r\naallow integer;\r\nbegin\r\nif athe_resource is null \r\nthen\r\n\taaccess :=1;\r\n\treturn;\r\nend if;\r\n\r\ndeclare  cursor tst is\r\nSELECT     \r\n  MTZSEC_RIGHT.Allow,  \r\n  MTZSEC_RIGHT.Piority\r\nFROM MTZSEC_RIGHT JOIN\r\n     GroupUser ON MTZSEC_RIGHT.TheGroup = GroupUser.ParentStructRowID  JOIN\r\n     the_Session ON GroupUser.TheUser = the_Session.Usersid\r\nwhere the_Session.the_Sessionid = acursession and the_Session.closed=0 \r\nand MTZSEC_RIGHT.InstanceID =athe_resource\r\nand MTZSEC_RIGHT.ProtectedItem =averb\r\norder by MTZSEC_RIGHT.Piority;\r\ntst_rec tst%ROWTYPE;\r\nbegin\r\n--open tst;\r\n\r\nfor tst_rec in tst loop\r\n\taaccess :=tst_rec.allow;\r\n\tCLOSE tst;\r\n\treturn;\r\nEND loop;\r\n\r\naaccess :=0;\r\nCLOSE tst;\r\nend;\r\nend;'),
(x'68DD82A28891404CB0F2BE69CAEE3DEA', x'A8CC809037BAE04DB6E29335FF9B593D', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @pr int, @allow int\r\n\r\nif @resource is null \r\nbegin\r\n\tset @access =1\r\n\treturn\r\nend \r\n\r\ndeclare tst cursor READ_ONLY for\r\nSELECT     \r\n  MTZSEC_RIGHT.Allow,  \r\n  MTZSEC_RIGHT.Piority\r\nFROM MTZSEC_RIGHT INNER JOIN\r\n     GroupUser ON MTZSEC_RIGHT.TheGroup = GroupUser.ParentStructRowID INNER JOIN\r\n     [the_Session] ON GroupUser.TheUser = [the_Session].Usersid\r\nwhere [the_Session].the_Sessionid = @cursession and [the_Session].closed=0 \r\nand MTZSEC_RIGHT.InstanceID =@resource\r\nand MTZSEC_RIGHT.ProtectedItem =@verb\r\norder by MTZSEC_RIGHT.Piority\r\nopen tst\r\n\r\nFETCH NEXT FROM tst INTO @Allow,@pr\r\nif (@@fetch_status >= 0)\r\nBEGIN\r\n\tset\t@access =@allow\r\n\tCLOSE tst\r\n\tDEALLOCATE tst\r\n\treturn\r\nEND\r\n\r\nset @access =0\r\nCLOSE tst\r\nDEALLOCATE tst\r\n'),
(x'0DAF8191D0F039458CDB67CDB500C41E', x'B368AE217FFFAE4F9B5DDC143AC126BE', '2012-01-20 14:40:22', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', '\r\ndeclare @n integer\r\ndeclare @id1 uniqueidentifier\r\ndeclare @id2 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\ninsert into instance(instanceid,name,objtype) values(@NumeratorID,''Numerator'',''STDNumerator'')\r\n\r\n-- New Zone\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n  begin\r\n    set @num =1\r\n    set @ID1 = newid()\r\n    set @ID2 = newid()\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(@id1,@NumeratorID, @the_zone)\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n    return\r\n  end\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n\r\n  -- frist item in Zone\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n    begin\r\n      set @num =1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n      return\r\n    end\r\n  else\r\n\r\n    -- Items exists in zone\r\n    begin\r\n\r\n      set @n=null\r\n\r\n      declare cc cursor for  select the_value from num_values where parentStructRowID=@ID1 and the_value >1   order by the_value      \r\n      open cc\r\n      fetch next from cc into @n\r\n      while @@fetch_status >=0\t\r\n      begin\r\n       \r\n       -- try to get previous whole\r\n       if not exists( select 1 from num_values where parentStructRowID=@ID1 and the_value=@n-1)\r\n       begin\r\n\tset @n=@n-1\r\n\tgoto found\r\n       end\r\n\r\n       -- try to get next whole\r\n       if not exists( select 1 from num_values where parentStructRowID=@ID1 and the_value=@n+1)\r\n       begin\r\n\tset @n=@n+1\r\n\tgoto found\r\n       end\r\n       fetch next from cc into @n\r\n      end\t\r\n\r\n      --no wholes found\t\r\n      set @n=null\r\nfound:\r\n      close cc\r\n      deallocate cc\r\n\r\n      -- gem max+1 if no wholes\t\r\n      if @n is null\r\n        select @n = max(the_value)+1 from num_values where parentStructRowID=@ID1\r\n      end\t\r\n\r\n      --register value\t\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @n,@OwnerPartName,@OwnerRowID)\r\n      set @num = @n\r\n   \r\n  end\r\nend'),
(x'3A87B16FA9450F4290CECDE34B5AEE19', x'B5291AE63E67684BAF24379B1D724F8E', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @sid uniqueidentifier\r\ndeclare closer cursor for \r\nselect the_sessionid from the_session where lastaccess < (getdate()-0.01) and closed =0\r\nopen closer\r\nfetch next from closer into @sid\r\nwhile @@fetch_status >=0\r\nbegin\r\n  print @sid\r\n  exec Logout @sid\r\n  fetch next from closer into @sid\r\nend\r\nclose closer\r\ndeallocate closer\r\n\r\n'),
(x'1808B32BED9027468ABB85B3FBA46750', x'BEB55DEDCE44EF47BBD7293AC2ADDFC9', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On error goto bye\r\nDim ID As String\r\n Dim Obj As Object\r\n ID = CreateGUID2\r\n Call RowItem.Application.Manager.NewInstance(ID, "PEKO", "Оплата " & Date)\r\n Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)\r\n\r\n If RowItem.TheDocument.PEKO_DEF.Count = 0 Then\r\n  Set Obj = RowItem.TheDocument.PEKO_DEF.Add\r\n Else\r\n  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)\r\n End If\r\n \r\n Set Obj.ToClient = RowItem.Application\r\n Obj.PLPDate = Date\r\n Obj.Save\r\n RowItem.Save\r\n\r\n Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "Создание Платежа"'),
(x'5CEE0C2BFA7F0D499F5AB5E8692551DD', x'C91480E8C8050E4F8483BA8655D0A695', '2012-01-20 14:40:23', '2017-12-25 16:21:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns void as $$\r\ndeclare\r\naid1 uuid;\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt  from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\nreturn;\r\nend if;\r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    return ;\r\nelse\r\n  select num_zonesid into aID1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt  from num_values where parentStructRowID=aID1 ;\r\n  if  existsCnt=0 then\r\n      return;\r\n  else\r\n     delete from num_values where parentStructRowID=aID1 and the_value=anum;\r\n  end if;\r\nend if;\r\nend;\r\n$$ language ''plpgsql'';'),
(x'F76CEC31BD8DFE4EBF124D168F653D34', x'CAA152017ED4EC4A9CBB393C734FB369', '2012-01-20 14:40:22', '2017-12-25 16:21:06', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '''Apply security\r\nOn Error GoTo bye\r\n  If RowItem.Client Is Nothing Then Exit Sub\r\n  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub\r\n  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id\r\n  RowItem.Client.propagate\r\n  Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "Усановка стиля защиты"'),
(x'942A498D78707D4B9847AEFC27B4855D', x'D00EE13353BF2147B62A81B5007D25C9', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aparent varchar2(255);\r\naprev varchar2(255);\r\natmpID  char(38);\r\natmpRowID  char(38);\r\nastr varchar2(4000);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n -- checking session  --\r\nif  existsCnt =0\r\n  then\r\n    raise_application_error(-20000,''Session expired'');\r\n\r\n    return;\r\n  end if;\r\n\r\naparent :=athe_table;\r\natmpID := athe_ROWID;\r\n\r\n<<again>>\r\n\r\naprev := aparent;\r\nbegin \r\n\r\nselect thevalue into aparent from sysoptions where optiontype = ''PARENT'' and  name=aprev;\r\nexception\r\nwhen others then\r\naparent := null;\r\nend;\r\nif aparent is null then\r\n    astr := ''select InstanceID from '' || aprev || '' where '' || aprev || ''id=:1'';\r\n    begin\r\n        execute immediate astr into atmpRowID using atmpid;\r\n        athe_InstanceID:=atmpRowID\t    \t;\r\n    exception when others then\r\n        athe_InstanceID:=null;\r\n    end;\r\n    \r\nelse\r\n    astr :=''select ParentStructRowID from '' || aprev || '' where '' || aprev || ''id=:1'';\r\n    begin\r\n        execute immediate astr into atmpRowID using atmpid;\r\n        atmpID := atmpROWID;\r\n            exception when others then\r\n              atmpID := null;\r\n    end;\r\n    goto again;\r\nend if;\r\nend\r\n;'),
(x'942A498D78707D4B9847AEFC27B4855D', x'D31836A1FD1D1D4BA882A6D9590000A2', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS uuid AS\r\n$BODY$\r\n\r\ndeclare\r\naparent varchar(255);\r\naprev varchar(255);\r\natmpID  uuid;\r\natmpRowID  uuid;\r\nathe_InstanceID uuid;\r\nastr varchar(4000);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n -- checking session  --\r\nif  existsCnt =0\r\n  then\r\n    perform raise_application_error(-20000,''Session expired'');\r\n\r\n    return null;\r\n  end if;\r\n\r\naparent :=athe_table;\r\natmpID := athe_ROWID;\r\n\r\nloop\r\n\r\naprev := aparent;\r\nbegin \r\n\r\naparent := null;\r\nselect thevalue into aparent from sysoptions where optiontype = ''PARENT'' and  name=aprev;\r\n\r\nend;\r\nif aparent is null then\r\n    astr := ''select InstanceID  from '' || aprev || '' where '' || aprev || ''id=$1'';\r\n    begin\r\n        athe_InstanceID:=null;\r\n        execute astr into atmpRowID using atmpid; \r\n        athe_InstanceID:=atmpRowID ;\r\n    end;\r\n    return athe_InstanceID;\r\nelse\r\n    astr :=''select ParentStructRowID from '' || aprev || '' where '' || aprev || ''id=$1'';\r\n    begin\r\n\tatmpID := null;\r\n        execute astr into atmpRowID using atmpid;\r\n        atmpID := atmpROWID;\r\n    end;\r\n end if;\r\nend loop;\r\nend\r\n;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE\r\n  COST 100;'),
(x'653A7AA8D1EC4F418FDF91E53ACED1BA', x'D3E4E528F01BE94EA740914CAF4B0636', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aInstanceID char(38); \r\nexistsCnt integer; \r\n cursor QR is select result ID from queryresult where queryresultid =arowqueryID; \r\nQR_REC QR%ROWTYPE; \r\nbegin \r\n--open qr; \r\nfor  qr_ReC in QR loop \r\n          RowToInstance (athe_InstanceID=>aInstanceID , athe_RowID => QR_REC.ID, athe_Table=>athe_TABLE, aCURSESSION=>aCURSESSION); \r\n          if not ainstanceid is null then\r\n          select count(*) into existsCnt from queryresult where QUERYRESULTID = aOutputQueryID and RESULT=aInstanceID; \r\n\tif existsCnt =0 then \r\n\t  insert into queryresult (queryresultid,result) values(aoutputqueryid,ainstanceid); \r\n\tend if; \r\n          end if;\r\nend loop; \r\n--close QR; \r\nend; '),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'D4FB62D7B36C5248A04C6DED40CF06E6', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$\r\ndeclare\r\nexistsCnt integer;\r\n\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;\r\nif existsCnt >0 then\r\n   begin\r\n\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;\r\n    update the_session set closed=1,closedAt=LOCALTIMESTAMP, changeStamp=LOCALTIMESTAMP where     \r\n    the_sessionid=acursession;\r\n   \r\n  end;  \r\n End if;\r\nend;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'DD7C81607BDA8844B4641A1A0F672F09', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nupdate the_session set lastaccess=sysdate() where the_sessionid=acursession and closed=0;\r\nend;\r\n'),
(x'553B7D899965DB42AA1C54BAB3D2F597', x'E87EFB3431ACD242901DF7625B3BF9C8', '2012-01-20 14:40:22', '2017-12-25 16:21:06', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns integer as $$ \r\ndeclare\r\nanum integer;\r\nan integer;\r\naid1 uuid;\r\naid2 uuid;\r\nexistsCnt integer;\r\nbegin\r\n\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return anum;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return anum;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nreturn anum;\r\nend;\r\n$$\r\nlanguage ''plpgsql'';'),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'EF928D932409414A873D109F2B7E4A8E', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'if exists( select 1 from the_session where the_sessionid=@cursession and closed=0)\r\n begin\r\n    declare @n nvarchar(4000)\r\n    declare dl cursor for \r\n    select N''update ''+ value+'' set LockSessionID =null where LockSessionID=@cursession'' from sysoptions where optiontype=''MAP'' and Value not like ''V[_]%''\t\r\n    open dl\r\n    fetch next from dl into @n\r\n    while @@fetch_status >=0\r\n    begin\r\n\texec sp_executesql @n,N''@CURSESSION uniqueidentifier'',@CURSESSION\r\n\tfetch next from dl into @n\r\n    end\r\n    close dl\r\n    deallocate dl\r\n    update INSTANCE set LockSessionID =null where LockSessionID=@cursession    \r\n    update the_session set closed=1,closedAt=getdate(), changeStamp=getdate() where the_sessionid=@cursession\r\n End\r\n\r\n'),
(x'DBF6E8946A10DC44948386C801798FF0', x'F1217C6329D52B47A1AFCA5D78122583', '2012-01-20 14:40:23', '2017-12-25 16:21:06', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', '        Dim DocItem As LATIR.Document.Doc_Base\r\n        Try\r\n            DocItem = GuiManager.Manager.GetInstanceObject(ID)\r\n            If Not DocItem Is Nothing Then\r\n                Dim tgui As LATIRGuiManager.Doc_GUIBase\r\n                tgui = GuiManager.GetTypeGUI(DocItem.TypeName)\r\n                tgui.ShowForm(ShowMode, DocItem)\r\n                tgui = Nothing\r\n            End If\r\n        Catch\r\n        End Try\r\n        DocItem = Nothing'),
(x'EBBDE679D5912E4B81F73E091FB65E3A', x'FCBF34CB1A194142B6510EB857957106', '2012-01-20 14:40:22', '2017-12-25 16:21:06', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '    On Error Resume Next\r\n\r\n    Dim part_col As Variant\r\n    Dim part_item As Object\r\n    Set part_col = CallByName(RowItem.Parent.Parent, DesPartName, VbGet, False)\r\n    Set part_item = part_col.Item(1)\r\n    If RowItem.Parent.Count = 1 Then\r\n        If part_item.HasDescrs = -1 Then\r\n            part_item.HasDescrs = 0\r\n        Else\r\n            part_item.HasDescrs = -1\r\n        End If\r\n    End If\r\n    part_item.Save\r\n');
COMMIT;

-- 
-- Вывод данных для таблицы sharedmethod
--
BEGIN;
INSERT INTO sharedmethod VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0DAF8191D0F039458CDB67CDB500C41E', '2012-01-20 14:40:22', '2017-12-25 16:21:02', NULL, NULL, NULL, 'GetFreeNumber', 'Свободный номер из нумератора', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'1808B32BED9027468ABB85B3FBA46750', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'VBNewPayOut', 'Создать новый платеж из клиента', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'1A9DB54F2301D3479F4FE12085C5D074', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'VBUpdateItemName', 'Изменить название объекта', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'258D7B47F74F1A49A0B0D3437EC16957', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'MakeNewFolderEC', 'Метод создает новый элемент в иерархии Имущественных Комплексов (приложение RealEstate)\r\nпри создании нового элемента к нему линкуется объект ИК, форма которого и вызывается на редактирование', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'36A4A142A28A1F4F999B6680DFF514DE', '2012-01-20 14:40:22', '2017-12-25 16:21:02', NULL, NULL, NULL, 'VBSaveHistory', 'Создать историю', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'3A87B16FA9450F4290CECDE34B5AEE19', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'AutoCloseSession', 'Автоматическое закрытие протухщих сессий', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'45353961F7ABF74682F39B7E610DD9C0', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'VBUpdateObjName', 'Обновление Имени объекта', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'553B7D899965DB42AA1C54BAB3D2F597', '2012-01-20 14:40:22', '2017-12-25 16:21:02', NULL, NULL, NULL, 'GetNewNumber', 'Следующий номер из нумератора', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5CEE0C2BFA7F0D499F5AB5E8692551DD', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'EraseNumber', 'Удалить номер из нумератора', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5E20BE73EAF75A4AA41F85E25CA6511E', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'SessionCheckPoint', 'Автоматическое закрытие "Подвисших" сессий', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'653A7AA8D1EC4F418FDF91E53ACED1BA', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'RowsToInstances', 'Получить массив объектов, которые содержат строки', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'68DD82A28891404CB0F2BE69CAEE3DEA', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'CheckVerbRight', 'Проверка прав на действие', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'757FBD6854AD3748A6A7A8DDE3B2992A', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'MTZLogin', 'Открытие сессии', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'76E8EEA2D854ED4AB124775F5DA2D911', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'VBAddObjByRef', 'Для раздела, в котором есть поле - ссылка, создает/выбирает объект без открытия окна редактирования ссылки', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'77CFE773BAE6B442A03B4F67EEDEF4F1', '2012-01-20 14:40:22', '2017-12-25 16:21:02', NULL, NULL, NULL, 'AdminUnlockAll', 'Административная функция для \r\nразблокировки документов', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'942A498D78707D4B9847AEFC27B4855D', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'RowToInstance', 'Поиск объекта для некоторой строки', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'95D72979C5415C4ABFF2A4E677A62143', '2012-01-20 14:40:23', '2017-12-25 16:21:02', NULL, NULL, NULL, 'SessionTouch', 'Поддержание сессии', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'AA6D6E6CD25CC348A2AAA24539B45A49', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'GetServerTime', 'текущее время сервера', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'AF85990CEE27D54AA564635E0BFFC9D5', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'TestNumber', 'Проверить наличие номера в нумераторе', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B4383B8DF9C4AC458ECEBF3BE39D8100', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'Logout', 'Завершение сессии', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B44F91D85D6B1A49A72F985617727583', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'WFFuncName', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B9334E07C91EA14A8300E98C73D55FE2', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'Login', 'Открытие сессии', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B9409AD474614649A81DB7FE105C3546', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'AdminUnlock', 'Административная функция для \r\nразблокировки документов', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B9B78F5BB1D8A04C90AF55F83D1A6E5D', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBMakeReport', 'Создание отчета из разных карточек', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DBF6E8946A10DC44948386C801798FF0', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBOpenRef', 'открытие карточки по идентификатору', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DC5699060533EF45933191CE323B5942', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'WFDefName', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E68540AA5B74374A8EC465D99A653966', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBRemoveSymmetricObjRef', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E89AA4494BDB294380FB801A24C9D7AF', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'ClearNumerators', 'Удалить отвязанные номера из нумератора', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'EBBDE679D5912E4B81F73E091FB65E3A', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBCheckDescrs', 'Проверка наличия коллекции характеристик', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F0D654042486874894B064FBC74775E6', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'SessionVerify', 'Проверка состояния сессии', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F56A375B9B336543BA80785E28BCF4DA', '2012-01-20 14:40:23', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBUpdateSymmetricObjRef', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F76CEC31BD8DFE4EBF124D168F653D34', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBApplySecurity', 'Применить стиль защиты для объекта\r\nПредназначен для  каталога клиентов', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FDD4DE795C04F845AC792E5A3D956D97', '2012-01-20 14:40:22', '2017-12-25 16:21:03', NULL, NULL, NULL, 'VBMigrateRight', 'Передать права объекту контактное лицо\r\nот объекта клиент', NULL);
COMMIT;

-- 
-- Вывод данных для таблицы structrestriction
--
BEGIN;
INSERT INTO structrestriction VALUES
(x'1797BDCBD643404A9128F9E8AD7F8309', x'27D20D1F17D4E44183A728286F3D1496', '2012-06-15 12:09:09', '2017-12-25 16:21:14', NULL, NULL, NULL, x'003476C234BE3340B4B5756CD5252CEA', 0, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'87B2634A78B0E44F98234E0C12ED4E43', '2012-07-10 16:26:54', '2017-12-25 16:21:14', NULL, NULL, NULL, x'2CDE4EEF8B45AB4EAFE366AA500081DA', 0, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'A1DB965BB1B7334EA354E3ABC3CEE931', '2012-07-10 16:26:54', '2017-12-25 16:21:15', NULL, NULL, NULL, x'EDAB37F8E9CA0A439DEE519DBB1B79D5', 0, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'C0F2C4856F331540BA4B9CE3B69871D3', '2012-07-10 16:26:54', '2017-12-25 16:21:15', NULL, NULL, NULL, x'9F3507D4042269499789956215E456E6', 0, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'CE9FE65717842549B31DD271E2904B55', '2012-07-10 16:26:54', '2017-12-25 16:21:15', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 0, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'D1BFF08356E2EB48A4B6AAC3C8725087', '2012-07-10 16:26:54', '2017-12-25 16:21:15', NULL, NULL, NULL, x'CE37F730811C7246B0F96E5BF4B15971', 0, 0, 0, 0);
COMMIT;

-- 
-- Вывод данных для таблицы syslog
--
-- Таблица survey.syslog не содержит данных

-- 
-- Вывод данных для таблицы sysoptions
--
BEGIN;
INSERT INTO sysoptions VALUES
(x'02A150EAE5E74E49B10CFCCD5AD6EEE0', 'a282dd68-9188-4c40-b0f2-be69caee3dea', 'checkverbright', 'methodname'),
(x'03C588695A7EA74081E42AA55196D29A', 'iu_u_def', 'bpu', 'struct_type'),
(x'05BA7ABE9D26A549A54A16F9C79FCBA1', 'vk_usr', 'autovk_usr', 'defview'),
(x'06BD6145D662F64287D642045DD04BC3', 'partmenu', 'part', 'parent'),
(x'085EB4D2044D8542970A123D3AC6C9D6', 'the_session', 'autothe_session', 'defview'),
(x'09566E7F3C1CE948B9181B73CBE83DDD', 'rptfields', 'rptstruct', 'parent'),
(x'097F716EC89BEE46A6566581A8B3B353', 'epfilterlink', 'entrypoints', 'parent'),
(x'0A5B9702FB0E1043802C76AA5F1BA5E9', 'iu_rcfg_docmode', 'autoiu_rcfg_docmode', 'defview'),
(x'0B12B9F0BD4C2A4795983B82037AA307', 'vk_platform', 'vdapl', 'struct_type'),
(x'0D8713B8147DC144A4237021580B7927', 'users', 'mtzusers', 'struct_type'),
(x'0DD69B812DA28A49801FE97F87155154', 'vk_platform', 'autovk_platform', 'defview'),
(x'0DDF1B4D503B4F478D55FE7F08C3C445', 'vk_adsovdemografy', 'autovk_adsovdemografy', 'defview'),
(x'0E1FB1BF53A9FB489C1860ACAA0A43EA', 'methodrestriction', 'objectmode', 'parent'),
(x'0E4F052DA9B46746815563D7F2CEABF7', 'vk_category', 'autovk_category', 'defview'),
(x'0F1B650332A79A41B85887CF253946ED', 'fieldtypemap', 'fieldtype', 'parent'),
(x'0F4BBAC3D39DB34080A3B2E3846C70D5', 'field', 'mtzmetamodel', 'struct_type'),
(x'0F6F4393F574FD4BA0B5726FA9C38785', 'constraintfield', 'autoconstraintfield', 'defview'),
(x'0FB6C1933117F340B88E9F138E0DDDE8', 'methodrestriction', 'mtzmetamodel', 'struct_type'),
(x'139F4BFBF286B448ACB04A07DD045342', 'reports', 'mtzrprt', 'struct_type'),
(x'13AC0B1B9EFFB245A7EEE09C695157B2', 'partview_lnk', 'mtzmetamodel', 'struct_type'),
(x'14C4006D257CF74C9208C2D0D601CF23', 'armjrnladd', 'armjournal', 'parent'),
(x'1508638A7F28BB4E85742398F019013D', 'genreference', 'autogenreference', 'defview'),
(x'15549F8ECE1DD1409FF2D3D37860AD22', 'vk_os', 'autovk_os', 'defview'),
(x'15C33E07870AB74F9842CE60EE5B34F5', 'objectmode', 'autoobjectmode', 'defview'),
(x'15C878F238FE4742A36DE537850813F5', '6c6e6daa-5cd2-48c3-a2aa-a24539b45a49', 'getservertime', 'methodname'),
(x'1633025768B57E43946D4CE073A6D8FF', '477b8d25-4ff7-491a-a0b0-d3437ec16957', 'makenewfolderec', 'methodname'),
(x'17C3B023DA143D47B1AD99EFC84CD196', 'genmanualcode', 'generator_target', 'parent'),
(x'181E059BD8B91C4480A9CF19BEE9218C', '0c9985af-27ee-4ad5-a564-635e0bffc9d5', 'testnumber', 'methodname'),
(x'19B3A61A4720064CA7947AC792B7F351', 'extenderinterface', 'autoextenderinterface', 'defview'),
(x'19BB2C2C63FED54FB063C72A374CB948', 'groupuser', 'groups', 'parent'),
(x'1A021584C49B544FB789005A6FCC0DE1', 'vk_trginfo', 'autovk_trginfo', 'defview'),
(x'1A5723D0E7A8204BA5906C358A4BCFB1', 'objstatus', 'objecttype', 'parent'),
(x'1E74B0243384434CAF17AE1DA675FE8D', '2b0cee5c-7ffa-490d-9f5a-b5e8692551dd', 'erasenumber', 'methodname'),
(x'1E771D7C0DC9094C84111A69CA9534B3', 'vk_rotads', 'autovk_rotads', 'defview'),
(x'22FA8B11436D124EB596F7117EC035E5', 'armjrnlrun', 'mtzwp', 'struct_type'),
(x'23284BFEF320F34ABEB9B1290971C284', 'armjrnlrep', 'mtzwp', 'struct_type'),
(x'238ED7DFD9865541861A47547EEE75C1', 'validator', 'autovalidator', 'defview'),
(x'23AD21B4A723764B8B53505DF49EA5D0', 'iu_rcfg_def', 'autoiu_rcfg_def', 'defview'),
(x'252DCCC163B00D4594A599FEB95EAA64', 'vk_cab', 'autovk_cab', 'defview'),
(x'257633D619BC9646B801AC3C33C07535', '5b376af5-339b-4365-ba80-785e28bcf4da', 'vbupdatesymmetricobjref', 'methodname'),
(x'25EBD95488C6F04388FDA57A943377FE', 'd49a40b9-6174-4946-a81d-b7fe105c3546', 'adminunlock', 'methodname'),
(x'26AA0B2354A33C4AB07DFBF422AD4F16', 'epfilterlink', 'mtzwp', 'struct_type'),
(x'277206E89A186B44B6A3695D9576563B', 'vk_religion', 'vdrel', 'struct_type'),
(x'2788919485B92D4BB4D8C98BB4DB7813', 'vk_camovstat', 'vkcam', 'struct_type'),
(x'27FFB24F2B034A4A9647E019B34E2060', 'vk_browser', 'autovk_browser', 'defview'),
(x'2A0AE6489C0D074890A57093E6975C04', 'sharedmethod', 'autosharedmethod', 'defview'),
(x'2B06466637F1BB4BB68743CD0AA269BC', 'groupuser', 'mtzusers', 'struct_type'),
(x'2BA1E6DBCD83C744AB0EE849AC664C6C', 'vk_country', 'vdcn', 'struct_type'),
(x'2BA798623B243E43985120430408CC60', 'fieldrestriction', 'autofieldrestriction', 'defview'),
(x'2EF7540737FE2D4DBFEF7A760821751E', 'fieldvalidator', 'mtzmetamodel', 'struct_type'),
(x'2F2C88FFDF13544BA96D1CCB78F75A04', 'validator', 'mtzmetamodel', 'struct_type'),
(x'2FFEAB4FA8729F46AC56D48B4A1522CC', 'objstatus', 'mtzmetamodel', 'struct_type'),
(x'31C857F1D270FF48A8CA9BAD777D10F2', 'vk_adsowner', 'autovk_adsowner', 'defview'),
(x'32AD4CBDD472A640B8BFE163E2DBD948', 'part', 'mtzmetamodel', 'struct_type'),
(x'32B2A1B994BB2C46A984DFD0C9C19FAE', 'parameters', 'script', 'parent'),
(x'334EA554D331E146BC4E9AE9B60B6661', 'fieldmenu', 'autofieldmenu', 'defview'),
(x'3534FCB265190C42A4282929308447AC', 'the_session', 'mtzsystem', 'struct_type'),
(x'36A5A0BD49619647836BA8B3D4FF8051', 'iu_crole', 'autoiu_crole', 'defview'),
(x'370F74A397AB844AA7C7EC79F616C898', 'vk_town', 'vdt', 'struct_type'),
(x'37DE473A43B07742A9B36D7AE228B78D', 'generator_target', 'autogenerator_target', 'defview'),
(x'38430166CD365C48A8B901C2220E51E4', 'dinamicfilterscript', 'autodinamicfilterscript', 'defview'),
(x'385AF6CFCAFC0B4FA66033D4A6388405', 'script', 'sharedmethod', 'parent'),
(x'388E77924C055F46BED7237654942DA9', 'jcolumnsource', 'autojcolumnsource', 'defview'),
(x'38C1002D9A71DE47B7A069689E240659', 'genreference', 'generator_target', 'parent'),
(x'398FB8AD026F354EACC9C1600139A29E', 'vk_prjowner', 'autovk_prjowner', 'defview'),
(x'3B599BA4C211CF4A87CF9C1141CA4FD8', 'typemenu', 'mtzmetamodel', 'struct_type'),
(x'3B79775AD62130489311EEDB61476B95', '73be205e-f7ea-4a5a-a41f-85e25ca6511e', 'sessioncheckpoint', 'methodname'),
(x'3CD3E124D1D3FB4D8C0727BB9A91FD23', 'vk_camstat', 'autovk_camstat', 'defview'),
(x'3E3F17B6D282544EB7ACD1D07D7AE9B6', 'dinamicfilterscript', 'mtzmetamodel', 'struct_type'),
(x'3E8181F546CD2F4C9827CB5E6B76C7CA', 'objecttype', 'mtzmetamodel', 'struct_type'),
(x'3F07B05D8D4A8C479DF24ACF5F17D89A', 'fieldtype', 'mtzmetamodel', 'struct_type'),
(x'40182A0746870742B1458B2C4CCA1921', 'vk_paytype', 'autovk_paytype', 'defview'),
(x'40BA3B2CCA47774384ECD17262021159', 'mtzapp', 'mtzmetamodel', 'struct_type'),
(x'40F1B0F2020AF34A8F28F58618C97903', 'filters', 'mtzfltr', 'struct_type'),
(x'413C09280E695547B538654B7806899D', 'typemenu', 'objecttype', 'parent'),
(x'421B3DF4F0AB7B4B8C03E24B89E8CAAD', 'vk_cab', 'vkusr', 'struct_type'),
(x'42FC8BA60BBA9F4EB43CC22F6A887134', 'sharedmethod', 'mtzmetamodel', 'struct_type'),
(x'43108A8DF079BD42820644CAD39C4B6E', 'users', 'autousers', 'defview'),
(x'433091C2D1212A47AD5002D5FC03AFE7', 'sysrefcache', 'mtzsystem', 'struct_type'),
(x'4356A49DC16CEE499817CB700E4870CA', 'vk_town', 'autovk_town', 'defview'),
(x'4448DF63FDE5874F9476FE864FCE7848', 'genmanualcode', 'autogenmanualcode', 'defview'),
(x'4500C86FF940AA40A95EF6227C63D3EE', 'armjrnladd', 'autoarmjrnladd', 'defview'),
(x'45AEB9CF1E07B04780F6FAA5E2C052B6', 'vk_rotinfo', 'autovk_rotinfo', 'defview'),
(x'45B53A21744CAF469A55B2E227517CFB', 'a2eee876-54d8-4aed-b124-775f5da2d911', 'vbaddobjbyref', 'methodname'),
(x'46971980066C7446847C6828F00652EC', 'armjrnlrep', 'autoarmjrnlrep', 'defview'),
(x'47F806C965657840BB5D5E2679C670EE', 'validator', 'part', 'parent'),
(x'4863BB6C35F8574298CB829B1493E6D3', '49a49ae8-db4b-4329-80fb-801a24c9d7af', 'clearnumerators', 'methodname'),
(x'4AAC6E337EB3404EBA4C79E3FB7ED53E', '069956dc-3305-45ef-9331-91ce323b5942', 'wfdefname', 'methodname'),
(x'4B382BC2333A0D4B98756E073676323F', 'fieldtypemap', 'mtzmetamodel', 'struct_type'),
(x'4B3D8A65991995439AF82F372B697940', 'vk_camowner', 'vkcam', 'struct_type'),
(x'4B4FDE782F992B4796CA2CC506B8736D', 'fieldmenu', 'field', 'parent'),
(x'4CE153DEB4DEA04E858901AC3FC4016F', 'instancevalidator', 'objecttype', 'parent'),
(x'4DC24BE367E57647A46CF597BA854A43', 'objecttype', 'autoobjecttype', 'defview'),
(x'4E8DD4466F2B9648B7C5364F99ED481A', 'iu_crole', 'bpdr', 'struct_type'),
(x'50573F205D0E2E4EB74B30C866A75E1F', 'constraintfield', 'uniqueconstraint', 'parent'),
(x'52B34D19C647B446960542EA3807EE16', 'armjournal', 'mtzwp', 'struct_type'),
(x'534286A73FA06F418605E1FAFD21DF50', 'num_head', 'stdnumerator', 'struct_type'),
(x'53555C4C818B874BB63A0AE9D1D93761', 'iu_rcfg_mod', 'bprcfg', 'struct_type'),
(x'537FC34F123D754D9E202EFAD88BD726', 'sysrefcache', 'autosysrefcache', 'defview'),
(x'54AB3C1C31DD544CBA2F6FF5E3439A42', 'fieldrestriction', 'objectmode', 'parent');
COMMIT;
BEGIN;
INSERT INTO sysoptions VALUES
(x'54DF0CF8D5747841BD8116ED99EB01CC', 'partparammap', 'mtzmetamodel', 'struct_type'),
(x'5572A1EC3F945849ABA9A12F191AF25D', 'vk_trgowner', 'autovk_trgowner', 'defview'),
(x'565B8F2FF477C3459C5C991677BF009C', 'fieldtypemap', 'autofieldtypemap', 'defview'),
(x'56CE939F98588047B760FDCA4ED2DAB4', '0454d6f0-8624-4887-94b0-64fbc74775e6', 'sessionverify', 'methodname'),
(x'588BAE34B75BE344A6C5735223814596', 'fieldexpression', 'mtzmetamodel', 'struct_type'),
(x'59C7CCFA6A7C3A4AA5B2C9CE835E1C0A', 'objectmode', 'mtzmetamodel', 'struct_type'),
(x'5A6637CB5574134C9EB16CA15DB04D22', 'rptformula', 'mtzrprt', 'struct_type'),
(x'5A875EA5716C074DAFB93580EC643380', 'fieldparammap', 'autofieldparammap', 'defview'),
(x'5B6C20E86198CE4F9C732EC4E2516BE5', 'vk_adstat', 'autovk_adstat', 'defview'),
(x'5BBECF4FC5A3994786B5CFDD78580A9A', 'structrestriction', 'objectmode', 'parent'),
(x'5D1894F0E6073344927CE8161D4C42C5', 'fieldmenu', 'mtzmetamodel', 'struct_type'),
(x'5D92C2849FB2794487789A32AB18CE55', 'partmenu', 'mtzmetamodel', 'struct_type'),
(x'5DCC5B28D1DA2A478AA6FAF06C684063', 'uniqueconstraint', 'part', 'parent'),
(x'5DDF5DED6834FD499A9F6BC231A24A42', 'fileterfield', 'autofileterfield', 'defview'),
(x'5E2CF03E518A434A9D0C8E75E00D2F79', '79ded4fd-045c-45f8-ac79-2e5a3d956d97', 'vbmigrateright', 'methodname'),
(x'5E571B0E5F2CE643A601EEA8AE0BDB84', 'syslog', 'autosyslog', 'defview'),
(x'5E742430B69C0A408645CA1A7AA188BC', 'partview_lnk', 'autopartview_lnk', 'defview'),
(x'5F6F139C07B5714E9DF0F461AD10106C', 'num_zones', 'autonum_zones', 'defview'),
(x'5FFD36F4768C7F4C9A9450536A58E3A4', 'structrestriction', 'mtzmetamodel', 'struct_type'),
(x'60A78D87BE09A740B2CBCB14224EDF20', 'localizeinfo', 'mtzmetamodel', 'struct_type'),
(x'61F9FB37D1D61240B4584DC7C27EE021', 'fieldsrcdef', 'autofieldsrcdef', 'defview'),
(x'6219FD2F18AAB94C8B2D64248176F704', 'vk_adsdaydemografy', 'autovk_adsdaydemografy', 'defview'),
(x'65124352FDECEF4A944861A1BFCC8785', 'filters', 'autofilters', 'defview'),
(x'6614FEC09C41A0499F8E427EDCA46E48', '31ec6cf7-8dbd-4efe-bf12-4d168f653d34', 'vbapplysecurity', 'methodname'),
(x'6632E13277984C449DFB993836F87F5C', '074e33b9-1ec9-4aa1-8300-e98c73d55fe2', 'login', 'methodname'),
(x'66F2337975DC774C9F94A4C1D7570FF6', 'vk_os', 'vdos', 'struct_type'),
(x'6759E5A1B344E047976D7E9F9B28127D', 'vk_brkowner', 'vkbrk', 'struct_type'),
(x'690DAE55B46B564F86B43E6833B0379F', 'journalsrc', 'autojournalsrc', 'defview'),
(x'697AF55CA64A074C82D645CF969CA169', 'vk_adstate', 'vdast', 'struct_type'),
(x'6AC142C0F7B5CB48BBBBA00BE84760CF', 'vk_device', 'vddev', 'struct_type'),
(x'6C2F8B4FE51BAA4A9D615CD444BD2453', 'partmenu', 'autopartmenu', 'defview'),
(x'6D5F9D449A8FD84E881504CA44B44BDD', 'vk_adinfo', 'vkads', 'struct_type'),
(x'6DF2BC5936E9BE4399D243661ADEA40C', 'rptstruct', 'mtzrprt', 'struct_type'),
(x'6ED035E06AD0E34DB5FDE2BEBF878C0A', 'num_values', 'num_zones', 'parent'),
(x'6F40F54359F5244AA7F672A3F0CB663D', 'vk_prj', 'vkprj', 'struct_type'),
(x'6FABE0EAE4624544AA63826EFA5AE219', '5b8fb7b9-d8b1-4ca0-90af-55f83d1a6e5d', 'vbmakereport', 'methodname'),
(x'6FAF2BC038624D41B5275A7387772BDC', 'fieldvalidator', 'autofieldvalidator', 'defview'),
(x'71D2657F3A5EE84B92D2D26C56E35F94', 'localizeinfo', 'autolocalizeinfo', 'defview'),
(x'726DCE25D4B54548B35ED006F8C8AA68', 'vk_adstat', 'vkads', 'struct_type'),
(x'72DB4CEC5FFBD848B98DD28E9200633E', 'fieldexpression', 'autofieldexpression', 'defview'),
(x'73162D4E2AA729479688A21B075EAD28', 'uniqueconstraint', 'mtzmetamodel', 'struct_type'),
(x'73FD06D48AA0264A84D3898DED7E12FA', 'vk_brkinfo', 'autovk_brkinfo', 'defview'),
(x'74056AEF02E557429D328413C338E7FD', 'vk_trgfiles', 'vktrg', 'struct_type'),
(x'741FA4F19FD8264486B2C126BA8C6E50', 'iu_rcfg_docmode', 'bprcfg', 'struct_type'),
(x'7431544532AFC8488BD93D59BA0D04CD', 'parentpackage', 'mtzapp', 'parent'),
(x'745F73F7EC4F164BB5C4AA93371BA47D', 'vk_position', 'vdpos', 'struct_type'),
(x'75A728162FA1C24BA777D4688FA7D6BC', 'fldextenders', 'autofldextenders', 'defview'),
(x'76F496EF4E600B4BB5F9AEC7EBFAF5D5', 'methodrestriction', 'automethodrestriction', 'defview'),
(x'785D5BFCF3E5B74090BB89E42B4217D5', 'bpc_info', 'bpc', 'struct_type'),
(x'790800FF51364C4C8F43CA89812BB074', 'fieldsrcdef', 'mtzmetamodel', 'struct_type'),
(x'79B0850A4493BD4F9E0CB39B73D3491C', 'rptfields', 'mtzrprt', 'struct_type'),
(x'7A6AB1E1648EF64D9376B17CFA9F1FD9', 'groupuser', 'autogroupuser', 'defview'),
(x'7AF38A6113EC054589724608650B9F20', 'vk_matrialstatus', 'vdmstat', 'struct_type'),
(x'7B10F3196F7E2A43B13FE56B5282A943', 'd8914fb4-6b5d-491a-a72f-985617727583', 'wffuncname', 'methodname'),
(x'7B44601484E95348AC99D8F7A4960769', 'vk_prjowner', 'vkprj', 'struct_type'),
(x'7C539EC5C71F9B4A831013510AEF7214', 'vk_adsowner', 'vkads', 'struct_type'),
(x'7C64E7A70B4B5249ACFE251F6D2B1604', 'gencontrols', 'mtzmetamodel', 'struct_type'),
(x'7CAA8819923A494C9BFDB2A74719D8D3', 'vk_taskmsg', 'autovk_taskmsg', 'defview'),
(x'7CF8E9ECF5B4DD44B5E3159089332D53', 'genmanualcode', 'mtzmetamodel', 'struct_type'),
(x'7EB443A3E5D71742A73C2FFA67BB0879', 'fldextenders', 'field', 'parent'),
(x'7FFBE191A22487459FF3A6F306B104FE', 'fieldvalidator', 'field', 'parent'),
(x'7FFDB0CC1DFB6A4C99C71A8565ABF123', 'parameters', 'mtzmetamodel', 'struct_type'),
(x'8066A1A6BB02D048AF76FCEE15AB2526', 'vk_country', 'autovk_country', 'defview'),
(x'8180FC7EAE7E0F46B9DDA28699E94FFB', 'vk_taskowner', 'vktsk', 'struct_type'),
(x'825495FE30F38648A5829121DB123703', 'vk_camovstat', 'autovk_camovstat', 'defview'),
(x'8274E78BC2D5714BB32E5279E431EA06', 'mtzextrel', 'automtzextrel', 'defview'),
(x'82E5BC5A2D230845A4CFDD00B3804E94', 'vk_adovstat', 'autovk_adovstat', 'defview'),
(x'85217664DAFE104AB0CD580803560BD0', 'vk_prj', 'autovk_prj', 'defview'),
(x'862F13016901E949AC2483AA43601D71', 'iu_rcfg_mod', 'autoiu_rcfg_mod', 'defview'),
(x'87A64FB8E41AC64C81571D259FE9D894', 'armtypes', 'mtzwp', 'struct_type'),
(x'884A0ABBFD6B4543BBE8414A4800598C', 'vk_usr', 'vkusr', 'struct_type'),
(x'8C36A3985617B8459E3B26535557518B', '7929d795-41c5-4a5c-bff2-a4e677a62143', 'sessiontouch', 'methodname'),
(x'8C771A52021D1A418AF58971DEF082A7', 'script', 'mtzmetamodel', 'struct_type'),
(x'8CBBA314DBD0F64B8A6184ED86439985', 'vk_brkowner', 'autovk_brkowner', 'defview'),
(x'8F243727883E0246990DA345B3145BD0', 'enumitem', 'autoenumitem', 'defview'),
(x'90207C5EB1F4CB43A1D2A5F0056D571C', 'vk_camowner', 'autovk_camowner', 'defview'),
(x'9058FEE345350C49B1FC418BD2B92EA9', '2bb30818-90ed-4627-8abb-85b3fba46750', 'vbnewpayout', 'methodname'),
(x'90F151471D6BE2488B7FB50ADC81DBD3', 'fieldtype', 'autofieldtype', 'defview'),
(x'91C3CE4807574A4AA5673DB25E66A9FE', 'typemenu', 'autotypemenu', 'defview'),
(x'91F9FF18B3EB804B851453146D46F1D6', 'objectmode', 'objecttype', 'parent'),
(x'92F52654D2E8C1448CEFF6FECC621FDA', 'genpackage', 'autogenpackage', 'defview'),
(x'93175FF9A210094C8384FFE09844B2E5', 'fieldexpression', 'field', 'parent'),
(x'932D6444695C024ABC7BCADFC586D4B8', 'field', 'part', 'parent'),
(x'93E0FD7D50F41547967AF2BA9E9AEDC3', '42a1a436-8aa2-4f1f-999b-6680dff514de', 'vbsavehistory', 'methodname'),
(x'943D730B52C50B45ADE568AF611CCBBB', 'vk_region', 'vdrg', 'struct_type'),
(x'9772C1467907D946986C28F0EFEB1102', 'iu_int_modules', 'autoiu_int_modules', 'defview'),
(x'98751A747BEC4A4E9354A7CF846CFD29', 'vk_rotowner', 'autovk_rotowner', 'defview'),
(x'9B1FEC4BFC89D84188CBA953FA4E706C', 'workplace', 'mtzwp', 'struct_type'),
(x'9C967B3203E4C547952E4606A51AC90B', 'vk_taskowner', 'autovk_taskowner', 'defview'),
(x'9CD63C2006A98E468842CBC8D1967C9E', 'vk_taskinfo', 'autovk_taskinfo', 'defview'),
(x'9CDA643F769A9F4998D45CE4D5482620', 'vk_adsdaydemografy', 'vkads', 'struct_type'),
(x'9D2A6DFFC72B0944A24986A512CFBA7A', 'num_zones', 'stdnumerator', 'struct_type'),
(x'A147DF0A9F6F864E983F20046C09A8DE', 'entrypoints', 'mtzwp', 'struct_type'),
(x'A1BAA3605C60DE45AC61729DDE1FEE2E', 'vk_trginfo', 'vktrg', 'struct_type'),
(x'A38DFD2F3328C3449DDFC03CBCBEE742', 'vk_adinfo', 'autovk_adinfo', 'defview'),
(x'A3E162FB4F7B3C4A9ACACC1F92BDF540', 'mtzapp', 'automtzapp', 'defview'),
(x'A663B2FBE743D545A48476D05F2B8C99', 'jcolumnsource', 'mtzjrnl', 'struct_type'),
(x'A6ECDB1752BDB843B95C6BD8699B9394', 'vk_adformat', 'vdfrmt', 'struct_type'),
(x'A6ED58713D98444C810F215384920D5E', 'partview', 'part', 'parent'),
(x'A7285FCFA2855948AC0FF1056D4761C1', 'vk_brkinfo', 'vkbrk', 'struct_type');
COMMIT;
BEGIN;
INSERT INTO sysoptions VALUES
(x'A78505543BBE9F44955938959AB08962', 'vk_tasktype', 'autovk_tasktype', 'defview'),
(x'A7CAC0F7F6E61A4AA5D020DEC6D849E0', 'partparammap', 'autopartparammap', 'defview'),
(x'A85B041A9D7D41409C2DE05F523F856A', 'vk_browser', 'vdbrw', 'struct_type'),
(x'A9324590B84B1644A2E31F28BA12E121', 'vk_castate', 'vdcst', 'struct_type'),
(x'A9ABA8F0C8F3884085D8BCF04E0463EB', 'vk_rotowner', 'vkrot', 'struct_type'),
(x'A9C0ACC8BFEB3C4D90BD8B2AFF66AF1E', 'extenderinterface', 'part', 'parent'),
(x'AA0401F0B34AE04E89C2DE87FA87D4A2', 'vk_device', 'autovk_device', 'defview'),
(x'AA1D5F2876F0FA4D8B5F119EA4189BE0', 'vk_trgowner', 'vktrg', 'struct_type'),
(x'AA237BD106FFD64CBF68523814DF248C', 'epfilterlink', 'autoepfilterlink', 'defview'),
(x'AC3B267EFBAB654AA1D28A3354239A6D', 'vk_category', 'vdcat', 'struct_type'),
(x'AC7893E7AD6280468B5D820960ED1A94', 'vk_rotads', 'vkrot', 'struct_type'),
(x'ACAF0B622558384B869757374889B729', 'parentpackage', 'mtzmetamodel', 'struct_type'),
(x'AD4B7F5A83611E44BE94564B02294956', 'vk_adstrg', 'vkads', 'struct_type'),
(x'AD60899A6136124EB070CF86416D1273', '8d492a94-7078-4b7d-9847-aefc27b4855d', 'rowtoinstance', 'methodname'),
(x'ADB3DE3BE805C14D8BED8AEAECBF3360', 'part', 'objecttype', 'parent'),
(x'ADE68DFF241084489EF3D0C7A32EAD1B', 'gencontrols', 'generator_target', 'parent'),
(x'AEBA04BEAAFD0141ACFB203C213487A6', 'fieldparammap', 'fieldmenu', 'parent'),
(x'B018CA1DD078F14AA8CCE53846AFBA59', 'constraintfield', 'mtzmetamodel', 'struct_type'),
(x'B36CB6BFA0209A43A5DAD78C5E6D123D', 'gencontrols', 'autogencontrols', 'defview'),
(x'B36CE090518C0146B7372B7CCBAFE161', '73e7cf77-e6ba-42b4-a03b-4f67eedef4f1', 'adminunlockall', 'methodname'),
(x'B4204E9597E4A7468243D8A48031E41D', 'vk_adovstat', 'vkads', 'struct_type'),
(x'B4845580FC71F346BF4346BCBA8F0398', 'a87a3a65-ecd1-414f-8fdf-91e53aced1ba', 'rowstoinstances', 'methodname'),
(x'B4E7E36E49F02E44B388568C68856530', 'vk_age', 'vdage', 'struct_type'),
(x'B6203B9834641042A6CD7F295015D8E6', 'fileterfield', 'mtzfltr', 'struct_type'),
(x'B73DD1A93BF1784C8790D263D5A970ED', 'genpackage', 'mtzmetamodel', 'struct_type'),
(x'B7D2FF2637389D4799CA71F79386307B', 'vk_tasktype', 'vdtt', 'struct_type'),
(x'B8A5116D03816D4EB9ABE3D47CB362C5', 'partview_lnk', 'partview', 'parent'),
(x'BA9A671AC425434D977DD3B66AFBFABA', 'filterfieldgroup', 'autofilterfieldgroup', 'defview'),
(x'BB5CBB0364B4AD45A37148CD9DC8DB8C', 'partparammap', 'partmenu', 'parent'),
(x'BBAD9908DBC66D49913C33D31FDF1D1C', '61393545-abf7-46f7-82f3-9b7e610dd9c0', 'vbupdateobjname', 'methodname'),
(x'BBF7DCF3D8B91E4293995E77BFF2678A', 'armjrnlrep', 'armjournal', 'parent'),
(x'BC67B7A0DEC2EC4F8100040FCED983E3', 'iu_int_modules', 'bpdi', 'struct_type'),
(x'BC6A31C7F0870A44BE14BC5800E9CA83', '897d3b55-6599-42db-aa1c-54bab3d2f597', 'getnewnumber', 'methodname'),
(x'BC8B79F7F30B0F4DAA7EA89DADC64370', '8d3b38b4-c4f9-45ac-8ece-bf3be39d8100', 'logout', 'methodname'),
(x'BD89BEF6150D5C45AD1B708F0F942F39', 'parentpackage', 'autoparentpackage', 'defview'),
(x'BE57E51C9F07F345B39615CFEADF301B', 'filterfieldgroup', 'mtzfltr', 'struct_type'),
(x'BE8F9793A342044C9D1F400172FD5B40', 'vk_taskmsg', 'vktsk', 'struct_type'),
(x'BEB593AB4706AC459A9F3F5FA3FCF205', 'vk_paytype', 'vdpt', 'struct_type'),
(x'C2D5A65F56F6C444BBCBCC8A039DA48A', 'vk_adsutm', 'vkads', 'struct_type'),
(x'C3379653D1D26548B1AD794A7E151B2C', '9181af0d-f0d0-4539-8cdb-67cdb500c41e', 'getfreenumber', 'methodname'),
(x'C37EC05E3D7EE642A488EE26AF3FEABA', 'partview', 'autopartview', 'defview'),
(x'C3DDAD50814EAC428E4054AD960B2298', 'vk_adstrg', 'autovk_adstrg', 'defview'),
(x'C5CB32B8EA39384B9E8161AFA71196EC', 'mtzextrel', 'mtzext', 'struct_type'),
(x'C6774D544C48554E9DDD7462CBCADDC2', 'num_head', 'autonum_head', 'defview'),
(x'C71D319D91074E4CB13F6C26ECC9A605', 'mtzext_def', 'automtzext_def', 'defview'),
(x'C7B9392F1035824689DA749056AA2688', 'armjrnladd', 'mtzwp', 'struct_type'),
(x'C818A1D1A18BF2459BC7C4C3C4BF1A1E', 'fileterfield', 'filterfieldgroup', 'parent'),
(x'C82A829F721301499126B81DA10A9AF0', 'vk_camp', 'autovk_camp', 'defview'),
(x'C905C79D30362141AA63E5C2ABBA055B', 'fieldparammap', 'mtzmetamodel', 'struct_type'),
(x'C912025A5C2DD943A89B38733FD2767D', 'groups', 'autogroups', 'defview'),
(x'C939B21107DA38449BFD7B47CC9E6D66', 'nextstate', 'objstatus', 'parent'),
(x'C9C5CEE79251B34F80C7374EB7EC81FE', '4fb59d1a-0123-47d3-9f4f-e12085c5d074', 'vbupdateitemname', 'methodname'),
(x'CAECBB5080D589429743C71F73B38EC9', 'vk_adstate', 'autovk_adstate', 'defview'),
(x'CBCFE64B9ACE7F498CE77CA155584D08', 'journalsrc', 'mtzjrnl', 'struct_type'),
(x'CD7A4ED2F9DCB045BDA9157B5638CB56', 'fieldsrcdef', 'field', 'parent'),
(x'CD8BA41FBC3F604791569FBB1678BABF', 'parameters', 'autoparameters', 'defview'),
(x'CD9366449CA1D84D8EEC618D08363868', 'mtzext_def', 'mtzext', 'struct_type'),
(x'CE5DA7A7AF6E6444BB5F65E9D604C8A4', 'structrestriction', 'autostructrestriction', 'defview'),
(x'CEBC0D183027FF42B05849271D147789', 'jcolumnsource', 'journalcolumn', 'parent'),
(x'CF406109AA3FF4458F62AA6722B66B38', 'vk_taskinfo', 'vktsk', 'struct_type'),
(x'CF6F3BA174554F4B9E28C4EB6F066373', '79e6bdeb-91d5-4b2e-81f7-3e091fb65e3a', 'vbcheckdescrs', 'methodname'),
(x'D055B9700CE5C94BA0F1A16E68BD7196', 'vk_trgfiles', 'autovk_trgfiles', 'defview'),
(x'D0FA79E50CA84B42B482A650CBDB8FF2', 'vk_interest', 'autovk_interest', 'defview'),
(x'D139E930C6F2224F911D3BF182749BA2', 'viewcolumn', 'autoviewcolumn', 'defview'),
(x'D1AA91A31D6FD24195C9B47F295221F3', 'vk_age', 'autovk_age', 'defview'),
(x'D271D5B4C77CE74B81782A8B747A329E', 'rptformula', 'autorptformula', 'defview'),
(x'D281150A2D8C9B4E81E5CF432E28F4AA', 'workplace', 'autoworkplace', 'defview'),
(x'D2F648D85929CE438F647155AE119A05', 'syslog', 'mtzsystem', 'struct_type'),
(x'D36FF8743C29EC4F906756EFA66B3B54', 'rptfields', 'autorptfields', 'defview'),
(x'D4EA4EC6619D534B9949E794ED192294', 'vk_position', 'autovk_position', 'defview'),
(x'D823B22DD403984584CC1DA2C75D6A61', 'vk_camp', 'vkcam', 'struct_type'),
(x'D8B26E06F5C11943987B1853CA6EF104', 'vk_approve', 'autovk_approve', 'defview'),
(x'D8E9D0D747D86F4CB7DC9D7A0A202373', 'vk_castate', 'autovk_castate', 'defview'),
(x'DA45F2DEAE30764AB58D32C8D11B60D7', 'genreference', 'mtzmetamodel', 'struct_type'),
(x'DB2CD67B34F72C4FA2A672A30CDE9D47', 'armjournal', 'autoarmjournal', 'defview'),
(x'DB3466D89FAB8947876D9FBCEF1E274E', 'fldextenders', 'mtzmetamodel', 'struct_type'),
(x'DC7BC621263CB548802A1B9970DC74D6', 'vk_religion', 'autovk_religion', 'defview'),
(x'DCC0C3124D295F409E199C4F59729084', 'fieldrestriction', 'mtzmetamodel', 'struct_type'),
(x'DD60307C85072943801E0FE211DA8744', 'instancevalidator', 'autoinstancevalidator', 'defview'),
(x'DD9DBC64EBA6B1448196F4756B5E64AD', 'enumitem', 'fieldtype', 'parent'),
(x'DE371E872E341D4F99009485950E2B09', 'iu_rcfg_def', 'bprcfg', 'struct_type'),
(x'DF0F906BE6AF5344AF47541F49808C02', 'aa4085e6-745b-4a37-8ec4-65d99a653966', 'vbremovesymmetricobjref', 'methodname'),
(x'DF14BA326404774D88AC5C6055A35C99', 'journal', 'autojournal', 'defview'),
(x'DFA157ABB691494F9312FF7C70EB8297', 'journal', 'mtzjrnl', 'struct_type'),
(x'E160C315B062B0408AF92888713FB658', 'nextstate', 'mtzmetamodel', 'struct_type'),
(x'E365C90BF99AD64DAE610419D2816CD8', 'enumitem', 'mtzmetamodel', 'struct_type'),
(x'E45C847C846B6446AB301472BD5FF0F7', 'journalcolumn', 'mtzjrnl', 'struct_type'),
(x'E491838B7C833D4A9547838D115D13AA', 'armjrnlrun', 'armjournal', 'parent'),
(x'E5E28752217A9A4C81B489186A89EC14', 'vk_adformat', 'autovk_adformat', 'defview'),
(x'E62634C61C12AB41B77167AD3BC6D535', 'extenderinterface', 'mtzmetamodel', 'struct_type'),
(x'E679C8690358664FB9B0AE4347C53CE1', 'generator_target', 'genpackage', 'parent'),
(x'E6C5D10AA5B69443AEB6A6F014C52907', '6fb1873a-45a9-420f-90ce-cde34b5aee19', 'autoclosesession', 'methodname'),
(x'E6CFA0953876CB418C7A1E484A6884CD', 'vk_matrialstatus', 'autovk_matrialstatus', 'defview'),
(x'E89CCCD3BBFE244F9687C578ADA0FC4D', '94e8f6db-106a-44dc-9483-86c801798ff0', 'vbopenref', 'methodname'),
(x'E91A6D5AD7DF2340BBB33BF183ADD956', 'iu_u_def', 'autoiu_u_def', 'defview'),
(x'EAF0D6BE3341924AA72238B5DB7FCD7A', 'bpc_info', 'autobpc_info', 'defview'),
(x'EC30A510FD7BD948A5B70E93AC164D45', 'dinamicfilterscript', 'field', 'parent'),
(x'ED3A9A2B2C3B484C8C15954FD5996112', 'viewcolumn', 'mtzmetamodel', 'struct_type'),
(x'EDD99730B829C94CB41462312D302A8E', 'viewcolumn', 'partview', 'parent'),
(x'EE23728345B8CE4A8B5F91171AC54113', 'groups', 'mtzusers', 'struct_type');
COMMIT;
BEGIN;
INSERT INTO sysoptions VALUES
(x'EEC1ACC48A08BC4BB31FDAEAB956FD45', 'objstatus', 'autoobjstatus', 'defview'),
(x'EFED56F49CD6EB408902C49B68855731', 'instancevalidator', 'mtzmetamodel', 'struct_type'),
(x'F053EFBCEA9BFE4982C5AEC66ABFE6A2', 'script', 'autoscript', 'defview'),
(x'F0D1E61BBF73C740ADC6D0103E148238', '68bd7f75-ad54-4837-a6a7-a8dde3b2992a', 'mtzlogin', 'methodname'),
(x'F1AE1BD8A2B64144A861A9F66293163D', 'generator_target', 'mtzmetamodel', 'struct_type'),
(x'F2434AC4A7E5AA47BF8F30C74F0D284C', 'reports', 'autoreports', 'defview'),
(x'F31FA0558DAA3340B8E62B39FAEDEF33', 'vk_interest', 'vdinter', 'struct_type'),
(x'F3E05AE7A1ABFC45936AAB4C66D7B9B0', 'num_values', 'stdnumerator', 'struct_type'),
(x'F40818FA2E6FB540BFD0BAD6A1520C84', 'armjrnlrun', 'autoarmjrnlrun', 'defview'),
(x'F470722A440AAC45BF7D0F9414F55691', 'vk_rotinfo', 'vkrot', 'struct_type'),
(x'F5A157BDC6A80E418E41BAE7CB35D007', 'journalcolumn', 'autojournalcolumn', 'defview'),
(x'F5CE078F0D885348B9C479C2E4BDE890', 'vk_camstat', 'vkcam', 'struct_type'),
(x'F96531A75C9C83408C985DB7CCC3096E', 'num_values', 'autonum_values', 'defview'),
(x'F96A1F7EE2EEE0419D887E973C0F447A', 'armtypes', 'autoarmtypes', 'defview'),
(x'F9BB2BA5821F794885F54F315C29A83A', 'vk_adsovdemografy', 'vkads', 'struct_type'),
(x'FB0AB31D1B20AC46B98965639140295E', 'nextstate', 'autonextstate', 'defview'),
(x'FD456FB287AF2D4CA4955E67B6AF0539', 'uniqueconstraint', 'autouniqueconstraint', 'defview'),
(x'FD6F4DEA225EB34E8AA232C3FBAFD319', 'vk_approve', 'vdappr', 'struct_type'),
(x'FD95D9730F39A441A012AD2C9B57EA29', 'vk_region', 'autovk_region', 'defview'),
(x'FDAAC2ED2CD9B849AA3AB98F22EE24FE', 'vk_adsutm', 'autovk_adsutm', 'defview'),
(x'FE7038407BC6804BA41B9FA2D90EC81A', 'field', 'autofield', 'defview'),
(x'FEC6509A4815E74D9ED8DDC673B6C22C', 'partview', 'mtzmetamodel', 'struct_type');
COMMIT;

-- 
-- Вывод данных для таблицы sysrefcache
--
-- Таблица survey.sysrefcache не содержит данных

-- 
-- Вывод данных для таблицы the_session
--
BEGIN;
INSERT INTO the_session VALUES
(x'A174A8C5011DF543AA2B5431031FD45C', x'0A50D46D6DB4E511843BDCA9718B8B15', '2016-01-06 15:02:59', '2017-12-25 16:22:17', NULL, NULL, NULL, x'D49696204DAF824CA1D2C6989BEF91D7', NULL, NULL, 0, x'28590B0607A8E511B975DCA9718B8B15', '2016-01-06 15:02:59', '2016-01-06 15:02:59', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'1DA4215B70B4E511843BDCA9718B8B15', '2016-01-06 15:23:56', '2017-12-25 16:22:17', NULL, NULL, NULL, x'D49696204DAF824CA1D2C6989BEF91D7', NULL, NULL, 0, x'28590B0607A8E511B975DCA9718B8B15', '2016-01-06 15:23:56', '2016-01-06 15:23:56', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'2F7028BECB49E7119D33A81E843486A3', '2017-06-05 11:48:27', '2017-12-25 16:22:17', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-06-05 11:48:27', '2017-06-05 11:48:27', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'46E31F9F90E9E7119CAAA81E843486A3', '2017-12-25 19:28:47', '2017-12-25 19:28:47', NULL, NULL, NULL, NULL, NULL, '2017-12-25 19:28:47', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:28:21', '2017-12-25 19:28:21', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'4A327F8378E9E7119CAAA81E843486A3', '2017-12-25 16:36:29', '2017-12-25 16:36:29', NULL, NULL, NULL, NULL, NULL, '2017-12-25 16:36:29', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 16:35:46', '2017-12-25 16:35:46', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'4B1B27178FE9E7119CAAA81E843486A3', '2017-12-25 19:17:23', '2017-12-25 19:17:23', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:17:23', '2017-12-25 19:17:23', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'5245BE9270B4E511843BDCA9718B8B15', '2016-01-06 15:25:29', '2017-12-25 16:22:17', NULL, NULL, NULL, x'D49696204DAF824CA1D2C6989BEF91D7', NULL, NULL, 0, x'28590B0607A8E511B975DCA9718B8B15', '2016-01-06 15:25:29', '2016-01-06 15:25:29', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'5490C36F90E9E7119CAAA81E843486A3', '2017-12-25 19:27:01', '2017-12-25 19:27:01', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:27:01', '2017-12-25 19:27:01', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'62CA656870B4E511843BDCA9718B8B15', '2016-01-06 15:24:18', '2017-12-25 16:22:17', NULL, NULL, NULL, x'D49696204DAF824CA1D2C6989BEF91D7', NULL, NULL, 0, x'28590B0607A8E511B975DCA9718B8B15', '2016-01-06 15:24:18', '2016-01-06 15:24:18', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'63836DD38EE9E7119CAAA81E843486A3', '2017-12-25 19:16:12', '2017-12-25 19:16:12', NULL, NULL, NULL, NULL, NULL, '2017-12-25 19:16:12', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:15:29', '2017-12-25 19:15:29', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'791DE5FDC4B3E511843BDCA9718B8B15', '2016-01-05 18:57:15', '2017-12-25 16:22:17', NULL, NULL, NULL, x'D49696204DAF824CA1D2C6989BEF91D7', NULL, NULL, 0, x'28590B0607A8E511B975DCA9718B8B15', '2016-01-05 18:57:15', '2016-01-05 18:57:15', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'7FF241BA7AE9E7119CAAA81E843486A3', '2017-12-25 17:53:11', '2017-12-25 17:53:11', NULL, NULL, NULL, NULL, NULL, '2017-12-25 17:53:11', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 16:51:37', '2017-12-25 16:51:37', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'899887E68FE9E7119CAAA81E843486A3', '2017-12-25 19:23:11', '2017-12-25 19:23:11', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:23:11', '2017-12-25 19:23:11', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'8F22F35C83E9E7119CAAA81E843486A3', '2017-12-25 18:21:32', '2017-12-25 18:21:32', NULL, NULL, NULL, NULL, NULL, '2017-12-25 18:21:32', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 17:53:26', '2017-12-25 17:53:26', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'92B445E077E9E7119CAAA81E843486A3', '2017-12-25 16:31:13', '2017-12-25 16:31:13', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 16:31:13', '2017-12-25 16:31:13', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'970C8D0790E9E7119CAAA81E843486A3', '2017-12-25 19:24:06', '2017-12-25 19:24:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:24:06', '2017-12-25 19:24:06', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'9DF5C65287E9E7119CAAA81E843486A3', '2017-12-25 18:21:47', '2017-12-25 18:21:47', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 18:21:47', '2017-12-25 18:21:47', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'B690624372B4E511843BDCA9718B8B15', '2016-01-06 15:37:35', '2017-12-25 16:22:17', NULL, NULL, NULL, x'D49696204DAF824CA1D2C6989BEF91D7', NULL, NULL, 0, x'28590B0607A8E511B975DCA9718B8B15', '2016-01-06 15:37:35', '2016-01-06 15:37:35', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'C1ED110D78E9E7119CAAA81E843486A3', '2017-12-25 16:35:35', '2017-12-25 16:35:35', NULL, NULL, NULL, NULL, NULL, '2017-12-25 16:35:35', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 16:32:28', '2017-12-25 16:32:28', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'C24117E378E9E7119CAAA81E843486A3', '2017-12-25 16:39:02', '2017-12-25 16:39:02', NULL, NULL, NULL, NULL, NULL, '2017-12-25 16:39:02', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 16:38:27', '2017-12-25 16:38:27', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'FD93EEC890E9E7119CAAA81E843486A3', '2017-12-25 19:29:31', '2017-12-25 19:29:31', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AC633545BB705488558BE283D762764', '2017-12-25 19:29:31', '2017-12-25 19:29:31', NULL, NULL),
(x'A174A8C5011DF543AA2B5431031FD45C', x'FFDC13FD78E9E7119CAAA81E843486A3', '2017-12-25 16:51:27', '2017-12-25 16:51:27', NULL, NULL, NULL, NULL, NULL, '2017-12-25 16:51:27', 1, x'6AC633545BB705488558BE283D762764', '2017-12-25 16:39:10', '2017-12-25 16:39:10', NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы typelist
--
BEGIN;
INSERT INTO typelist VALUES
(x'03DA786275E9E7119CAAA81E843486A3', 'vddev', NULL, 'vddev_register', 'vddev_delete', 'vddev_hcl', 'vddev_propagate'),
(x'07A0FC6275E9E7119CAAA81E843486A3', 'mtzrprt', NULL, 'mtzrprt_register', 'mtzrprt_delete', 'mtzrprt_hcl', 'mtzrprt_propagate'),
(x'08F3C46275E9E7119CAAA81E843486A3', 'bprcfg', NULL, 'bprcfg_register', 'bprcfg_delete', 'bprcfg_hcl', 'bprcfg_propagate'),
(x'08F4476275E9E7119CAAA81E843486A3', 'mtzmetamodel', NULL, 'mtzmetamodel_register', 'mtzmetamodel_delete', 'mtzmetamodel_hcl', 'mtzmetamodel_propagate'),
(x'0A36D96275E9E7119CAAA81E843486A3', 'vktrg', NULL, 'vktrg_register', 'vktrg_delete', 'vktrg_hcl', 'vktrg_propagate'),
(x'1A84AB6275E9E7119CAAA81E843486A3', 'stdnumerator', NULL, 'stdnumerator_register', 'stdnumerator_delete', 'stdnumerator_hcl', 'stdnumerator_propagate'),
(x'22B8336275E9E7119CAAA81E843486A3', 'vdfrmt', NULL, 'vdfrmt_register', 'vdfrmt_delete', 'vdfrmt_hcl', 'vdfrmt_propagate'),
(x'29AEF76275E9E7119CAAA81E843486A3', 'vdcat', NULL, 'vdcat_register', 'vdcat_delete', 'vdcat_hcl', 'vdcat_propagate'),
(x'3287B96275E9E7119CAAA81E843486A3', 'vdast', NULL, 'vdast_register', 'vdast_delete', 'vdast_hcl', 'vdast_propagate'),
(x'383E8D6275E9E7119CAAA81E843486A3', 'vdcn', NULL, 'vdcn_register', 'vdcn_delete', 'vdcn_hcl', 'vdcn_propagate'),
(x'47EE4C6275E9E7119CAAA81E843486A3', 'mtzjrnl', NULL, 'mtzjrnl_register', 'mtzjrnl_delete', 'mtzjrnl_hcl', 'mtzjrnl_propagate'),
(x'51D9016375E9E7119CAAA81E843486A3', 'vktsk', NULL, 'vktsk_register', 'vktsk_delete', 'vktsk_hcl', 'vktsk_propagate'),
(x'5692A66275E9E7119CAAA81E843486A3', 'vkads', NULL, 'vkads_register', 'vkads_delete', 'vkads_hcl', 'vkads_propagate'),
(x'5755E86275E9E7119CAAA81E843486A3', 'bpdi', NULL, 'bpdi_register', 'bpdi_delete', 'bpdi_hcl', 'bpdi_propagate'),
(x'5C57156275E9E7119CAAA81E843486A3', 'vkrot', NULL, 'vkrot_register', 'vkrot_delete', 'vkrot_hcl', 'vkrot_propagate'),
(x'620D576275E9E7119CAAA81E843486A3', 'vkprj', NULL, 'vkprj_register', 'vkprj_delete', 'vkprj_hcl', 'vkprj_propagate'),
(x'66E1736275E9E7119CAAA81E843486A3', 'mtzwp', NULL, 'mtzwp_register', 'mtzwp_delete', 'mtzwp_hcl', 'mtzwp_propagate'),
(x'7418CF6275E9E7119CAAA81E843486A3', 'vdinter', NULL, 'vdinter_register', 'vdinter_delete', 'vdinter_hcl', 'vdinter_propagate'),
(x'76E23D6275E9E7119CAAA81E843486A3', 'bpu', NULL, 'bpu_register', 'bpu_delete', 'bpu_hcl', 'bpu_propagate'),
(x'7EB56E6275E9E7119CAAA81E843486A3', 'vdpt', NULL, 'vdpt_register', 'vdpt_delete', 'vdpt_hcl', 'vdpt_propagate'),
(x'8145976275E9E7119CAAA81E843486A3', 'vdt', NULL, 'vdt_register', 'vdt_delete', 'vdt_hcl', 'vdt_propagate'),
(x'8160E36275E9E7119CAAA81E843486A3', 'mtzfltr', NULL, 'mtzfltr_register', 'mtzfltr_delete', 'mtzfltr_hcl', 'mtzfltr_propagate'),
(x'8448926275E9E7119CAAA81E843486A3', 'vdappr', NULL, 'vdappr_register', 'vdappr_delete', 'vdappr_hcl', 'vdappr_propagate'),
(x'8D63A16275E9E7119CAAA81E843486A3', 'vdrel', NULL, 'vdrel_register', 'vdrel_delete', 'vdrel_hcl', 'vdrel_propagate'),
(x'8D7FED6275E9E7119CAAA81E843486A3', 'vdcst', NULL, 'vdcst_register', 'vdcst_delete', 'vdcst_hcl', 'vdcst_propagate'),
(x'9B679C6275E9E7119CAAA81E843486A3', 'mtzusers', NULL, 'mtzusers_register', 'mtzusers_delete', 'mtzusers_hcl', 'mtzusers_propagate'),
(x'9C3EDE6275E9E7119CAAA81E843486A3', 'vkbrk', NULL, 'vkbrk_register', 'vkbrk_delete', 'vkbrk_hcl', 'vkbrk_propagate'),
(x'9E037E6275E9E7119CAAA81E843486A3', 'bpdr', NULL, 'bpdr_register', 'bpdr_delete', 'bpdr_hcl', 'bpdr_propagate'),
(x'9FEDC96275E9E7119CAAA81E843486A3', 'vdos', NULL, 'vdos_register', 'vdos_delete', 'vdos_hcl', 'vdos_propagate'),
(x'B943266275E9E7119CAAA81E843486A3', 'vdage', NULL, 'vdage_register', 'vdage_delete', 'vdage_hcl', 'vdage_propagate'),
(x'BBFD0F6275E9E7119CAAA81E843486A3', 'vkusr', NULL, 'vkusr_register', 'vkusr_delete', 'vkusr_hcl', 'vkusr_propagate'),
(x'BCB8696275E9E7119CAAA81E843486A3', 'vdtt', NULL, 'vdtt_register', 'vdtt_delete', 'vdtt_hcl', 'vdtt_propagate'),
(x'C2FB826275E9E7119CAAA81E843486A3', 'vdapl', NULL, 'vdapl_register', 'vdapl_delete', 'vdapl_hcl', 'vdapl_propagate'),
(x'C821886275E9E7119CAAA81E843486A3', 'vdmstat', NULL, 'vdmstat_register', 'vdmstat_delete', 'vdmstat_hcl', 'vdmstat_propagate'),
(x'C83A5C6275E9E7119CAAA81E843486A3', 'vdrg', NULL, 'vdrg_register', 'vdrg_delete', 'vdrg_hcl', 'vdrg_propagate'),
(x'D413526275E9E7119CAAA81E843486A3', 'bpc', NULL, 'bpc_register', 'bpc_delete', 'bpc_hcl', 'bpc_propagate'),
(x'DE0FD46275E9E7119CAAA81E843486A3', 'vkcam', NULL, 'vkcam_register', 'vkcam_delete', 'vkcam_hcl', 'vkcam_propagate'),
(x'E585F26275E9E7119CAAA81E843486A3', 'vdbrw', NULL, 'vdbrw_register', 'vdbrw_delete', 'vdbrw_hcl', 'vdbrw_propagate'),
(x'E9EE0B6275E9E7119CAAA81E843486A3', 'vdpos', NULL, 'vdpos_register', 'vdpos_delete', 'vdpos_hcl', 'vdpos_propagate'),
(x'EEB7B06275E9E7119CAAA81E843486A3', 'mtzext', NULL, 'mtzext_register', 'mtzext_delete', 'mtzext_hcl', 'mtzext_propagate'),
(x'F94E616275E9E7119CAAA81E843486A3', 'mtzsystem', NULL, 'mtzsystem_register', 'mtzsystem_delete', 'mtzsystem_hcl', 'mtzsystem_propagate');
COMMIT;

-- 
-- Вывод данных для таблицы typemenu
--
-- Таблица survey.typemenu не содержит данных

-- 
-- Вывод данных для таблицы uniqueconstraint
--
BEGIN;
INSERT INTO uniqueconstraint VALUES
(x'ADEF70062751D5118822204C4F4F5020', x'0233B7117039A34F8F1A3272C3403647', '2012-01-20 14:40:15', '2017-12-25 16:21:52', NULL, NULL, NULL, NULL, 0, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'10505EA1192FDA45BBDF11224A89BBD3', '2012-01-20 14:39:58', '2017-12-25 16:21:52', NULL, NULL, NULL, NULL, -1, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'14596031B53AAF4991E971736A604FCC', '2012-01-20 14:40:13', '2017-12-25 16:21:52', NULL, NULL, NULL, NULL, -1, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'1EA2D09E0607EE49BD235F831A3A86FE', '2012-01-20 14:40:16', '2017-12-25 16:21:52', NULL, NULL, NULL, NULL, -1, NULL),
(x'52932CFE9AE20B4291343E3BDD832A6E', x'229DE7AE828F9A4F8D6F33328A7AAC05', '2012-01-20 14:39:58', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'2C69018196A768478ECB0316B5E9490F', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'549833E56278BF41A477601B9171F82F', '2012-11-20 14:11:52', '2017-12-25 16:21:53', NULL, NULL, NULL, 'UC_ Journal_Name', 0, 'Уникальность для Журнал.Название'),
(x'236DF435F8613B41924F83792F76E698', x'54AA42ED60A7E645B47222249907756C', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'589DD1A7F33C2440B5AFB80CF77A9937', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, 0, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'5C9CC0540AFF494F927085CEEA24BB0D', '2012-01-20 14:40:03', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, 0, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'67C210AE9B069744A00619B350F5B93E', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'81D6F8362AD53E4398ECDFD1117707A0', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, 0, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'83506B856DD42848BDABFA523D1C5E34', '2012-01-20 14:39:58', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'976E7B4F8E0E8344BC8733748BE210AF', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'9A5A0FCD89DF784CA4EF78D5BD35525B', '2012-11-20 14:11:52', '2017-12-25 16:21:53', NULL, NULL, NULL, 'UC_ WorkPlace_Name', 0, 'Уникальность для Арм.Название'),
(x'4CE798E5DEA9414086FA972E95635600', x'9C54DB9F2768EB45889BA167951C77F0', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'B0C3538245A032429A6C934BCFD14E5E', '2012-01-20 14:40:03', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'236DF435F8613B41924F83792F76E698', x'B36BE8D930DFC34BB956901494C38D54', '2012-01-20 14:40:15', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'BDC473920492764EA6719F31ED575F68', '2012-01-20 14:40:16', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, 0, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'BF4B14AAC5E5714C9FF4BFB3368255B4', '2012-01-20 14:40:03', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'32245159DFE6F941A4366BF7DB1800BB', x'D5713D7A4386B140B50E6B3B1FCFB08A', '2012-01-20 14:40:13', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, -1, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'F897A51A2519C24394094B0652F21393', '2012-01-20 14:40:03', '2017-12-25 16:21:53', NULL, NULL, NULL, NULL, 0, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы users
--
BEGIN;
INSERT INTO users VALUES
(x'855EFBE00E05224385059E0CA132E901', x'28590B0607A8E511B975DCA9718B8B15', '2015-12-24 21:06:59', '2017-12-25 16:22:17', NULL, NULL, NULL, 'Баранов', 'Михаил', '', '4097906', '5f73b1cd4d6a23b068918af54aa3fd2a', NULL, NULL, NULL, NULL),
(x'855EFBE00E05224385059E0CA132E901', x'6AC633545BB705488558BE283D762764', '2016-01-04 20:51:35', '2017-12-25 16:22:17', NULL, NULL, NULL, NULL, 'администратор', NULL, 'supervisor', 'bae12b8d321e2a300d130b2c814b4acb', NULL, NULL, NULL, NULL),
(x'855EFBE00E05224385059E0CA132E901', x'CDB51785B0B3E511843BDCA9718B8B15', '2016-01-05 16:42:58', '2017-12-25 16:22:18', NULL, NULL, NULL, 'Баранова', 'Василина', '', '200831270', 'cd4b55e23fd858ae665481b2c104088b', NULL, NULL, NULL, NULL);
COMMIT;

-- 
-- Вывод данных для таблицы validator
--
-- Таблица survey.validator не содержит данных

-- 
-- Вывод данных для таблицы viewcolumn
--
BEGIN;
INSERT INTO viewcolumn VALUES
(x'FD7683D9D63D2F47AED5D48900D981F5', x'00375E5EC8E1A94B909B9E6924806641', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 1, 'Название (Описание)', 'Num_head_Name', x'D9BE36C44E29A7488C376D4CF32343BE', x'0352B4F4F9C7304FB0E233498862A6FB', 0, NULL, 0),
(x'17A3BE0E13E82D48968904E99CBEABAB', x'006081AAE82F734EBDA942607243E804', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 1, 'Платформа (Логика поля на форме)', 'FIELDVALIDATOR_Target', x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'F92E464CB68309428FD9D5B4E7C168EF', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'0151FC456A70A741B5F4D6D28DBD6CD5', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 12, 'Ссылка на тип (Поле)', 'FIELD_RefToType', x'A4EF70062751D5118822204C4F4F5020', x'7949BBB5D48E844B9E8FD8647287062B', 0, NULL, 0),
(x'230ACEC3C9FF7D46AB6159A96FDE728B', x'015665B31C62A84C8ADFA758074EBCB3', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 3, 'Описание (Ограничение уникальности)', 'UNIQUECONSTRAINT_TheComment', x'895CAA9CCBF1624BB1D0FF2D29A40057', x'80DF8E6D32976042847EE1209FF71CCE', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'02C5D7C8C826E844BF803A16706C4B4A', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 8, 'Примечания (Описание источника данных)', 'FIELDSRCDEF_DescriptionString', x'81AFF1D32C914849A87DDF549EE796E2', x'44F899710146D44D865358688A220A8E', 0, NULL, 0),
(x'9C18067A20CE7A478A1E8FB2EA3B88BF', x'04149F27953F284E9376C0D1E04803C6', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 1, 'Название (Арм)', 'WorkPlace_Name', x'C421399726499D4CA7816062CF81B5AD', x'24C4148E04FA8D4C8C74C28806A34ACD', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'06F1D4BA4291D64081940C6B079D8B39', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 1, 'Имя вкладки (Поле)', 'FIELD_TabName', x'A4EF70062751D5118822204C4F4F5020', x'54BFA35C84C2334097CBF39A598B1655', 0, NULL, 0),
(x'1B8C7A8E0BF46647A63AB0F73CBF8492', x'07F1702C0E848C459B658A4AB2075B05', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 1, 'Вопрос (Вопросы модуля)', 'svm_qlist_question', x'47CAC986A370044BA314A12DC725B70B', x'5E67A488FD095B4587C3081C04413B0D', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'0B727E31B3DC9647A65F6136435BC468', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 3, 'Подсказка (Методы типа)', 'TYPEMENU_ToolTip', x'7A7476873D74B947AF1CAB00FF81154F', x'3F2BB9B88F11C543AF2ABDEA0D7E6CA9', 0, NULL, 0),
(x'F93BEAAF2ED6C44281861300DC106249', x'0C4E1E77EF6AE64A8D9F42314856924A', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 5, 'Ручной join (Связанные представления)', 'PARTVIEW_LNK_HandJoin', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'8F954A5E5D43A54188945D70B788CD3D', 0, NULL, 0),
(x'FB99B0F83B4DE14FB6CBBC453D61F13D', x'0CB6FC9E7F72B9479C81A3209047AFFD', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 4, 'Иконка журнала (Журнал)', 'Journal_jrnlIconCls', x'6E6CC434159246478D9D4800B6549003', x'6D085B0A45543E43983790F35EEF74D9', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'0D01509A2B12044FBBE1D626C3873672', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 6, 'В тулбар (Методы поля)', 'FIELDMENU_IsToolBarButton', x'E4C38941C2713D42A56F4E71CB91B52D', x'D286B50DC3C23442B4EAA8FFB5F14A2E', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'0EE767A93DAB3341905E398A4AABB909', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 8, 'Для комбо (Колонка)', 'ViewColumn_ForCombo', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'0C2652A0A1C78041A2C6DB82B70371A9', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'0F46EDCD4FA8924E999EA39045865A67', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 1, 'Название (Представление)', 'PARTVIEW_Name', x'4DB613D7E84C6D46BE2B448874DC0469', x'DF2429F38B66B9479CAFCDDA9B0C081B', 0, NULL, 0),
(x'61C42A7BF6C5F540B54914CB87C7263A', x'0FE6A2C58C687C49AF7342F04947C8EF', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 5, 'Обязательное поле (Ограничения полей)', 'FIELDRESTRICTION_MandatoryField', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'3D0C94D74AABF24C9A848445B27D028B', 0, NULL, 0),
(x'4B482C5676F3E34884FA028C6383D287', x'0FF13247AEA1994DB7443159982A656E', '2017-12-25 18:20:36', '2017-12-25 18:20:36', NULL, NULL, NULL, 1, 'Название (Информация)', 'svo_info_name', x'89EC2176573B4C44A0B3DF2CE8723111', x'8CC9028CB7A18F40BE57FD35F66E08F2', 0, NULL, 0),
(x'77E33C6066F6E1408A00C09B34E74DBE', x'0FFCA6268FDEC542A83C985479BEA54D', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 2, 'Тип платформы (Генераторы)', 'GENERATOR_TARGET_TargetType', x'B9EF70062751D5118822204C4F4F5020', x'FE9414AC95E93D49B2E650A8F546F63A', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'11AE400179052C4C9B887DB633FE78D6', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 2, 'Заголовок (Методы раздела)', 'PARTMENU_Caption', x'2E9E8E54F6892248A312101CA4A9FE74', x'63AB589BA3D08F46B1A0B5890349F55C', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'15357B88DF9E8A4EA817D747FE30C579', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 8, 'При создании (Раздел)', 'PART_OnCreate', x'B1EF70062751D5118822204C4F4F5020', x'4706FED84DEDCA40BF195813742B1AA4', 0, NULL, 0),
(x'74AE8E3EA988E643B4E4F429AB439A70', x'157D37D2FB82FE44A7FE5BF307432082', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 2, 'Вариант теста (Описание)', 'sva_info_testVariant', x'43C096558C1CA5429A65863272429EC4', x'CE843301D88AE24FAE06B85BB28B3CE2', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'15908D0BBBA94D41BCBA08F4BB65AE70', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 13, 'Видмость зависит от пользователя (Тип объекта)', 'OBJECTTYPE_UseOwnership', x'AFEF70062751D5118822204C4F4F5020', x'29BD7E8346A648498546C52BDD2ECC82', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'15A7B4FCD290284B92C4764B4823C04D', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 9, 'Документ (Меню)', 'EntryPoints_Document', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'57025F8A0A88024DAE93E81E717140D4', 0, NULL, 0),
(x'61C42A7BF6C5F540B54914CB87C7263A', x'15B9AF2043E5EF44B61A79C992EFA8DB', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 2, 'Поле, на которое накладывается ограничение (Ограничения полей)', 'FIELDRESTRICTION_TheField', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'49E6AE83FAEB70479AF2F07A576345AA', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'164F316D9744004D9C6FB7D01FC5BC8E', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 4, 'ID (Описание источника данных)', 'FIELDSRCDEF_IDField', x'81AFF1D32C914849A87DDF549EE796E2', x'FA3F8898B85E65458EE5F6D4011BE295', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'171427B5F316624CB481388596170495', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 16, 'Вести журнал изменений (Раздел)', 'PART_IsJormalChange', x'B1EF70062751D5118822204C4F4F5020', x'E10090E920B24445A483AFADDA09CEEF', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'176106D2EC719C4986810ACA74105D55', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 19, 'Иконка раздела (Раздел)', 'PART_partIconCls', x'B1EF70062751D5118822204C4F4F5020', x'045B02DB8005AC4D9B3A97F8352BFD42', 0, NULL, 0),
(x'CC612AFABE864148B5A25D0C6A272E96', x'176C5441537E6741B538AC33C5EEBBB7', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 4, 'Сортировка колонки (Колонки журнала)', 'JournalColumn_ColSort', x'317BD7F857A78C48BB5822700737D4B8', x'8EEAA0B2E8183E41AAF17358EA471802', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'17A3FD713F494B429DD6C8151067EB99', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 17, 'Автонумерация (Поле)', 'FIELD_IsAutoNumber', x'A4EF70062751D5118822204C4F4F5020', x'A263F6A96AC0DA4D9B8A659CFFDF25E6', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'1AF9F0D24B3CE642A41016CC6E0D062C', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 8, 'Для отображения в таблице (Поле)', 'FIELD_IsTabBrief', x'A4EF70062751D5118822204C4F4F5020', x'CABEA17A06C3F543A416ABA0F9BB6DB5', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'1D38E96B84A06346B7D5449A6E470CDF', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 20, 'Разрешен фильтр (Меню)', 'EntryPoints_AllowFilter', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2D7A4347B9FC7F43B06F569A15CC81DA', 0, NULL, 0),
(x'DF76A4AA0533FD4582EF07182F24F489', x'1DDE8BE032D3044D986CA9E5EFD65C73', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 2, 'База данных (Приложение)', 'MTZAPP_DBName', x'C2E0DB8C89591042BDFB33C2C45F2509', x'DCCA6DDB19E13A41BE63ED1B5A6B8BEC', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'1EF115BF241E804FB1289822FDD19334', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 4, 'Поле - фильтр 0 (Представление)', 'PARTVIEW_FilterField0', x'4DB613D7E84C6D46BE2B448874DC0469', x'28235A8810E61B46A7A77F4402F3EE8B', 0, NULL, 0),
(x'F006A12EC9FEEC4B969CE6B3130B5C37', x'1FADCC808C3EEC4EA975B733C09E2BB5', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 2, 'Поле представления (Состав колонки)', 'JColumnSource_ViewField', x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'8F0DF7445FB5FC4A975BA0C421E377C5', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'1FB41DADC270C94FA25436040DD30736', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 20, 'Поле для расчета даты (Поле)', 'FIELD_NumberDateField', x'A4EF70062751D5118822204C4F4F5020', x'FE7B6D8584309E4884424263A02AE30A', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'1FD8F46C5B75D448892B6ED2067C69B1', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 3, 'Заголовок (Поле фильтра)', 'FileterField_Caption', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'59FD7494E228AF47A92734CD52DDBAC8', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'201EC9EBFDA9974AA9879FEFCA6DC63E', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 1, '№ п/п (Раздел)', 'PART_Sequence', x'B1EF70062751D5118822204C4F4F5020', x'CBBDBBA277AA5E479D3646AB5813CC27', 0, NULL, 0),
(x'D15576EFF01F6140BD9E0AD3004C538D', x'2052F4497F0F694B936D82A980A75646', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 1, 'Название (Состояния)', 'OBJSTATUS_name', x'66C846DFF838F14E92E25F899D98BD16', x'AC8B0BE94A01584DAF79768BB242119D', 0, NULL, 0),
(x'A21ECC7060A091499190AB6C8927E190', x'20629D83C1F48A4396FE71025BA4AD7C', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 1, 'Название (Группа тестов)', 'svd_testgroup_name', x'0F332D7BA738CD4EA00A85955E94C12D', x'1864094F659BB149ACDE425A03B67853', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'211B6B86658C78439403B9BE4E2EC3F8', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 2, 'Имя (Пользователи)', 'Users_Name', x'55B88B1465099E4EA3D648DCC8CE528B', x'50713C28D9A43A4E8BFA77AF0C2F704A', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'21A964F7E647984E9DDCE1BD72777F75', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 2, 'Заголовок (Методы типа)', 'TYPEMENU_Caption', x'7A7476873D74B947AF1CAB00FF81154F', x'2A675E9391B908459F484DF0E87EF687', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'21FE06B0A51C394DBA7DBFC66D838DA3', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 4, 'Метод (Методы типа)', 'TYPEMENU_the_Action', x'7A7476873D74B947AF1CAB00FF81154F', x'B2CA6F7ABC11704A910C8ACA1F370BFD', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'222101A855728C40AEDB3A4017DEDC83', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 2, 'Название (Меню)', 'EntryPoints_Name', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'497DEF6C4BBE3742A2680B9155957F6B', 0, NULL, 0),
(x'77E33C6066F6E1408A00C09B34E74DBE', x'247C1A99753E764091D2BC93E01AAE40', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 6, 'Среда разработки (Генераторы)', 'GENERATOR_TARGET_TheDevelopmentEnv', x'B9EF70062751D5118822204C4F4F5020', x'B5B21C9A6D0EED4195D1E81F8955FAFB', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'254CD8096844A144AE77D3BC5180B163', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 16, 'Ограничения к журналу (Меню)', 'EntryPoints_JournalFixedQuery', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'46CA30E81A20034D9DBC3769CCF5EAB4', 0, NULL, 0),
(x'1004F737DE558140B7CFBFEEF67AC5BB', x'2670DF01AD283B4AB0143A690CA1BF90', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 2, 'Группа AD (Группы)', 'Groups_ADGroup', x'EE6A0EA4417B6D47923CACA251C08E87', x'48F7DAB2A2B53B4A95F0D88AA74F202B', 0, NULL, 0),
(x'F2EB4EB40F9514459EF3EECEF24D52EC', x'2792B7FF0A50C1449D7DB504A18723D5', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 1, 'Язык - название (Локализация)', 'LocalizeInfo_LangFull', x'5A437DA5B3730741B22BC18782085C84', x'54892B16BB19C14186CC5E3B0EBE02A8', 0, NULL, 0),
(x'F8FB99894B4AFF48B2CA58C2FE320E80', x'28143A33BD0FB344BD04DA551CD26242', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 3, 'Размер (Отображение)', 'FIELDTYPEMAP_FixedSize', x'A6EF70062751D5118822204C4F4F5020', x'334FA599A91FD24DBE1AA84D56E30353', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'2906D47B665A1A4AB360DC52E9C1F23C', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 7, 'Момент открытия (Сессия пользователя)', 'the_Session_StartAt', x'A23E94783679584FB31676E4F968E3B4', x'AD229F02920EC347A3E5FEA5ABFCC7C8', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'2957223274FC2C43A98D8F8F589626C8', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 2, 'Заголовок (Методы поля)', 'FIELDMENU_Caption', x'E4C38941C2713D42A56F4E71CB91B52D', x'1A84D08432139F4BA547257056C7C3D7', 0, NULL, 0),
(x'74AE8E3EA988E643B4E4F429AB439A70', x'2A16B3B34C82274ABFB7692BC0C16676', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 1, 'Тестируемый (Описание)', 'sva_info_person', x'43C096558C1CA5429A65863272429EC4', x'BB7B3C6ED8C4744E863F8D6C61325A3B', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'2B2CA0AF5666FD4F95C9595AAE370691', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 7, 'При создании (Тип объекта)', 'OBJECTTYPE_OnCreate', x'AFEF70062751D5118822204C4F4F5020', x'6C5D7D65FDB4464B9E10F140A42AD509', 0, NULL, 0),
(x'FF264BCE62927B4C9CFACD7BBFEDE8FF', x'2B372E542A964E4F8A5547D69296CF4E', '2017-12-25 16:40:47', '2017-12-25 16:40:47', NULL, NULL, NULL, 3, 'Раздел с которым происхоит действие (Журнал событий)', 'SysLog_LogStructID', x'E8DAEA453798E54E9A3107370302F20F', x'B44D6A47DB69C54EA4D7999C09183B97', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'2C42FDE219EF764990F808F93DDB9274', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 8, 'Описание (Описание)', 'Reports_TheComment', x'FA3D9B25ACB8784188FD4B715D372FC3', x'860E54C84370D14A875B0386EA200688', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'2C8966094D7E504B9A01FE9FE4C3B239', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 17, 'Разрешено добавление (Меню)', 'EntryPoints_AllowAdd', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9AD2DE26AB2FB84ABE815CE5013238FD', 0, NULL, 0),
(x'BCD3A0398C04034F9EB658D3A54A47C9', x'2D756E5A70E1854DA8B6B71ACBD6D286', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 2, 'Описание метода (Методы и процедуры)', 'SHAREDMETHOD_the_Comment', x'ADEF70062751D5118822204C4F4F5020', x'676DEEC83B3BF34581FCC8F3FA40B840', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'2E5893CD414C804DB1104E326642F009', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 7, 'Краткая информация (Поле)', 'FIELD_IsBrief', x'A4EF70062751D5118822204C4F4F5020', x'9471AD46ACA9EA479C4AF685D7CBABFD', 0, NULL, 0),
(x'61C42A7BF6C5F540B54914CB87C7263A', x'2F4C7B2609B82944AE73E2E3CC6F93C0', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 1, 'Структура, которой принадлежит поле (Ограничения полей)', 'FIELDRESTRICTION_ThePart', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'4E11440C87AD7C4BB7782C5DF78855B2', 0, NULL, 0),
(x'6950ED62E8662945A85577FB9BAEA29C', x'2F5064CCCDE70643AE07FC3182272847', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 3, 'Платформа (Формулы)', 'RPTFormula_Platform', x'2E1322E4F4070F4C8246B0F16CD9186A', x'023CBBB7214126428DCCA905C7CAF264', 0, NULL, 0),
(x'5DE7359D37AE654CBCD98E38FB878ADB', x'31C2E0DEADA45A40BB0D02AE794D7871', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 2, 'Целевая платформа (Интерфейсы расширения)', 'ExtenderInterface_TargetPlatform', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'9676341BA2FF2F42ACACFA465357D3C3', 0, NULL, 0),
(x'F93BEAAF2ED6C44281861300DC106249', x'336DE41651619C40B43EE76C2BFCDCC4', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 4, 'Свзяь: Поле для join приемник (Связанные представления)', 'PARTVIEW_LNK_TheJoinDestination', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'0E1879337F4A0D4B9E52B54228BE1F2A', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'338C623FD3B2764FB3C4E73886927744', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 7, 'Журнал (Меню)', 'EntryPoints_Journal', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9EE64CB2B5C3854DA3A918BF50385854', 0, NULL, 0),
(x'CC612AFABE864148B5A25D0C6A272E96', x'33F24C741D0EBE48B458B0E3B2B609DB', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 5, 'Аггрегация при группировке (Колонки журнала)', 'JournalColumn_GroupAggregation', x'317BD7F857A78C48BB5822700737D4B8', x'43DC9A4694826E469E8323C9A02C9C6C', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'3527293C298A314893F5A80334068206', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 18, 'Разрешено редактирование (Меню)', 'EntryPoints_AllowEdit', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AD7508DF65915840A66214F74D5A257B', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'36797CA95CC2F34482A1EDC2FF6F1714', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 11, 'Файл картинки (Меню)', 'EntryPoints_IconFile', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2405E5C702C3544DA6976F9C9518B5E9', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'36CBB02EBF077749900DC8931FF412C7', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 6, 'При запуске (Тип объекта)', 'OBJECTTYPE_OnRun', x'AFEF70062751D5118822204C4F4F5020', x'BA700AEBB90FAE44ADE16910E4E7A240', 0, NULL, 0),
(x'0E7BEC7F0412B04B9221349D150A61CB', x'381AC74E6FF36749B20B83562D2BB852', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 1, 'Целевая платформа (Динамический фильтр)', 'DINAMICFILTERSCRIPT_Target', x'8261E22384CCD642B7A2D8DA0026EBEE', x'8289AA2A31E8A945961524EE2CDAD2C5', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'3A0550C86F8C2B429887790E5F19E202', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 5, 'Включать в меню (Методы раздела)', 'PARTMENU_IsMenuItem', x'2E9E8E54F6892248A312101CA4A9FE74', x'7CBC36D5141A144B9ABF7326E396E760', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'3A11690DD5D6C94EBC841D74CCD95C86', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 8, 'Местный телефон (Пользователи)', 'Users_LocalPhone', x'55B88B1465099E4EA3D648DCC8CE528B', x'C5E82E7A7E969E4499BEF45B53615802', 0, NULL, 0),
(x'43E053D2087F73459E4F18BC8C16F123', x'3BD43D8AE6284F41A6C46DEC61B9A0B9', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 3, 'Версия (Контрольные элементы)', 'GENCONTROLS_VersionMajor', x'FB1CB30425654A479F16999870D8EAAF', x'82461B4060B7B242913BCFDC7D4C44E7', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'3C023D51B93B834FBBCA6EECC50B165C', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 4, 'Идентификатор вызываемого метода (Методы поля)', 'FIELDMENU_ActionID', x'E4C38941C2713D42A56F4E71CB91B52D', x'747E09BA467801469F6AA62B63FBD083', 0, NULL, 0),
(x'62472937D190C846AEB4B0E61206BC7E', x'3C3816755A5FF74BB7045686A24E3045', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 3, 'Разрешено добавлять (Органичения разделов)', 'STRUCTRESTRICTION_AllowAdd', x'33AC48F4133B994893EE47D3D62962EC', x'2300BA81E2F5E146958E664DFCEF2B6B', 0, NULL, 0),
(x'9C22E9FE56C11F419A69165462FFC923', x'3C92C960D277624591F5A6CCC2FEB980', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 3, 'Идентификатор строки (Номера)', 'Num_Values_OwnerRowID', x'0BC03D83D7E8914D91032DD084BEFC1E', x'68CAE51FED8B624197FD6F44E2D0D6D9', 0, NULL, 0),
(x'DF76A4AA0533FD4582EF07182F24F489', x'3D84DCD01AE40447B4AF7D47964AEB50', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 3, 'Описание (Приложение)', 'MTZAPP_TheComment', x'C2E0DB8C89591042BDFB33C2C45F2509', x'FEFF1E43FFEF1445B237B1ACABD0A2FB', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'3E4DD6271A5EE544B26E7727B725B47A', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 9, 'Ссылка на тип (Параметры)', 'PARAMETERS_RefToType', x'4CE798E5DEA9414086FA972E95635600', x'E38CB46586BB2D42A8C4E1CC5AC74F2C', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'3E89005CBFBAF145B8D7832A39F91982', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 8, 'При удалении (Тип объекта)', 'OBJECTTYPE_OnDelete', x'AFEF70062751D5118822204C4F4F5020', x'2DB4F8FC94D05A4DBF6278963DECAD92', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'3F0027DE1EA31846BF043D3F05D62F6C', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 9, 'Отображать при выборе ссылки (Тип объекта)', 'OBJECTTYPE_AllowRefToObject', x'AFEF70062751D5118822204C4F4F5020', x'9606F6E2AFFCB0468E387ADA90C05EBC', 0, NULL, 0),
(x'5DE4A47587357245A80E318CEBEA3AC6', x'3FEAA896DF07BD4289E9CE01FFD4070C', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 2, 'Параметр (Отображение параметров)', 'PARTPARAMMAP_ParamName', x'CA6FBEF85D59464FACDBFB5838A246CA', x'79374CE191F32446B135B1D27E52D383', 0, NULL, 0),
(x'364C82134C114F4CBC2EB7A570726371', x'41A229DB345DD04FAB8B83C5E82987BF', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 1, 'Приложение (Обязательные приложения)', 'ParentPackage_Package', x'5607A06E80B9234DB209202389953A13', x'93FFEC828C54324FA9E98212DCE538B3', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'436DC4D77AF96543ABF877BD1E3A7FC3', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 4, 'Надпись (Поле)', 'FIELD_Caption', x'A4EF70062751D5118822204C4F4F5020', x'62939D47339C71489FF4FF281A9A3D97', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'449E95737E9BBD4A8C557D81417EA121', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 9, 'Может быть пустым (Поле)', 'FIELD_AllowNull', x'A4EF70062751D5118822204C4F4F5020', x'162D0FE4B342E04B813B558CBBCA84FF', 0, NULL, 0),
(x'FF264BCE62927B4C9CFACD7BBFEDE8FF', x'44E4A558E156CF4D9079BFFE33533632', '2017-12-25 16:40:47', '2017-12-25 16:40:47', NULL, NULL, NULL, 5, 'Идентификатор документа (Журнал событий)', 'SysLog_LogInstanceID', x'E8DAEA453798E54E9A3107370302F20F', x'9F813D7FBD932245B914FCCC2C91B48F', 0, NULL, 0),
(x'AD4FC85C7BD93749A223B8A59724D34A', x'44FFA08289D1434E8A6EADB35639E416', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 2, 'Скрипт (Реализация)', 'SCRIPT_Code', x'A3EF70062751D5118822204C4F4F5020', x'79D0954B5006F0408A7224431AAE1AE4', 0, NULL, 0),
(x'FF7012D1DBE9BF4A9F0978EBC7976BA4', x'454726432828604E9A760AAB8DA18322', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 3, 'Редактировать параметр нельзя (Отображение параметров)', 'FIELDPARAMMAP_NoEdit', x'E82A7554B006C64E8DAA692E52A0D36C', x'4D0AA71C88A35B44A8BA46E3001CA1CD', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'4705313C0AE96B4AB9762301F7C7539D', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 2, 'Трактовка (Тип поля)', 'FIELDTYPE_TypeStyle', x'A5EF70062751D5118822204C4F4F5020', x'6D704889A360DE498A0DA4DEE615DBD8', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'47AB8127E96D6F41BA8BDD221EAC073E', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 1, 'Последовательность (Меню)', 'EntryPoints_sequence', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'E81AD38FB43733499536284B161D1215', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'47DBFACDD3401E4DA6421754C18CD8B7', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 3, 'Заголовок (Параметры)', 'PARAMETERS_Caption', x'4CE798E5DEA9414086FA972E95635600', x'18A058D6F7E4FA429048215433A13347', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'48003E1440D84541883EB27FE8A759FB', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 5, 'Минимум (Тип поля)', 'FIELDTYPE_Minimum', x'A5EF70062751D5118822204C4F4F5020', x'F1F54B530CB4054B9F0D9DC6C3EE5D56', 0, NULL, 0),
(x'F006A12EC9FEEC4B969CE6B3130B5C37', x'4811926EEC671A41803DA5177F3F0212', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 1, 'Представление (Состав колонки)', 'JColumnSource_SrcPartView', x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'D77E3939283C4F41A18859E103B21F4A', 0, NULL, 0),
(x'77E33C6066F6E1408A00C09B34E74DBE', x'48F361E7ED038D4684BEDB4BF7C089C9', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 3, 'Очередь (Генераторы)', 'GENERATOR_TARGET_QueueName', x'B9EF70062751D5118822204C4F4F5020', x'75B9F1885CCCC24DB85E7DB3CCBBA666', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'4913564A78725E49BCD761D3CCC92800', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 6, 'Тип ссылки (Поле фильтра)', 'FileterField_RefType', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'589EC8C8E4F7F341A607B5160BC871C5', 0, NULL, 0),
(x'82475455375F3B499ED817FC450FC11D', x'4968CC716B037B41B1F8BC1F4F8ABCD9', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 2, 'Расширение (Добавление)', 'ARMJRNLADD_TheExtention', x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'0D21836D650C7E49A3EED78AA5E84D1C', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'4B6D9B9ED93CA644AA3A77662DFE0D54', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 3, '№ п/п (Поле)', 'FIELD_Sequence', x'A4EF70062751D5118822204C4F4F5020', x'AB684CDF96732C44AF236BB1B7665B06', 0, NULL, 0),
(x'D15576EFF01F6140BD9E0AD3004C538D', x'4BE845EA21C88748A713C26A5EEDFA42', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 2, 'Начальное (Состояния)', 'OBJSTATUS_isStartup', x'66C846DFF838F14E92E25F899D98BD16', x'FA3705AE04871C4BA6906A1F7B521FA9', 0, NULL, 0),
(x'7D8CBA99F3D3794E89AD9ED4F7EBCA0F', x'4D9EAF5F8769484C98F01ED3A510AEA9', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 3, 'Описание (Описание)', 'MTZExt_def_TheDescription', x'4A14627F7685BC48ACBA1F9DC4874459', x'DC329F056AE0B84480909B9F21F0D412', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'4DB330D8580CB44793B427DAC0CC6724', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 5, 'Размер (Параметры)', 'PARAMETERS_DataSize', x'4CE798E5DEA9414086FA972E95635600', x'526592209A9B7D47B9588F502B334E27', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'4E41301A1D8CFF4998541C5C152414BC', '2017-12-25 16:40:48', '2017-12-25 16:40:48', NULL, NULL, NULL, 1, 'Фамилия (Пользователи)', 'Users_Family', x'55B88B1465099E4EA3D648DCC8CE528B', x'35BB10AD3FE2DC4EB6FED22292735BD2', 0, NULL, 0),
(x'0E7BEC7F0412B04B9221349D150A61CB', x'4E9B5E6CABF22A4F9A54FDDE77FE0493', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 2, 'Скрипт (Динамический фильтр)', 'DINAMICFILTERSCRIPT_Code', x'8261E22384CCD642B7A2D8DA0026EBEE', x'93D550949210D24EB014CCEBD7FE526B', 0, NULL, 0),
(x'FF7012D1DBE9BF4A9F0978EBC7976BA4', x'504FF40A72C35643907D71EED0E9B1E4', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 1, 'Поле (значение) (Отображение параметров)', 'FIELDPARAMMAP_FieldName', x'E82A7554B006C64E8DAA692E52A0D36C', x'E9313F83C43FCF429DFE5D81870CA276', 0, NULL, 0),
(x'62472937D190C846AEB4B0E61206BC7E', x'505C604F08981F49919E17DBE87759E2', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 1, 'структура, доступ к которой ограничен (Органичения разделов)', 'STRUCTRESTRICTION_Struct', x'33AC48F4133B994893EE47D3D62962EC', x'8EA7B2BF6A47CB4581DAC2AD0CC71AA6', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'506C06DB884AF74EA94A707DE3196B7A', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 8, 'Тип ссылки (Параметры)', 'PARAMETERS_ReferenceType', x'4CE798E5DEA9414086FA972E95635600', x'D97FF283D0E4A645A5614703602BB9DE', 0, NULL, 0);
COMMIT;
BEGIN;
INSERT INTO viewcolumn VALUES
(x'7D975840913F1244A6AE2BA7CFFE31B5', x'51C2C9F00991F94989BE7082973DC3B5', '2017-12-25 18:20:40', '2017-12-25 18:20:40', NULL, NULL, NULL, 1, 'Название (Идентификация)', 'svh_info_name', x'E09493DABDE1854BAA454C6C92793865', x'43A1C78ABF4BC446A2E7B860F93A4CCA', 0, NULL, 0),
(x'AD4FC85C7BD93749A223B8A59724D34A', x'5226AF04E168204A912C6A423C6A2BD6', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 1, 'Целевая платформа (Реализация)', 'SCRIPT_Target', x'A3EF70062751D5118822204C4F4F5020', x'8C5D85F3195B434DBE96FA2156DB51E1', 0, NULL, 0),
(x'7D930B78CF482A4992AF72B0A27C8B63', x'534444BE0C33594ABF7043FFB37BA611', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 1, 'Название (Описание модуля)', 'svm_info_name', x'BB5D44A540C20A43A17D39A9ECC08422', x'E8033AA4F302184F873D2BA18A18C0EA', 0, NULL, 0),
(x'61C42A7BF6C5F540B54914CB87C7263A', x'5479BEDEFB56BA46ADBAF5CB0E8AC4BA', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 4, 'Разрешена модификация (Ограничения полей)', 'FIELDRESTRICTION_AllowModify', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E7D8257EEED0BD4F87D143910056735B', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'57E79AC1918F434EABF51CCC5576EF51', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 6, 'Можно не задавать (Параметры)', 'PARAMETERS_AllowNull', x'4CE798E5DEA9414086FA972E95635600', x'E2948ED3CE97BE4BA976D1998EE21CA3', 0, NULL, 0),
(x'411766E4CAE4B042854D9FA89E200F9B', x'57F23C06893FB44C97B68360FA98BC6D', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 2, 'Группа (Описание теста)', 'svt_info_tgroup', x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'8CBDD9A01C79BB4597EACA9389E993E6', 0, NULL, 0),
(x'95389B524FEB1B4AB58E03E54DE2792D', x'593B035EB94083428CA5C9CF370BCCF0', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 1, 'Название (Библиотеки)', 'GENREFERENCE_Name', x'9B803E67F6CF0943A52BFE2118AE508E', x'5CA5849F4CB5C24E99A1C9B7D61F9A95', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'5948499241292D44ADEFCCA5757B8FC7', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 5, 'Вариант действия (Меню)', 'EntryPoints_ActionType', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'DD3BAAED6251234DB2200C017A16CC53', 0, NULL, 0),
(x'05E3F2B77691184BB9BE8D37011EA0B1', x'5A99A0F18C8FC94A909DE3322937BFE6', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 1, 'Целевая платформа (Логика на форме)', 'VALIDATOR_Target', x'5536327DD7BA124DAFC2E7FF3613B4A1', x'FBA664914D432E499BCBED05CD08591C', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'5AC815BE7DAC0E4BA7CC605687EEDE4E', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 10, 'При открытии (Раздел)', 'PART_OnRun', x'B1EF70062751D5118822204C4F4F5020', x'589CD89E08C83D4FAEF62E2AB006A146', 0, NULL, 0),
(x'FF264BCE62927B4C9CFACD7BBFEDE8FF', x'5C4FD843730BAC41B8E09D166E3404D5', '2017-12-25 16:40:47', '2017-12-25 16:40:47', NULL, NULL, NULL, 2, 'Ресурс (Журнал событий)', 'SysLog_the_Resource', x'E8DAEA453798E54E9A3107370302F20F', x'5D0BC4816FB6C2468B1D45888F52ED6C', 0, NULL, 0),
(x'7898CBC77CACB249B82F376D1B002D92', x'5C53D979B992374FA0E3555594784E00', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 4, 'Заголовок (Поля секции)', 'RPTFields_Caption', x'DED0770C9E55FC43B181156E126543F1', x'8BD31B913B739B46BFF3516F735A0C8F', 0, NULL, 0),
(x'65685FEDDE1E0A41990BD9E3508DAA59', x'5CADD2F62E90F945A0AE79C90D42504A', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 1, 'Название (Действия)', 'ARMJRNLRUN_Name', x'8131E84FA500594B9413D06318A119D4', x'77AD01D324ADDE4D9DA90B6148B89662', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'5CD793C37C07554A8528BFFDAF92B20E', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 21, 'Описание (Поле)', 'FIELD_TheComment', x'A4EF70062751D5118822204C4F4F5020', x'7603E3482F2B8D4EA7D09852EF5CDBE6', 0, NULL, 0),
(x'F4CB7C14D69863458559874945E07963', x'5E11104C25CD844E9103BA087F1A17E1', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 3, 'Код (Ручной код)', 'GENMANUALCODE_Code', x'CA936976E67DDA4A82168BDDF2B0588E', x'071E3E565D314543B9C12910037F595E', 0, NULL, 0),
(x'C694DFB0F089C54FB902510A08FC703F', x'5E1E7595BD31CF4D92AF1F80CA879950', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 1, 'Название (Интерфейсы расширения)', 'FldExtenders_TheName', x'1A0E0B5D3680124BB08160139558B594', x'4918E7AFF0F88A4AB7669C8F163F76F8', 0, NULL, 0),
(x'95389B524FEB1B4AB58E03E54DE2792D', x'5E85CEA5C790E74EA9E6E9ACD2B15A63', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 2, 'Класс ссылки (Библиотеки)', 'GENREFERENCE_RefClassID', x'9B803E67F6CF0943A52BFE2118AE508E', x'44C39AEA9B8F5A419CDF438A27C7AF2F', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'5EEBDF5940CD4549A0F586B9650E8D05', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 7, 'Тип, куда ссылаемся (Поле фильтра)', 'FileterField_RefToType', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'56F918905A5D5547A8986B3C52E4F32C', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'5F06DE3DB136264C97975A82AF2F4745', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 7, 'Горячая клавиша (Методы поля)', 'FIELDMENU_HotKey', x'E4C38941C2713D42A56F4E71CB91B52D', x'2BD7973D7EBF9B47A94A561697724485', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'5F63EC18764FB64284733868C5010F77', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 4, 'Допускается только один объект (Тип объекта)', 'OBJECTTYPE_IsSingleInstance', x'AFEF70062751D5118822204C4F4F5020', x'DD041A279409B7439C470EC8EB9999BF', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'5F7F2FB8AF10E144A686D01B19BD1BF7', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 5, 'Поле (Колонка)', 'ViewColumn_Field', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'D58EE2FB7930254EA159998191C32782', 0, NULL, 0),
(x'5DE7359D37AE654CBCD98E38FB878ADB', x'5FE699B2F2AD464EB8A8731EB94DF758', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 3, 'Объект (Интерфейсы расширения)', 'ExtenderInterface_TheObject', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'D1131FAA950F2B49A447601A029D16F3', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'60674CBBDD69054EAE4225402E0646F2', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 5, 'Поле - фильтр 1 (Представление)', 'PARTVIEW_FilterField1', x'4DB613D7E84C6D46BE2B448874DC0469', x'B69A9691B3776949950E4A1D03D35FD6', 0, NULL, 0),
(x'6900BA17F03CFA4ABBE35AE88C6CF359', x'60725816EE298D419F55F75F98DACAA7', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 1, 'Пользователь (Состав группы)', 'GroupUser_TheUser', x'52932CFE9AE20B4291343E3BDD832A6E', x'E24A0AA894472E4CA774277DD8C7E986', 0, NULL, 0),
(x'0A3ABAD092B1E248A3EAEE7580884E24', x'61F56FE37B6FC44D8AD4F2085240763F', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 1, 'Название (Тип вопроса)', 'svd_qtype_name', x'ED314B8655AFFE4EB13CA7B508D53BA7', x'E2EE7927F465794C9CBD5D6B37E79112', 0, NULL, 0),
(x'7D930B78CF482A4992AF72B0A27C8B63', x'62A4DCCA358D4F4F90D30BA37A5A9430', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 3, 'Баллы за модуль (Описание модуля)', 'svm_info_modulecost', x'BB5D44A540C20A43A17D39A9ECC08422', x'EA2A4A296A8664428334040F0D7A2815', 0, NULL, 0),
(x'F8FB99894B4AFF48B2CA58C2FE320E80', x'62C06BFF0EEFD84D9CDDE3E2B5055E53', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 2, 'Тип хранения (Отображение)', 'FIELDTYPEMAP_StoageType', x'A6EF70062751D5118822204C4F4F5020', x'842BC8FA8E5E0A408433C29994016DD5', 0, NULL, 0),
(x'9C18067A20CE7A478A1E8FB2EA3B88BF', x'639E36A9A7B2D04D89C7DAAE078D29F8', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 5, 'Примечание (Арм)', 'WorkPlace_TheComment', x'C421399726499D4CA7816062CF81B5AD', x'28848240D781C44399163998F43B2F29', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'6576946E9FEAB54DBDE90EF56A7AC264', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 1, 'Название (Методы раздела)', 'PARTMENU_Name', x'2E9E8E54F6892248A312101CA4A9FE74', x'5C60BC924A29264DB6A0490B11A2B65E', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'65838D96B6A9A64CB3009BCD1C4FE2C0', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 6, 'Максимум (Тип поля)', 'FIELDTYPE_Maximum', x'A5EF70062751D5118822204C4F4F5020', x'B9AE9D29B2752E4B85921E48C6CFB6B7', 0, NULL, 0),
(x'1004F737DE558140B7CFBFEEF67AC5BB', x'665D261E5C5B664A8C28215893F7DBFC', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 1, 'Название (Группы)', 'Groups_Name', x'EE6A0EA4417B6D47923CACA251C08E87', x'AF477A68B568DD4D928F9229BE67CE36', 0, NULL, 0),
(x'5DE7359D37AE654CBCD98E38FB878ADB', x'675B99054CA72D4B86C98EF4383C6372', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 1, 'Название (Интерфейсы расширения)', 'ExtenderInterface_TheName', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'E6D050D3945BD94EBA9BE028575D15BA', 0, NULL, 0),
(x'FB99B0F83B4DE14FB6CBBC453D61F13D', x'67E9FDBB218EB540ACB4EE7E9B4AD587', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 1, 'Название (Журнал)', 'Journal_Name', x'6E6CC434159246478D9D4800B6549003', x'431F95DC8A34644CA248B9D11833BB46', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'683B56CF2FDCFE46978186988E81A7FC', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 16, 'Иконка объекта (Тип объекта)', 'OBJECTTYPE_objIconCls', x'AFEF70062751D5118822204C4F4F5020', x'0D5ECD307DA1B246A306C78C6FF9D5AA', 0, NULL, 0),
(x'37931936C900E240819E34C8CBB78F01', x'6883D97D019AED4E967EFE6F7EFC7EDC', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 1, 'Структура, которой принадлежит метод (Ограничения методов)', 'METHODRESTRICTION_Part', x'70307B0F09F77D4E868CCC337E3075D1', x'A346C0EDD504C845AD5372CCDEA55210', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'68E009CF473BFB4E9F7543BDEDBC2D40', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 6, 'В тулбар (Методы раздела)', 'PARTMENU_IsToolBarButton', x'2E9E8E54F6892248A312101CA4A9FE74', x'A643F157081A8C4B9EB122E58F4D5E75', 0, NULL, 0),
(x'230ACEC3C9FF7D46AB6159A96FDE728B', x'692063A9FD172249B148711DA5F8DE04', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 2, 'По родителю (Ограничение уникальности)', 'UNIQUECONSTRAINT_PerParent', x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FBC3C5571B0DA34F98493C4AB14A3162', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'697B7DE465EA43408D8147276ABEA8A1', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 24, 'Маска (Поле)', 'FIELD_TheMask', x'A4EF70062751D5118822204C4F4F5020', x'2D13F4D4B6A5EB4F812E2910E961E2B8', 0, NULL, 0),
(x'1AAEE7B25962AB44B102FA3BCA496706', x'69E38F1B476F7541BA0304DB6AD20EAE', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 1, 'Название (Секции)', 'RPTStruct_Name', x'2A49E8F524222F4585FFA14882C6554F', x'711023109A1A0F479BE88E8C161A1120', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'6A988EA039ED4943940FC84F201B48E0', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 12, 'Поведение при добавлении (Раздел)', 'PART_AddBehaivor', x'B1EF70062751D5118822204C4F4F5020', x'4039D821BEFAE843BAB2C7D05C6651F1', 0, NULL, 0),
(x'431A6C20E0CE684193C33B7C2D36B4C7', x'6A9D0484C355AD45B7B64936332385E5', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 1, 'Название (Параметры вопроса)', 'svq_params_name', x'CBCD0D6CECB7B245BD6FA25065FD66A1', x'84872BCFEDC6374D9F9913B3B7DB611F', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'6B4E2E8C1D004B42A4B21F7D2D8BAE4A', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 1, 'Провайдер (Описание источника данных)', 'FIELDSRCDEF_Provider', x'81AFF1D32C914849A87DDF549EE796E2', x'8492289A3109E240BF8DA5DE550052B6', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'6C4E390B76C96642A4C46D3E0684B0DF', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 11, 'Тип ссылки (Поле)', 'FIELD_ReferenceType', x'A4EF70062751D5118822204C4F4F5020', x'A737207F12045F4FB13B96FCAFB6CE63', 0, NULL, 0),
(x'52F28B84DDC8564197A34350BB7EF873', x'6C761D1FA1C8844898FF8F1262D90300', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 1, 'Представление (Источники журнала)', 'JournalSrc_PartView', x'4D24C3DAD670A445885DD610F748EBFC', x'D25BACD9ABC3CB46A6302AD0EF3C5652', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'6C94009A82329E4DAA1ABC751460ABB9', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 15, 'Правило составления BRIEF поля (Раздел)', 'PART_ruleBrief', x'B1EF70062751D5118822204C4F4F5020', x'0D3ABD32A2B82445B9C11E290710778C', 0, NULL, 0),
(x'65685FEDDE1E0A41990BD9E3508DAA59', x'6CA0C82C77E68F49A5EB08F820369AA8', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 2, 'Расширение (Действия)', 'ARMJRNLRUN_TheExtention', x'8131E84FA500594B9413D06318A119D4', x'0F822574BB1C99409D3FD437DEC9B3ED', 0, NULL, 0),
(x'C694DFB0F089C54FB902510A08FC703F', x'6CD63AE48D9CE346BBCE06DC881FCF25', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 3, 'Объект (Интерфейсы расширения)', 'FldExtenders_TheObject', x'1A0E0B5D3680124BB08160139558B594', x'1F2D71DE2EA202439AEBE9844DCC4D26', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'6DECAD7D2BAC3D4E94A3ACC936A9B012', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 4, 'Тип поля (Поле фильтра)', 'FileterField_FieldType', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'7D03FEC7BE86A648B808788BB35D8849', 0, NULL, 0),
(x'49F5A143369DDB4BA69EF8DDE20E5D39', x'6DEEDF900732AD4DA51BFE6A17EA2293', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 1, 'Базовый тест (Описание)', 'svv_info_basetest', x'4438A0124E1E354C88F3BD7148EECF81', x'19BE54B57AE5FF429CE2AC6D81DA0FBD', 0, NULL, 0),
(x'6950ED62E8662945A85577FB9BAEA29C', x'6F3DE36B20BE1142BAD173021AB271F1', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 1, 'Название (Формулы)', 'RPTFormula_Name', x'2E1322E4F4070F4C8246B0F16CD9186A', x'DD51EE13A4A9504E8C214A35A6743D6C', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'6F85A61332B24C4BBE6C62F3BBE6F06D', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 9, 'При сохранении (Раздел)', 'PART_OnSave', x'B1EF70062751D5118822204C4F4F5020', x'44E64538EA3AC241932DC946CB5CBE7D', 0, NULL, 0),
(x'C6A688C5DBB3364B9DDDCFEFA93670B5', x'729D6A33D801AC4BAB6B6C6817D4CD17', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 1, 'Название отчета (Отчеты)', 'ARMJRNLREP_repname', x'003476C234BE3340B4B5756CD5252CEA', x'1BF559ACC4FF1844AF62ED2BE0BB53CA', 0, NULL, 0),
(x'9C22E9FE56C11F419A69165462FFC923', x'72D93B9E26FE5C48B5DB83F481688F65', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 2, 'Раздел (Номера)', 'Num_Values_OwnerPartName', x'0BC03D83D7E8914D91032DD084BEFC1E', x'AA4BCC195B855B428957431FE17C8C6F', 0, NULL, 0),
(x'A177A30CED146C40B1739BA930414F83', x'7498E842D22B1A4198724986516E162D', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 2, 'Название (Ответы)', 'sva_data_name', x'585457BE9A11AE4C94A27AB69877C201', x'C05A31B62F2D7D4386428074B6FAF8F6', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'77285EA659EA1949BBD1CDA1090FC85C', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 13, 'Объект расширения (Раздел)', 'PART_ExtenderObject', x'B1EF70062751D5118822204C4F4F5020', x'5CFE7F7D9C75394B9AC8E748A35EB0E0', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'78F2199055BEB84EBDA664FE251A5BFB', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 7, 'Горячая клавиша (Методы типа)', 'TYPEMENU_HotKey', x'7A7476873D74B947AF1CAB00FF81154F', x'778BEE54A226CE439350C496251E88AF', 0, NULL, 0),
(x'FB99B0F83B4DE14FB6CBBC453D61F13D', x'79716AA7F086F04EA54096D4A3B57D9C', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 3, 'Описание (Журнал)', 'Journal_TheComment', x'6E6CC434159246478D9D4800B6549003', x'66650B8C936598408D5BCD1835C3BB7A', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'7974E98F9B069E498E4420328710086E', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 9, 'Не показывать форму выбора (Описание источника данных)', 'FIELDSRCDEF_DontShowDialog', x'81AFF1D32C914849A87DDF549EE796E2', x'9BE3C3B42EFDEC4889B2ED11FDC75FDA', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'79A1A870FD298F48989FBD54F7F26B0E', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 6, 'Поле - фильтр 2 (Представление)', 'PARTVIEW_FilterField2', x'4DB613D7E84C6D46BE2B448874DC0469', x'1AADB443D53B00478B0DCADAC3AA848E', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'79C68E30D2832144B6E73BBF48E4B20B', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 1, 'Название (Тип поля)', 'FIELDTYPE_Name', x'A5EF70062751D5118822204C4F4F5020', x'7DFC5301479BCC4384058339935320D4', 0, NULL, 0),
(x'43E053D2087F73459E4F18BC8C16F123', x'7A473B6EEA7DC640A6CCF8E31ED86D17', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 4, 'Подверсия (Контрольные элементы)', 'GENCONTROLS_VersionMinor', x'FB1CB30425654A479F16999870D8EAAF', x'1DA5823CB495E84993717AE35A1EE5F0', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'7B824A6AB471FF4DAC64A1BE43B1C833', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 1, 'Название (Описание)', 'Reports_Name', x'FA3D9B25ACB8784188FD4B715D372FC3', x'C6673C12706DB54D99EFEC32C85EEC7B', 0, NULL, 0),
(x'82475455375F3B499ED817FC450FC11D', x'7C7F082ABF2049418FCEDA4E9F83ED6D', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 1, 'Название (Добавление)', 'ARMJRNLADD_Name', x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'92A191DC907A7B41992FEE0E2139A949', 0, NULL, 0),
(x'5DE4A47587357245A80E318CEBEA3AC6', x'7C967D784D7D1B4C878740541E6F50FD', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 3, 'Редактировать параметр нельзя (Отображение параметров)', 'PARTPARAMMAP_NoEdit', x'CA6FBEF85D59464FACDBFB5838A246CA', x'A409E1A9C8F03A448E1EA78A7B53F84B', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'7DB7E6B454D8D5449B9858EFD71C6D23', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 2, 'Имя (Параметры)', 'PARAMETERS_Name', x'4CE798E5DEA9414086FA972E95635600', x'56CA28FB7CD6054DAB844CC5D9A88066', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'7EB9B3C816DD9346A97993E5EA89B16A', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 3, 'Код (Тип объекта)', 'OBJECTTYPE_Name', x'AFEF70062751D5118822204C4F4F5020', x'0FC7B0C75B17FA4CB81A328B0E29BF29', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'7EE61A764E80CA458D8B9C2B85E8671A', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 6, 'Агрегация (Колонка)', 'ViewColumn_Aggregation', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'7C9ED214068F6B4EBA437EE095DCBA7B', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'7F2893639F4FD24A94529EC785261646', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 7, 'Горячая клавиша (Методы раздела)', 'PARTMENU_HotKey', x'2E9E8E54F6892248A312101CA4A9FE74', x'CA4BEE80724CD8439E7C0D635C4BA8B1', 0, NULL, 0),
(x'77E33C6066F6E1408A00C09B34E74DBE', x'800C4325BAF39C4FB69CFB42EB178B37', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 1, 'Название (Генераторы)', 'GENERATOR_TARGET_Name', x'B9EF70062751D5118822204C4F4F5020', x'17D7B34429D89D48A72E6921D49EB5D2', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'80D0139C4102934AA7202BFCC0DBD435', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 7, 'Исключить из индексирования (Раздел)', 'PART_ManualRegister', x'B1EF70062751D5118822204C4F4F5020', x'2F926B0127D09A439FD588D53724E5DB', 0, NULL, 0),
(x'3FC826B692BCE24D8F5BF3817FFB0E22', x'8277675CB528EF4BB5A66F469EB2A5D3', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 2, 'Скрипт (Проверка правильности)', 'INSTANCEVALIDATOR_Code', x'AD5B514233E2DB408F9045DCFCE01BE6', x'A4DF0B748FB3FA4F809CBBC0400417C9', 0, NULL, 0),
(x'9C18067A20CE7A478A1E8FB2EA3B88BF', x'83821452C7B7F842B090699CC06925C0', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 4, 'Платформа реализации (Арм)', 'WorkPlace_ThePlatform', x'C421399726499D4CA7816062CF81B5AD', x'A6AD8C1D36B8F0448F86CBD63379EF4A', 0, NULL, 0),
(x'4136FD339F98154CAE032FAA5208EAE2', x'8417F2F4DD92B44AB545ED1633A68984', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 1, 'Тип кеширования (Разрешенные владельцы)', 'SysRefCache_CacheType', x'DF24D235302854419E80FF578AAB323C', x'6FE2700A628D9D49B5C06F0918D81797', 0, NULL, 0),
(x'C694DFB0F089C54FB902510A08FC703F', x'845C8EDD6115EA4D8BF662F8ACF6DF32', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 2, 'Целевая платформа (Интерфейсы расширения)', 'FldExtenders_TargetPlatform', x'1A0E0B5D3680124BB08160139558B594', x'83FDB46A09011044B5C4CAB69153378B', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'8466533E43FD584399F64BF8DA6EF2BE', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 2, 'Псевдоним (Представление)', 'PARTVIEW_the_Alias', x'4DB613D7E84C6D46BE2B448874DC0469', x'7044B40CCA76DB48A233EBBC749132F4', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'851EA7312C6EF94F9DFF01F6C263D615', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 5, 'Представление для выбора (Тип объекта)', 'OBJECTTYPE_ChooseView', x'AFEF70062751D5118822204C4F4F5020', x'D70EF489A6577B489EE3471E19972638', 0, NULL, 0),
(x'FF7012D1DBE9BF4A9F0978EBC7976BA4', x'866D4A0CB7818B488983FFA85CB2245F', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 2, 'Параметр (Отображение параметров)', 'FIELDPARAMMAP_ParamName', x'E82A7554B006C64E8DAA692E52A0D36C', x'DEDFC8B1EE4DFF46B28B9E6F4852A1AE', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'86A0C706922A74439AFABEB69CA91364', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 5, 'В меню (Методы поля)', 'FIELDMENU_IsMenuItem', x'E4C38941C2713D42A56F4E71CB91B52D', x'BC360C9BCF2B864081419FEA56D6BA94', 0, NULL, 0),
(x'27B621FD6C3A304E8F8D4C384114731D', x'870E08AA09D3CD439716E2F32E9D8C77', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 1, 'Журнал (Поведение журналов)', 'ARMJournal_TheJournal', x'050E1CC4F38C434B9D6EC5FCD37BEB47', x'0849DBF13B9FE940AA27CAA7A524604D', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'8848EC5ED310764DBE2F5C39E62E4174', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 3, 'Для поиска (Представление)', 'PARTVIEW_ForChoose', x'4DB613D7E84C6D46BE2B448874DC0469', x'A50917873AF66643AE915255F1A6AB91', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'88C622C20D5F4F49A7D330A4D61B4EA2', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 1, 'Последовательность (Параметры)', 'PARAMETERS_sequence', x'4CE798E5DEA9414086FA972E95635600', x'BF56BA07E0FBCF468477AEE9C5EBFDCF', 0, NULL, 0),
(x'A177A30CED146C40B1739BA930414F83', x'8A0EAE41C562A34EB63CF61330D984DB', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 1, 'Модуль (Ответы)', 'sva_data_themodule', x'585457BE9A11AE4C94A27AB69877C201', x'047C8523E842FE40BBD9AEAC6115FDD4', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'8ADEBC57108AEF45B6C1F0AC871F40BB', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 3, 'Описание (Тип поля)', 'FIELDTYPE_the_Comment', x'A5EF70062751D5118822204C4F4F5020', x'999CA22159C1D04D89258DF526B895FE', 0, NULL, 0),
(x'FB99B0F83B4DE14FB6CBBC453D61F13D', x'8AFACD4F1462AB4DA4F768A8A2FBA722', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 2, 'Псевдоним (Журнал)', 'Journal_the_Alias', x'6E6CC434159246478D9D4800B6549003', x'AEDE10BB9DE8344784444750220B79CE', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'8B8AFFF8873C2C4BB98E59C4659813ED', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 6, 'e-mail (Пользователи)', 'Users_EMail', x'55B88B1465099E4EA3D648DCC8CE528B', x'4E59801BB0C45940B17E858E450FD636', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'8BB8EA86C999CC46B0567DC5238AA815', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 3, 'Псвдоним (Колонка)', 'ViewColumn_the_Alias', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'AFFFFBD63B4BBB449D96FD96C6B3A920', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'8BDA51455775044587FC32C7BA0A2535', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 6, 'Фильтр (Меню)', 'EntryPoints_TheFilter', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'3D79183F14ADB34C947B69CDDF289C35', 0, NULL, 0),
(x'97E9606728F78240A81E6F8A76366F72', x'8C92905F1FE708448B6504EC72BA3186', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 3, 'Название библиотеки (Реализации расширения)', 'MTZExtRel_TheLibraryName', x'DDE68FE4F979424DBAC3CB39F69171BC', x'BADD37C8FE4E5D44AABCC4701DF2ED55', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'8CE55DFF5AAC344EACBAE7DBE07569B7', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 18, 'Нумератор (Поле)', 'FIELD_TheNumerator', x'A4EF70062751D5118822204C4F4F5020', x'57B055D27CB93240A4A73B76F765E2E3', 0, NULL, 0),
(x'9996B4B982280F4E9DDB397EE113D8BF', x'8DD6D64588644146BF560CBC758D9B3F', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 3, 'Название в коде (Зачения)', 'ENUMITEM_NameInCode', x'236DF435F8613B41924F83792F76E698', x'94F9A86BD8B2E94D97BBEE6ED01C3CF4', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'8EA965741908FF44A490200D43C274FB', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 16, 'Только создание объекта (Поле)', 'FIELD_CreateRefOnly', x'A4EF70062751D5118822204C4F4F5020', x'B4BFBFEDBC84104B97B3A174D782CD9F', 0, NULL, 0),
(x'95389B524FEB1B4AB58E03E54DE2792D', x'8F1D733C9C573B46943FC21A3018812F', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 4, 'Подверсия (Библиотеки)', 'GENREFERENCE_VersionMinor', x'9B803E67F6CF0943A52BFE2118AE508E', x'D08E98EBBC4F834FB79CD4773654471D', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'8F246FDAACA3AE4B9FC964EB844B81BF', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 2, 'Тип структры (Раздел)', 'PART_PartType', x'B1EF70062751D5118822204C4F4F5020', x'99D598E6212E4149AD6266AFF7B34F45', 0, NULL, 0),
(x'F93BEAAF2ED6C44281861300DC106249', x'8FAAF6A8C5946346AE4DEA0DC2F4431F', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 3, 'Связывать как (Связанные представления)', 'PARTVIEW_LNK_RefType', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'FA0E0DE36C81CC4E9F2A3A736ED110BA', 0, NULL, 0),
(x'D15576EFF01F6140BD9E0AD3004C538D', x'9012B4AC567FAE4B8DCDE6439D8A2646', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 3, 'Архивное (Состояния)', 'OBJSTATUS_IsArchive', x'66C846DFF838F14E92E25F899D98BD16', x'692DAD0CD6A11D4987AB0BFB5C11E4D6', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'9122B247073BE648A38F4565EAE3DDCE', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 1, 'Название (Методы типа)', 'TYPEMENU_Name', x'7A7476873D74B947AF1CAB00FF81154F', x'7C715213F6E95544A225797A38525BCF', 0, NULL, 0),
(x'7898CBC77CACB249B82F376D1B002D92', x'91520420AF4AFB4CBC85C8E1D165672B', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 3, 'Размер (Поля секции)', 'RPTFields_FieldSize', x'DED0770C9E55FC43B181156E126543F1', x'89E7E3F472210F4093747F79118802D7', 0, NULL, 0),
(x'52F28B84DDC8564197A34350BB7EF873', x'9159D75EECBB7E43A13A7EAFA7C2C43B', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 4, 'Псевдоним представления (Источники журнала)', 'JournalSrc_ViewAlias', x'4D24C3DAD670A445885DD610F748EBFC', x'32918078A0BB9D4B8482FC94C3A00B2E', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'926FD731BCC8EE4E9DE191B360FD8110', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 8, 'Отчет (Меню)', 'EntryPoints_Report', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'4AEE4C033EA34146B27D6CD0D5F2CD9B', 0, NULL, 0),
(x'D15576EFF01F6140BD9E0AD3004C538D', x'92F2FE9972AB4F46AE167DAF105F9AD2', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 4, 'Описание (Состояния)', 'OBJSTATUS_the_comment', x'66C846DFF838F14E92E25F899D98BD16', x'ED484E66281E0D4786567FFB0672C2FA', 0, NULL, 0);
COMMIT;
BEGIN;
INSERT INTO viewcolumn VALUES
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'93460C2DBD830F4B9636326500C95E5A', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 7, 'Возвращает значение (Параметры)', 'PARAMETERS_OutParam', x'4CE798E5DEA9414086FA972E95635600', x'452C16E19EFFC046B2AE8B7962327874', 0, NULL, 0),
(x'4136FD339F98154CAE032FAA5208EAE2', x'9374556CD338B44B8DDAB4AD84672721', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 2, 'Идентификатор владельца (Разрешенные владельцы)', 'SysRefCache_ObjectOwnerID', x'DF24D235302854419E80FF578AAB323C', x'3817A7E9D5356C4EB468B52F523E59D0', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'93A6A1C2BCADB3478A12B46200E74381', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 14, 'Стиль (Поле)', 'FIELD_TheStyle', x'A4EF70062751D5118822204C4F4F5020', x'66FFDAA193BFF245879ABFD03C8D1E83', 0, NULL, 0),
(x'6950ED62E8662945A85577FB9BAEA29C', x'94759C6855F70B49ADCEA704DF152A43', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 2, 'Выражение (Формулы)', 'RPTFormula_Code', x'2E1322E4F4070F4C8246B0F16CD9186A', x'D5D4BFB72A29D1418986EA197AC38275', 0, NULL, 0),
(x'E84B652091A1F04EB8FAED49DA17D25C', x'9491318144353F40BB09C2AE656C3671', '2017-12-25 16:40:53', '2017-12-25 16:40:53', NULL, NULL, NULL, 1, 'Тип документа (Список типов)', 'ARMTypes_TheDocumentType', x'CE37F730811C7246B0F96E5BF4B15971', x'4C7130F4D8D0624780B0FCC2256627BF', 0, NULL, 0),
(x'9C18067A20CE7A478A1E8FB2EA3B88BF', x'9497E2C0626BE349B5377D57360A2472', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 2, 'Заголовок (Арм)', 'WorkPlace_Caption', x'C421399726499D4CA7816062CF81B5AD', x'49026CB4877D044C959599D6D81FBEF1', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'949939BBF01E914CA7D02A55F0AEE6F5', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 9, 'Login (Сессия пользователя)', 'the_Session_Login', x'A23E94783679584FB31676E4F968E3B4', x'16559DABC41D4640B979093EF40199A3', 0, NULL, 0),
(x'411766E4CAE4B042854D9FA89E200F9B', x'9585DF67E9B1F74AB60093495E061C18', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 3, 'Владелец (Описание теста)', 'svt_info_towner', x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'16D23B7F3218B4409C2937F00AC5DF4B', 0, NULL, 0),
(x'62472937D190C846AEB4B0E61206BC7E', x'95EAA27DCC50CD43BBE18AAB05401FD7', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 5, 'Разрешено удалять (Органичения разделов)', 'STRUCTRESTRICTION_AllowDelete', x'33AC48F4133B994893EE47D3D62962EC', x'4068A5FE3A87D04E80B9B88CB3A7570E', 0, NULL, 0),
(x'FF264BCE62927B4C9CFACD7BBFEDE8FF', x'960DB59FA0431640816E7903C6B5794F', '2017-12-25 16:40:47', '2017-12-25 16:40:47', NULL, NULL, NULL, 1, 'Сессия (Журнал событий)', 'SysLog_TheSession', x'E8DAEA453798E54E9A3107370302F20F', x'DFBC9C0B62AE6D40995E1299EAEEA664', 0, NULL, 0),
(x'2F7F9C623258EA47A3AA6B1B42CA2CF6', x'96A6E73C0B1CA44588BF360E0C2F7387', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 1, 'Поле (Поля ограничения)', 'CONSTRAINTFIELD_TheField', x'B10601C795AA73418097614495D6EF28', x'14B4CF6C92BF8F46AD1CD4A2B360E6BD', 0, NULL, 0),
(x'3FE943E2C34EC74D804AC4A0F448C2CA', x'96D175FB58E2F34A818FCE68008F1608', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 2, 'Скрипт (Значение по умолчанию)', 'FIELDEXPRESSION_Code', x'D08EB034B5C49C4BBA59870A4599F52A', x'164A939DB55F49489280F4D7733304CC', 0, NULL, 0),
(x'873A241131D8C04696C25CCA59FD008A', x'97A70B0E9DAC444F83FDF98E5D65B4B7', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 1, 'Название (Тип параметра)', 'svd_ptype_name', x'AB287FCA5332D04782A1869147F27E4D', x'9FD4F11528279B45A8CB8A88EC7B8307', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'97EC9802D8720F498A687CFB374A22DA', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 1, 'Приложение (Сессия пользователя)', 'the_Session_ApplicationID', x'A23E94783679584FB31676E4F968E3B4', x'E9F50C668C4DF94486378EC5A894FE22', 0, NULL, 0),
(x'52F28B84DDC8564197A34350BB7EF873', x'99C05C4A8F303A4FACD430B8262F00FE', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 2, 'При открытии (Источники журнала)', 'JournalSrc_OnRun', x'4D24C3DAD670A445885DD610F748EBFC', x'45EF18E2EC0D924C9A40001A0777CB1A', 0, NULL, 0),
(x'7D930B78CF482A4992AF72B0A27C8B63', x'99DE8C881CECD94BA28E64D890D98457', '2017-12-25 18:20:35', '2017-12-25 18:20:35', NULL, NULL, NULL, 2, 'Время на прохождение модуля (Описание модуля)', 'svm_info_moduletime', x'BB5D44A540C20A43A17D39A9ECC08422', x'C89A7CCBBB67C24FB46720C11EA4F166', 0, NULL, 0),
(x'F93BEAAF2ED6C44281861300DC106249', x'9A5A76FD039EB441B538CAED88AF489A', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 1, 'Представление (Связанные представления)', 'PARTVIEW_LNK_TheView', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'CE94E3A02452CF48935B2963093CEB96', 0, NULL, 0),
(x'BCD3A0398C04034F9EB658D3A54A47C9', x'9A7B724DD03AD34EA0A0890D69F48E0F', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 3, 'Возвращаемый тип (Методы и процедуры)', 'SHAREDMETHOD_ReturnType', x'ADEF70062751D5118822204C4F4F5020', x'C2BD06116470BD47BF0505DE96CBACD6', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'9AF2677D981911468C915466F5189961', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 19, 'Шаблон зоны нумерации (Поле)', 'FIELD_ZoneTemplate', x'A4EF70062751D5118822204C4F4F5020', x'71A9B816D3094B4A86D1FE3371D1D345', 0, NULL, 0),
(x'7AF9C265DA4C254DA1B24EAFAD1C5DA8', x'9B88B9417A39304BA8AEDF098BD5AA58', '2017-12-25 16:40:59', '2017-12-25 16:40:59', NULL, NULL, NULL, 2, 'Название (Группа полей фильтра)', 'FilterFieldGroup_Name', x'23D9C69807B88C4191E7C351511B5EB1', x'4AE3643BF6A4BA49B0F85BF88770EEBA', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'9BF6881B997354449E928633379BF8D0', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 8, 'Вариант сортировки в табличном представлении (Тип поля)', 'FIELDTYPE_GridSortType', x'A5EF70062751D5118822204C4F4F5020', x'7EAE9A6123DA0E4681ECCBE32A96D493', 0, NULL, 0),
(x'41B8EFCE276DE74DBB986A42FB7B67E0', x'9C62C86919010148AA591923FB594AA8', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 2, 'Этот режим является основным режимом работы объекта (Режим работы)', 'OBJECTMODE_DefaultMode', x'6D2968111CA0DB45B67D76A07F3FF64C', x'F7B5144DE8A0A445ADCC5B2D11D547B9', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'9D23EC924353D3408DD9CE71CB08D4AE', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 10, 'Размер поля (Поле)', 'FIELD_DataSize', x'A4EF70062751D5118822204C4F4F5020', x'623C86641C1DD349BF84604893BCD630', 0, NULL, 0),
(x'49F5A143369DDB4BA69EF8DDE20E5D39', x'9D5275E5F280E343834B4A50161C31DF', '2017-12-25 18:20:32', '2017-12-25 18:20:32', NULL, NULL, NULL, 2, 'Номер варианта (Описание)', 'svv_info_vnum', x'4438A0124E1E354C88F3BD7148EECF81', x'66E2B584A03A874781E218D38FE6EC37', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'9DE6CB5034726749A0E8CF2FCABD879C', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 15, 'Сохранять объект целиком (Тип объекта)', 'OBJECTTYPE_CommitFullObject', x'AFEF70062751D5118822204C4F4F5020', x'7BFF06EA8FAD704187A74A019A5730F0', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'9E027857B82430429CC6885CA953DCAB', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 9, 'Массив значений (Поле фильтра)', 'FileterField_ValueArray', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'91255A0E505DD14290D37E3DF29DFC51', 0, NULL, 0),
(x'3FE943E2C34EC74D804AC4A0F448C2CA', x'9F132159A66EAB4EBF42728F6666676E', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 1, 'Платформа (Значение по умолчанию)', 'FIELDEXPRESSION_Target', x'D08EB034B5C49C4BBA59870A4599F52A', x'31F0647932DA6146AE303EDB9D36C058', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'9F404EDC35BEF844888110F5507D5B66', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 5, 'Доменное имя (Пользователи)', 'Users_DomaiName', x'55B88B1465099E4EA3D648DCC8CE528B', x'568A2862604DBE4C845387B8F227B9A9', 0, NULL, 0),
(x'1AAEE7B25962AB44B102FA3BCA496706', x'9F6918EC085FDC4F8F163724BE2F4B4C', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 2, 'Заголовок (Секции)', 'RPTStruct_Caption', x'2A49E8F524222F4585FFA14882C6554F', x'BB7A3BB448294B4A8E4D53887AE4AA4E', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'9FDE955F8A927D4A8F0CC6912723FCE8', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 11, 'Тип репликации (Тип объекта)', 'OBJECTTYPE_ReplicaType', x'AFEF70062751D5118822204C4F4F5020', x'496770C738B39248A18F28417379EA86', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'A0AECF0C47E00543BF745069674B5BAA', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 10, 'Ссылка на раздел (Параметры)', 'PARAMETERS_RefToPart', x'4CE798E5DEA9414086FA972E95635600', x'1E5877214C48A14190A3898F8065D615', 0, NULL, 0),
(x'7AF9C265DA4C254DA1B24EAFAD1C5DA8', x'A1CECCBD00A048418E82DE5AE3B6114B', '2017-12-25 16:40:59', '2017-12-25 16:40:59', NULL, NULL, NULL, 3, 'Заголовок (Группа полей фильтра)', 'FilterFieldGroup_Caption', x'23D9C69807B88C4191E7C351511B5EB1', x'15402D79B1AA0842BF678D7D220AF66E', 0, NULL, 0),
(x'95F038D23E19214184A7FEB206A76048', x'A3268AF73DFD2C4789A702459B8E669B', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 3, 'Обязательный (Параметры вопроса)', 'svp_params_mandatory', x'3BD09DDC0811AB46BA41199E4AA97A4C', x'4966BC4FB474AB43AE6949F7B9616607', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'A3F79EF2E3E90D4FBC30BB20EBFB1420', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 5, 'Пользователь (Сессия пользователя)', 'the_Session_Usersid', x'A23E94783679584FB31676E4F968E3B4', x'828D644EFE81444E98ABCD542C698286', 0, NULL, 0),
(x'F2EB4EB40F9514459EF3EECEF24D52EC', x'A433C803B96C0442A831FE7133FC59E8', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 2, 'Код языка (Локализация)', 'LocalizeInfo_LangShort', x'5A437DA5B3730741B22BC18782085C84', x'6089784572E2B24CA33C2559564C95A5', 0, NULL, 0),
(x'43E053D2087F73459E4F18BC8C16F123', x'A47FCF32D638094D97AEE2537A989D7D', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 1, 'ProgID контрольконо элемента (Контрольные элементы)', 'GENCONTROLS_ControlProgID', x'FB1CB30425654A479F16999870D8EAAF', x'8D727636686B454FB3E63754B3625164', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'A494536D9B55B84BB6B188C41C48BD7D', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 4, 'Включить в тулбар (Меню)', 'EntryPoints_AsToolbarItem', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BDC65D7D13D14B4DBDABF0890B8D1CBE', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'A4DB3559437DDA459BFB25E9B49E86E7', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 5, 'Имя поля (Поле)', 'FIELD_Name', x'A4EF70062751D5118822204C4F4F5020', x'149976562DCDFF4F87242CCCC2209F72', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'A56B793C4D45E148B8580499C0146E67', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 4, 'Раздел (Колонка)', 'ViewColumn_FromPart', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'43CFD88A728C3349A0ABCCAED0DC11A3', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'A57D22909A65DA44B255C65776417F2B', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 6, 'Расширение для создания отчета (Описание)', 'Reports_TheReportExt', x'FA3D9B25ACB8784188FD4B715D372FC3', x'DA54895B7920D94DA1752DF34D31E2BE', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'A57F1730E772284DA21DB151F766E95B', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 19, 'Рарешено удаление (Меню)', 'EntryPoints_AllowDel', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BC2555EC6D61834DA45F61ACAD93149F', 0, NULL, 0),
(x'3FC826B692BCE24D8F5BF3817FFB0E22', x'A741FCA605885B47ABB79C86CB09ACA5', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 1, 'Платформа (Проверка правильности)', 'INSTANCEVALIDATOR_Target', x'AD5B514233E2DB408F9045DCFCE01BE6', x'2040990F8E51BD4CB6176DECFA4F8627', 0, NULL, 0),
(x'F93BEAAF2ED6C44281861300DC106249', x'A7ED728587B36A4DA1D79B3E25E592B0', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 6, 'Порядок (Связанные представления)', 'PARTVIEW_LNK_SEQ', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'9DABCC08689A334C9F37876ACF95F27D', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'A9182BB4CC756245B5217514453912F9', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 5, 'Тип отчета (Описание)', 'Reports_ReportType', x'FA3D9B25ACB8784188FD4B715D372FC3', x'5457EE3FCA222742BF0F252E5E26A72B', 0, NULL, 0),
(x'7898CBC77CACB249B82F376D1B002D92', x'AA880ADB1EBF044DAA64526BB6282AF0', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 2, 'Тип поля (Поля секции)', 'RPTFields_FieldType', x'DED0770C9E55FC43B181156E126543F1', x'3DDA49D28AFFDF429EC3A3A866E5B4DD', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'AAADA1C4694F5C45A39D0632D74D2E8C', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 3, 'Заголовок (Меню)', 'EntryPoints_Caption', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'5C8EFFDC6FEF834DA2D318545B7B142F', 0, NULL, 0),
(x'52F28B84DDC8564197A34350BB7EF873', x'AB19B686B8554B4A93C928B78C629899', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 3, 'Режим открытия (Источники журнала)', 'JournalSrc_OpenMode', x'4D24C3DAD670A445885DD610F748EBFC', x'715FB7CC138F0148AADF2C16EF98F035', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'AC2D4132F3D2B341ABF1ABA4C20F83E4', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 1, 'Название (Методы поля)', 'FIELDMENU_Name', x'E4C38941C2713D42A56F4E71CB91B52D', x'1DE4E3D848C2C247868B2623D6B3E592', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'AC4F8CEB0311B4419959E5C2794D0A1E', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 4, 'Название (Раздел)', 'PART_Name', x'B1EF70062751D5118822204C4F4F5020', x'42304E8EC6032641BD107C3650D5B95B', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'AD717CD3F53EAA40A006F4285D8D6409', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 4, 'Нужен размер (Тип поля)', 'FIELDTYPE_AllowSize', x'A5EF70062751D5118822204C4F4F5020', x'AD1768A8E4E4BE4EB08C60828659BD52', 0, NULL, 0),
(x'61D2FE9CAB7F7E43AF34EDAC9D53AC1E', x'AE718069A0C3504D9E3C268CA9F5761F', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 1, 'Название (Фильтр)', 'Filters_Name', x'24D75AB76F6BBD45B0BBC75D17309DC9', x'9857DF622E53A54C924FE0CA9AF26DCE', 0, NULL, 0),
(x'C6A688C5DBB3364B9DDDCFEFA93670B5', x'AE96A9EFB1ECA54DBCD1EFC205838FC1', '2017-12-25 16:40:51', '2017-12-25 16:40:51', NULL, NULL, NULL, 2, 'Отчет (Отчеты)', 'ARMJRNLREP_TheReport', x'003476C234BE3340B4B5756CD5252CEA', x'9FD766EF1E249448AB2BAEB442FF12CC', 0, NULL, 0),
(x'4136FD339F98154CAE032FAA5208EAE2', x'AFA2BE419F11614CBA8630E2C3F912A8', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 4, 'модуль (Разрешенные владельцы)', 'SysRefCache_modulename', x'DF24D235302854419E80FF578AAB323C', x'22CCEDFFD4595B40ADA4531839F059CA', 0, NULL, 0),
(x'95F038D23E19214184A7FEB206A76048', x'AFEBF2840F1D3E4E8706D032CCE2F42B', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 2, 'Тип параметра (Параметры вопроса)', 'svp_params_ptype', x'3BD09DDC0811AB46BA41199E4AA97A4C', x'0048EEF856686543B804E08FA3E36836', 0, NULL, 0),
(x'BCD3A0398C04034F9EB658D3A54A47C9', x'AFFCBDF9D8633647AD0C5D09DD8BDE5E', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 1, 'Название (Методы и процедуры)', 'SHAREDMETHOD_Name', x'ADEF70062751D5118822204C4F4F5020', x'090365079152D44B90EB3B8118356905', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'B038A77E89ABE24AB61592BFF3FC2608', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 7, 'Сортировка источника данных (Описание источника данных)', 'FIELDSRCDEF_SortField', x'81AFF1D32C914849A87DDF549EE796E2', x'766A3B30E1A9884182328B87342735B2', 0, NULL, 0),
(x'76CF696E8C5D7840B948E19AF4C5F8B1', x'B095834347902C4FAB475FEF8B65BD0B', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 1, 'Название (Пакет генерации)', 'GENPACKAGE_Name', x'05C61246727ED0478A2852CC7BFF4C7F', x'CB3AFCA9DB42EC4E880973228594665C', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'B0C986015D6B464B8DEF3C90593B63CE', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 2, 'Строка соединения с источником (Описание источника данных)', 'FIELDSRCDEF_ConnectionString', x'81AFF1D32C914849A87DDF549EE796E2', x'1F26059075A3D7438DD91164EC7557AD', 0, NULL, 0),
(x'17A3BE0E13E82D48968904E99CBEABAB', x'B1FF43F6DD1A244BB8FE2B97A8C7F16A', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 2, 'Скрипт (Логика поля на форме)', 'FIELDVALIDATOR_Code', x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'C7837FFC5C63A34EBD541D7C3A1E0805', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'B26E69091AF87141A1973A912589991C', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 7, 'Телефон (Пользователи)', 'Users_Phone', x'55B88B1465099E4EA3D648DCC8CE528B', x'4EE8DCC2C7F88843BC47229E2E7A4910', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'B3AD3342B1804C43B492F0BEFFDDAC54', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 8, 'Локализация (Сессия пользователя)', 'the_Session_Lang', x'A23E94783679584FB31676E4F968E3B4', x'EC17956C14F42044A5C3F04B7D91A23E', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'B415B9AF2F6D044BBD10F613B89F3A78', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 4, 'Метод (Методы раздела)', 'PARTMENU_the_Action', x'2E9E8E54F6892248A312101CA4A9FE74', x'32473779E7B2DB41A34A9F6AAEC5BD36', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'B6094D5C2A5AFB4EA8B7960C05F74160', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 17, 'Архивировать вместо удаления (Раздел)', 'PART_UseArchiving', x'B1EF70062751D5118822204C4F4F5020', x'560CCC73DC89724CBC4E67C07028EA15', 0, NULL, 0),
(x'FB99B0F83B4DE14FB6CBBC453D61F13D', x'B6B4ED83CD039A4282C44302F35291AD', '2017-12-25 16:40:55', '2017-12-25 16:40:55', NULL, NULL, NULL, 5, 'Массовое выделение (Журнал)', 'Journal_UseFavorites', x'6E6CC434159246478D9D4800B6549003', x'FDD81F11562038498668757130F4D57C', 0, NULL, 0),
(x'C694DFB0F089C54FB902510A08FC703F', x'B6CDABDBBCD7284FA9488DAF21FBEE8B', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 4, 'Конфиг (Интерфейсы расширения)', 'FldExtenders_TheConfig', x'1A0E0B5D3680124BB08160139558B594', x'E5042C091A48154C9741738CE08064A1', 0, NULL, 0),
(x'F4CB7C14D69863458559874945E07963', x'B77F891E12439041AB4C78C327BB6856', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 2, 'Псевдоним (Ручной код)', 'GENMANUALCODE_the_Alias', x'CA936976E67DDA4A82168BDDF2B0588E', x'5C5420F107406A49A220DD9CD45CA9B1', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'B78CB789DA338D48A9561223AAF6E814', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 15, 'Ссылка в пределах объекта (Поле)', 'FIELD_InternalReference', x'A4EF70062751D5118822204C4F4F5020', x'B1A9CEEE5BC9C44186740C229C2892B3', 0, NULL, 0),
(x'F33DE6333F50374B95A2C3A4AA3FB564', x'B84AE150BCFE9944BA22331B322CB717', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 4, 'Тип данных (Параметры)', 'PARAMETERS_TypeOfParm', x'4CE798E5DEA9414086FA972E95635600', x'7070D54129C6C848A0A417ECE3163EB6', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'B86DB4A7D3D85D4796597A542E0237B5', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 6, 'Не записывать в журнал (Раздел)', 'PART_NoLog', x'B1EF70062751D5118822204C4F4F5020', x'6B6B75696557834694480A729ED9CCE0', 0, NULL, 0),
(x'0BB050C63D606043B040966AFE17D52D', x'B877D3A5FF903A4989BA46B40BEE8A42', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 3, 'Поле фильтра (Привязка фильтра)', 'EPFilterLink_FilterField', x'9F3507D4042269499789956215E456E6', x'FBCE92419F45624085AD8E293A7A86AE', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'B9F82314EBD1A543BDD522F0C321AB5E', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 7, 'Поиск текста (Тип поля)', 'FIELDTYPE_AllowLikeSearch', x'A5EF70062751D5118822204C4F4F5020', x'ADF67B2937FEE64EAC8B40D2E1E50A93', 0, NULL, 0),
(x'FD7683D9D63D2F47AED5D48900D981F5', x'BA82E4B222F5E447BA314EA79730D9C9', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 2, 'Схема нумерации (Описание)', 'Num_head_Shema', x'D9BE36C44E29A7488C376D4CF32343BE', x'C2C81EA1042CA646A46659D2066349BC', 0, NULL, 0),
(x'62472937D190C846AEB4B0E61206BC7E', x'BB82E56DAC4D104EA1CA09F3FBBA9CFC', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 4, 'Разрешено изменять (Органичения разделов)', 'STRUCTRESTRICTION_AllowEdit', x'33AC48F4133B994893EE47D3D62962EC', x'D6D6FAE4D21C6B42B6F29B733D616892', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'BBE3E545553F5C47B384AC339E2DF857', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 7, 'Базовый запрос (Описание)', 'Reports_ReportView', x'FA3D9B25ACB8784188FD4B715D372FC3', x'D6368FFEFD2FA3419BF315554CF22424', 0, NULL, 0),
(x'61D2FE9CAB7F7E43AF34EDAC9D53AC1E', x'BE8A5586C4A5D147B792C1AEB1B594B8', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 3, 'Описание (Фильтр)', 'Filters_TheComment', x'24D75AB76F6BBD45B0BBC75D17309DC9', x'6294208EDC98A04E83B77796A363820C', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'C0A1D4BEE6B46B4B9C414C12F964B43B', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 2, 'Название (Поле фильтра)', 'FileterField_Name', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5E94EA1F98118C40906040BD85D60EDC', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'C16E68307100A14C9103158DFDAB42F8', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 4, 'Имя для входа (Пользователи)', 'Users_Login', x'55B88B1465099E4EA3D648DCC8CE528B', x'422E7BC75803914FBDD2B95A66B1EB25', 0, NULL, 0),
(x'230ACEC3C9FF7D46AB6159A96FDE728B', x'C1836CEDC32DD740A12498F8C7521F7C', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 1, 'Название (Ограничение уникальности)', 'UNIQUECONSTRAINT_Name', x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FA8A2FCC5083CB48AB9D57E6103D4490', 0, NULL, 0),
(x'DEFA4458675ACC4F86FD6F66D93026C2', x'C1D43009B16D504CA69BE048FF09E2D2', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 9, 'Отложенное сохранение (Тип поля)', 'FIELDTYPE_DelayedSave', x'A5EF70062751D5118822204C4F4F5020', x'65DBC4A748C5D141A6143A6C57363977', 0, NULL, 0),
(x'A177A30CED146C40B1739BA930414F83', x'C2998D5D05FD9C4C8160F73E5E1D12ED', '2017-12-25 18:20:37', '2017-12-25 18:20:37', NULL, NULL, NULL, 3, 'Значение (Ответы)', 'sva_data_theValue', x'585457BE9A11AE4C94A27AB69877C201', x'1ADA3728F2DA4B439C9D5385E67255C7', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'C31962EDEC4E584BABBA8AF506804EF9', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 6, 'Последнее подтверждение (Сессия пользователя)', 'the_Session_LastAccess', x'A23E94783679584FB31676E4F968E3B4', x'6E114E9F6A772547ACEEFB88734D4556', 0, NULL, 0),
(x'F93BEAAF2ED6C44281861300DC106249', x'C3526FD99B1D494DB63988603697C47D', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 2, 'Связь: Поле для join источник (Связанные представления)', 'PARTVIEW_LNK_TheJoinSource', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'BC07F828234A3B4F80A28C30F5F12730', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'C4556175900F054CA452641AF8D865CA', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 6, 'Включать в тулбар (Методы типа)', 'TYPEMENU_IsToolBarButton', x'7A7476873D74B947AF1CAB00FF81154F', x'863AE5CA67FDBA439BABCF5E828B7B94', 0, NULL, 0),
(x'DF76A4AA0533FD4582EF07182F24F489', x'C49954BE0424D04C809E439EC4A880B6', '2017-12-25 16:40:45', '2017-12-25 16:40:45', NULL, NULL, NULL, 1, 'Название (Приложение)', 'MTZAPP_Name', x'C2E0DB8C89591042BDFB33C2C45F2509', x'404410118C1BE44B9DF110E08910F052', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'C4A278A1A43E5A4EBCD427B95DBB969F', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 3, 'Заголовок (Раздел)', 'PART_Caption', x'B1EF70062751D5118822204C4F4F5020', x'EC9A95007193DA4796B67DF48E836010', 0, NULL, 0),
(x'9C22E9FE56C11F419A69165462FFC923', x'C4BC24A66856C64D9FDF44C6D13A1615', '2017-12-25 16:40:32', '2017-12-25 16:40:32', NULL, NULL, NULL, 1, 'Значение (Номера)', 'Num_Values_the_Value', x'0BC03D83D7E8914D91032DD084BEFC1E', x'576D4D6F03EEBE4595BC51DF2D9FB41C', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'C578B96447C1924CA05BF5BA9B585A91', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 8, 'Раздел, куда ссылаемся (Поле фильтра)', 'FileterField_RefToPart', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'BF7AFD80E3E1874897BEFEADC78B9EFC', 0, NULL, 0),
(x'5DE7359D37AE654CBCD98E38FB878ADB', x'C5FEEB2A9EEF59489E90637DB9F1DFCA', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 4, 'Конфиг (Интерфейсы расширения)', 'ExtenderInterface_TheConfig', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'16A28D8A31BFAD44AABAF271D8F7A399', 0, NULL, 0),
(x'411766E4CAE4B042854D9FA89E200F9B', x'C695C0DC5A435D49BD63B03427904C0A', '2017-12-25 18:20:39', '2017-12-25 18:20:39', NULL, NULL, NULL, 1, 'Название теста (Описание теста)', 'svt_info_name', x'BB5AE3BF51194E4CAD052DF3B8CD92AE', x'4DAAFFAFB30060459BDCC0507C198597', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'C827D623C7BE2E4895EA1CB95A6CE8E2', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 10, 'Отображать при поиске (Тип объекта)', 'OBJECTTYPE_AllowSearch', x'AFEF70062751D5118822204C4F4F5020', x'E0B7C2728F4A884693D8A7E5839343A8', 0, NULL, 0),
(x'4136FD339F98154CAE032FAA5208EAE2', x'C8BFC510BAC04A40AE5D131D28138B64', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 3, 'Сессия (Разрешенные владельцы)', 'SysRefCache_SessionID', x'DF24D235302854419E80FF578AAB323C', x'6896BFF3F10F2C42A457124B8FF36CB9', 0, NULL, 0),
(x'9996B4B982280F4E9DDB397EE113D8BF', x'C9506D7E0D0BF64589366A1E287968B2', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 1, 'Название (Зачения)', 'ENUMITEM_Name', x'236DF435F8613B41924F83792F76E698', x'3743A2DC2CBB3A4696C0C37D6420679E', 0, NULL, 0),
(x'5CE3638E13F2A9499993EEC628EEA37F', x'C9AF08A66BF3B94B931404E0BB230B9E', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 1, 'Тип Вопроса (Описание)', 'svp_info_qtype', x'0EE6621A36D0304D98DB9034533FD00C', x'682BD312F4923C419513D23B58075073', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'CA5CFC7D05343F41B44E9E9E77E99F8B', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 2, 'Текущая роль пользователя (Сессия пользователя)', 'the_Session_UserRole', x'A23E94783679584FB31676E4F968E3B4', x'52A505481C86D347BD2F5C785F002E17', 0, NULL, 0),
(x'43E053D2087F73459E4F18BC8C16F123', x'CA7722DC808B6746B776A3065CC3897D', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 2, 'Класс контрольногоэлемента (Контрольные элементы)', 'GENCONTROLS_ControlClassID', x'FB1CB30425654A479F16999870D8EAAF', x'F71745CCA37F35478351A031B3315154', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'CAA9373170235B4EADE7646625BF669B', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 11, 'При удалении (Раздел)', 'PART_OnDelete', x'B1EF70062751D5118822204C4F4F5020', x'3E9A65BCAB1C394992E5E9D938DA5BD0', 0, NULL, 0),
(x'F4CB7C14D69863458559874945E07963', x'CB084223C97A0E4B9300E9AB7B8625FD', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 1, 'Название (Ручной код)', 'GENMANUALCODE_Name', x'CA936976E67DDA4A82168BDDF2B0588E', x'90627C216E67474D9ABC67A754661FA1', 0, NULL, 0),
(x'61D2FE9CAB7F7E43AF34EDAC9D53AC1E', x'CB229400621C4848BF6A8DAB85A6C44B', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 2, 'Заголовок (Фильтр)', 'Filters_TheCaption', x'24D75AB76F6BBD45B0BBC75D17309DC9', x'42EC5E3F709973408C2DAD363EBAEFCC', 0, NULL, 0),
(x'0106C9DB089FA74FB75D6772FB3936B6', x'CB4677452CF25C4FB5C50ADC39E6BCCC', '2017-12-25 16:40:31', '2017-12-25 16:40:31', NULL, NULL, NULL, 1, 'Маска зоны (Зоны)', 'Num_zones_ZoneMask', x'32245159DFE6F941A4366BF7DB1800BB', x'533A99AC9B5E1143A1ABF80C00923883', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'CB988DBC31CC274A900166DDF68C3A4F', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 3, 'Момент закрытия (Сессия пользователя)', 'the_Session_ClosedAt', x'A23E94783679584FB31676E4F968E3B4', x'E7192E16C9BD4640B7375F1018307043', 0, NULL, 0);
COMMIT;
BEGIN;
INSERT INTO viewcolumn VALUES
(x'D32DEC41B6E0A840A90FB050C9D50689', x'CC624A959366F14E9B2B33690ED65875', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 2, 'Название (Колонка)', 'ViewColumn_Name', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'B797253247A067458F01B6FC770A0EB0', 0, NULL, 0),
(x'6A7F7CFB90566B46A5F3700C31960873', x'CCAC85FFEB66D14AB86AEF7A1EF9CB50', '2017-12-25 16:40:46', '2017-12-25 16:40:46', NULL, NULL, NULL, 4, 'Закрыта (Сессия пользователя)', 'the_Session_Closed', x'A23E94783679584FB31676E4F968E3B4', x'957AD70CDF485D4F8D3AC66F0EA66B6A', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'CD2B79BA09C6234D95E1AC0018FB4804', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 1, 'Последовательность (Поле фильтра)', 'FileterField_sequence', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'969228CDDA5D044D961001E312E4C4CB', 0, NULL, 0),
(x'77E33C6066F6E1408A00C09B34E74DBE', x'CDBAFB2A5A7BA647858B179F4CC9776B', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 4, 'COM класс (Генераторы)', 'GENERATOR_TARGET_GeneratorProgID', x'B9EF70062751D5118822204C4F4F5020', x'C4BC8E49F283934095A838A8CD0C4B83', 0, NULL, 0),
(x'CC612AFABE864148B5A25D0C6A272E96', x'CF9DAB46E6853143B189C7D7F6FFB9B6', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 3, 'Выравнивание (Колонки журнала)', 'JournalColumn_ColumnAlignment', x'317BD7F857A78C48BB5822700737D4B8', x'3D95955ACBF0994C9BD7214886BDC2BA', 0, NULL, 0),
(x'9996B4B982280F4E9DDB397EE113D8BF', x'D02541F73DD2224BA25627D114303725', '2017-12-25 16:40:34', '2017-12-25 16:40:34', NULL, NULL, NULL, 2, 'Значение (Зачения)', 'ENUMITEM_NameValue', x'236DF435F8613B41924F83792F76E698', x'98CD861EC37BF847A69186227D01E40C', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'D0E51DFE133A264CA6E76809369873C6', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 12, 'Расширение (Меню)', 'EntryPoints_TheExtention', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'719F7F66A264274D93164A3A100A02AA', 0, NULL, 0),
(x'95F038D23E19214184A7FEB206A76048', x'D1077ACFCFBE754691B582B06508A0A1', '2017-12-25 18:20:38', '2017-12-25 18:20:38', NULL, NULL, NULL, 1, 'Название (Параметры вопроса)', 'svp_params_name', x'3BD09DDC0811AB46BA41199E4AA97A4C', x'D06BD1F6C1796F44AEEC91A7E8B2CD35', 0, NULL, 0),
(x'CE88C00D5447314F8A6307ACB0BA6DE2', x'D15F375683B38F46822B036504C0C180', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 3, 'Подсказка (Методы раздела)', 'PARTMENU_ToolTip', x'2E9E8E54F6892248A312101CA4A9FE74', x'E316214CAFA73C4D8EED671C681E78E3', 0, NULL, 0),
(x'F8FB99894B4AFF48B2CA58C2FE320E80', x'D225CF626B00C24D8B1A95EB2E9B57F2', '2017-12-25 16:40:35', '2017-12-25 16:40:35', NULL, NULL, NULL, 1, 'Платформа (Отображение)', 'FIELDTYPEMAP_Target', x'A6EF70062751D5118822204C4F4F5020', x'EDEFC1792738FB4A8EB11DD6B5E8740F', 0, NULL, 0),
(x'41B8EFCE276DE74DBB986A42FB7B67E0', x'D2A7C3C234747C419D1F3CD3F23239F7', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 3, 'Описание (Режим работы)', 'OBJECTMODE_TheComment', x'6D2968111CA0DB45B67D76A07F3FF64C', x'1B44AA1227414641956D6F887E04B47D', 0, NULL, 0),
(x'431A6C20E0CE684193C33B7C2D36B4C7', x'D35A4620B2D83D41AA4BDCA9391DB98C', '2017-12-25 18:20:34', '2017-12-25 18:20:34', NULL, NULL, NULL, 2, 'Значение (Параметры вопроса)', 'svq_params_theValue', x'CBCD0D6CECB7B245BD6FA25065FD66A1', x'8FC152688BA47649BD7A318423F715C0', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'D512D78759423A49AE78875702A90B13', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 14, 'Примечание (Меню)', 'EntryPoints_TheComment', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'176DB72D891905429ED6ED59A109D500', 0, NULL, 0),
(x'62472937D190C846AEB4B0E61206BC7E', x'D5C2F0965DF74F4EB752855EEC2EBE0A', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 2, 'Разрешен просмотр (Органичения разделов)', 'STRUCTRESTRICTION_AllowRead', x'33AC48F4133B994893EE47D3D62962EC', x'56E9FAA5DADE6745A5E351D1DB6DA9D1', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'D5FD5AD5F657AE4EB444C67E2AD5A714', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 15, 'Тип документа (Меню)', 'EntryPoints_ObjectType', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'7F0E7C2D8150E64C8BDD156668269911', 0, NULL, 0),
(x'FF264BCE62927B4C9CFACD7BBFEDE8FF', x'D6AC182EEDAD3B43A77458A1B1580640', '2017-12-25 16:40:47', '2017-12-25 16:40:47', NULL, NULL, NULL, 4, 'Действие (Журнал событий)', 'SysLog_VERB', x'E8DAEA453798E54E9A3107370302F20F', x'9AE5BC4C22977840BA6BDEA3480E455D', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'D6FE6C57BCF5D048A02E9572CCDBD999', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 1, 'Приложение (Тип объекта)', 'OBJECTTYPE_Package', x'AFEF70062751D5118822204C4F4F5020', x'A02B5AFD54EC304BBADC96424894D118', 0, NULL, 0),
(x'7898CBC77CACB249B82F376D1B002D92', x'D73AF3FF77608E46A9AB7935A8EBA5C2', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 1, 'Название (Поля секции)', 'RPTFields_Name', x'DED0770C9E55FC43B181156E126543F1', x'D5BE1FBDCE5B2B409EC5609D94E8FC58', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'D7DFD77550F10D469C9253570B29108C', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 3, 'Источник данных (Описание источника данных)', 'FIELDSRCDEF_DataSource', x'81AFF1D32C914849A87DDF549EE796E2', x'9B43F17390F9F242BAF05265D2FEA3FA', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'D895B00FADA0EB499579EE7ACE26C061', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 4, 'Метод для формирования (Описание)', 'Reports_PrepareMethod', x'FA3D9B25ACB8784188FD4B715D372FC3', x'41365BA8B23A6545A4467D9E6AA1FA50', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'D9000E5FC893CC4B862E8CD350B2D2E8', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 1, '№ (Колонка)', 'ViewColumn_sequence', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'91D6162E9EF6F44D804A3A3A87876BC4', 0, NULL, 0),
(x'7AF9C265DA4C254DA1B24EAFAD1C5DA8', x'DADAE3DAB954D54E89080F7C97FC5E8F', '2017-12-25 16:40:59', '2017-12-25 16:40:59', NULL, NULL, NULL, 1, 'Последовательность (Группа полей фильтра)', 'FilterFieldGroup_sequence', x'23D9C69807B88C4191E7C351511B5EB1', x'27FAE1F8B8903A49902B9FCF50BA04F0', 0, NULL, 0),
(x'CC612AFABE864148B5A25D0C6A272E96', x'DB599E793B36C04285D83639743DE824', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 1, 'Последовательность (Колонки журнала)', 'JournalColumn_sequence', x'317BD7F857A78C48BB5822700737D4B8', x'FBF842A55E1BBC42A5EA3FFEFBDFBF1C', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'DD0903B7816374468491BAE8D1BE5AED', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 14, 'Архивировать вместо удаления (Тип объекта)', 'OBJECTTYPE_UseArchiving', x'AFEF70062751D5118822204C4F4F5020', x'3E9213D5E60C8144B79231A098EF94C9', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'DD4AC7DEE3B2F648BDACDA6244539F25', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 2, 'Название (Тип объекта)', 'OBJECTTYPE_the_Comment', x'AFEF70062751D5118822204C4F4F5020', x'C7F9B324369671488EB5233FA8EDCF4B', 0, NULL, 0),
(x'7D8CBA99F3D3794E89AD9ED4F7EBCA0F', x'DDE9ADEFED1F8D4AAEEA44C7BDB3E5F1', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 2, 'Тип расширения (Описание)', 'MTZExt_def_ExtType', x'4A14627F7685BC48ACBA1F9DC4874459', x'B3C5D7628BBA8942ADD1D374580562FF', 0, NULL, 0),
(x'41B8EFCE276DE74DBB986A42FB7B67E0', x'DE18510624A9B441AC2EE6B07773F854', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 1, 'Название режима (Режим работы)', 'OBJECTMODE_Name', x'6D2968111CA0DB45B67D76A07F3FF64C', x'21E364D6ADCE054DA244E2039EECE21A', 0, NULL, 0),
(x'B51BA1564F631D4489F11172B817E335', x'DE46BB58C87D474EB67A895A64B5BE0E', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 7, 'Поле - фильтр 3 (Представление)', 'PARTVIEW_FilterField3', x'4DB613D7E84C6D46BE2B448874DC0469', x'C1EBF74D21473849B88B8A09A12F3400', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'DEFE676B6BD73643A510C497ACB293C0', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 21, 'Разрешена печать (Меню)', 'EntryPoints_AllowPrint', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'20EAAE69F1C8524BB6DA71F033C7208D', 0, NULL, 0),
(x'5664BABDC36D0F4BB86081CD205A887F', x'DFA427AF886C774D821794ED67BAA4CC', '2017-12-25 16:40:44', '2017-12-25 16:40:44', NULL, NULL, NULL, 3, 'Подсказка (Методы поля)', 'FIELDMENU_ToolTip', x'E4C38941C2713D42A56F4E71CB91B52D', x'4091DB91A97D81459DE91A30F697DA5A', 0, NULL, 0),
(x'37931936C900E240819E34C8CBB78F01', x'E01A66CA36BC874A83B823FF1D4CDDF3', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 2, 'Метод (Ограничения методов)', 'METHODRESTRICTION_Method', x'70307B0F09F77D4E868CCC337E3075D1', x'A9145A446225274895486236BCF0B09B', 0, NULL, 0),
(x'0BB050C63D606043B040966AFE17D52D', x'E1568F6112182040833B841DFDB63FA1', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 2, 'Выражение (Привязка фильтра)', 'EPFilterLink_TheExpression', x'9F3507D4042269499789956215E456E6', x'C4A81CCB73ACBF47BEC9DE9F1A0554CC', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'E1B65920FF196042A1C8DA972B64C7BB', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 5, 'Источник краткой информации (Описание источника данных)', 'FIELDSRCDEF_BriefString', x'81AFF1D32C914849A87DDF549EE796E2', x'C63FFED2D728944E80664B4B73BF102D', 0, NULL, 0),
(x'5DE4A47587357245A80E318CEBEA3AC6', x'E20CB9DDDCD2CC4DA87FC875954CE5D9', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 1, 'Поле (значение) (Отображение параметров)', 'PARTPARAMMAP_FieldName', x'CA6FBEF85D59464FACDBFB5838A246CA', x'8575828DCCB8AD42A6A76538E481BA21', 0, NULL, 0),
(x'61C42A7BF6C5F540B54914CB87C7263A', x'E294D6A29087744099135A6E5A155134', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 3, 'Разрешен просмотр (Ограничения полей)', 'FIELDRESTRICTION_AllowRead', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E97EEC74927E144983ED61C47253C3BA', 0, NULL, 0),
(x'B494E86B21F7F649A7A9FBBF7E4E21F9', x'E2E9F7A654C79F4FB4028C45470518A9', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 5, 'Включать в меню (Методы типа)', 'TYPEMENU_IsMenuItem', x'7A7476873D74B947AF1CAB00FF81154F', x'58014B86E904874599058D3F480B3CD2', 0, NULL, 0),
(x'0BB050C63D606043B040966AFE17D52D', x'E4D72CD1DE0E954DB01170833CEA0B19', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 1, 'Источник (Привязка фильтра)', 'EPFilterLink_RowSource', x'9F3507D4042269499789956215E456E6', x'9CC7C465A81002458FE79F06DB70303F', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'E8EB21E986F6304D8452214D1F40865D', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 23, 'Имя класса для мастера строк (Поле)', 'FIELD_theNameClass', x'A4EF70062751D5118822204C4F4F5020', x'F01A2228A296014A9708711D439C9787', 0, NULL, 0),
(x'7D8CBA99F3D3794E89AD9ED4F7EBCA0F', x'E9A39C1C99BEC34288E705E751A2F26B', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 1, 'Название (Описание)', 'MTZExt_def_Name', x'4A14627F7685BC48ACBA1F9DC4874459', x'A00FA7E471BA8143A1938DA3DF3AE36F', 0, NULL, 0),
(x'7AF9C265DA4C254DA1B24EAFAD1C5DA8', x'EA97B5F5B1C4A345BD746797FC70B45D', '2017-12-25 16:40:59', '2017-12-25 16:40:59', NULL, NULL, NULL, 4, 'Можно отключать (Группа полей фильтра)', 'FilterFieldGroup_AllowIgnore', x'23D9C69807B88C4191E7C351511B5EB1', x'C69F7C918243284A90767BC70352F94E', 0, NULL, 0),
(x'95389B524FEB1B4AB58E03E54DE2792D', x'EAF15DA39BEFD3458FD9B1E5B9FB9A5B', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 3, 'Номер версии (Библиотеки)', 'GENREFERENCE_VersionMajor', x'9B803E67F6CF0943A52BFE2118AE508E', x'46886FE2AF53D84D8FDC0B89A6536F8A', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'EB431DECE9D99047AF32E5873A23B545', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 22, 'Шаблон для краткого отображения (Поле)', 'FIELD_shablonBrief', x'A4EF70062751D5118822204C4F4F5020', x'5D87FB366347474A9E73291FBFE1F1DF', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'EC453703F5BE344B96A9327963113BA8', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 13, 'Ссылка на раздел (Поле)', 'FIELD_RefToPart', x'A4EF70062751D5118822204C4F4F5020', x'38F28AD75F0BF848B5F3C9230790DAA7', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'ECCA67B664CE144FA9ECA0186E3D4D41', '2017-12-25 16:40:38', '2017-12-25 16:40:38', NULL, NULL, NULL, 5, 'Описание (Раздел)', 'PART_the_Comment', x'B1EF70062751D5118822204C4F4F5020', x'480E8A1B067CC443BB6430126CC62E52', 0, NULL, 0),
(x'9C18067A20CE7A478A1E8FB2EA3B88BF', x'EDC0D913BC4E0E47A581383B7CA54430', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 3, 'Версия (Арм)', 'WorkPlace_TheVersion', x'C421399726499D4CA7816062CF81B5AD', x'332EF0EE70A27C47AC122CC57B907967', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'EE1FF47CC01F9445B5ECDF6949914E15', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 2, 'Имя группы (Поле)', 'FIELD_FieldGroupBox', x'A4EF70062751D5118822204C4F4F5020', x'6635C79B580B7F4FA07407E2CB9CF633', 0, NULL, 0),
(x'CC612AFABE864148B5A25D0C6A272E96', x'EE6AF6A47B50514DB3CA38661ADADE72', '2017-12-25 16:40:54', '2017-12-25 16:40:54', NULL, NULL, NULL, 2, 'Название (Колонки журнала)', 'JournalColumn_name', x'317BD7F857A78C48BB5822700737D4B8', x'53E2C57C8E936245BD3AA6B97484B8DC', 0, NULL, 0),
(x'37931936C900E240819E34C8CBB78F01', x'EF1D79F37E5B5C4A9CEB98DB2D728A61', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 3, 'Запрещено использовать (Ограничения методов)', 'METHODRESTRICTION_IsRestricted', x'70307B0F09F77D4E868CCC337E3075D1', x'91C176D39A2F3647956B3A1A13ECC8DF', 0, NULL, 0),
(x'D32DEC41B6E0A840A90FB050C9D50689', x'EF9E0ACAB706264F886DB5E2167FC641', '2017-12-25 16:40:40', '2017-12-25 16:40:40', NULL, NULL, NULL, 7, 'Формула (Колонка)', 'ViewColumn_Expression', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'F3BA514510EA2740A4401B6A23F36198', 0, NULL, 0),
(x'53A117D2E128674BA602392CE765D3D6', x'F0BEEDF00732B940AAAE4416D7E995D1', '2017-12-25 16:41:00', '2017-12-25 16:41:00', NULL, NULL, NULL, 5, 'Размер (Поле фильтра)', 'FileterField_FieldSize', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5467F4C026EE574BA16165E7582A86F4', 0, NULL, 0),
(x'8D888D9BB903AB45BE1D34F7C781AEC5', x'F1DA2B472E18AD4FAC55F2C9FDC92492', '2017-12-25 16:40:36', '2017-12-25 16:40:36', NULL, NULL, NULL, 12, 'Описание (Тип объекта)', 'OBJECTTYPE_TheComment', x'AFEF70062751D5118822204C4F4F5020', x'1C81FD5B49BB84479710A0529A35CF74', 0, NULL, 0),
(x'05E3F2B77691184BB9BE8D37011EA0B1', x'F1E65664053F294A864B18460D7DDF23', '2017-12-25 16:40:41', '2017-12-25 16:40:41', NULL, NULL, NULL, 2, 'Скрипт (Логика на форме)', 'VALIDATOR_Code', x'5536327DD7BA124DAFC2E7FF3613B4A1', x'3522BEC13E7EF64D928CD35D347CC04C', 0, NULL, 0),
(x'97E9606728F78240A81E6F8A76366F72', x'F2F8171A6FA3A84190C2203515936696', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 2, 'Название класса (Реализации расширения)', 'MTZExtRel_TheClassName', x'DDE68FE4F979424DBAC3CB39F69171BC', x'7356A5A4795A07499D2CAC330FAEF4BB', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'F3D9B7CFFCF674419A33F398A954EBAD', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 2, 'Файл отчета (Описание)', 'Reports_ReportFile', x'FA3D9B25ACB8784188FD4B715D372FC3', x'BFA8CC4E8013174E9169AAEF48E2964B', 0, NULL, 0),
(x'3AAEA9D16479704391BC79C3CC18A966', x'F54ACF7F3A3C854AA0C166C256B18411', '2017-12-25 16:40:43', '2017-12-25 16:40:43', NULL, NULL, NULL, 6, 'Фильтр источника данных (Описание источника данных)', 'FIELDSRCDEF_FilterString', x'81AFF1D32C914849A87DDF549EE796E2', x'8F6E8AF0D9AA3045A986FA201A9CB743', 0, NULL, 0),
(x'7EBC61BB2401C1478A448D0B7C5C3D7C', x'F5FE000A255D7C499E0C51833259258C', '2017-12-25 18:20:33', '2017-12-25 18:20:33', NULL, NULL, NULL, 1, 'Тип Вопроса (Описание вопроса)', 'svq_info_qtype', x'2D4D523F3B8A874997EA4B0FB621C1DA', x'D89907C66E598749A8BDEDC577E53CF4', 0, NULL, 0),
(x'C7E40F4ADD38A1449F56705666A3AD75', x'F682FB063DC4694DA047079D28987F01', '2017-12-25 16:40:37', '2017-12-25 16:40:37', NULL, NULL, NULL, 1, 'Разрешенное состояние (Разрешенные переходы)', 'NEXTSTATE_TheState', x'79A1C111B229DC4DBDB71EB21D2FF878', x'08F26761BF3ACE43B8F661D969EF1034', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'F76850C42BD57649944D4695BAD62D29', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 13, 'АРМ (Меню)', 'EntryPoints_ARM', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'728E351326635C4B86533B7889594E4D', 0, NULL, 0),
(x'77E33C6066F6E1408A00C09B34E74DBE', x'F84157002DD9984F964AC9F44199886E', '2017-12-25 16:40:33', '2017-12-25 16:40:33', NULL, NULL, NULL, 5, 'Вариант (Генераторы)', 'GENERATOR_TARGET_GeneratorStyle', x'B9EF70062751D5118822204C4F4F5020', x'2B57FE359AE20D4F87CA9C51A17F4FDD', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'F977EFE6B2C75343A8CFB7D067F4B7A9', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 14, 'Шаблон для краткого отображения (Раздел)', 'PART_shablonBrief', x'B1EF70062751D5118822204C4F4F5020', x'7C19B16501CC5F4CA316830D43E24A58', 0, NULL, 0),
(x'97E9606728F78240A81E6F8A76366F72', x'FB425B96F45A8D458525798C979F1347', '2017-12-25 16:41:01', '2017-12-25 16:41:01', NULL, NULL, NULL, 1, 'Реализация (Реализации расширения)', 'MTZExtRel_ThePlatform', x'DDE68FE4F979424DBAC3CB39F69171BC', x'78D895D334C63F479671D9322967DA2C', 0, NULL, 0),
(x'36D585732AC95D49B657105E7AAAC324', x'FD6EE3FE8CAA244EB75560C8D2C98175', '2017-12-25 16:40:49', '2017-12-25 16:40:49', NULL, NULL, NULL, 3, 'Отчество (Пользователи)', 'Users_SurName', x'55B88B1465099E4EA3D648DCC8CE528B', x'E2ED0ACDFDDE0C468D52A98A09D3C086', 0, NULL, 0),
(x'CD1F5FD6E89BF24DA31825C9959A51DD', x'FD830ABCA164A648BB19FE09D26A95F2', '2017-12-25 16:40:42', '2017-12-25 16:40:42', NULL, NULL, NULL, 6, 'Тип поля (Поле)', 'FIELD_FieldType', x'A4EF70062751D5118822204C4F4F5020', x'94E580DCCCED2E41BE4FB27E23D6B780', 0, NULL, 0),
(x'4DC116E2492D724CA1CD05369D288270', x'FE1CC864DA4D904E94AE136547903703', '2017-12-25 16:40:52', '2017-12-25 16:40:52', NULL, NULL, NULL, 10, 'Метод (Меню)', 'EntryPoints_Method', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AC430CE7C5F1AD4BBEB227E2CAF81780', 0, NULL, 0),
(x'D06B5F3A8859AF4C8F890D4A773A51A0', x'FEB161E73721C347871341AFF72EF543', '2017-12-25 16:40:57', '2017-12-25 16:40:57', NULL, NULL, NULL, 3, 'Заголовок (Описание)', 'Reports_Caption', x'FA3D9B25ACB8784188FD4B715D372FC3', x'44B70D542EDAF64489685F1A00AF372F', 0, NULL, 0),
(x'31022036E1779A4EA3E4331D28F2D77B', x'FFCE0361FAB8294A942811365AB53F04', '2017-12-25 16:40:39', '2017-12-25 16:40:39', NULL, NULL, NULL, 18, 'Целочисленный ключ (Раздел)', 'PART_integerpkey', x'B1EF70062751D5118822204C4F4F5020', x'0DF7465693D94647A4329088098D18C4', 0, NULL, 0);
COMMIT;

-- 
-- Вывод данных для таблицы workplace
--
-- Таблица survey.workplace не содержит данных
-- 
-- Восстановить предыдущий режим SQL (SQL mode)
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Включение внешних ключей
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;
